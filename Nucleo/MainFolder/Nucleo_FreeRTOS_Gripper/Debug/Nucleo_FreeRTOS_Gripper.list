
Nucleo_FreeRTOS_Gripper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac64  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001258  0800af04  0800af04  0001af04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c15c  0800c15c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800c15c  0800c15c  0001c15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c164  0800c164  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c164  0800c164  0001c164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c168  0800c168  0001c168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  0800c16c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005044  24000014  0800c180  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24005058  0800c180  00025058  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033571  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004ca3  00000000  00000000  000535b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f30  00000000  00000000  00058258  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d68  00000000  00000000  0005a188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000057ab  00000000  00000000  0005bef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a4e6  00000000  00000000  0006169b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001719a3  00000000  00000000  0007bb81  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ed524  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008690  00000000  00000000  001ed5a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800aeec 	.word	0x0800aeec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	0800aeec 	.word	0x0800aeec

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f001 fa52 	bl	8001a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f858 	bl	800069c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  HAL_I2C_MspInit(&hi2c1);
 80005ec:	481d      	ldr	r0, [pc, #116]	; (8000664 <main+0x84>)
 80005ee:	f000 ff75 	bl	80014dc <HAL_I2C_MspInit>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 facf 	bl	8000b94 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f6:	f000 fa4f 	bl	8000a98 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005fa:	f000 fa99 	bl	8000b30 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 80005fe:	f000 f957 	bl	80008b0 <MX_SPI4_Init>
  MX_UART7_Init();
 8000602:	f000 f9ad 	bl	8000960 <MX_UART7_Init>
  MX_USART2_UART_Init();
 8000606:	f000 f9f9 	bl	80009fc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800060a:	f000 f911 	bl	8000830 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	2110      	movs	r1, #16
 8000612:	4815      	ldr	r0, [pc, #84]	; (8000668 <main+0x88>)
 8000614:	f001 fd54 	bl	80020c0 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000618:	f007 fe40 	bl	800829c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ControlTask */
  ControlTaskHandle = osThreadNew(StartControlTask, NULL, &ControlTask_attributes);
 800061c:	4a13      	ldr	r2, [pc, #76]	; (800066c <main+0x8c>)
 800061e:	2100      	movs	r1, #0
 8000620:	4813      	ldr	r0, [pc, #76]	; (8000670 <main+0x90>)
 8000622:	f007 ff49 	bl	80084b8 <osThreadNew>
 8000626:	4602      	mov	r2, r0
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <main+0x94>)
 800062a:	601a      	str	r2, [r3, #0]

  /* creation of CommBoard */
  CommBoardHandle = osThreadNew(StartCommBoard, NULL, &CommBoard_attributes);
 800062c:	4a12      	ldr	r2, [pc, #72]	; (8000678 <main+0x98>)
 800062e:	2100      	movs	r1, #0
 8000630:	4812      	ldr	r0, [pc, #72]	; (800067c <main+0x9c>)
 8000632:	f007 ff41 	bl	80084b8 <osThreadNew>
 8000636:	4602      	mov	r2, r0
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <main+0xa0>)
 800063a:	601a      	str	r2, [r3, #0]

  /* creation of SensorRead */
  SensorReadHandle = osThreadNew(StartSensorRead, NULL, &SensorRead_attributes);
 800063c:	4a11      	ldr	r2, [pc, #68]	; (8000684 <main+0xa4>)
 800063e:	2100      	movs	r1, #0
 8000640:	4811      	ldr	r0, [pc, #68]	; (8000688 <main+0xa8>)
 8000642:	f007 ff39 	bl	80084b8 <osThreadNew>
 8000646:	4602      	mov	r2, r0
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <main+0xac>)
 800064a:	601a      	str	r2, [r3, #0]

  /* creation of Safety */
  SafetyHandle = osThreadNew(StartSafety, NULL, &Safety_attributes);
 800064c:	4a10      	ldr	r2, [pc, #64]	; (8000690 <main+0xb0>)
 800064e:	2100      	movs	r1, #0
 8000650:	4810      	ldr	r0, [pc, #64]	; (8000694 <main+0xb4>)
 8000652:	f007 ff31 	bl	80084b8 <osThreadNew>
 8000656:	4602      	mov	r2, r0
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <main+0xb8>)
 800065a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800065c:	f007 fe52 	bl	8008304 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000660:	e7fe      	b.n	8000660 <main+0x80>
 8000662:	bf00      	nop
 8000664:	24004a50 	.word	0x24004a50
 8000668:	58021000 	.word	0x58021000
 800066c:	0800b0a4 	.word	0x0800b0a4
 8000670:	08001395 	.word	0x08001395
 8000674:	24004fc4 	.word	0x24004fc4
 8000678:	0800b0c8 	.word	0x0800b0c8
 800067c:	080013b5 	.word	0x080013b5
 8000680:	24004eac 	.word	0x24004eac
 8000684:	0800b0ec 	.word	0x0800b0ec
 8000688:	08001435 	.word	0x08001435
 800068c:	24004ea8 	.word	0x24004ea8
 8000690:	0800b110 	.word	0x0800b110
 8000694:	08001455 	.word	0x08001455
 8000698:	24004ea4 	.word	0x24004ea4

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b0cc      	sub	sp, #304	; 0x130
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006a6:	224c      	movs	r2, #76	; 0x4c
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f00a fc15 	bl	800aeda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006b4:	2220      	movs	r2, #32
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f00a fc0e 	bl	800aeda <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	4618      	mov	r0, r3
 80006c4:	23bc      	movs	r3, #188	; 0xbc
 80006c6:	461a      	mov	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	f00a fc06 	bl	800aeda <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006ce:	2002      	movs	r0, #2
 80006d0:	f002 fb54 	bl	8002d7c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	4b52      	ldr	r3, [pc, #328]	; (8000824 <SystemClock_Config+0x188>)
 80006dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006de:	4a51      	ldr	r2, [pc, #324]	; (8000824 <SystemClock_Config+0x188>)
 80006e0:	f023 0301 	bic.w	r3, r3, #1
 80006e4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006e6:	4b4f      	ldr	r3, [pc, #316]	; (8000824 <SystemClock_Config+0x188>)
 80006e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ea:	f003 0201 	and.w	r2, r3, #1
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	4b4d      	ldr	r3, [pc, #308]	; (8000828 <SystemClock_Config+0x18c>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006fa:	4a4b      	ldr	r2, [pc, #300]	; (8000828 <SystemClock_Config+0x18c>)
 80006fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000700:	6193      	str	r3, [r2, #24]
 8000702:	4b49      	ldr	r3, [pc, #292]	; (8000828 <SystemClock_Config+0x18c>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000712:	bf00      	nop
 8000714:	4b44      	ldr	r3, [pc, #272]	; (8000828 <SystemClock_Config+0x18c>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800071c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000720:	d1f8      	bne.n	8000714 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000722:	2303      	movs	r3, #3
 8000724:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000728:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800072c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000730:	2301      	movs	r3, #1
 8000732:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000736:	2340      	movs	r3, #64	; 0x40
 8000738:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	2302      	movs	r3, #2
 8000744:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000748:	2301      	movs	r3, #1
 800074a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 800074e:	2318      	movs	r3, #24
 8000750:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800075a:	2304      	movs	r3, #4
 800075c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000766:	230c      	movs	r3, #12
 8000768:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800076c:	2300      	movs	r3, #0
 800076e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800077c:	4618      	mov	r0, r3
 800077e:	f002 fb47 	bl	8002e10 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000788:	f000 fe86 	bl	8001498 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	233f      	movs	r3, #63	; 0x3f
 800078e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000792:	2300      	movs	r3, #0
 8000794:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f002 ff34 	bl	8003630 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x136>
  {
    Error_Handler();
 80007ce:	f000 fe63 	bl	8001498 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	4a15      	ldr	r2, [pc, #84]	; (800082c <SystemClock_Config+0x190>)
 80007d8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	2200      	movs	r2, #0
 80007e0:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	2200      	movs	r2, #0
 80007e8:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	2200      	movs	r2, #0
 80007f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	4618      	mov	r0, r3
 8000806:	f003 fad9 	bl	8003dbc <HAL_RCCEx_PeriphCLKConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x178>
  {
    Error_Handler();
 8000810:	f000 fe42 	bl	8001498 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000814:	f002 faec 	bl	8002df0 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000818:	bf00      	nop
 800081a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	58000400 	.word	0x58000400
 8000828:	58024800 	.word	0x58024800
 800082c:	0004200a 	.word	0x0004200a

08000830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <MX_I2C1_Init+0x74>)
 8000836:	4a1c      	ldr	r2, [pc, #112]	; (80008a8 <MX_I2C1_Init+0x78>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 800083a:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_I2C1_Init+0x74>)
 800083c:	4a1b      	ldr	r2, [pc, #108]	; (80008ac <MX_I2C1_Init+0x7c>)
 800083e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 10;
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <MX_I2C1_Init+0x74>)
 8000842:	220a      	movs	r2, #10
 8000844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_I2C1_Init+0x74>)
 8000848:	2201      	movs	r2, #1
 800084a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_I2C1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_I2C1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_I2C1_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_I2C1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800086a:	480e      	ldr	r0, [pc, #56]	; (80008a4 <MX_I2C1_Init+0x74>)
 800086c:	f001 fc5c 	bl	8002128 <HAL_I2C_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000876:	f000 fe0f 	bl	8001498 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800087a:	2100      	movs	r1, #0
 800087c:	4809      	ldr	r0, [pc, #36]	; (80008a4 <MX_I2C1_Init+0x74>)
 800087e:	f002 f89d 	bl	80029bc <HAL_I2CEx_ConfigAnalogFilter>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000888:	f000 fe06 	bl	8001498 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800088c:	2100      	movs	r1, #0
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_I2C1_Init+0x74>)
 8000890:	f002 f8df 	bl	8002a52 <HAL_I2CEx_ConfigDigitalFilter>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800089a:	f000 fdfd 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	24004a50 	.word	0x24004a50
 80008a8:	40005400 	.word	0x40005400
 80008ac:	00602173 	.word	0x00602173

080008b0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80008b4:	4b28      	ldr	r3, [pc, #160]	; (8000958 <MX_SPI4_Init+0xa8>)
 80008b6:	4a29      	ldr	r2, [pc, #164]	; (800095c <MX_SPI4_Init+0xac>)
 80008b8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80008ba:	4b27      	ldr	r3, [pc, #156]	; (8000958 <MX_SPI4_Init+0xa8>)
 80008bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008c0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80008c2:	4b25      	ldr	r3, [pc, #148]	; (8000958 <MX_SPI4_Init+0xa8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c8:	4b23      	ldr	r3, [pc, #140]	; (8000958 <MX_SPI4_Init+0xa8>)
 80008ca:	2207      	movs	r2, #7
 80008cc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80008ce:	4b22      	ldr	r3, [pc, #136]	; (8000958 <MX_SPI4_Init+0xa8>)
 80008d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80008d4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80008d6:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_SPI4_Init+0xa8>)
 80008d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008dc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80008de:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_SPI4_Init+0xa8>)
 80008e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80008e4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_SPI4_Init+0xa8>)
 80008e8:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80008ec:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_SPI4_Init+0xa8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_SPI4_Init+0xa8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_SPI4_Init+0xa8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_SPI4_Init+0xa8>)
 8000902:	2200      	movs	r2, #0
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_SPI4_Init+0xa8>)
 8000908:	2200      	movs	r2, #0
 800090a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_SPI4_Init+0xa8>)
 800090e:	2200      	movs	r2, #0
 8000910:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_SPI4_Init+0xa8>)
 8000914:	2200      	movs	r2, #0
 8000916:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_SPI4_Init+0xa8>)
 800091a:	2200      	movs	r2, #0
 800091c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_SPI4_Init+0xa8>)
 8000920:	2200      	movs	r2, #0
 8000922:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_SPI4_Init+0xa8>)
 8000926:	2200      	movs	r2, #0
 8000928:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_SPI4_Init+0xa8>)
 800092c:	2200      	movs	r2, #0
 800092e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_SPI4_Init+0xa8>)
 8000932:	2200      	movs	r2, #0
 8000934:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_SPI4_Init+0xa8>)
 8000938:	2200      	movs	r2, #0
 800093a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_SPI4_Init+0xa8>)
 800093e:	2200      	movs	r2, #0
 8000940:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_SPI4_Init+0xa8>)
 8000944:	f004 fd3a 	bl	80053bc <HAL_SPI_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 800094e:	f000 fda3 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	24004eb0 	.word	0x24004eb0
 800095c:	40013400 	.word	0x40013400

08000960 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_UART7_Init+0x90>)
 8000966:	4a23      	ldr	r2, [pc, #140]	; (80009f4 <MX_UART7_Init+0x94>)
 8000968:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1000000;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_UART7_Init+0x90>)
 800096c:	4a22      	ldr	r2, [pc, #136]	; (80009f8 <MX_UART7_Init+0x98>)
 800096e:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_UART7_Init+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000976:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MX_UART7_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_UART7_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_UART7_Init+0x90>)
 8000984:	220c      	movs	r2, #12
 8000986:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_UART7_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_UART7_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_UART7_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_UART7_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_UART7_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart7) != HAL_OK)
 80009a6:	4812      	ldr	r0, [pc, #72]	; (80009f0 <MX_UART7_Init+0x90>)
 80009a8:	f006 f8a0 	bl	8006aec <HAL_HalfDuplex_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 80009b2:	f000 fd71 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <MX_UART7_Init+0x90>)
 80009ba:	f007 f8d8 	bl	8007b6e <HAL_UARTEx_SetTxFifoThreshold>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 80009c4:	f000 fd68 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c8:	2100      	movs	r1, #0
 80009ca:	4809      	ldr	r0, [pc, #36]	; (80009f0 <MX_UART7_Init+0x90>)
 80009cc:	f007 f90d 	bl	8007bea <HAL_UARTEx_SetRxFifoThreshold>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 80009d6:	f000 fd5f 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_UART7_Init+0x90>)
 80009dc:	f007 f88e 	bl	8007afc <HAL_UARTEx_DisableFifoMode>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 80009e6:	f000 fd57 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	24004938 	.word	0x24004938
 80009f4:	40007800 	.word	0x40007800
 80009f8:	000f4240 	.word	0x000f4240

080009fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <MX_USART2_UART_Init+0x90>)
 8000a02:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <MX_USART2_UART_Init+0x94>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <MX_USART2_UART_Init+0x90>)
 8000a08:	4a22      	ldr	r2, [pc, #136]	; (8000a94 <MX_USART2_UART_Init+0x98>)
 8000a0a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_USART2_UART_Init+0x90>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a12:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <MX_USART2_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_USART2_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <MX_USART2_UART_Init+0x90>)
 8000a20:	220c      	movs	r2, #12
 8000a22:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a24:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <MX_USART2_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <MX_USART2_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_USART2_UART_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <MX_USART2_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_USART2_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000a42:	4812      	ldr	r0, [pc, #72]	; (8000a8c <MX_USART2_UART_Init+0x90>)
 8000a44:	f006 f852 	bl	8006aec <HAL_HalfDuplex_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000a4e:	f000 fd23 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <MX_USART2_UART_Init+0x90>)
 8000a56:	f007 f88a 	bl	8007b6e <HAL_UARTEx_SetTxFifoThreshold>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8000a60:	f000 fd1a 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	4809      	ldr	r0, [pc, #36]	; (8000a8c <MX_USART2_UART_Init+0x90>)
 8000a68:	f007 f8bf 	bl	8007bea <HAL_UARTEx_SetRxFifoThreshold>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8000a72:	f000 fd11 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_USART2_UART_Init+0x90>)
 8000a78:	f007 f840 	bl	8007afc <HAL_UARTEx_DisableFifoMode>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000a82:	f000 fd09 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	24004f38 	.word	0x24004f38
 8000a90:	40004400 	.word	0x40004400
 8000a94:	000f4240 	.word	0x000f4240

08000a98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a9c:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000a9e:	4a23      	ldr	r2, [pc, #140]	; (8000b2c <MX_USART3_UART_Init+0x94>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ae0:	4811      	ldr	r0, [pc, #68]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ae2:	f005 ffb3 	bl	8006a4c <HAL_UART_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000aec:	f000 fcd4 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000af4:	f007 f83b 	bl	8007b6e <HAL_UARTEx_SetTxFifoThreshold>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000afe:	f000 fccb 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b02:	2100      	movs	r1, #0
 8000b04:	4808      	ldr	r0, [pc, #32]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000b06:	f007 f870 	bl	8007bea <HAL_UARTEx_SetRxFifoThreshold>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b10:	f000 fcc2 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000b16:	f006 fff1 	bl	8007afc <HAL_UARTEx_DisableFifoMode>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b20:	f000 fcba 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	240049c4 	.word	0x240049c4
 8000b2c:	40004800 	.word	0x40004800

08000b30 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b36:	4a16      	ldr	r2, [pc, #88]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b38:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3c:	2209      	movs	r2, #9
 8000b3e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b42:	2202      	movs	r2, #2
 8000b44:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4e:	2202      	movs	r2, #2
 8000b50:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b78:	f001 ffb7 	bl	8002aea <HAL_PCD_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b82:	f000 fc89 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	24004a9c 	.word	0x24004a9c
 8000b90:	40080000 	.word	0x40080000

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	; 0x38
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000baa:	4b93      	ldr	r3, [pc, #588]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	4a91      	ldr	r2, [pc, #580]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bba:	4b8f      	ldr	r3, [pc, #572]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	f003 0310 	and.w	r3, r3, #16
 8000bc4:	623b      	str	r3, [r7, #32]
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc8:	4b8b      	ldr	r3, [pc, #556]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bce:	4a8a      	ldr	r2, [pc, #552]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000bd0:	f043 0304 	orr.w	r3, r3, #4
 8000bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd8:	4b87      	ldr	r3, [pc, #540]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	f003 0304 	and.w	r3, r3, #4
 8000be2:	61fb      	str	r3, [r7, #28]
 8000be4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000be6:	4b84      	ldr	r3, [pc, #528]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	4a82      	ldr	r2, [pc, #520]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000bee:	f043 0320 	orr.w	r3, r3, #32
 8000bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf6:	4b80      	ldr	r3, [pc, #512]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	f003 0320 	and.w	r3, r3, #32
 8000c00:	61bb      	str	r3, [r7, #24]
 8000c02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c04:	4b7c      	ldr	r3, [pc, #496]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0a:	4a7b      	ldr	r2, [pc, #492]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c14:	4b78      	ldr	r3, [pc, #480]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b75      	ldr	r3, [pc, #468]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	4a73      	ldr	r2, [pc, #460]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c32:	4b71      	ldr	r3, [pc, #452]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c40:	4b6d      	ldr	r3, [pc, #436]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	4a6c      	ldr	r2, [pc, #432]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c50:	4b69      	ldr	r3, [pc, #420]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5e:	4b66      	ldr	r3, [pc, #408]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c64:	4a64      	ldr	r2, [pc, #400]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000c66:	f043 0308 	orr.w	r3, r3, #8
 8000c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6e:	4b62      	ldr	r3, [pc, #392]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	f003 0308 	and.w	r3, r3, #8
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c7c:	4b5e      	ldr	r3, [pc, #376]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c82:	4a5d      	ldr	r2, [pc, #372]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8c:	4b5a      	ldr	r3, [pc, #360]	; (8000df8 <MX_GPIO_Init+0x264>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2112      	movs	r1, #18
 8000c9e:	4857      	ldr	r0, [pc, #348]	; (8000dfc <MX_GPIO_Init+0x268>)
 8000ca0:	f001 fa0e 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2102      	movs	r1, #2
 8000ca8:	4855      	ldr	r0, [pc, #340]	; (8000e00 <MX_GPIO_Init+0x26c>)
 8000caa:	f001 fa09 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cb4:	4853      	ldr	r0, [pc, #332]	; (8000e04 <MX_GPIO_Init+0x270>)
 8000cb6:	f001 fa03 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cc0:	4851      	ldr	r0, [pc, #324]	; (8000e08 <MX_GPIO_Init+0x274>)
 8000cc2:	f001 f9fd 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000cc6:	2312      	movs	r3, #18
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4847      	ldr	r0, [pc, #284]	; (8000dfc <MX_GPIO_Init+0x268>)
 8000cde:	f001 f83f 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4845      	ldr	r0, [pc, #276]	; (8000e0c <MX_GPIO_Init+0x278>)
 8000cf8:	f001 f832 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cfc:	2332      	movs	r3, #50	; 0x32
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d0c:	230b      	movs	r3, #11
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	483d      	ldr	r0, [pc, #244]	; (8000e0c <MX_GPIO_Init+0x278>)
 8000d18:	f001 f822 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	4833      	ldr	r0, [pc, #204]	; (8000e00 <MX_GPIO_Init+0x26c>)
 8000d34:	f001 f814 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d48:	230b      	movs	r3, #11
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	482b      	ldr	r0, [pc, #172]	; (8000e00 <MX_GPIO_Init+0x26c>)
 8000d54:	f001 f804 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin;
 8000d58:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4824      	ldr	r0, [pc, #144]	; (8000e04 <MX_GPIO_Init+0x270>)
 8000d72:	f000 fff5 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d88:	230b      	movs	r3, #11
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	481c      	ldr	r0, [pc, #112]	; (8000e04 <MX_GPIO_Init+0x270>)
 8000d94:	f000 ffe4 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	4815      	ldr	r0, [pc, #84]	; (8000e08 <MX_GPIO_Init+0x274>)
 8000db2:	f000 ffd5 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000db6:	2380      	movs	r3, #128	; 0x80
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <MX_GPIO_Init+0x27c>)
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4812      	ldr	r0, [pc, #72]	; (8000e14 <MX_GPIO_Init+0x280>)
 8000dca:	f000 ffc9 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000dce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de0:	230b      	movs	r3, #11
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de8:	4619      	mov	r1, r3
 8000dea:	480a      	ldr	r0, [pc, #40]	; (8000e14 <MX_GPIO_Init+0x280>)
 8000dec:	f000 ffb8 	bl	8001d60 <HAL_GPIO_Init>

}
 8000df0:	bf00      	nop
 8000df2:	3738      	adds	r7, #56	; 0x38
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	58024400 	.word	0x58024400
 8000dfc:	58021000 	.word	0x58021000
 8000e00:	58020000 	.word	0x58020000
 8000e04:	58020400 	.word	0x58020400
 8000e08:	58020c00 	.word	0x58020c00
 8000e0c:	58020800 	.word	0x58020800
 8000e10:	11110000 	.word	0x11110000
 8000e14:	58021800 	.word	0x58021800

08000e18 <SPI_E_ReadReg>:

/* USER CODE BEGIN 4 */

void SPI_E_ReadReg(uint8_t *REG_ADDR, uint8_t *readByte )
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  char READ_REG_ADDR;
  READ_REG_ADDR = *REG_ADDR & 0x7F;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2110      	movs	r1, #16
 8000e32:	480f      	ldr	r0, [pc, #60]	; (8000e70 <SPI_E_ReadReg+0x58>)
 8000e34:	f001 f944 	bl	80020c0 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi4,(uint8_t *) &READ_REG_ADDR, 1, 100);
 8000e38:	f107 010f 	add.w	r1, r7, #15
 8000e3c:	2364      	movs	r3, #100	; 0x64
 8000e3e:	2201      	movs	r2, #1
 8000e40:	480c      	ldr	r0, [pc, #48]	; (8000e74 <SPI_E_ReadReg+0x5c>)
 8000e42:	f004 fbb3 	bl	80055ac <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi4,(uint8_t *) readByte, 1, 100);
 8000e46:	2364      	movs	r3, #100	; 0x64
 8000e48:	2201      	movs	r2, #1
 8000e4a:	6839      	ldr	r1, [r7, #0]
 8000e4c:	4809      	ldr	r0, [pc, #36]	; (8000e74 <SPI_E_ReadReg+0x5c>)
 8000e4e:	f004 fd9f 	bl	8005990 <HAL_SPI_Receive>

  //HAL_Delay(5);
  osDelay(1);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f007 fbd6 	bl	8008604 <osDelay>

  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <SPI_E_ReadReg+0x58>)
 8000e5e:	f001 f92f 	bl	80020c0 <HAL_GPIO_WritePin>

  osDelay(1);
 8000e62:	2001      	movs	r0, #1
 8000e64:	f007 fbce 	bl	8008604 <osDelay>

}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	58021000 	.word	0x58021000
 8000e74:	24004eb0 	.word	0x24004eb0

08000e78 <SPI_E_WriteReg>:

void SPI_E_WriteReg(uint8_t *REG_ADDR, uint8_t *sendByte )
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  char READ_REG_ADDR;
  READ_REG_ADDR = *REG_ADDR | 0x80;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2110      	movs	r1, #16
 8000e92:	480f      	ldr	r0, [pc, #60]	; (8000ed0 <SPI_E_WriteReg+0x58>)
 8000e94:	f001 f914 	bl	80020c0 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi4,(uint8_t *) &READ_REG_ADDR, 1, 100);
 8000e98:	f107 010f 	add.w	r1, r7, #15
 8000e9c:	2364      	movs	r3, #100	; 0x64
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <SPI_E_WriteReg+0x5c>)
 8000ea2:	f004 fb83 	bl	80055ac <HAL_SPI_Transmit>

  HAL_SPI_Transmit(&hspi4,(uint8_t *) sendByte, 1, 100);
 8000ea6:	2364      	movs	r3, #100	; 0x64
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	6839      	ldr	r1, [r7, #0]
 8000eac:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <SPI_E_WriteReg+0x5c>)
 8000eae:	f004 fb7d 	bl	80055ac <HAL_SPI_Transmit>

  //HAL_Delay(5);
  osDelay(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f007 fba6 	bl	8008604 <osDelay>

  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2110      	movs	r1, #16
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <SPI_E_WriteReg+0x58>)
 8000ebe:	f001 f8ff 	bl	80020c0 <HAL_GPIO_WritePin>

  osDelay(1);
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f007 fb9e 	bl	8008604 <osDelay>

}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	58021000 	.word	0x58021000
 8000ed4:	24004eb0 	.word	0x24004eb0

08000ed8 <startUpMouse>:


void startUpMouse()
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0

  // Memory registers to read and write.
  uint8_t startUpRegAddr[] = {0x3A,0x02,0x03,0x04,0x05,0x06,0x10,0x13,0x13,0x62,0x2A,0x10};
 8000ede:	4a60      	ldr	r2, [pc, #384]	; (8001060 <startUpMouse+0x188>)
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ee6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t sendByte;
  uint8_t readByte;


  // Ensure reset
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2110      	movs	r1, #16
 8000eee:	485d      	ldr	r0, [pc, #372]	; (8001064 <startUpMouse+0x18c>)
 8000ef0:	f001 f8e6 	bl	80020c0 <HAL_GPIO_WritePin>
  osDelay(1);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f007 fb85 	bl	8008604 <osDelay>
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	2110      	movs	r1, #16
 8000efe:	4859      	ldr	r0, [pc, #356]	; (8001064 <startUpMouse+0x18c>)
 8000f00:	f001 f8de 	bl	80020c0 <HAL_GPIO_WritePin>
  osDelay(1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f007 fb7d 	bl	8008604 <osDelay>
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	4855      	ldr	r0, [pc, #340]	; (8001064 <startUpMouse+0x18c>)
 8000f10:	f001 f8d6 	bl	80020c0 <HAL_GPIO_WritePin>
  osDelay(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f007 fb75 	bl	8008604 <osDelay>

  // Start up register
  sendByte = 0x5A;
 8000f1a:	235a      	movs	r3, #90	; 0x5a
 8000f1c:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[0], &sendByte );
 8000f1e:	1dfa      	adds	r2, r7, #7
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	4611      	mov	r1, r2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ffa6 	bl	8000e78 <SPI_E_WriteReg>

  // Must wait 50 milliseconds.
  osDelay(50);
 8000f2c:	2032      	movs	r0, #50	; 0x32
 8000f2e:	f007 fb69 	bl	8008604 <osDelay>
  // Read and discard data.
  SPI_E_ReadReg(&startUpRegAddr[1], &readByte );
 8000f32:	1dba      	adds	r2, r7, #6
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	3301      	adds	r3, #1
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff6b 	bl	8000e18 <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[2], &readByte );
 8000f42:	1dba      	adds	r2, r7, #6
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	3302      	adds	r3, #2
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff63 	bl	8000e18 <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[3], &readByte );
 8000f52:	1dba      	adds	r2, r7, #6
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	3303      	adds	r3, #3
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff5b 	bl	8000e18 <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[4], &readByte );
 8000f62:	1dba      	adds	r2, r7, #6
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	3304      	adds	r3, #4
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff53 	bl	8000e18 <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[5], &readByte );
 8000f72:	1dba      	adds	r2, r7, #6
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	3305      	adds	r3, #5
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff4b 	bl	8000e18 <SPI_E_ReadReg>

  // Upload SROM data to mouse sensor.

  // Write 0 to Rest_En bit of Config2 register to disable Rest mode.
  sendByte = 0x00;
 8000f82:	2300      	movs	r3, #0
 8000f84:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[6], &sendByte );
 8000f86:	1dfa      	adds	r2, r7, #7
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	3306      	adds	r3, #6
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff71 	bl	8000e78 <SPI_E_WriteReg>

  // Write 0x1d to SROM_Enable register for initializing.
  sendByte = 0x1D;
 8000f96:	231d      	movs	r3, #29
 8000f98:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[7], &sendByte );
 8000f9a:	1dfa      	adds	r2, r7, #7
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	3307      	adds	r3, #7
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff67 	bl	8000e78 <SPI_E_WriteReg>

  // Wait 10 ms
  osDelay(10);
 8000faa:	200a      	movs	r0, #10
 8000fac:	f007 fb2a 	bl	8008604 <osDelay>

  // Write 0x18 to SROM_Enable register again to start SROM download.
  sendByte = 0x18;
 8000fb0:	2318      	movs	r3, #24
 8000fb2:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[8], &sendByte );
 8000fb4:	1dfa      	adds	r2, r7, #7
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	3308      	adds	r3, #8
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff5a 	bl	8000e78 <SPI_E_WriteReg>


  // Send the SROM data
  // Select Slave during the whole transfer.
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	4826      	ldr	r0, [pc, #152]	; (8001064 <startUpMouse+0x18c>)
 8000fca:	f001 f879 	bl	80020c0 <HAL_GPIO_WritePin>
  // Select SROM_Load_Burst register
  HAL_SPI_Transmit(&hspi4, &startUpRegAddr[9], 1, 100);
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	f103 0109 	add.w	r1, r3, #9
 8000fd6:	2364      	movs	r3, #100	; 0x64
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4823      	ldr	r0, [pc, #140]	; (8001068 <startUpMouse+0x190>)
 8000fdc:	f004 fae6 	bl	80055ac <HAL_SPI_Transmit>


  for(int i=0;i<firmware_length;i++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	e00d      	b.n	8001002 <startUpMouse+0x12a>
  {
	  HAL_SPI_Transmit(&hspi4,(uint8_t *) &firmware_data[i], 1, 100);
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	4a20      	ldr	r2, [pc, #128]	; (800106c <startUpMouse+0x194>)
 8000fea:	1899      	adds	r1, r3, r2
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	2201      	movs	r2, #1
 8000ff0:	481d      	ldr	r0, [pc, #116]	; (8001068 <startUpMouse+0x190>)
 8000ff2:	f004 fadb 	bl	80055ac <HAL_SPI_Transmit>
	  osDelay(1);
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f007 fb04 	bl	8008604 <osDelay>
  for(int i=0;i<firmware_length;i++)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3301      	adds	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	f640 73fe 	movw	r3, #4094	; 0xffe
 8001006:	461a      	mov	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	4293      	cmp	r3, r2
 800100c:	dbeb      	blt.n	8000fe6 <startUpMouse+0x10e>
  }

  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2110      	movs	r1, #16
 8001012:	4814      	ldr	r0, [pc, #80]	; (8001064 <startUpMouse+0x18c>)
 8001014:	f001 f854 	bl	80020c0 <HAL_GPIO_WritePin>

  osDelay(1);
 8001018:	2001      	movs	r0, #1
 800101a:	f007 faf3 	bl	8008604 <osDelay>

  // Read the SROM_ID (0x2A) register to verify the ID before any other register reads or writes.
  SPI_E_ReadReg(&startUpRegAddr[10], &readByte );
 800101e:	1dba      	adds	r2, r7, #6
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	330a      	adds	r3, #10
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fef5 	bl	8000e18 <SPI_E_ReadReg>

  // Write 0x00 to config2 register for wired mouse design.
  sendByte = 0x00;
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[11], &sendByte );
 8001032:	1dfa      	adds	r2, r7, #7
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	330b      	adds	r3, #11
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff1b 	bl	8000e78 <SPI_E_WriteReg>

  // Set Config1
  sendByte = 0x77;
 8001042:	2377      	movs	r3, #119	; 0x77
 8001044:	71fb      	strb	r3, [r7, #7]
  uint8_t conf1Addr = 0x0F;
 8001046:	230f      	movs	r3, #15
 8001048:	717b      	strb	r3, [r7, #5]
  SPI_E_WriteReg(&conf1Addr, &sendByte );
 800104a:	1dfa      	adds	r2, r7, #7
 800104c:	1d7b      	adds	r3, r7, #5
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff11 	bl	8000e78 <SPI_E_WriteReg>


}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	0800af30 	.word	0x0800af30
 8001064:	58021000 	.word	0x58021000
 8001068:	24004eb0 	.word	0x24004eb0
 800106c:	0800b134 	.word	0x0800b134

08001070 <readMouseSensor>:


void readMouseSensor(sensValue *sensorPacket)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

	uint8_t readByte = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	757b      	strb	r3, [r7, #21]
	uint8_t freeze = 0x01;
 800107c:	2301      	movs	r3, #1
 800107e:	753b      	strb	r3, [r7, #20]

	uint8_t motionADR[] = {0x02,0x03,0x04,0x05,0x06};
 8001080:	4a30      	ldr	r2, [pc, #192]	; (8001144 <readMouseSensor+0xd4>)
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	e892 0003 	ldmia.w	r2, {r0, r1}
 800108a:	6018      	str	r0, [r3, #0]
 800108c:	3304      	adds	r3, #4
 800108e:	7019      	strb	r1, [r3, #0]
	uint8_t magnX_L = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	75fb      	strb	r3, [r7, #23]
	uint8_t magnY_L = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	75bb      	strb	r3, [r7, #22]
	// Write the motion address to freeze the current value of delta X and Y.
	SPI_E_WriteReg(&motionADR[0], &freeze );
 8001098:	f107 0214 	add.w	r2, r7, #20
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fee8 	bl	8000e78 <SPI_E_WriteReg>
	// Check if any motion has occurred.
	SPI_E_ReadReg(&motionADR[0], &readByte );
 80010a8:	f107 0215 	add.w	r2, r7, #21
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff feb0 	bl	8000e18 <SPI_E_ReadReg>
	// Save the motion bit.
	sensorPacket->mouseMotion = 0 < (0x80 & readByte);
 80010b8:	7d7b      	ldrb	r3, [r7, #21]
 80010ba:	b25b      	sxtb	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	09db      	lsrs	r3, r3, #7
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	701a      	strb	r2, [r3, #0]


	//Read the delta X registers.
	SPI_E_ReadReg(&motionADR[1], &readByte );
 80010c6:	f107 0215 	add.w	r2, r7, #21
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	3301      	adds	r3, #1
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fea0 	bl	8000e18 <SPI_E_ReadReg>
	magnX_L = (uint8_t) readByte;
 80010d8:	7d7b      	ldrb	r3, [r7, #21]
 80010da:	75fb      	strb	r3, [r7, #23]
	SPI_E_ReadReg(&motionADR[2], &readByte );
 80010dc:	f107 0215 	add.w	r2, r7, #21
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	3302      	adds	r3, #2
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fe95 	bl	8000e18 <SPI_E_ReadReg>

	// Merge the lower and higher bit values of the delta X registers.
	sensorPacket->mouse_D_X = magnX_L | (readByte<<8);
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	7d7b      	ldrb	r3, [r7, #21]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	805a      	strh	r2, [r3, #2]

	//Read the delta X registers.
	SPI_E_ReadReg(&motionADR[3], &readByte );
 8001100:	f107 0215 	add.w	r2, r7, #21
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	3303      	adds	r3, #3
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fe83 	bl	8000e18 <SPI_E_ReadReg>
	magnY_L = (uint8_t) readByte;
 8001112:	7d7b      	ldrb	r3, [r7, #21]
 8001114:	75bb      	strb	r3, [r7, #22]
	SPI_E_ReadReg(&motionADR[4], &readByte );
 8001116:	f107 0215 	add.w	r2, r7, #21
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	3304      	adds	r3, #4
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fe78 	bl	8000e18 <SPI_E_ReadReg>

	// Merge the lower and higher bit values of the delta Y registers.
	sensorPacket->mouse_D_Y = magnY_L | (readByte<<8);
 8001128:	7dbb      	ldrb	r3, [r7, #22]
 800112a:	b21a      	sxth	r2, r3
 800112c:	7d7b      	ldrb	r3, [r7, #21]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b21a      	sxth	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	809a      	strh	r2, [r3, #4]

}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	0800af3c 	.word	0x0800af3c

08001148 <I2CCommandHandle>:
}



void I2CCommandHandle( )
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b0aa      	sub	sp, #168	; 0xa8
 800114c:	af00      	add	r7, sp, #0
	// Debug messages.
	const char strF[] = "I2C buffer is empty.\n\r";
 800114e:	4b54      	ldr	r3, [pc, #336]	; (80012a0 <I2CCommandHandle+0x158>)
 8001150:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001154:	461d      	mov	r5, r3
 8001156:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800115a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800115e:	6020      	str	r0, [r4, #0]
 8001160:	3404      	adds	r4, #4
 8001162:	8021      	strh	r1, [r4, #0]
 8001164:	3402      	adds	r4, #2
 8001166:	0c0b      	lsrs	r3, r1, #16
 8001168:	7023      	strb	r3, [r4, #0]
	const char str0[] = "Undefined command.\n\r";
 800116a:	4b4e      	ldr	r3, [pc, #312]	; (80012a4 <I2CCommandHandle+0x15c>)
 800116c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001170:	461d      	mov	r5, r3
 8001172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001176:	e895 0003 	ldmia.w	r5, {r0, r1}
 800117a:	6020      	str	r0, [r4, #0]
 800117c:	3404      	adds	r4, #4
 800117e:	7021      	strb	r1, [r4, #0]
	const char str1[] = "Start the gripper.\n\r";
 8001180:	4b49      	ldr	r3, [pc, #292]	; (80012a8 <I2CCommandHandle+0x160>)
 8001182:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8001186:	461d      	mov	r5, r3
 8001188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001190:	6020      	str	r0, [r4, #0]
 8001192:	3404      	adds	r4, #4
 8001194:	7021      	strb	r1, [r4, #0]
	const char str2[] = "Stop the gripper.\n\r";
 8001196:	4b45      	ldr	r3, [pc, #276]	; (80012ac <I2CCommandHandle+0x164>)
 8001198:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800119c:	461d      	mov	r5, r3
 800119e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a2:	682b      	ldr	r3, [r5, #0]
 80011a4:	6023      	str	r3, [r4, #0]
	const char str3[] = "Release object.\n\r";
 80011a6:	4b42      	ldr	r3, [pc, #264]	; (80012b0 <I2CCommandHandle+0x168>)
 80011a8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80011ac:	461d      	mov	r5, r3
 80011ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b2:	682b      	ldr	r3, [r5, #0]
 80011b4:	8023      	strh	r3, [r4, #0]
	const char str4[] = "Pause the gripper.\n\r";
 80011b6:	4b3f      	ldr	r3, [pc, #252]	; (80012b4 <I2CCommandHandle+0x16c>)
 80011b8:	f107 041c 	add.w	r4, r7, #28
 80011bc:	461d      	mov	r5, r3
 80011be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011c6:	6020      	str	r0, [r4, #0]
 80011c8:	3404      	adds	r4, #4
 80011ca:	7021      	strb	r1, [r4, #0]
	const char str5[] = "Set motor angle.\n\r";
 80011cc:	4b3a      	ldr	r3, [pc, #232]	; (80012b8 <I2CCommandHandle+0x170>)
 80011ce:	f107 0408 	add.w	r4, r7, #8
 80011d2:	461d      	mov	r5, r3
 80011d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d8:	682b      	ldr	r3, [r5, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	8022      	strh	r2, [r4, #0]
 80011de:	3402      	adds	r4, #2
 80011e0:	0c1b      	lsrs	r3, r3, #16
 80011e2:	7023      	strb	r3, [r4, #0]

	// Indicate status of I2C.
	int I2CReceiveStatus;

	// Check if new I2C messages is available.
	I2CReceiveStatus = HAL_I2C_Slave_Receive(&hi2c1, (uint8_t *) &messageHeaderFromNano, (uint16_t) sizeof(messageStructHeaderFromNano), (uint32_t) 1);
 80011e4:	1d39      	adds	r1, r7, #4
 80011e6:	2301      	movs	r3, #1
 80011e8:	2202      	movs	r2, #2
 80011ea:	4834      	ldr	r0, [pc, #208]	; (80012bc <I2CCommandHandle+0x174>)
 80011ec:	f001 f935 	bl	800245a <HAL_I2C_Slave_Receive>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4


	// If there is a message, follow the instructions dependent of the type of message.
	if( I2CReceiveStatus == 0 )
 80011f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d141      	bne.n	8001282 <I2CCommandHandle+0x13a>
	{

		switch(messageHeaderFromNano.frameType)
 80011fe:	793b      	ldrb	r3, [r7, #4]
 8001200:	3b01      	subs	r3, #1
 8001202:	2b04      	cmp	r3, #4
 8001204:	d834      	bhi.n	8001270 <I2CCommandHandle+0x128>
 8001206:	a201      	add	r2, pc, #4	; (adr r2, 800120c <I2CCommandHandle+0xc4>)
 8001208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120c:	08001221 	.word	0x08001221
 8001210:	08001231 	.word	0x08001231
 8001214:	08001241 	.word	0x08001241
 8001218:	08001251 	.word	0x08001251
 800121c:	08001261 	.word	0x08001261
		{

			case 1:
			{
				// Should start the gripper
				HAL_UART_Transmit(&huart3,(uint8_t *) str1, sizeof(str1), 10);
 8001220:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001224:	230a      	movs	r3, #10
 8001226:	2215      	movs	r2, #21
 8001228:	4825      	ldr	r0, [pc, #148]	; (80012c0 <I2CCommandHandle+0x178>)
 800122a:	f005 fcb7 	bl	8006b9c <HAL_UART_Transmit>
			}
				break;
 800122e:	e032      	b.n	8001296 <I2CCommandHandle+0x14e>

			case 2:
			{
				// Should stop the gripper and set it to the standby mode.
				HAL_UART_Transmit(&huart3,(uint8_t *) str2, sizeof(str2), 100);
 8001230:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001234:	2364      	movs	r3, #100	; 0x64
 8001236:	2214      	movs	r2, #20
 8001238:	4821      	ldr	r0, [pc, #132]	; (80012c0 <I2CCommandHandle+0x178>)
 800123a:	f005 fcaf 	bl	8006b9c <HAL_UART_Transmit>
			}
				break;
 800123e:	e02a      	b.n	8001296 <I2CCommandHandle+0x14e>

			case 3:
			{
				// Should set the gripper to release mode.
				HAL_UART_Transmit(&huart3,(uint8_t *) str3, sizeof(str3), 100);
 8001240:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001244:	2364      	movs	r3, #100	; 0x64
 8001246:	2212      	movs	r2, #18
 8001248:	481d      	ldr	r0, [pc, #116]	; (80012c0 <I2CCommandHandle+0x178>)
 800124a:	f005 fca7 	bl	8006b9c <HAL_UART_Transmit>
			}
				break;
 800124e:	e022      	b.n	8001296 <I2CCommandHandle+0x14e>

			case 4:
			{
				// Should pause the gripper in its current stage.
				HAL_UART_Transmit(&huart3,(uint8_t *) str4, sizeof(str4), 100);
 8001250:	f107 011c 	add.w	r1, r7, #28
 8001254:	2364      	movs	r3, #100	; 0x64
 8001256:	2215      	movs	r2, #21
 8001258:	4819      	ldr	r0, [pc, #100]	; (80012c0 <I2CCommandHandle+0x178>)
 800125a:	f005 fc9f 	bl	8006b9c <HAL_UART_Transmit>
			}
				break;
 800125e:	e01a      	b.n	8001296 <I2CCommandHandle+0x14e>

			case 5:
			{
				// Should handle recommended motor commands from the Nano.
				HAL_UART_Transmit(&huart3,(uint8_t *) str5, sizeof(str5), 100);
 8001260:	f107 0108 	add.w	r1, r7, #8
 8001264:	2364      	movs	r3, #100	; 0x64
 8001266:	2213      	movs	r2, #19
 8001268:	4815      	ldr	r0, [pc, #84]	; (80012c0 <I2CCommandHandle+0x178>)
 800126a:	f005 fc97 	bl	8006b9c <HAL_UART_Transmit>
			}
				break;
 800126e:	e012      	b.n	8001296 <I2CCommandHandle+0x14e>

			default:
			{
				// Should Flush all I2C messages.
				HAL_UART_Transmit(&huart3,(uint8_t *) str0, sizeof(str0), 100);
 8001270:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001274:	2364      	movs	r3, #100	; 0x64
 8001276:	2215      	movs	r2, #21
 8001278:	4811      	ldr	r0, [pc, #68]	; (80012c0 <I2CCommandHandle+0x178>)
 800127a:	f005 fc8f 	bl	8006b9c <HAL_UART_Transmit>
			}
				break;
 800127e:	bf00      	nop
 8001280:	e009      	b.n	8001296 <I2CCommandHandle+0x14e>
		}
	}else{
		// Indicate that there was no data in the I2C buffer.
		HAL_UART_Transmit(&huart3,(uint8_t *) strF, sizeof(strF), 10);
 8001282:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001286:	230a      	movs	r3, #10
 8001288:	2217      	movs	r2, #23
 800128a:	480d      	ldr	r0, [pc, #52]	; (80012c0 <I2CCommandHandle+0x178>)
 800128c:	f005 fc86 	bl	8006b9c <HAL_UART_Transmit>

		HAL_I2C_Init(&hi2c1);
 8001290:	480a      	ldr	r0, [pc, #40]	; (80012bc <I2CCommandHandle+0x174>)
 8001292:	f000 ff49 	bl	8002128 <HAL_I2C_Init>

	}

}
 8001296:	bf00      	nop
 8001298:	37a8      	adds	r7, #168	; 0xa8
 800129a:	46bd      	mov	sp, r7
 800129c:	bdb0      	pop	{r4, r5, r7, pc}
 800129e:	bf00      	nop
 80012a0:	0800af80 	.word	0x0800af80
 80012a4:	0800af98 	.word	0x0800af98
 80012a8:	0800afb0 	.word	0x0800afb0
 80012ac:	0800afc8 	.word	0x0800afc8
 80012b0:	0800afdc 	.word	0x0800afdc
 80012b4:	0800aff0 	.word	0x0800aff0
 80012b8:	0800b008 	.word	0x0800b008
 80012bc:	24004a50 	.word	0x24004a50
 80012c0:	240049c4 	.word	0x240049c4

080012c4 <I2CTransmitHandle>:



uint32_t I2CTransmitHandle( )
{
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b09c      	sub	sp, #112	; 0x70
 80012c8:	af00      	add	r7, sp, #0

	// Indicate status of I2C transmition.
	int transStatus;

	// Debug messages.
	char str1[] = "Transmit Success.\n\r";
 80012ca:	4b2c      	ldr	r3, [pc, #176]	; (800137c <I2CTransmitHandle+0xb8>)
 80012cc:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80012d0:	461d      	mov	r5, r3
 80012d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d6:	682b      	ldr	r3, [r5, #0]
 80012d8:	6023      	str	r3, [r4, #0]
	char str2[] = "Transmit Failure.\n\r";
 80012da:	4b29      	ldr	r3, [pc, #164]	; (8001380 <I2CTransmitHandle+0xbc>)
 80012dc:	f107 0418 	add.w	r4, r7, #24
 80012e0:	461d      	mov	r5, r3
 80012e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e6:	682b      	ldr	r3, [r5, #0]
 80012e8:	6023      	str	r3, [r4, #0]
	char str3[] = "About to transmit.\n\r";
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <I2CTransmitHandle+0xc0>)
 80012ec:	463c      	mov	r4, r7
 80012ee:	461d      	mov	r5, r3
 80012f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012f8:	6020      	str	r0, [r4, #0]
 80012fa:	3404      	adds	r4, #4
 80012fc:	7021      	strb	r1, [r4, #0]

	// Is to debug communication with receiver.
	messageFormNucleo.motorStatus[0] = 1;
 80012fe:	2301      	movs	r3, #1
 8001300:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	messageFormNucleo.motorStatus[1] = 3;
 8001304:	2303      	movs	r3, #3
 8001306:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	messageFormNucleo.motorStatus[2] = 3;
 800130a:	2303      	movs	r3, #3
 800130c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	messageFormNucleo.motorStatus[3] = 7;
 8001310:	2307      	movs	r3, #7
 8001312:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48


	// Indicate that a I2C transimtion is about to happen.
	HAL_UART_Transmit(&huart3,(uint8_t *) str3, sizeof(str1), 50);
 8001316:	4639      	mov	r1, r7
 8001318:	2332      	movs	r3, #50	; 0x32
 800131a:	2214      	movs	r2, #20
 800131c:	481a      	ldr	r0, [pc, #104]	; (8001388 <I2CTransmitHandle+0xc4>)
 800131e:	f005 fc3d 	bl	8006b9c <HAL_UART_Transmit>

	// Need to reset I2C before transmition, don't know why...
	HAL_I2C_Init(&hi2c1);
 8001322:	481a      	ldr	r0, [pc, #104]	; (800138c <I2CTransmitHandle+0xc8>)
 8001324:	f000 ff00 	bl	8002128 <HAL_I2C_Init>

	// Transmit the data from Nucleo.
	transStatus = HAL_I2C_Slave_Transmit(&hi2c1,(uint8_t *) &messageFormNucleo, sizeof(messageStructFromNucleo), 100);
 8001328:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800132c:	2364      	movs	r3, #100	; 0x64
 800132e:	222a      	movs	r2, #42	; 0x2a
 8001330:	4816      	ldr	r0, [pc, #88]	; (800138c <I2CTransmitHandle+0xc8>)
 8001332:	f000 ff89 	bl	8002248 <HAL_I2C_Slave_Transmit>
 8001336:	4603      	mov	r3, r0
 8001338:	66fb      	str	r3, [r7, #108]	; 0x6c

	//Print transmit status.
	if(transStatus == 0)
 800133a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800133c:	2b00      	cmp	r3, #0
 800133e:	d10e      	bne.n	800135e <I2CTransmitHandle+0x9a>
	{
		// Transmit gripper information.
		HAL_UART_Transmit(&huart3,(uint8_t *) str1, sizeof(str1), 50);
 8001340:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001344:	2332      	movs	r3, #50	; 0x32
 8001346:	2214      	movs	r2, #20
 8001348:	480f      	ldr	r0, [pc, #60]	; (8001388 <I2CTransmitHandle+0xc4>)
 800134a:	f005 fc27 	bl	8006b9c <HAL_UART_Transmit>

		// Toggle orange led to see transmition.
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 800134e:	2102      	movs	r1, #2
 8001350:	480f      	ldr	r0, [pc, #60]	; (8001390 <I2CTransmitHandle+0xcc>)
 8001352:	f000 fece 	bl	80020f2 <HAL_GPIO_TogglePin>

		// Return the latest transmit time.
		return osKernelGetTickCount();
 8001356:	f007 f887 	bl	8008468 <osKernelGetTickCount>
 800135a:	4603      	mov	r3, r0
 800135c:	e00a      	b.n	8001374 <I2CTransmitHandle+0xb0>

	}else{

		HAL_I2C_Init(&hi2c1);
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <I2CTransmitHandle+0xc8>)
 8001360:	f000 fee2 	bl	8002128 <HAL_I2C_Init>
		// Transmit debug message.
		HAL_UART_Transmit(&huart3,(uint8_t *) str2, sizeof(str2), 50);
 8001364:	f107 0118 	add.w	r1, r7, #24
 8001368:	2332      	movs	r3, #50	; 0x32
 800136a:	2214      	movs	r2, #20
 800136c:	4806      	ldr	r0, [pc, #24]	; (8001388 <I2CTransmitHandle+0xc4>)
 800136e:	f005 fc15 	bl	8006b9c <HAL_UART_Transmit>
		// Return error value.
		return 0;
 8001372:	2300      	movs	r3, #0
	}

}
 8001374:	4618      	mov	r0, r3
 8001376:	3770      	adds	r7, #112	; 0x70
 8001378:	46bd      	mov	sp, r7
 800137a:	bdb0      	pop	{r4, r5, r7, pc}
 800137c:	0800b01c 	.word	0x0800b01c
 8001380:	0800b030 	.word	0x0800b030
 8001384:	0800b044 	.word	0x0800b044
 8001388:	240049c4 	.word	0x240049c4
 800138c:	24004a50 	.word	0x24004a50
 8001390:	58021000 	.word	0x58021000

08001394 <StartControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartControlTask */
void StartControlTask(void *argument)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800139c:	2101      	movs	r1, #1
 800139e:	4804      	ldr	r0, [pc, #16]	; (80013b0 <StartControlTask+0x1c>)
 80013a0:	f000 fea7 	bl	80020f2 <HAL_GPIO_TogglePin>
	osDelay(2000);
 80013a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013a8:	f007 f92c 	bl	8008604 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80013ac:	e7f6      	b.n	800139c <StartControlTask+0x8>
 80013ae:	bf00      	nop
 80013b0:	58020400 	.word	0x58020400

080013b4 <StartCommBoard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommBoard */
void StartCommBoard(void *argument)
{
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b08e      	sub	sp, #56	; 0x38
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommBoard */
  /* Infinite loop */

	// Set up time variables.
	const uint32_t deadlineCommunication = 1000;
 80013bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c0:	633b      	str	r3, [r7, #48]	; 0x30
	const uint32_t communicationSleepTime = 25;
 80013c2:	2319      	movs	r3, #25
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t transmitionStatus;
	uint32_t lastTransmitTime = osKernelGetTickCount();
 80013c6:	f007 f84f 	bl	8008468 <osKernelGetTickCount>
 80013ca:	6378      	str	r0, [r7, #52]	; 0x34

	// Indicate that I2C communication is started.
	char str0[] = "Starting I2C Communication.\n\r";
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <StartCommBoard+0x78>)
 80013ce:	f107 0408 	add.w	r4, r7, #8
 80013d2:	461d      	mov	r5, r3
 80013d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013dc:	c407      	stmia	r4!, {r0, r1, r2}
 80013de:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3,(uint8_t *) str0, sizeof(str0), 50);
 80013e0:	f107 0108 	add.w	r1, r7, #8
 80013e4:	2332      	movs	r3, #50	; 0x32
 80013e6:	221e      	movs	r2, #30
 80013e8:	4811      	ldr	r0, [pc, #68]	; (8001430 <StartCommBoard+0x7c>)
 80013ea:	f005 fbd7 	bl	8006b9c <HAL_UART_Transmit>


	  // Check if for new incomming I2C messages.

	// Suspend all other task from interrupt.
	osKernelLock();
 80013ee:	f006 ffbf 	bl	8008370 <osKernelLock>
	// Handle received I2C data.
	I2CCommandHandle();
 80013f2:	f7ff fea9 	bl	8001148 <I2CCommandHandle>
	osKernelUnlock();
 80013f6:	f006 fff3 	bl	80083e0 <osKernelUnlock>


	// Check if it is time to do a new transmit. Otherwise it check if any new messages is available.
	if( (lastTransmitTime + deadlineCommunication) <= osKernelGetTickCount() )
 80013fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013fe:	18d4      	adds	r4, r2, r3
 8001400:	f007 f832 	bl	8008468 <osKernelGetTickCount>
 8001404:	4603      	mov	r3, r0
 8001406:	429c      	cmp	r4, r3
 8001408:	d80b      	bhi.n	8001422 <StartCommBoard+0x6e>
	{
		// Suspend all other task from interrupt.
		osKernelLock();
 800140a:	f006 ffb1 	bl	8008370 <osKernelLock>

		// Transmit data from Nucleo.
		transmitionStatus = I2CTransmitHandle();
 800140e:	f7ff ff59 	bl	80012c4 <I2CTransmitHandle>
 8001412:	62b8      	str	r0, [r7, #40]	; 0x28

		// Check if the data were transmitted.
		if(transmitionStatus != 0)
 8001414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <StartCommBoard+0x6a>
		{
			lastTransmitTime = transmitionStatus;
 800141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141c:	637b      	str	r3, [r7, #52]	; 0x34
		}

		osKernelUnlock();
 800141e:	f006 ffdf 	bl	80083e0 <osKernelUnlock>

	}

	// Communication task sleep.
	osDelay(communicationSleepTime);
 8001422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001424:	f007 f8ee 	bl	8008604 <osDelay>
	osKernelLock();
 8001428:	e7e1      	b.n	80013ee <StartCommBoard+0x3a>
 800142a:	bf00      	nop
 800142c:	0800b05c 	.word	0x0800b05c
 8001430:	240049c4 	.word	0x240049c4

08001434 <StartSensorRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorRead */
void StartSensorRead(void *argument)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  sensValue sensorPacket;



  startUpMouse();
 800143c:	f7ff fd4c 	bl	8000ed8 <startUpMouse>
  /* Infinite loop */
  for(;;)
  {

    // Read the sensor values.
	readMouseSensor( &sensorPacket );
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fe13 	bl	8001070 <readMouseSensor>

    //UART Send data to console.
    // plotSensorData( &sensorPacket );

    osDelay(1000);
 800144a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800144e:	f007 f8d9 	bl	8008604 <osDelay>
	readMouseSensor( &sensorPacket );
 8001452:	e7f5      	b.n	8001440 <StartSensorRead+0xc>

08001454 <StartSafety>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSafety */
void StartSafety(void *argument)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800145c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001460:	4803      	ldr	r0, [pc, #12]	; (8001470 <StartSafety+0x1c>)
 8001462:	f000 fe46 	bl	80020f2 <HAL_GPIO_TogglePin>
	osDelay(1500);
 8001466:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800146a:	f007 f8cb 	bl	8008604 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800146e:	e7f5      	b.n	800145c <StartSafety+0x8>
 8001470:	58020400 	.word	0x58020400

08001474 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d101      	bne.n	800148a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001486:	f000 fb3d 	bl	8001b04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40001000 	.word	0x40001000

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_MspInit+0x30>)
 80014b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014b4:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_MspInit+0x30>)
 80014b6:	f043 0302 	orr.w	r3, r3, #2
 80014ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_MspInit+0x30>)
 80014c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	58024400 	.word	0x58024400

080014dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a1a      	ldr	r2, [pc, #104]	; (8001564 <HAL_I2C_MspInit+0x88>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d12e      	bne.n	800155c <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <HAL_I2C_MspInit+0x8c>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001504:	4a18      	ldr	r2, [pc, #96]	; (8001568 <HAL_I2C_MspInit+0x8c>)
 8001506:	f043 0302 	orr.w	r3, r3, #2
 800150a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_I2C_MspInit+0x8c>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800151c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001522:	2312      	movs	r3, #18
 8001524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800152e:	2304      	movs	r3, #4
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <HAL_I2C_MspInit+0x90>)
 800153a:	f000 fc11 	bl	8001d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_I2C_MspInit+0x8c>)
 8001540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001544:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_I2C_MspInit+0x8c>)
 8001546:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800154a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_I2C_MspInit+0x8c>)
 8001550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800155c:	bf00      	nop
 800155e:	3728      	adds	r7, #40	; 0x28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40005400 	.word	0x40005400
 8001568:	58024400 	.word	0x58024400
 800156c:	58020400 	.word	0x58020400

08001570 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1a      	ldr	r2, [pc, #104]	; (80015f8 <HAL_SPI_MspInit+0x88>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d12d      	bne.n	80015ee <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <HAL_SPI_MspInit+0x8c>)
 8001594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001598:	4a18      	ldr	r2, [pc, #96]	; (80015fc <HAL_SPI_MspInit+0x8c>)
 800159a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800159e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015a2:	4b16      	ldr	r3, [pc, #88]	; (80015fc <HAL_SPI_MspInit+0x8c>)
 80015a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_SPI_MspInit+0x8c>)
 80015b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b6:	4a11      	ldr	r2, [pc, #68]	; (80015fc <HAL_SPI_MspInit+0x8c>)
 80015b8:	f043 0310 	orr.w	r3, r3, #16
 80015bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_SPI_MspInit+0x8c>)
 80015c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80015ce:	2364      	movs	r3, #100	; 0x64
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80015de:	2305      	movs	r3, #5
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <HAL_SPI_MspInit+0x90>)
 80015ea:	f000 fbb9 	bl	8001d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40013400 	.word	0x40013400
 80015fc:	58024400 	.word	0x58024400
 8001600:	58021000 	.word	0x58021000

08001604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08e      	sub	sp, #56	; 0x38
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a4e      	ldr	r2, [pc, #312]	; (800175c <HAL_UART_MspInit+0x158>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d12e      	bne.n	8001684 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001626:	4b4e      	ldr	r3, [pc, #312]	; (8001760 <HAL_UART_MspInit+0x15c>)
 8001628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800162c:	4a4c      	ldr	r2, [pc, #304]	; (8001760 <HAL_UART_MspInit+0x15c>)
 800162e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001632:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001636:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <HAL_UART_MspInit+0x15c>)
 8001638:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800163c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001640:	623b      	str	r3, [r7, #32]
 8001642:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001644:	4b46      	ldr	r3, [pc, #280]	; (8001760 <HAL_UART_MspInit+0x15c>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164a:	4a45      	ldr	r2, [pc, #276]	; (8001760 <HAL_UART_MspInit+0x15c>)
 800164c:	f043 0320 	orr.w	r3, r3, #32
 8001650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001654:	4b42      	ldr	r3, [pc, #264]	; (8001760 <HAL_UART_MspInit+0x15c>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	61fb      	str	r3, [r7, #28]
 8001660:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001666:	2312      	movs	r3, #18
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001672:	2307      	movs	r3, #7
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167a:	4619      	mov	r1, r3
 800167c:	4839      	ldr	r0, [pc, #228]	; (8001764 <HAL_UART_MspInit+0x160>)
 800167e:	f000 fb6f 	bl	8001d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001682:	e067      	b.n	8001754 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a37      	ldr	r2, [pc, #220]	; (8001768 <HAL_UART_MspInit+0x164>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d12e      	bne.n	80016ec <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800168e:	4b34      	ldr	r3, [pc, #208]	; (8001760 <HAL_UART_MspInit+0x15c>)
 8001690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001694:	4a32      	ldr	r2, [pc, #200]	; (8001760 <HAL_UART_MspInit+0x15c>)
 8001696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800169e:	4b30      	ldr	r3, [pc, #192]	; (8001760 <HAL_UART_MspInit+0x15c>)
 80016a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ac:	4b2c      	ldr	r3, [pc, #176]	; (8001760 <HAL_UART_MspInit+0x15c>)
 80016ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b2:	4a2b      	ldr	r2, [pc, #172]	; (8001760 <HAL_UART_MspInit+0x15c>)
 80016b4:	f043 0308 	orr.w	r3, r3, #8
 80016b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016bc:	4b28      	ldr	r3, [pc, #160]	; (8001760 <HAL_UART_MspInit+0x15c>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016ca:	2320      	movs	r3, #32
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ce:	2312      	movs	r3, #18
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016da:	2307      	movs	r3, #7
 80016dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e2:	4619      	mov	r1, r3
 80016e4:	4821      	ldr	r0, [pc, #132]	; (800176c <HAL_UART_MspInit+0x168>)
 80016e6:	f000 fb3b 	bl	8001d60 <HAL_GPIO_Init>
}
 80016ea:	e033      	b.n	8001754 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART3)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a1f      	ldr	r2, [pc, #124]	; (8001770 <HAL_UART_MspInit+0x16c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d12e      	bne.n	8001754 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016f6:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <HAL_UART_MspInit+0x15c>)
 80016f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016fc:	4a18      	ldr	r2, [pc, #96]	; (8001760 <HAL_UART_MspInit+0x15c>)
 80016fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001702:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <HAL_UART_MspInit+0x15c>)
 8001708:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800170c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_UART_MspInit+0x15c>)
 8001716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171a:	4a11      	ldr	r2, [pc, #68]	; (8001760 <HAL_UART_MspInit+0x15c>)
 800171c:	f043 0308 	orr.w	r3, r3, #8
 8001720:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_UART_MspInit+0x15c>)
 8001726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001732:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001744:	2307      	movs	r3, #7
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174c:	4619      	mov	r1, r3
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <HAL_UART_MspInit+0x168>)
 8001750:	f000 fb06 	bl	8001d60 <HAL_GPIO_Init>
}
 8001754:	bf00      	nop
 8001756:	3738      	adds	r7, #56	; 0x38
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40007800 	.word	0x40007800
 8001760:	58024400 	.word	0x58024400
 8001764:	58021400 	.word	0x58021400
 8001768:	40004400 	.word	0x40004400
 800176c:	58020c00 	.word	0x58020c00
 8001770:	40004800 	.word	0x40004800

08001774 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a21      	ldr	r2, [pc, #132]	; (8001818 <HAL_PCD_MspInit+0xa4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d13b      	bne.n	800180e <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <HAL_PCD_MspInit+0xa8>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179c:	4a1f      	ldr	r2, [pc, #124]	; (800181c <HAL_PCD_MspInit+0xa8>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017a6:	4b1d      	ldr	r3, [pc, #116]	; (800181c <HAL_PCD_MspInit+0xa8>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80017b4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80017b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80017c6:	230a      	movs	r3, #10
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	4813      	ldr	r0, [pc, #76]	; (8001820 <HAL_PCD_MspInit+0xac>)
 80017d2:	f000 fac5 	bl	8001d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017dc:	2300      	movs	r3, #0
 80017de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	480d      	ldr	r0, [pc, #52]	; (8001820 <HAL_PCD_MspInit+0xac>)
 80017ec:	f000 fab8 	bl	8001d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_PCD_MspInit+0xa8>)
 80017f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017f6:	4a09      	ldr	r2, [pc, #36]	; (800181c <HAL_PCD_MspInit+0xa8>)
 80017f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_PCD_MspInit+0xa8>)
 8001802:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	; 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40080000 	.word	0x40080000
 800181c:	58024400 	.word	0x58024400
 8001820:	58020000 	.word	0x58020000

08001824 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08e      	sub	sp, #56	; 0x38
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001834:	2200      	movs	r2, #0
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	2036      	movs	r0, #54	; 0x36
 800183a:	f000 fa69 	bl	8001d10 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800183e:	2036      	movs	r0, #54	; 0x36
 8001840:	f000 fa80 	bl	8001d44 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001844:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_InitTick+0xa4>)
 8001846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800184a:	4a1f      	ldr	r2, [pc, #124]	; (80018c8 <HAL_InitTick+0xa4>)
 800184c:	f043 0310 	orr.w	r3, r3, #16
 8001850:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001854:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_InitTick+0xa4>)
 8001856:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001862:	f107 020c 	add.w	r2, r7, #12
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f002 fa63 	bl	8003d38 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001872:	f002 fa35 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8001876:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187a:	4a14      	ldr	r2, [pc, #80]	; (80018cc <HAL_InitTick+0xa8>)
 800187c:	fba2 2303 	umull	r2, r3, r2, r3
 8001880:	0c9b      	lsrs	r3, r3, #18
 8001882:	3b01      	subs	r3, #1
 8001884:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_InitTick+0xac>)
 8001888:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <HAL_InitTick+0xb0>)
 800188a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_InitTick+0xac>)
 800188e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001892:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001894:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <HAL_InitTick+0xac>)
 8001896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001898:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <HAL_InitTick+0xac>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_InitTick+0xac>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018a6:	480a      	ldr	r0, [pc, #40]	; (80018d0 <HAL_InitTick+0xac>)
 80018a8:	f004 fe39 	bl	800651e <HAL_TIM_Base_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d104      	bne.n	80018bc <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018b2:	4807      	ldr	r0, [pc, #28]	; (80018d0 <HAL_InitTick+0xac>)
 80018b4:	f004 fe94 	bl	80065e0 <HAL_TIM_Base_Start_IT>
 80018b8:	4603      	mov	r3, r0
 80018ba:	e000      	b.n	80018be <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3738      	adds	r7, #56	; 0x38
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	58024400 	.word	0x58024400
 80018cc:	431bde83 	.word	0x431bde83
 80018d0:	24004fc8 	.word	0x24004fc8
 80018d4:	40001000 	.word	0x40001000

080018d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <HardFault_Handler+0x4>

080018ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <MemManage_Handler+0x4>

080018f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <UsageFault_Handler+0x4>

080018fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <TIM6_DAC_IRQHandler+0x10>)
 8001912:	f004 fe9b 	bl	800664c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	24004fc8 	.word	0x24004fc8

08001920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <SystemInit+0xec>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192a:	4a38      	ldr	r2, [pc, #224]	; (8001a0c <SystemInit+0xec>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001934:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <SystemInit+0xf0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	2b06      	cmp	r3, #6
 800193e:	d807      	bhi.n	8001950 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001940:	4b33      	ldr	r3, [pc, #204]	; (8001a10 <SystemInit+0xf0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 030f 	bic.w	r3, r3, #15
 8001948:	4a31      	ldr	r2, [pc, #196]	; (8001a10 <SystemInit+0xf0>)
 800194a:	f043 0307 	orr.w	r3, r3, #7
 800194e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001950:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <SystemInit+0xf4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a2f      	ldr	r2, [pc, #188]	; (8001a14 <SystemInit+0xf4>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800195c:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <SystemInit+0xf4>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001962:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <SystemInit+0xf4>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	492b      	ldr	r1, [pc, #172]	; (8001a14 <SystemInit+0xf4>)
 8001968:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <SystemInit+0xf8>)
 800196a:	4013      	ands	r3, r2
 800196c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800196e:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <SystemInit+0xf0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	2b07      	cmp	r3, #7
 8001978:	d907      	bls.n	800198a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800197a:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <SystemInit+0xf0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 030f 	bic.w	r3, r3, #15
 8001982:	4a23      	ldr	r2, [pc, #140]	; (8001a10 <SystemInit+0xf0>)
 8001984:	f043 0307 	orr.w	r3, r3, #7
 8001988:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800198a:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <SystemInit+0xf4>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001990:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <SystemInit+0xf4>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001996:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <SystemInit+0xf4>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800199c:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <SystemInit+0xf4>)
 800199e:	4a1f      	ldr	r2, [pc, #124]	; (8001a1c <SystemInit+0xfc>)
 80019a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <SystemInit+0xf4>)
 80019a4:	4a1e      	ldr	r2, [pc, #120]	; (8001a20 <SystemInit+0x100>)
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019a8:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <SystemInit+0xf4>)
 80019aa:	4a1e      	ldr	r2, [pc, #120]	; (8001a24 <SystemInit+0x104>)
 80019ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019ae:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <SystemInit+0xf4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019b4:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <SystemInit+0xf4>)
 80019b6:	4a1b      	ldr	r2, [pc, #108]	; (8001a24 <SystemInit+0x104>)
 80019b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019ba:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <SystemInit+0xf4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <SystemInit+0xf4>)
 80019c2:	4a18      	ldr	r2, [pc, #96]	; (8001a24 <SystemInit+0x104>)
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <SystemInit+0xf4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <SystemInit+0xf4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <SystemInit+0xf4>)
 80019d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <SystemInit+0xf4>)
 80019da:	2200      	movs	r2, #0
 80019dc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <SystemInit+0x108>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <SystemInit+0x10c>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019ea:	d202      	bcs.n	80019f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <SystemInit+0x110>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <SystemInit+0x114>)
 80019f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80019f8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <SystemInit+0xec>)
 80019fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a00:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00
 8001a10:	52002000 	.word	0x52002000
 8001a14:	58024400 	.word	0x58024400
 8001a18:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a1c:	02020200 	.word	0x02020200
 8001a20:	01ff0000 	.word	0x01ff0000
 8001a24:	01010280 	.word	0x01010280
 8001a28:	5c001000 	.word	0x5c001000
 8001a2c:	ffff0000 	.word	0xffff0000
 8001a30:	51008108 	.word	0x51008108
 8001a34:	52004000 	.word	0x52004000

08001a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a70 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a3c:	f7ff ff70 	bl	8001920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a42:	e003      	b.n	8001a4c <LoopCopyDataInit>

08001a44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001a46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a4a:	3104      	adds	r1, #4

08001a4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a4c:	480a      	ldr	r0, [pc, #40]	; (8001a78 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001a50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a54:	d3f6      	bcc.n	8001a44 <CopyDataInit>
  ldr  r2, =_sbss
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001a58:	e002      	b.n	8001a60 <LoopFillZerobss>

08001a5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a5c:	f842 3b04 	str.w	r3, [r2], #4

08001a60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001a62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a64:	d3f9      	bcc.n	8001a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a66:	f009 fa09 	bl	800ae7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6a:	f7fe fdb9 	bl	80005e0 <main>
  bx  lr    
 8001a6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a70:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001a74:	0800c16c 	.word	0x0800c16c
  ldr  r0, =_sdata
 8001a78:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001a7c:	24000014 	.word	0x24000014
  ldr  r2, =_sbss
 8001a80:	24000014 	.word	0x24000014
  ldr  r3, = _ebss
 8001a84:	24005058 	.word	0x24005058

08001a88 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <ADC3_IRQHandler>
	...

08001a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a92:	2003      	movs	r0, #3
 8001a94:	f000 f931 	bl	8001cfa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a98:	f001 ff80 	bl	800399c <HAL_RCC_GetSysClockFreq>
 8001a9c:	4601      	mov	r1, r0
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_Init+0x68>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	4a13      	ldr	r2, [pc, #76]	; (8001af8 <HAL_Init+0x6c>)
 8001aaa:	5cd3      	ldrb	r3, [r2, r3]
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	fa21 f303 	lsr.w	r3, r1, r3
 8001ab4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_Init+0x68>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <HAL_Init+0x6c>)
 8001ac0:	5cd3      	ldrb	r3, [r2, r3]
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8001acc:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <HAL_Init+0x70>)
 8001ace:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <HAL_Init+0x74>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff fea4 	bl	8001824 <HAL_InitTick>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e002      	b.n	8001aec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae6:	f7ff fcdf 	bl	80014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	58024400 	.word	0x58024400
 8001af8:	0800c134 	.word	0x0800c134
 8001afc:	24000004 	.word	0x24000004
 8001b00:	24000000 	.word	0x24000000

08001b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x20>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x24>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_IncTick+0x24>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	2400000c 	.word	0x2400000c
 8001b28:	24005014 	.word	0x24005014

08001b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_GetTick+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	24005014 	.word	0x24005014

08001b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff ffee 	bl	8001b2c <HAL_GetTick>
 8001b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5c:	d005      	beq.n	8001b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_Delay+0x40>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b6a:	bf00      	nop
 8001b6c:	f7ff ffde 	bl	8001b2c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d8f7      	bhi.n	8001b6c <HAL_Delay+0x28>
  {
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	2400000c 	.word	0x2400000c

08001b88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_GetREVID+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	0c1b      	lsrs	r3, r3, #16
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	5c001000 	.word	0x5c001000

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <__NVIC_SetPriorityGrouping+0x40>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bce:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <__NVIC_SetPriorityGrouping+0x40>)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	60d3      	str	r3, [r2, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00
 8001be4:	05fa0000 	.word	0x05fa0000

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	db0b      	blt.n	8001c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4907      	ldr	r1, [pc, #28]	; (8001c3c <__NVIC_EnableIRQ+0x38>)
 8001c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	2001      	movs	r0, #1
 8001c26:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000e100 	.word	0xe000e100

08001c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	db0a      	blt.n	8001c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	490c      	ldr	r1, [pc, #48]	; (8001c8c <__NVIC_SetPriority+0x4c>)
 8001c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c5e:	0112      	lsls	r2, r2, #4
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	440b      	add	r3, r1
 8001c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c68:	e00a      	b.n	8001c80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4908      	ldr	r1, [pc, #32]	; (8001c90 <__NVIC_SetPriority+0x50>)
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	3b04      	subs	r3, #4
 8001c78:	0112      	lsls	r2, r2, #4
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	761a      	strb	r2, [r3, #24]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000e100 	.word	0xe000e100
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f1c3 0307 	rsb	r3, r3, #7
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	bf28      	it	cs
 8001cb2:	2304      	movcs	r3, #4
 8001cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d902      	bls.n	8001cc4 <NVIC_EncodePriority+0x30>
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3b03      	subs	r3, #3
 8001cc2:	e000      	b.n	8001cc6 <NVIC_EncodePriority+0x32>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	43d9      	mvns	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	4313      	orrs	r3, r2
         );
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3724      	adds	r7, #36	; 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ff4c 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d1e:	f7ff ff63 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	68b9      	ldr	r1, [r7, #8]
 8001d28:	6978      	ldr	r0, [r7, #20]
 8001d2a:	f7ff ffb3 	bl	8001c94 <NVIC_EncodePriority>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff82 	bl	8001c40 <__NVIC_SetPriority>
}
 8001d3c:	bf00      	nop
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff56 	bl	8001c04 <__NVIC_EnableIRQ>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	; 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d6e:	4b89      	ldr	r3, [pc, #548]	; (8001f94 <HAL_GPIO_Init+0x234>)
 8001d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d72:	e194      	b.n	800209e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2101      	movs	r1, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 8186 	beq.w	8002098 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d00b      	beq.n	8001dac <HAL_GPIO_Init+0x4c>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d007      	beq.n	8001dac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001da0:	2b11      	cmp	r3, #17
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b12      	cmp	r3, #18
 8001daa:	d130      	bne.n	8001e0e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001de2:	2201      	movs	r2, #1
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	f003 0201 	and.w	r2, r3, #1
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	2203      	movs	r2, #3
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0xee>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b12      	cmp	r3, #18
 8001e4c:	d123      	bne.n	8001e96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	08da      	lsrs	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3208      	adds	r2, #8
 8001e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	220f      	movs	r2, #15
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	08da      	lsrs	r2, r3, #3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3208      	adds	r2, #8
 8001e90:	69b9      	ldr	r1, [r7, #24]
 8001e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0203 	and.w	r2, r3, #3
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 80e0 	beq.w	8002098 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed8:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <HAL_GPIO_Init+0x238>)
 8001eda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ede:	4a2e      	ldr	r2, [pc, #184]	; (8001f98 <HAL_GPIO_Init+0x238>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <HAL_GPIO_Init+0x238>)
 8001eea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ef6:	4a29      	ldr	r2, [pc, #164]	; (8001f9c <HAL_GPIO_Init+0x23c>)
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	3302      	adds	r3, #2
 8001efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a20      	ldr	r2, [pc, #128]	; (8001fa0 <HAL_GPIO_Init+0x240>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d052      	beq.n	8001fc8 <HAL_GPIO_Init+0x268>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a1f      	ldr	r2, [pc, #124]	; (8001fa4 <HAL_GPIO_Init+0x244>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d031      	beq.n	8001f8e <HAL_GPIO_Init+0x22e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a1e      	ldr	r2, [pc, #120]	; (8001fa8 <HAL_GPIO_Init+0x248>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d02b      	beq.n	8001f8a <HAL_GPIO_Init+0x22a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <HAL_GPIO_Init+0x24c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d025      	beq.n	8001f86 <HAL_GPIO_Init+0x226>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <HAL_GPIO_Init+0x250>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01f      	beq.n	8001f82 <HAL_GPIO_Init+0x222>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a1b      	ldr	r2, [pc, #108]	; (8001fb4 <HAL_GPIO_Init+0x254>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d019      	beq.n	8001f7e <HAL_GPIO_Init+0x21e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a1a      	ldr	r2, [pc, #104]	; (8001fb8 <HAL_GPIO_Init+0x258>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0x21a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a19      	ldr	r2, [pc, #100]	; (8001fbc <HAL_GPIO_Init+0x25c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00d      	beq.n	8001f76 <HAL_GPIO_Init+0x216>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <HAL_GPIO_Init+0x260>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <HAL_GPIO_Init+0x212>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a17      	ldr	r2, [pc, #92]	; (8001fc4 <HAL_GPIO_Init+0x264>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_GPIO_Init+0x20e>
 8001f6a:	2309      	movs	r3, #9
 8001f6c:	e02d      	b.n	8001fca <HAL_GPIO_Init+0x26a>
 8001f6e:	230a      	movs	r3, #10
 8001f70:	e02b      	b.n	8001fca <HAL_GPIO_Init+0x26a>
 8001f72:	2308      	movs	r3, #8
 8001f74:	e029      	b.n	8001fca <HAL_GPIO_Init+0x26a>
 8001f76:	2307      	movs	r3, #7
 8001f78:	e027      	b.n	8001fca <HAL_GPIO_Init+0x26a>
 8001f7a:	2306      	movs	r3, #6
 8001f7c:	e025      	b.n	8001fca <HAL_GPIO_Init+0x26a>
 8001f7e:	2305      	movs	r3, #5
 8001f80:	e023      	b.n	8001fca <HAL_GPIO_Init+0x26a>
 8001f82:	2304      	movs	r3, #4
 8001f84:	e021      	b.n	8001fca <HAL_GPIO_Init+0x26a>
 8001f86:	2303      	movs	r3, #3
 8001f88:	e01f      	b.n	8001fca <HAL_GPIO_Init+0x26a>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e01d      	b.n	8001fca <HAL_GPIO_Init+0x26a>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e01b      	b.n	8001fca <HAL_GPIO_Init+0x26a>
 8001f92:	bf00      	nop
 8001f94:	58000080 	.word	0x58000080
 8001f98:	58024400 	.word	0x58024400
 8001f9c:	58000400 	.word	0x58000400
 8001fa0:	58020000 	.word	0x58020000
 8001fa4:	58020400 	.word	0x58020400
 8001fa8:	58020800 	.word	0x58020800
 8001fac:	58020c00 	.word	0x58020c00
 8001fb0:	58021000 	.word	0x58021000
 8001fb4:	58021400 	.word	0x58021400
 8001fb8:	58021800 	.word	0x58021800
 8001fbc:	58021c00 	.word	0x58021c00
 8001fc0:	58022000 	.word	0x58022000
 8001fc4:	58022400 	.word	0x58022400
 8001fc8:	2300      	movs	r3, #0
 8001fca:	69fa      	ldr	r2, [r7, #28]
 8001fcc:	f002 0203 	and.w	r2, r2, #3
 8001fd0:	0092      	lsls	r2, r2, #2
 8001fd2:	4093      	lsls	r3, r2
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fda:	4938      	ldr	r1, [pc, #224]	; (80020bc <HAL_GPIO_Init+0x35c>)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800203c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800206a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	3301      	adds	r3, #1
 800209c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f47f ae63 	bne.w	8001d74 <HAL_GPIO_Init+0x14>
  }
}
 80020ae:	bf00      	nop
 80020b0:	3724      	adds	r7, #36	; 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	58000400 	.word	0x58000400

080020c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	807b      	strh	r3, [r7, #2]
 80020cc:	4613      	mov	r3, r2
 80020ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d0:	787b      	ldrb	r3, [r7, #1]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020dc:	e003      	b.n	80020e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020de:	887b      	ldrh	r3, [r7, #2]
 80020e0:	041a      	lsls	r2, r3, #16
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	619a      	str	r2, [r3, #24]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	887b      	ldrh	r3, [r7, #2]
 8002104:	401a      	ands	r2, r3
 8002106:	887b      	ldrh	r3, [r7, #2]
 8002108:	429a      	cmp	r2, r3
 800210a:	d104      	bne.n	8002116 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800210c:	887b      	ldrh	r3, [r7, #2]
 800210e:	041a      	lsls	r2, r3, #16
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002114:	e002      	b.n	800211c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002116:	887a      	ldrh	r2, [r7, #2]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	619a      	str	r2, [r3, #24]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e07f      	b.n	800223a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d106      	bne.n	8002154 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff f9c4 	bl	80014dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2224      	movs	r2, #36	; 0x24
 8002158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002178:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002188:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	e006      	b.n	80021b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d104      	bne.n	80021c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <HAL_I2C_Init+0x11c>)
 80021ce:	430b      	orrs	r3, r1
 80021d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	ea42 0103 	orr.w	r1, r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	021a      	lsls	r2, r3, #8
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69d9      	ldr	r1, [r3, #28]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a1a      	ldr	r2, [r3, #32]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2220      	movs	r2, #32
 8002226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	02008000 	.word	0x02008000

08002248 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af02      	add	r7, sp, #8
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b20      	cmp	r3, #32
 8002262:	f040 80f5 	bne.w	8002450 <HAL_I2C_Slave_Transmit+0x208>
  {
    if ((pData == NULL) || (Size == 0U))
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <HAL_I2C_Slave_Transmit+0x2a>
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002278:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e0e9      	b.n	8002452 <HAL_I2C_Slave_Transmit+0x20a>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_I2C_Slave_Transmit+0x44>
 8002288:	2302      	movs	r3, #2
 800228a:	e0e2      	b.n	8002452 <HAL_I2C_Slave_Transmit+0x20a>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002294:	f7ff fc4a 	bl	8001b2c <HAL_GetTick>
 8002298:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2221      	movs	r2, #33	; 0x21
 800229e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2220      	movs	r2, #32
 80022a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	88fa      	ldrh	r2, [r7, #6]
 80022ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022d0:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2200      	movs	r2, #0
 80022da:	2108      	movs	r1, #8
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 f9df 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022f6:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0aa      	b.n	8002452 <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2208      	movs	r2, #8
 8002302:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d118      	bne.n	800233e <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2200      	movs	r2, #0
 8002314:	2108      	movs	r1, #8
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f9c2 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d009      	beq.n	8002336 <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002330:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e08d      	b.n	8002452 <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2208      	movs	r2, #8
 800233c:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2200      	movs	r2, #0
 8002346:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f9a8 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d02d      	beq.n	80023b2 <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002364:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e073      	b.n	8002452 <HAL_I2C_Slave_Transmit+0x20a>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	6839      	ldr	r1, [r7, #0]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f9d6 	bl	8002720 <I2C_WaitOnTXISFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002388:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e061      	b.n	8002452 <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	781a      	ldrb	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1d6      	bne.n	800236a <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	6839      	ldr	r1, [r7, #0]
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f9ed 	bl	80027a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d011      	beq.n	80023f0 <HAL_I2C_Slave_Transmit+0x1a8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023da:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d103      	bne.n	80023ec <HAL_I2C_Slave_Transmit+0x1a4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	645a      	str	r2, [r3, #68]	; 0x44
 80023ea:	e001      	b.n	80023f0 <HAL_I2C_Slave_Transmit+0x1a8>
      }
      else
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e030      	b.n	8002452 <HAL_I2C_Slave_Transmit+0x20a>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2220      	movs	r2, #32
 80023f6:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	2201      	movs	r2, #1
 8002400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f94b 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d009      	beq.n	8002424 <HAL_I2C_Slave_Transmit+0x1dc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800241e:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e016      	b.n	8002452 <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002432:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	e000      	b.n	8002452 <HAL_I2C_Slave_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002450:	2302      	movs	r3, #2
  }
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b088      	sub	sp, #32
 800245e:	af02      	add	r7, sp, #8
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b20      	cmp	r3, #32
 8002474:	f040 80eb 	bne.w	800264e <HAL_I2C_Slave_Receive+0x1f4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <HAL_I2C_Slave_Receive+0x2a>
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800248a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0df      	b.n	8002650 <HAL_I2C_Slave_Receive+0x1f6>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_I2C_Slave_Receive+0x44>
 800249a:	2302      	movs	r3, #2
 800249c:	e0d8      	b.n	8002650 <HAL_I2C_Slave_Receive+0x1f6>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024a6:	f7ff fb41 	bl	8001b2c <HAL_GetTick>
 80024aa:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2222      	movs	r2, #34	; 0x22
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	88fa      	ldrh	r2, [r7, #6]
 80024cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024e2:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2200      	movs	r2, #0
 80024ec:	2108      	movs	r1, #8
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f8d6 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_I2C_Slave_Receive+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002508:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e0a0      	b.n	8002650 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2208      	movs	r2, #8
 8002514:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2201      	movs	r2, #1
 800251e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f8bc 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d048      	beq.n	80025c0 <HAL_I2C_Slave_Receive+0x166>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800253c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e086      	b.n	8002650 <HAL_I2C_Slave_Receive+0x1f6>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	6839      	ldr	r1, [r7, #0]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 f966 	bl	8002818 <I2C_WaitOnRXNEFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d023      	beq.n	800259a <HAL_I2C_Slave_Receive+0x140>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002560:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b04      	cmp	r3, #4
 800256e:	d112      	bne.n	8002596 <HAL_I2C_Slave_Receive+0x13c>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	3b01      	subs	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	855a      	strh	r2, [r3, #42]	; 0x2a
        }

        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e05a      	b.n	8002650 <HAL_I2C_Slave_Receive+0x1f6>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1bb      	bne.n	8002542 <HAL_I2C_Slave_Receive+0xe8>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	6839      	ldr	r1, [r7, #0]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f8e6 	bl	80027a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <HAL_I2C_Slave_Receive+0x194>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025e8:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e030      	b.n	8002650 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2220      	movs	r2, #32
 80025f4:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f84c 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <HAL_I2C_Slave_Receive+0x1c8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800261c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e016      	b.n	8002650 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002630:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2220      	movs	r2, #32
 8002636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	e000      	b.n	8002650 <HAL_I2C_Slave_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 800264e:	2302      	movs	r3, #2
  }
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b02      	cmp	r3, #2
 800266c:	d103      	bne.n	8002676 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2200      	movs	r2, #0
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d007      	beq.n	8002694 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	619a      	str	r2, [r3, #24]
  }
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b0:	e022      	b.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d01e      	beq.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ba:	f7ff fa37 	bl	8001b2c <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d302      	bcc.n	80026d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d113      	bne.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	f043 0220 	orr.w	r2, r3, #32
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e00f      	b.n	8002718 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4013      	ands	r3, r2
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	429a      	cmp	r2, r3
 8002714:	d0cd      	beq.n	80026b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800272c:	e02c      	b.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f8dc 	bl	80028f0 <I2C_IsAcknowledgeFailed>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e02a      	b.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d01e      	beq.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274a:	f7ff f9ef 	bl	8001b2c <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	429a      	cmp	r2, r3
 8002758:	d302      	bcc.n	8002760 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d113      	bne.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	f043 0220 	orr.w	r2, r3, #32
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e007      	b.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b02      	cmp	r3, #2
 8002794:	d1cb      	bne.n	800272e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027ac:	e028      	b.n	8002800 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f89c 	bl	80028f0 <I2C_IsAcknowledgeFailed>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e026      	b.n	8002810 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c2:	f7ff f9b3 	bl	8001b2c <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d302      	bcc.n	80027d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d113      	bne.n	8002800 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	f043 0220 	orr.w	r2, r3, #32
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e007      	b.n	8002810 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f003 0320 	and.w	r3, r3, #32
 800280a:	2b20      	cmp	r3, #32
 800280c:	d1cf      	bne.n	80027ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002824:	e055      	b.n	80028d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f860 	bl	80028f0 <I2C_IsAcknowledgeFailed>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e053      	b.n	80028e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b20      	cmp	r3, #32
 8002846:	d129      	bne.n	800289c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b04      	cmp	r3, #4
 8002854:	d105      	bne.n	8002862 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	e03f      	b.n	80028e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2220      	movs	r2, #32
 8002868:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002876:	400b      	ands	r3, r1
 8002878:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e022      	b.n	80028e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289c:	f7ff f946 	bl	8001b2c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d302      	bcc.n	80028b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10f      	bne.n	80028d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f043 0220 	orr.w	r2, r3, #32
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e007      	b.n	80028e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d1a2      	bne.n	8002826 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	fe00e800 	.word	0xfe00e800

080028f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b10      	cmp	r3, #16
 8002908:	d151      	bne.n	80029ae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800290a:	e022      	b.n	8002952 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002912:	d01e      	beq.n	8002952 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002914:	f7ff f90a 	bl	8001b2c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	429a      	cmp	r2, r3
 8002922:	d302      	bcc.n	800292a <I2C_IsAcknowledgeFailed+0x3a>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d113      	bne.n	8002952 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	f043 0220 	orr.w	r2, r3, #32
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e02e      	b.n	80029b0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b20      	cmp	r3, #32
 800295e:	d1d5      	bne.n	800290c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2210      	movs	r2, #16
 8002966:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2220      	movs	r2, #32
 800296e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f7ff fe71 	bl	8002658 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <I2C_IsAcknowledgeFailed+0xc8>)
 8002982:	400b      	ands	r3, r1
 8002984:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f043 0204 	orr.w	r2, r3, #4
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	fe00e800 	.word	0xfe00e800

080029bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d138      	bne.n	8002a44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029dc:	2302      	movs	r3, #2
 80029de:	e032      	b.n	8002a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2224      	movs	r2, #36	; 0x24
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6819      	ldr	r1, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	e000      	b.n	8002a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
  }
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d139      	bne.n	8002adc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e033      	b.n	8002ade <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2224      	movs	r2, #36	; 0x24
 8002a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002aa4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	021b      	lsls	r3, r3, #8
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e000      	b.n	8002ade <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
  }
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002aea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aec:	b08f      	sub	sp, #60	; 0x3c
 8002aee:	af0a      	add	r7, sp, #40	; 0x28
 8002af0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e116      	b.n	8002d2a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe fe2c 	bl	8001774 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2203      	movs	r2, #3
 8002b20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d102      	bne.n	8002b36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f005 f95e 	bl	8007dfc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	603b      	str	r3, [r7, #0]
 8002b46:	687e      	ldr	r6, [r7, #4]
 8002b48:	466d      	mov	r5, sp
 8002b4a:	f106 0410 	add.w	r4, r6, #16
 8002b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b5e:	1d33      	adds	r3, r6, #4
 8002b60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b62:	6838      	ldr	r0, [r7, #0]
 8002b64:	f005 f8e8 	bl	8007d38 <USB_CoreInit>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e0d7      	b.n	8002d2a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f005 f94c 	bl	8007e1e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
 8002b8a:	e04a      	b.n	8002c22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	333d      	adds	r3, #61	; 0x3d
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	333c      	adds	r3, #60	; 0x3c
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	b298      	uxth	r0, r3
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3342      	adds	r3, #66	; 0x42
 8002bc8:	4602      	mov	r2, r0
 8002bca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	333f      	adds	r3, #63	; 0x3f
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	3344      	adds	r3, #68	; 0x44
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3348      	adds	r3, #72	; 0x48
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	3350      	adds	r3, #80	; 0x50
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d3af      	bcc.n	8002b8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	e044      	b.n	8002cbc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c48:	7bfa      	ldrb	r2, [r7, #15]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d3b5      	bcc.n	8002c32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	687e      	ldr	r6, [r7, #4]
 8002cce:	466d      	mov	r5, sp
 8002cd0:	f106 0410 	add.w	r4, r6, #16
 8002cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ce0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ce4:	1d33      	adds	r3, r6, #4
 8002ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ce8:	6838      	ldr	r0, [r7, #0]
 8002cea:	f005 f8c3 	bl	8007e74 <USB_DevInit>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e014      	b.n	8002d2a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d102      	bne.n	8002d1e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f80b 	bl	8002d34 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f005 fa65 	bl	80081f2 <USB_DevDisconnect>

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	10000003 	.word	0x10000003

08002d7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <HAL_PWREx_ConfigSupply+0x70>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d00a      	beq.n	8002da6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d90:	4b16      	ldr	r3, [pc, #88]	; (8002dec <HAL_PWREx_ConfigSupply+0x70>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d001      	beq.n	8002da2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e01f      	b.n	8002de2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	e01d      	b.n	8002de2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002da6:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HAL_PWREx_ConfigSupply+0x70>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f023 0207 	bic.w	r2, r3, #7
 8002dae:	490f      	ldr	r1, [pc, #60]	; (8002dec <HAL_PWREx_ConfigSupply+0x70>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002db6:	f7fe feb9 	bl	8001b2c <HAL_GetTick>
 8002dba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dbc:	e009      	b.n	8002dd2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002dbe:	f7fe feb5 	bl	8001b2c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dcc:	d901      	bls.n	8002dd2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e007      	b.n	8002de2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_PWREx_ConfigSupply+0x70>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dde:	d1ee      	bne.n	8002dbe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	58024800 	.word	0x58024800

08002df0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dfe:	60d3      	str	r3, [r2, #12]
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	58024800 	.word	0x58024800

08002e10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08c      	sub	sp, #48	; 0x30
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e3ff      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8087 	beq.w	8002f3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e30:	4b99      	ldr	r3, [pc, #612]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e3a:	4b97      	ldr	r3, [pc, #604]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e42:	2b10      	cmp	r3, #16
 8002e44:	d007      	beq.n	8002e56 <HAL_RCC_OscConfig+0x46>
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	2b18      	cmp	r3, #24
 8002e4a:	d110      	bne.n	8002e6e <HAL_RCC_OscConfig+0x5e>
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d10b      	bne.n	8002e6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e56:	4b90      	ldr	r3, [pc, #576]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d06c      	beq.n	8002f3c <HAL_RCC_OscConfig+0x12c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d168      	bne.n	8002f3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e3d9      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e76:	d106      	bne.n	8002e86 <HAL_RCC_OscConfig+0x76>
 8002e78:	4b87      	ldr	r3, [pc, #540]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a86      	ldr	r2, [pc, #536]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	e02e      	b.n	8002ee4 <HAL_RCC_OscConfig+0xd4>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x98>
 8002e8e:	4b82      	ldr	r3, [pc, #520]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a81      	ldr	r2, [pc, #516]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	4b7f      	ldr	r3, [pc, #508]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a7e      	ldr	r2, [pc, #504]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002ea0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e01d      	b.n	8002ee4 <HAL_RCC_OscConfig+0xd4>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0xbc>
 8002eb2:	4b79      	ldr	r3, [pc, #484]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a78      	ldr	r2, [pc, #480]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b76      	ldr	r3, [pc, #472]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a75      	ldr	r2, [pc, #468]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCC_OscConfig+0xd4>
 8002ecc:	4b72      	ldr	r3, [pc, #456]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a71      	ldr	r2, [pc, #452]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b6f      	ldr	r3, [pc, #444]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a6e      	ldr	r2, [pc, #440]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d013      	beq.n	8002f14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7fe fe1e 	bl	8001b2c <HAL_GetTick>
 8002ef0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fe fe1a 	bl	8001b2c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	; 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e38d      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f06:	4b64      	ldr	r3, [pc, #400]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0xe4>
 8002f12:	e014      	b.n	8002f3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe fe0a 	bl	8001b2c <HAL_GetTick>
 8002f18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fe06 	bl	8001b2c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e379      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f2e:	4b5a      	ldr	r3, [pc, #360]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x10c>
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 80ae 	beq.w	80030a8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f4c:	4b52      	ldr	r3, [pc, #328]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f56:	4b50      	ldr	r3, [pc, #320]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <HAL_RCC_OscConfig+0x162>
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	2b18      	cmp	r3, #24
 8002f66:	d13a      	bne.n	8002fde <HAL_RCC_OscConfig+0x1ce>
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d135      	bne.n	8002fde <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f72:	4b49      	ldr	r3, [pc, #292]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <HAL_RCC_OscConfig+0x17a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e34b      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8a:	f7fe fdfd 	bl	8001b88 <HAL_GetREVID>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	f241 0303 	movw	r3, #4099	; 0x1003
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d817      	bhi.n	8002fc8 <HAL_RCC_OscConfig+0x1b8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	2b40      	cmp	r3, #64	; 0x40
 8002f9e:	d108      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x1a2>
 8002fa0:	4b3d      	ldr	r3, [pc, #244]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002fa8:	4a3b      	ldr	r2, [pc, #236]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fae:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb0:	e07a      	b.n	80030a8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb2:	4b39      	ldr	r3, [pc, #228]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	031b      	lsls	r3, r3, #12
 8002fc0:	4935      	ldr	r1, [pc, #212]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fc6:	e06f      	b.n	80030a8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc8:	4b33      	ldr	r3, [pc, #204]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	4930      	ldr	r1, [pc, #192]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fdc:	e064      	b.n	80030a8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d045      	beq.n	8003072 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fe6:	4b2c      	ldr	r3, [pc, #176]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 0219 	bic.w	r2, r3, #25
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	4929      	ldr	r1, [pc, #164]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fd98 	bl	8001b2c <HAL_GetTick>
 8002ffc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003000:	f7fe fd94 	bl	8001b2c <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e307      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003012:	4b21      	ldr	r3, [pc, #132]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301e:	f7fe fdb3 	bl	8001b88 <HAL_GetREVID>
 8003022:	4602      	mov	r2, r0
 8003024:	f241 0303 	movw	r3, #4099	; 0x1003
 8003028:	429a      	cmp	r2, r3
 800302a:	d817      	bhi.n	800305c <HAL_RCC_OscConfig+0x24c>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	2b40      	cmp	r3, #64	; 0x40
 8003032:	d108      	bne.n	8003046 <HAL_RCC_OscConfig+0x236>
 8003034:	4b18      	ldr	r3, [pc, #96]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800303c:	4a16      	ldr	r2, [pc, #88]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 800303e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003042:	6053      	str	r3, [r2, #4]
 8003044:	e030      	b.n	80030a8 <HAL_RCC_OscConfig+0x298>
 8003046:	4b14      	ldr	r3, [pc, #80]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	031b      	lsls	r3, r3, #12
 8003054:	4910      	ldr	r1, [pc, #64]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
 800305a:	e025      	b.n	80030a8 <HAL_RCC_OscConfig+0x298>
 800305c:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	061b      	lsls	r3, r3, #24
 800306a:	490b      	ldr	r1, [pc, #44]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]
 8003070:	e01a      	b.n	80030a8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a08      	ldr	r2, [pc, #32]	; (8003098 <HAL_RCC_OscConfig+0x288>)
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7fe fd55 	bl	8001b2c <HAL_GetTick>
 8003082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003084:	e00a      	b.n	800309c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003086:	f7fe fd51 	bl	8001b2c <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d903      	bls.n	800309c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e2c4      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
 8003098:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800309c:	4ba4      	ldr	r3, [pc, #656]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1ee      	bne.n	8003086 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80a9 	beq.w	8003208 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030b6:	4b9e      	ldr	r3, [pc, #632]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030c0:	4b9b      	ldr	r3, [pc, #620]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d007      	beq.n	80030dc <HAL_RCC_OscConfig+0x2cc>
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2b18      	cmp	r3, #24
 80030d0:	d13a      	bne.n	8003148 <HAL_RCC_OscConfig+0x338>
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d135      	bne.n	8003148 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030dc:	4b94      	ldr	r3, [pc, #592]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_OscConfig+0x2e4>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	2b80      	cmp	r3, #128	; 0x80
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e296      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030f4:	f7fe fd48 	bl	8001b88 <HAL_GetREVID>
 80030f8:	4602      	mov	r2, r0
 80030fa:	f241 0303 	movw	r3, #4099	; 0x1003
 80030fe:	429a      	cmp	r2, r3
 8003100:	d817      	bhi.n	8003132 <HAL_RCC_OscConfig+0x322>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	2b20      	cmp	r3, #32
 8003108:	d108      	bne.n	800311c <HAL_RCC_OscConfig+0x30c>
 800310a:	4b89      	ldr	r3, [pc, #548]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003112:	4a87      	ldr	r2, [pc, #540]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 8003114:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003118:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800311a:	e075      	b.n	8003208 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800311c:	4b84      	ldr	r3, [pc, #528]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	069b      	lsls	r3, r3, #26
 800312a:	4981      	ldr	r1, [pc, #516]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003130:	e06a      	b.n	8003208 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003132:	4b7f      	ldr	r3, [pc, #508]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	061b      	lsls	r3, r3, #24
 8003140:	497b      	ldr	r1, [pc, #492]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 8003142:	4313      	orrs	r3, r2
 8003144:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003146:	e05f      	b.n	8003208 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d042      	beq.n	80031d6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003150:	4b77      	ldr	r3, [pc, #476]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a76      	ldr	r2, [pc, #472]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 8003156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe fce6 	bl	8001b2c <HAL_GetTick>
 8003160:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003164:	f7fe fce2 	bl	8001b2c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e255      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003176:	4b6e      	ldr	r3, [pc, #440]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003182:	f7fe fd01 	bl	8001b88 <HAL_GetREVID>
 8003186:	4602      	mov	r2, r0
 8003188:	f241 0303 	movw	r3, #4099	; 0x1003
 800318c:	429a      	cmp	r2, r3
 800318e:	d817      	bhi.n	80031c0 <HAL_RCC_OscConfig+0x3b0>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	2b20      	cmp	r3, #32
 8003196:	d108      	bne.n	80031aa <HAL_RCC_OscConfig+0x39a>
 8003198:	4b65      	ldr	r3, [pc, #404]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80031a0:	4a63      	ldr	r2, [pc, #396]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 80031a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031a6:	6053      	str	r3, [r2, #4]
 80031a8:	e02e      	b.n	8003208 <HAL_RCC_OscConfig+0x3f8>
 80031aa:	4b61      	ldr	r3, [pc, #388]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	069b      	lsls	r3, r3, #26
 80031b8:	495d      	ldr	r1, [pc, #372]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	604b      	str	r3, [r1, #4]
 80031be:	e023      	b.n	8003208 <HAL_RCC_OscConfig+0x3f8>
 80031c0:	4b5b      	ldr	r3, [pc, #364]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	061b      	lsls	r3, r3, #24
 80031ce:	4958      	ldr	r1, [pc, #352]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60cb      	str	r3, [r1, #12]
 80031d4:	e018      	b.n	8003208 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80031d6:	4b56      	ldr	r3, [pc, #344]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a55      	ldr	r2, [pc, #340]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 80031dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e2:	f7fe fca3 	bl	8001b2c <HAL_GetTick>
 80031e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80031ea:	f7fe fc9f 	bl	8001b2c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e212      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031fc:	4b4c      	ldr	r3, [pc, #304]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f0      	bne.n	80031ea <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d036      	beq.n	8003282 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d019      	beq.n	8003250 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800321c:	4b44      	ldr	r3, [pc, #272]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 800321e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003220:	4a43      	ldr	r2, [pc, #268]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003228:	f7fe fc80 	bl	8001b2c <HAL_GetTick>
 800322c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003230:	f7fe fc7c 	bl	8001b2c <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e1ef      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003242:	4b3b      	ldr	r3, [pc, #236]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 8003244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x420>
 800324e:	e018      	b.n	8003282 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003250:	4b37      	ldr	r3, [pc, #220]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 8003252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003254:	4a36      	ldr	r2, [pc, #216]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 8003256:	f023 0301 	bic.w	r3, r3, #1
 800325a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325c:	f7fe fc66 	bl	8001b2c <HAL_GetTick>
 8003260:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003264:	f7fe fc62 	bl	8001b2c <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e1d5      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003276:	4b2e      	ldr	r3, [pc, #184]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 8003278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d036      	beq.n	80032fc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d019      	beq.n	80032ca <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003296:	4b26      	ldr	r3, [pc, #152]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a25      	ldr	r2, [pc, #148]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 800329c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032a2:	f7fe fc43 	bl	8001b2c <HAL_GetTick>
 80032a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80032aa:	f7fe fc3f 	bl	8001b2c <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e1b2      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032bc:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x49a>
 80032c8:	e018      	b.n	80032fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032ca:	4b19      	ldr	r3, [pc, #100]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a18      	ldr	r2, [pc, #96]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 80032d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032d6:	f7fe fc29 	bl	8001b2c <HAL_GetTick>
 80032da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80032de:	f7fe fc25 	bl	8001b2c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e198      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032f0:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_RCC_OscConfig+0x520>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1f0      	bne.n	80032de <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8085 	beq.w	8003414 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800330a:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <HAL_RCC_OscConfig+0x524>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a09      	ldr	r2, [pc, #36]	; (8003334 <HAL_RCC_OscConfig+0x524>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003314:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003316:	f7fe fc09 	bl	8001b2c <HAL_GetTick>
 800331a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800331c:	e00c      	b.n	8003338 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800331e:	f7fe fc05 	bl	8001b2c <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b64      	cmp	r3, #100	; 0x64
 800332a:	d905      	bls.n	8003338 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e178      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
 8003330:	58024400 	.word	0x58024400
 8003334:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003338:	4b96      	ldr	r3, [pc, #600]	; (8003594 <HAL_RCC_OscConfig+0x784>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0ec      	beq.n	800331e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d106      	bne.n	800335a <HAL_RCC_OscConfig+0x54a>
 800334c:	4b92      	ldr	r3, [pc, #584]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	4a91      	ldr	r2, [pc, #580]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6713      	str	r3, [r2, #112]	; 0x70
 8003358:	e02d      	b.n	80033b6 <HAL_RCC_OscConfig+0x5a6>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0x56c>
 8003362:	4b8d      	ldr	r3, [pc, #564]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	4a8c      	ldr	r2, [pc, #560]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003368:	f023 0301 	bic.w	r3, r3, #1
 800336c:	6713      	str	r3, [r2, #112]	; 0x70
 800336e:	4b8a      	ldr	r3, [pc, #552]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	4a89      	ldr	r2, [pc, #548]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003374:	f023 0304 	bic.w	r3, r3, #4
 8003378:	6713      	str	r3, [r2, #112]	; 0x70
 800337a:	e01c      	b.n	80033b6 <HAL_RCC_OscConfig+0x5a6>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b05      	cmp	r3, #5
 8003382:	d10c      	bne.n	800339e <HAL_RCC_OscConfig+0x58e>
 8003384:	4b84      	ldr	r3, [pc, #528]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003388:	4a83      	ldr	r2, [pc, #524]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 800338a:	f043 0304 	orr.w	r3, r3, #4
 800338e:	6713      	str	r3, [r2, #112]	; 0x70
 8003390:	4b81      	ldr	r3, [pc, #516]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	4a80      	ldr	r2, [pc, #512]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6713      	str	r3, [r2, #112]	; 0x70
 800339c:	e00b      	b.n	80033b6 <HAL_RCC_OscConfig+0x5a6>
 800339e:	4b7e      	ldr	r3, [pc, #504]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	4a7d      	ldr	r2, [pc, #500]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 80033a4:	f023 0301 	bic.w	r3, r3, #1
 80033a8:	6713      	str	r3, [r2, #112]	; 0x70
 80033aa:	4b7b      	ldr	r3, [pc, #492]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	4a7a      	ldr	r2, [pc, #488]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 80033b0:	f023 0304 	bic.w	r3, r3, #4
 80033b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d015      	beq.n	80033ea <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033be:	f7fe fbb5 	bl	8001b2c <HAL_GetTick>
 80033c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033c4:	e00a      	b.n	80033dc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c6:	f7fe fbb1 	bl	8001b2c <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e122      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033dc:	4b6e      	ldr	r3, [pc, #440]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0ee      	beq.n	80033c6 <HAL_RCC_OscConfig+0x5b6>
 80033e8:	e014      	b.n	8003414 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ea:	f7fe fb9f 	bl	8001b2c <HAL_GetTick>
 80033ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7fe fb9b 	bl	8001b2c <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e10c      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003408:	4b63      	ldr	r3, [pc, #396]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ee      	bne.n	80033f2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8101 	beq.w	8003620 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800341e:	4b5e      	ldr	r3, [pc, #376]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003426:	2b18      	cmp	r3, #24
 8003428:	f000 80bc 	beq.w	80035a4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	2b02      	cmp	r3, #2
 8003432:	f040 8095 	bne.w	8003560 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003436:	4b58      	ldr	r3, [pc, #352]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a57      	ldr	r2, [pc, #348]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 800343c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003442:	f7fe fb73 	bl	8001b2c <HAL_GetTick>
 8003446:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344a:	f7fe fb6f 	bl	8001b2c <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e0e2      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800345c:	4b4e      	ldr	r3, [pc, #312]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f0      	bne.n	800344a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003468:	4b4b      	ldr	r3, [pc, #300]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 800346a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800346c:	4b4b      	ldr	r3, [pc, #300]	; (800359c <HAL_RCC_OscConfig+0x78c>)
 800346e:	4013      	ands	r3, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003478:	0112      	lsls	r2, r2, #4
 800347a:	430a      	orrs	r2, r1
 800347c:	4946      	ldr	r1, [pc, #280]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 800347e:	4313      	orrs	r3, r2
 8003480:	628b      	str	r3, [r1, #40]	; 0x28
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	3b01      	subs	r3, #1
 8003488:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003490:	3b01      	subs	r3, #1
 8003492:	025b      	lsls	r3, r3, #9
 8003494:	b29b      	uxth	r3, r3
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349c:	3b01      	subs	r3, #1
 800349e:	041b      	lsls	r3, r3, #16
 80034a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034aa:	3b01      	subs	r3, #1
 80034ac:	061b      	lsls	r3, r3, #24
 80034ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80034b2:	4939      	ldr	r1, [pc, #228]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80034b8:	4b37      	ldr	r3, [pc, #220]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	4a36      	ldr	r2, [pc, #216]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 80034be:	f023 0301 	bic.w	r3, r3, #1
 80034c2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034c4:	4b34      	ldr	r3, [pc, #208]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 80034c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034c8:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <HAL_RCC_OscConfig+0x790>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034d0:	00d2      	lsls	r2, r2, #3
 80034d2:	4931      	ldr	r1, [pc, #196]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80034d8:	4b2f      	ldr	r3, [pc, #188]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	f023 020c 	bic.w	r2, r3, #12
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	492c      	ldr	r1, [pc, #176]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034ea:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	f023 0202 	bic.w	r2, r3, #2
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	4928      	ldr	r1, [pc, #160]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034fc:	4b26      	ldr	r3, [pc, #152]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	4a25      	ldr	r2, [pc, #148]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003508:	4b23      	ldr	r3, [pc, #140]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	4a22      	ldr	r2, [pc, #136]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 800350e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003514:	4b20      	ldr	r3, [pc, #128]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 800351a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800351e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003520:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	4a1c      	ldr	r2, [pc, #112]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800352c:	4b1a      	ldr	r3, [pc, #104]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a19      	ldr	r2, [pc, #100]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fe faf8 	bl	8001b2c <HAL_GetTick>
 800353c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003540:	f7fe faf4 	bl	8001b2c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e067      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003552:	4b11      	ldr	r3, [pc, #68]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0x730>
 800355e:	e05f      	b.n	8003620 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003560:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a0c      	ldr	r2, [pc, #48]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800356a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fe fade 	bl	8001b2c <HAL_GetTick>
 8003570:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003574:	f7fe fada 	bl	8001b2c <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e04d      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003586:	4b04      	ldr	r3, [pc, #16]	; (8003598 <HAL_RCC_OscConfig+0x788>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x764>
 8003592:	e045      	b.n	8003620 <HAL_RCC_OscConfig+0x810>
 8003594:	58024800 	.word	0x58024800
 8003598:	58024400 	.word	0x58024400
 800359c:	fffffc0c 	.word	0xfffffc0c
 80035a0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80035a4:	4b21      	ldr	r3, [pc, #132]	; (800362c <HAL_RCC_OscConfig+0x81c>)
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <HAL_RCC_OscConfig+0x81c>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d031      	beq.n	800361c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f003 0203 	and.w	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d12a      	bne.n	800361c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d122      	bne.n	800361c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d11a      	bne.n	800361c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	0a5b      	lsrs	r3, r3, #9
 80035ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d111      	bne.n	800361c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	0c1b      	lsrs	r3, r3, #16
 80035fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003606:	429a      	cmp	r2, r3
 8003608:	d108      	bne.n	800361c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	0e1b      	lsrs	r3, r3, #24
 800360e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003616:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3730      	adds	r7, #48	; 0x30
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	58024400 	.word	0x58024400

08003630 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e19c      	b.n	800397e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003644:	4b8a      	ldr	r3, [pc, #552]	; (8003870 <HAL_RCC_ClockConfig+0x240>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d910      	bls.n	8003674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003652:	4b87      	ldr	r3, [pc, #540]	; (8003870 <HAL_RCC_ClockConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 020f 	bic.w	r2, r3, #15
 800365a:	4985      	ldr	r1, [pc, #532]	; (8003870 <HAL_RCC_ClockConfig+0x240>)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	4313      	orrs	r3, r2
 8003660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b83      	ldr	r3, [pc, #524]	; (8003870 <HAL_RCC_ClockConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e184      	b.n	800397e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d010      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	4b7b      	ldr	r3, [pc, #492]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800368c:	429a      	cmp	r2, r3
 800368e:	d908      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003690:	4b78      	ldr	r3, [pc, #480]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	4975      	ldr	r1, [pc, #468]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d010      	beq.n	80036d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	4b70      	ldr	r3, [pc, #448]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d908      	bls.n	80036d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036be:	4b6d      	ldr	r3, [pc, #436]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	496a      	ldr	r1, [pc, #424]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d010      	beq.n	80036fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699a      	ldr	r2, [r3, #24]
 80036e0:	4b64      	ldr	r3, [pc, #400]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d908      	bls.n	80036fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036ec:	4b61      	ldr	r3, [pc, #388]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	495e      	ldr	r1, [pc, #376]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d010      	beq.n	800372c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69da      	ldr	r2, [r3, #28]
 800370e:	4b59      	ldr	r3, [pc, #356]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003716:	429a      	cmp	r2, r3
 8003718:	d908      	bls.n	800372c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800371a:	4b56      	ldr	r3, [pc, #344]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	4953      	ldr	r1, [pc, #332]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 8003728:	4313      	orrs	r3, r2
 800372a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d010      	beq.n	800375a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	4b4d      	ldr	r3, [pc, #308]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	429a      	cmp	r2, r3
 8003746:	d908      	bls.n	800375a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003748:	4b4a      	ldr	r3, [pc, #296]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f023 020f 	bic.w	r2, r3, #15
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4947      	ldr	r1, [pc, #284]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 8003756:	4313      	orrs	r3, r2
 8003758:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d055      	beq.n	8003812 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003766:	4b43      	ldr	r3, [pc, #268]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	4940      	ldr	r1, [pc, #256]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 8003774:	4313      	orrs	r3, r2
 8003776:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d107      	bne.n	8003790 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003780:	4b3c      	ldr	r3, [pc, #240]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d121      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0f6      	b.n	800397e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d107      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003798:	4b36      	ldr	r3, [pc, #216]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d115      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0ea      	b.n	800397e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037b0:	4b30      	ldr	r3, [pc, #192]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d109      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0de      	b.n	800397e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037c0:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0d6      	b.n	800397e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037d0:	4b28      	ldr	r3, [pc, #160]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f023 0207 	bic.w	r2, r3, #7
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	4925      	ldr	r1, [pc, #148]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e2:	f7fe f9a3 	bl	8001b2c <HAL_GetTick>
 80037e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e8:	e00a      	b.n	8003800 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ea:	f7fe f99f 	bl	8001b2c <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e0be      	b.n	800397e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003800:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	429a      	cmp	r2, r3
 8003810:	d1eb      	bne.n	80037ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d010      	beq.n	8003840 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	4b14      	ldr	r3, [pc, #80]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	429a      	cmp	r2, r3
 800382c:	d208      	bcs.n	8003840 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382e:	4b11      	ldr	r3, [pc, #68]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f023 020f 	bic.w	r2, r3, #15
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	490e      	ldr	r1, [pc, #56]	; (8003874 <HAL_RCC_ClockConfig+0x244>)
 800383c:	4313      	orrs	r3, r2
 800383e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <HAL_RCC_ClockConfig+0x240>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d214      	bcs.n	8003878 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384e:	4b08      	ldr	r3, [pc, #32]	; (8003870 <HAL_RCC_ClockConfig+0x240>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 020f 	bic.w	r2, r3, #15
 8003856:	4906      	ldr	r1, [pc, #24]	; (8003870 <HAL_RCC_ClockConfig+0x240>)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385e:	4b04      	ldr	r3, [pc, #16]	; (8003870 <HAL_RCC_ClockConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d005      	beq.n	8003878 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e086      	b.n	800397e <HAL_RCC_ClockConfig+0x34e>
 8003870:	52002000 	.word	0x52002000
 8003874:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d010      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	4b3f      	ldr	r3, [pc, #252]	; (8003988 <HAL_RCC_ClockConfig+0x358>)
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003890:	429a      	cmp	r2, r3
 8003892:	d208      	bcs.n	80038a6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003894:	4b3c      	ldr	r3, [pc, #240]	; (8003988 <HAL_RCC_ClockConfig+0x358>)
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	4939      	ldr	r1, [pc, #228]	; (8003988 <HAL_RCC_ClockConfig+0x358>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d010      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	4b34      	ldr	r3, [pc, #208]	; (8003988 <HAL_RCC_ClockConfig+0x358>)
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038be:	429a      	cmp	r2, r3
 80038c0:	d208      	bcs.n	80038d4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038c2:	4b31      	ldr	r3, [pc, #196]	; (8003988 <HAL_RCC_ClockConfig+0x358>)
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	492e      	ldr	r1, [pc, #184]	; (8003988 <HAL_RCC_ClockConfig+0x358>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d010      	beq.n	8003902 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699a      	ldr	r2, [r3, #24]
 80038e4:	4b28      	ldr	r3, [pc, #160]	; (8003988 <HAL_RCC_ClockConfig+0x358>)
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d208      	bcs.n	8003902 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038f0:	4b25      	ldr	r3, [pc, #148]	; (8003988 <HAL_RCC_ClockConfig+0x358>)
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	4922      	ldr	r1, [pc, #136]	; (8003988 <HAL_RCC_ClockConfig+0x358>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d010      	beq.n	8003930 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69da      	ldr	r2, [r3, #28]
 8003912:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <HAL_RCC_ClockConfig+0x358>)
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800391a:	429a      	cmp	r2, r3
 800391c:	d208      	bcs.n	8003930 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800391e:	4b1a      	ldr	r3, [pc, #104]	; (8003988 <HAL_RCC_ClockConfig+0x358>)
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	4917      	ldr	r1, [pc, #92]	; (8003988 <HAL_RCC_ClockConfig+0x358>)
 800392c:	4313      	orrs	r3, r2
 800392e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003930:	f000 f834 	bl	800399c <HAL_RCC_GetSysClockFreq>
 8003934:	4601      	mov	r1, r0
 8003936:	4b14      	ldr	r3, [pc, #80]	; (8003988 <HAL_RCC_ClockConfig+0x358>)
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	0a1b      	lsrs	r3, r3, #8
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	4a12      	ldr	r2, [pc, #72]	; (800398c <HAL_RCC_ClockConfig+0x35c>)
 8003942:	5cd3      	ldrb	r3, [r2, r3]
 8003944:	f003 031f 	and.w	r3, r3, #31
 8003948:	fa21 f303 	lsr.w	r3, r1, r3
 800394c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800394e:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <HAL_RCC_ClockConfig+0x358>)
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	4a0d      	ldr	r2, [pc, #52]	; (800398c <HAL_RCC_ClockConfig+0x35c>)
 8003958:	5cd3      	ldrb	r3, [r2, r3]
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	fa22 f303 	lsr.w	r3, r2, r3
 8003964:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <HAL_RCC_ClockConfig+0x360>)
 8003966:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003968:	4a0a      	ldr	r2, [pc, #40]	; (8003994 <HAL_RCC_ClockConfig+0x364>)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800396e:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <HAL_RCC_ClockConfig+0x368>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7fd ff56 	bl	8001824 <HAL_InitTick>
 8003978:	4603      	mov	r3, r0
 800397a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800397c:	7bfb      	ldrb	r3, [r7, #15]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	58024400 	.word	0x58024400
 800398c:	0800c134 	.word	0x0800c134
 8003990:	24000004 	.word	0x24000004
 8003994:	24000000 	.word	0x24000000
 8003998:	24000008 	.word	0x24000008

0800399c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800399c:	b480      	push	{r7}
 800399e:	b089      	sub	sp, #36	; 0x24
 80039a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039a2:	4baf      	ldr	r3, [pc, #700]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039aa:	2b18      	cmp	r3, #24
 80039ac:	f200 814e 	bhi.w	8003c4c <HAL_RCC_GetSysClockFreq+0x2b0>
 80039b0:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	08003a1d 	.word	0x08003a1d
 80039bc:	08003c4d 	.word	0x08003c4d
 80039c0:	08003c4d 	.word	0x08003c4d
 80039c4:	08003c4d 	.word	0x08003c4d
 80039c8:	08003c4d 	.word	0x08003c4d
 80039cc:	08003c4d 	.word	0x08003c4d
 80039d0:	08003c4d 	.word	0x08003c4d
 80039d4:	08003c4d 	.word	0x08003c4d
 80039d8:	08003a43 	.word	0x08003a43
 80039dc:	08003c4d 	.word	0x08003c4d
 80039e0:	08003c4d 	.word	0x08003c4d
 80039e4:	08003c4d 	.word	0x08003c4d
 80039e8:	08003c4d 	.word	0x08003c4d
 80039ec:	08003c4d 	.word	0x08003c4d
 80039f0:	08003c4d 	.word	0x08003c4d
 80039f4:	08003c4d 	.word	0x08003c4d
 80039f8:	08003a49 	.word	0x08003a49
 80039fc:	08003c4d 	.word	0x08003c4d
 8003a00:	08003c4d 	.word	0x08003c4d
 8003a04:	08003c4d 	.word	0x08003c4d
 8003a08:	08003c4d 	.word	0x08003c4d
 8003a0c:	08003c4d 	.word	0x08003c4d
 8003a10:	08003c4d 	.word	0x08003c4d
 8003a14:	08003c4d 	.word	0x08003c4d
 8003a18:	08003a4f 	.word	0x08003a4f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a1c:	4b90      	ldr	r3, [pc, #576]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d009      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a28:	4b8d      	ldr	r3, [pc, #564]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	08db      	lsrs	r3, r3, #3
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	4a8c      	ldr	r2, [pc, #560]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
 8003a38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003a3a:	e10a      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a3c:	4b89      	ldr	r3, [pc, #548]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003a3e:	61bb      	str	r3, [r7, #24]
    break;
 8003a40:	e107      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003a42:	4b89      	ldr	r3, [pc, #548]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003a44:	61bb      	str	r3, [r7, #24]
    break;
 8003a46:	e104      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003a48:	4b88      	ldr	r3, [pc, #544]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003a4a:	61bb      	str	r3, [r7, #24]
    break;
 8003a4c:	e101      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a4e:	4b84      	ldr	r3, [pc, #528]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003a58:	4b81      	ldr	r3, [pc, #516]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a62:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a64:	4b7e      	ldr	r3, [pc, #504]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003a6e:	4b7c      	ldr	r3, [pc, #496]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a72:	08db      	lsrs	r3, r3, #3
 8003a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	fb02 f303 	mul.w	r3, r2, r3
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a86:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 80da 	beq.w	8003c46 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d05a      	beq.n	8003b4e <HAL_RCC_GetSysClockFreq+0x1b2>
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d302      	bcc.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x106>
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d078      	beq.n	8003b92 <HAL_RCC_GetSysClockFreq+0x1f6>
 8003aa0:	e099      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003aa2:	4b6f      	ldr	r3, [pc, #444]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d02d      	beq.n	8003b0a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003aae:	4b6c      	ldr	r3, [pc, #432]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	08db      	lsrs	r3, r3, #3
 8003ab4:	f003 0303 	and.w	r3, r3, #3
 8003ab8:	4a6a      	ldr	r2, [pc, #424]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003aba:	fa22 f303 	lsr.w	r3, r2, r3
 8003abe:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	ee07 3a90 	vmov	s15, r3
 8003ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ad8:	4b61      	ldr	r3, [pc, #388]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae0:	ee07 3a90 	vmov	s15, r3
 8003ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ae8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aec:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003c70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003af0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003af4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003af8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003afc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b04:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003b08:	e087      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	ee07 3a90 	vmov	s15, r3
 8003b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b14:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003c74 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003b18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b1c:	4b50      	ldr	r3, [pc, #320]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b30:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003c70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003b34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b4c:	e065      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	ee07 3a90 	vmov	s15, r3
 8003b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b58:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003c78 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003b5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b60:	4b3f      	ldr	r3, [pc, #252]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b68:	ee07 3a90 	vmov	s15, r3
 8003b6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b70:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b74:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003c70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003b78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b90:	e043      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	ee07 3a90 	vmov	s15, r3
 8003b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b9c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003c7c <HAL_RCC_GetSysClockFreq+0x2e0>
 8003ba0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ba4:	4b2e      	ldr	r3, [pc, #184]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bac:	ee07 3a90 	vmov	s15, r3
 8003bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bb8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003c70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003bbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bd4:	e021      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	ee07 3a90 	vmov	s15, r3
 8003bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003c78 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003be4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003be8:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf0:	ee07 3a90 	vmov	s15, r3
 8003bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bf8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bfc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003c70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003c00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c18:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003c1a:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	0a5b      	lsrs	r3, r3, #9
 8003c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c24:	3301      	adds	r3, #1
 8003c26:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c32:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c3e:	ee17 3a90 	vmov	r3, s15
 8003c42:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003c44:	e005      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61bb      	str	r3, [r7, #24]
    break;
 8003c4a:	e002      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003c4c:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003c4e:	61bb      	str	r3, [r7, #24]
    break;
 8003c50:	bf00      	nop
  }

  return sysclockfreq;
 8003c52:	69bb      	ldr	r3, [r7, #24]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3724      	adds	r7, #36	; 0x24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	58024400 	.word	0x58024400
 8003c64:	03d09000 	.word	0x03d09000
 8003c68:	003d0900 	.word	0x003d0900
 8003c6c:	007a1200 	.word	0x007a1200
 8003c70:	46000000 	.word	0x46000000
 8003c74:	4c742400 	.word	0x4c742400
 8003c78:	4a742400 	.word	0x4a742400
 8003c7c:	4af42400 	.word	0x4af42400

08003c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003c86:	f7ff fe89 	bl	800399c <HAL_RCC_GetSysClockFreq>
 8003c8a:	4601      	mov	r1, r0
 8003c8c:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	0a1b      	lsrs	r3, r3, #8
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	4a0f      	ldr	r2, [pc, #60]	; (8003cd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c98:	5cd3      	ldrb	r3, [r2, r3]
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	fa21 f303 	lsr.w	r3, r1, r3
 8003ca2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003cae:	5cd3      	ldrb	r3, [r2, r3]
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cba:	4a07      	ldr	r2, [pc, #28]	; (8003cd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cbe:	4a07      	ldr	r2, [pc, #28]	; (8003cdc <HAL_RCC_GetHCLKFreq+0x5c>)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	58024400 	.word	0x58024400
 8003cd4:	0800c134 	.word	0x0800c134
 8003cd8:	24000004 	.word	0x24000004
 8003cdc:	24000000 	.word	0x24000000

08003ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003ce4:	f7ff ffcc 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003ce8:	4601      	mov	r1, r0
 8003cea:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cf6:	5cd3      	ldrb	r3, [r2, r3]
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	58024400 	.word	0x58024400
 8003d08:	0800c134 	.word	0x0800c134

08003d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003d10:	f7ff ffb6 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003d14:	4601      	mov	r1, r0
 8003d16:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	4a04      	ldr	r2, [pc, #16]	; (8003d34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d22:	5cd3      	ldrb	r3, [r2, r3]
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	58024400 	.word	0x58024400
 8003d34:	0800c134 	.word	0x0800c134

08003d38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	223f      	movs	r2, #63	; 0x3f
 8003d46:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d48:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <HAL_RCC_GetClockConfig+0x7c>)
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f003 0207 	and.w	r2, r3, #7
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003d54:	4b17      	ldr	r3, [pc, #92]	; (8003db4 <HAL_RCC_GetClockConfig+0x7c>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003d60:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <HAL_RCC_GetClockConfig+0x7c>)
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	f003 020f 	and.w	r2, r3, #15
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003d6c:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <HAL_RCC_GetClockConfig+0x7c>)
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003d78:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <HAL_RCC_GetClockConfig+0x7c>)
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003d84:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_RCC_GetClockConfig+0x7c>)
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003d90:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <HAL_RCC_GetClockConfig+0x7c>)
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <HAL_RCC_GetClockConfig+0x80>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 020f 	and.w	r2, r3, #15
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	601a      	str	r2, [r3, #0]
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	58024400 	.word	0x58024400
 8003db8:	52002000 	.word	0x52002000

08003dbc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dc8:	2300      	movs	r3, #0
 8003dca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d03d      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de0:	d013      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de6:	d802      	bhi.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003dec:	e01f      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003dee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003df2:	d013      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003df4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003df8:	d01c      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003dfa:	e018      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dfc:	4baf      	ldr	r3, [pc, #700]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	4aae      	ldr	r2, [pc, #696]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003e08:	e015      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	2102      	movs	r1, #2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 f96f 	bl	80050f4 <RCCEx_PLL2_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003e1a:	e00c      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3324      	adds	r3, #36	; 0x24
 8003e20:	2102      	movs	r1, #2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f001 fa18 	bl	8005258 <RCCEx_PLL3_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003e2c:	e003      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	75fb      	strb	r3, [r7, #23]
      break;
 8003e32:	e000      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d109      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e3c:	4b9f      	ldr	r3, [pc, #636]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e48:	499c      	ldr	r1, [pc, #624]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	650b      	str	r3, [r1, #80]	; 0x50
 8003e4e:	e001      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
 8003e52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d03d      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d826      	bhi.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003e68:	a201      	add	r2, pc, #4	; (adr r2, 8003e70 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6e:	bf00      	nop
 8003e70:	08003e85 	.word	0x08003e85
 8003e74:	08003e93 	.word	0x08003e93
 8003e78:	08003ea5 	.word	0x08003ea5
 8003e7c:	08003ebd 	.word	0x08003ebd
 8003e80:	08003ebd 	.word	0x08003ebd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e84:	4b8d      	ldr	r3, [pc, #564]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	4a8c      	ldr	r2, [pc, #560]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e90:	e015      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3304      	adds	r3, #4
 8003e96:	2100      	movs	r1, #0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 f92b 	bl	80050f4 <RCCEx_PLL2_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ea2:	e00c      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3324      	adds	r3, #36	; 0x24
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f001 f9d4 	bl	8005258 <RCCEx_PLL3_Config>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003eb4:	e003      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eba:	e000      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003ebc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ebe:	7dfb      	ldrb	r3, [r7, #23]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d109      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ec4:	4b7d      	ldr	r3, [pc, #500]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec8:	f023 0207 	bic.w	r2, r3, #7
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed0:	497a      	ldr	r1, [pc, #488]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	650b      	str	r3, [r1, #80]	; 0x50
 8003ed6:	e001      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d03e      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eec:	2b80      	cmp	r3, #128	; 0x80
 8003eee:	d01c      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003ef0:	2b80      	cmp	r3, #128	; 0x80
 8003ef2:	d804      	bhi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003ef8:	2b40      	cmp	r3, #64	; 0x40
 8003efa:	d00d      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003efc:	e01e      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003efe:	2bc0      	cmp	r3, #192	; 0xc0
 8003f00:	d01f      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f06:	d01e      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003f08:	e018      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f0a:	4b6c      	ldr	r3, [pc, #432]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	4a6b      	ldr	r2, [pc, #428]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003f16:	e017      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f001 f8e8 	bl	80050f4 <RCCEx_PLL2_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003f28:	e00e      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3324      	adds	r3, #36	; 0x24
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 f991 	bl	8005258 <RCCEx_PLL3_Config>
 8003f36:	4603      	mov	r3, r0
 8003f38:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003f3a:	e005      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f40:	e002      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003f42:	bf00      	nop
 8003f44:	e000      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f48:	7dfb      	ldrb	r3, [r7, #23]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003f4e:	4b5b      	ldr	r3, [pc, #364]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f52:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5a:	4958      	ldr	r1, [pc, #352]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	650b      	str	r3, [r1, #80]	; 0x50
 8003f60:	e001      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
 8003f64:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d044      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f7c:	d01f      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f82:	d805      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003f88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f8c:	d00e      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003f8e:	e01f      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003f90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f94:	d01f      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003f96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f9a:	d01e      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003f9c:	e018      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f9e:	4b47      	ldr	r3, [pc, #284]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	4a46      	ldr	r2, [pc, #280]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003faa:	e017      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f001 f89e 	bl	80050f4 <RCCEx_PLL2_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003fbc:	e00e      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3324      	adds	r3, #36	; 0x24
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 f947 	bl	8005258 <RCCEx_PLL3_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fce:	e005      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd4:	e002      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e000      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003fe2:	4b36      	ldr	r3, [pc, #216]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ff0:	4932      	ldr	r1, [pc, #200]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	658b      	str	r3, [r1, #88]	; 0x58
 8003ff6:	e001      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004004:	2b00      	cmp	r3, #0
 8004006:	d044      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800400e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004012:	d01f      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004014:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004018:	d805      	bhi.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800401e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004022:	d00e      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004024:	e01f      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004026:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800402a:	d01f      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800402c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004030:	d01e      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004032:	e018      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004034:	4b21      	ldr	r3, [pc, #132]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	4a20      	ldr	r2, [pc, #128]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800403a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004040:	e017      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3304      	adds	r3, #4
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f001 f853 	bl	80050f4 <RCCEx_PLL2_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004052:	e00e      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3324      	adds	r3, #36	; 0x24
 8004058:	2100      	movs	r1, #0
 800405a:	4618      	mov	r0, r3
 800405c:	f001 f8fc 	bl	8005258 <RCCEx_PLL3_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004064:	e005      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	75fb      	strb	r3, [r7, #23]
      break;
 800406a:	e002      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800406c:	bf00      	nop
 800406e:	e000      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004072:	7dfb      	ldrb	r3, [r7, #23]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004078:	4b10      	ldr	r3, [pc, #64]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004086:	490d      	ldr	r1, [pc, #52]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004088:	4313      	orrs	r3, r2
 800408a:	658b      	str	r3, [r1, #88]	; 0x58
 800408c:	e001      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d035      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a2:	2b10      	cmp	r3, #16
 80040a4:	d00c      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80040a6:	2b10      	cmp	r3, #16
 80040a8:	d802      	bhi.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01b      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80040ae:	e017      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d00c      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x312>
 80040b4:	2b30      	cmp	r3, #48	; 0x30
 80040b6:	d018      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80040b8:	e012      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80040ba:	bf00      	nop
 80040bc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c0:	4baf      	ldr	r3, [pc, #700]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	4aae      	ldr	r2, [pc, #696]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80040cc:	e00e      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3304      	adds	r3, #4
 80040d2:	2102      	movs	r1, #2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f001 f80d 	bl	80050f4 <RCCEx_PLL2_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80040de:	e005      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	75fb      	strb	r3, [r7, #23]
      break;
 80040e4:	e002      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80040e6:	bf00      	nop
 80040e8:	e000      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80040ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80040f2:	4ba3      	ldr	r3, [pc, #652]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fe:	49a0      	ldr	r1, [pc, #640]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004100:	4313      	orrs	r3, r2
 8004102:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004104:	e001      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004106:	7dfb      	ldrb	r3, [r7, #23]
 8004108:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d042      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411e:	d01f      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004124:	d805      	bhi.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800412a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412e:	d00e      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004130:	e01f      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004132:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004136:	d01f      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004138:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800413c:	d01e      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800413e:	e018      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004140:	4b8f      	ldr	r3, [pc, #572]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	4a8e      	ldr	r2, [pc, #568]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800414a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800414c:	e017      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3304      	adds	r3, #4
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f000 ffcd 	bl	80050f4 <RCCEx_PLL2_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800415e:	e00e      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3324      	adds	r3, #36	; 0x24
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f001 f876 	bl	8005258 <RCCEx_PLL3_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004170:	e005      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	75fb      	strb	r3, [r7, #23]
      break;
 8004176:	e002      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004178:	bf00      	nop
 800417a:	e000      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800417c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800417e:	7dfb      	ldrb	r3, [r7, #23]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d109      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004184:	4b7e      	ldr	r3, [pc, #504]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004188:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004190:	497b      	ldr	r1, [pc, #492]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004192:	4313      	orrs	r3, r2
 8004194:	650b      	str	r3, [r1, #80]	; 0x50
 8004196:	e001      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004198:	7dfb      	ldrb	r3, [r7, #23]
 800419a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d042      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041b0:	d01b      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80041b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041b6:	d805      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d022      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80041bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80041c2:	e01b      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x440>
 80041c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041c8:	d01d      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80041ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041ce:	d01c      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80041d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041d4:	d01b      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x452>
 80041d6:	e011      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3304      	adds	r3, #4
 80041dc:	2101      	movs	r1, #1
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 ff88 	bl	80050f4 <RCCEx_PLL2_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80041e8:	e012      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3324      	adds	r3, #36	; 0x24
 80041ee:	2101      	movs	r1, #1
 80041f0:	4618      	mov	r0, r3
 80041f2:	f001 f831 	bl	8005258 <RCCEx_PLL3_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80041fa:	e009      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004200:	e006      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004202:	bf00      	nop
 8004204:	e004      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004206:	bf00      	nop
 8004208:	e002      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800420a:	bf00      	nop
 800420c:	e000      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800420e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004210:	7dfb      	ldrb	r3, [r7, #23]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004216:	4b5a      	ldr	r3, [pc, #360]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004222:	4957      	ldr	r1, [pc, #348]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004224:	4313      	orrs	r3, r2
 8004226:	650b      	str	r3, [r1, #80]	; 0x50
 8004228:	e001      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422a:	7dfb      	ldrb	r3, [r7, #23]
 800422c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d044      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004244:	d01b      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800424a:	d805      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d022      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004250:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004254:	d00a      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004256:	e01b      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425c:	d01d      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800425e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004262:	d01c      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004264:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004268:	d01b      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800426a:	e011      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3304      	adds	r3, #4
 8004270:	2101      	movs	r1, #1
 8004272:	4618      	mov	r0, r3
 8004274:	f000 ff3e 	bl	80050f4 <RCCEx_PLL2_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800427c:	e012      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3324      	adds	r3, #36	; 0x24
 8004282:	2101      	movs	r1, #1
 8004284:	4618      	mov	r0, r3
 8004286:	f000 ffe7 	bl	8005258 <RCCEx_PLL3_Config>
 800428a:	4603      	mov	r3, r0
 800428c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800428e:	e009      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	75fb      	strb	r3, [r7, #23]
      break;
 8004294:	e006      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004296:	bf00      	nop
 8004298:	e004      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800429a:	bf00      	nop
 800429c:	e002      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800429e:	bf00      	nop
 80042a0:	e000      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80042a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10a      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80042aa:	4b35      	ldr	r3, [pc, #212]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042b8:	4931      	ldr	r1, [pc, #196]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	658b      	str	r3, [r1, #88]	; 0x58
 80042be:	e001      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c0:	7dfb      	ldrb	r3, [r7, #23]
 80042c2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d02d      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042d8:	d005      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80042da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042de:	d009      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d013      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x550>
 80042e4:	e00f      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e6:	4b26      	ldr	r3, [pc, #152]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ea:	4a25      	ldr	r2, [pc, #148]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80042f2:	e00c      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3304      	adds	r3, #4
 80042f8:	2101      	movs	r1, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fefa 	bl	80050f4 <RCCEx_PLL2_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004304:	e003      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	75fb      	strb	r3, [r7, #23]
      break;
 800430a:	e000      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800430c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800430e:	7dfb      	ldrb	r3, [r7, #23]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d109      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004314:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004318:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004320:	4917      	ldr	r1, [pc, #92]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004322:	4313      	orrs	r3, r2
 8004324:	650b      	str	r3, [r1, #80]	; 0x50
 8004326:	e001      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d035      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433c:	2b03      	cmp	r3, #3
 800433e:	d81b      	bhi.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004340:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004346:	bf00      	nop
 8004348:	08004385 	.word	0x08004385
 800434c:	08004359 	.word	0x08004359
 8004350:	08004367 	.word	0x08004367
 8004354:	08004385 	.word	0x08004385
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	4a08      	ldr	r2, [pc, #32]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800435e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004362:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004364:	e00f      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3304      	adds	r3, #4
 800436a:	2102      	movs	r1, #2
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fec1 	bl	80050f4 <RCCEx_PLL2_Config>
 8004372:	4603      	mov	r3, r0
 8004374:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004376:	e006      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	75fb      	strb	r3, [r7, #23]
      break;
 800437c:	e003      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800437e:	bf00      	nop
 8004380:	58024400 	.word	0x58024400
      break;
 8004384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004386:	7dfb      	ldrb	r3, [r7, #23]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d109      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800438c:	4bba      	ldr	r3, [pc, #744]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800438e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004390:	f023 0203 	bic.w	r2, r3, #3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004398:	49b7      	ldr	r1, [pc, #732]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800439a:	4313      	orrs	r3, r2
 800439c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800439e:	e001      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
 80043a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 8086 	beq.w	80044be <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043b2:	4bb2      	ldr	r3, [pc, #712]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4ab1      	ldr	r2, [pc, #708]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80043b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043be:	f7fd fbb5 	bl	8001b2c <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043c4:	e009      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c6:	f7fd fbb1 	bl	8001b2c <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b64      	cmp	r3, #100	; 0x64
 80043d2:	d902      	bls.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	75fb      	strb	r3, [r7, #23]
        break;
 80043d8:	e005      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043da:	4ba8      	ldr	r3, [pc, #672]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0ef      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80043e6:	7dfb      	ldrb	r3, [r7, #23]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d166      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80043ec:	4ba2      	ldr	r3, [pc, #648]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043f6:	4053      	eors	r3, r2
 80043f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d013      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004400:	4b9d      	ldr	r3, [pc, #628]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004408:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800440a:	4b9b      	ldr	r3, [pc, #620]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	4a9a      	ldr	r2, [pc, #616]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004414:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004416:	4b98      	ldr	r3, [pc, #608]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	4a97      	ldr	r2, [pc, #604]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800441c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004420:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004422:	4a95      	ldr	r2, [pc, #596]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800442e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004432:	d115      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fd fb7a 	bl	8001b2c <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800443a:	e00b      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443c:	f7fd fb76 	bl	8001b2c <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	; 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d902      	bls.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	75fb      	strb	r3, [r7, #23]
            break;
 8004452:	e005      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004454:	4b88      	ldr	r3, [pc, #544]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0ed      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004460:	7dfb      	ldrb	r3, [r7, #23]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d126      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800446c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004470:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004474:	d10d      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004476:	4b80      	ldr	r3, [pc, #512]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004484:	0919      	lsrs	r1, r3, #4
 8004486:	4b7e      	ldr	r3, [pc, #504]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004488:	400b      	ands	r3, r1
 800448a:	497b      	ldr	r1, [pc, #492]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800448c:	4313      	orrs	r3, r2
 800448e:	610b      	str	r3, [r1, #16]
 8004490:	e005      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004492:	4b79      	ldr	r3, [pc, #484]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	4a78      	ldr	r2, [pc, #480]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004498:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800449c:	6113      	str	r3, [r2, #16]
 800449e:	4b76      	ldr	r3, [pc, #472]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ac:	4972      	ldr	r1, [pc, #456]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	670b      	str	r3, [r1, #112]	; 0x70
 80044b2:	e004      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
 80044b6:	75bb      	strb	r3, [r7, #22]
 80044b8:	e001      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
 80044bc:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d07d      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ce:	2b28      	cmp	r3, #40	; 0x28
 80044d0:	d866      	bhi.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80044d2:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80044d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d8:	080045a7 	.word	0x080045a7
 80044dc:	080045a1 	.word	0x080045a1
 80044e0:	080045a1 	.word	0x080045a1
 80044e4:	080045a1 	.word	0x080045a1
 80044e8:	080045a1 	.word	0x080045a1
 80044ec:	080045a1 	.word	0x080045a1
 80044f0:	080045a1 	.word	0x080045a1
 80044f4:	080045a1 	.word	0x080045a1
 80044f8:	0800457d 	.word	0x0800457d
 80044fc:	080045a1 	.word	0x080045a1
 8004500:	080045a1 	.word	0x080045a1
 8004504:	080045a1 	.word	0x080045a1
 8004508:	080045a1 	.word	0x080045a1
 800450c:	080045a1 	.word	0x080045a1
 8004510:	080045a1 	.word	0x080045a1
 8004514:	080045a1 	.word	0x080045a1
 8004518:	0800458f 	.word	0x0800458f
 800451c:	080045a1 	.word	0x080045a1
 8004520:	080045a1 	.word	0x080045a1
 8004524:	080045a1 	.word	0x080045a1
 8004528:	080045a1 	.word	0x080045a1
 800452c:	080045a1 	.word	0x080045a1
 8004530:	080045a1 	.word	0x080045a1
 8004534:	080045a1 	.word	0x080045a1
 8004538:	080045a7 	.word	0x080045a7
 800453c:	080045a1 	.word	0x080045a1
 8004540:	080045a1 	.word	0x080045a1
 8004544:	080045a1 	.word	0x080045a1
 8004548:	080045a1 	.word	0x080045a1
 800454c:	080045a1 	.word	0x080045a1
 8004550:	080045a1 	.word	0x080045a1
 8004554:	080045a1 	.word	0x080045a1
 8004558:	080045a7 	.word	0x080045a7
 800455c:	080045a1 	.word	0x080045a1
 8004560:	080045a1 	.word	0x080045a1
 8004564:	080045a1 	.word	0x080045a1
 8004568:	080045a1 	.word	0x080045a1
 800456c:	080045a1 	.word	0x080045a1
 8004570:	080045a1 	.word	0x080045a1
 8004574:	080045a1 	.word	0x080045a1
 8004578:	080045a7 	.word	0x080045a7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3304      	adds	r3, #4
 8004580:	2101      	movs	r1, #1
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fdb6 	bl	80050f4 <RCCEx_PLL2_Config>
 8004588:	4603      	mov	r3, r0
 800458a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800458c:	e00c      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3324      	adds	r3, #36	; 0x24
 8004592:	2101      	movs	r1, #1
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fe5f 	bl	8005258 <RCCEx_PLL3_Config>
 800459a:	4603      	mov	r3, r0
 800459c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800459e:	e003      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	75fb      	strb	r3, [r7, #23]
      break;
 80045a4:	e000      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80045a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045ae:	4b32      	ldr	r3, [pc, #200]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ba:	492f      	ldr	r1, [pc, #188]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	654b      	str	r3, [r1, #84]	; 0x54
 80045c0:	e001      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c2:	7dfb      	ldrb	r3, [r7, #23]
 80045c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d037      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d6:	2b05      	cmp	r3, #5
 80045d8:	d820      	bhi.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x860>
 80045da:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80045dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e0:	08004623 	.word	0x08004623
 80045e4:	080045f9 	.word	0x080045f9
 80045e8:	0800460b 	.word	0x0800460b
 80045ec:	08004623 	.word	0x08004623
 80045f0:	08004623 	.word	0x08004623
 80045f4:	08004623 	.word	0x08004623
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	2101      	movs	r1, #1
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fd78 	bl	80050f4 <RCCEx_PLL2_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004608:	e00c      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3324      	adds	r3, #36	; 0x24
 800460e:	2101      	movs	r1, #1
 8004610:	4618      	mov	r0, r3
 8004612:	f000 fe21 	bl	8005258 <RCCEx_PLL3_Config>
 8004616:	4603      	mov	r3, r0
 8004618:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800461a:	e003      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	75fb      	strb	r3, [r7, #23]
      break;
 8004620:	e000      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004624:	7dfb      	ldrb	r3, [r7, #23]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d109      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800462a:	4b13      	ldr	r3, [pc, #76]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800462c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462e:	f023 0207 	bic.w	r2, r3, #7
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004636:	4910      	ldr	r1, [pc, #64]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004638:	4313      	orrs	r3, r2
 800463a:	654b      	str	r3, [r1, #84]	; 0x54
 800463c:	e001      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463e:	7dfb      	ldrb	r3, [r7, #23]
 8004640:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0304 	and.w	r3, r3, #4
 800464a:	2b00      	cmp	r3, #0
 800464c:	d040      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004654:	2b05      	cmp	r3, #5
 8004656:	d827      	bhi.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004658:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465e:	bf00      	nop
 8004660:	080046af 	.word	0x080046af
 8004664:	08004685 	.word	0x08004685
 8004668:	08004697 	.word	0x08004697
 800466c:	080046af 	.word	0x080046af
 8004670:	080046af 	.word	0x080046af
 8004674:	080046af 	.word	0x080046af
 8004678:	58024400 	.word	0x58024400
 800467c:	58024800 	.word	0x58024800
 8004680:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3304      	adds	r3, #4
 8004688:	2101      	movs	r1, #1
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fd32 	bl	80050f4 <RCCEx_PLL2_Config>
 8004690:	4603      	mov	r3, r0
 8004692:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004694:	e00c      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3324      	adds	r3, #36	; 0x24
 800469a:	2101      	movs	r1, #1
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fddb 	bl	8005258 <RCCEx_PLL3_Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80046a6:	e003      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	75fb      	strb	r3, [r7, #23]
      break;
 80046ac:	e000      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80046ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046b6:	4bb2      	ldr	r3, [pc, #712]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80046b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ba:	f023 0207 	bic.w	r2, r3, #7
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c4:	49ae      	ldr	r1, [pc, #696]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	658b      	str	r3, [r1, #88]	; 0x58
 80046ca:	e001      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046cc:	7dfb      	ldrb	r3, [r7, #23]
 80046ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d044      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046e6:	d01b      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80046e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ec:	d805      	bhi.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d022      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80046f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046f6:	d00a      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x952>
 80046f8:	e01b      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80046fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fe:	d01d      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004704:	d01c      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004706:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800470a:	d01b      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800470c:	e011      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3304      	adds	r3, #4
 8004712:	2100      	movs	r1, #0
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fced 	bl	80050f4 <RCCEx_PLL2_Config>
 800471a:	4603      	mov	r3, r0
 800471c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800471e:	e012      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3324      	adds	r3, #36	; 0x24
 8004724:	2102      	movs	r1, #2
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fd96 	bl	8005258 <RCCEx_PLL3_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004730:	e009      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	75fb      	strb	r3, [r7, #23]
      break;
 8004736:	e006      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004738:	bf00      	nop
 800473a:	e004      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800473c:	bf00      	nop
 800473e:	e002      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004740:	bf00      	nop
 8004742:	e000      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004746:	7dfb      	ldrb	r3, [r7, #23]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800474c:	4b8c      	ldr	r3, [pc, #560]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800474e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004750:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800475a:	4989      	ldr	r1, [pc, #548]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800475c:	4313      	orrs	r3, r2
 800475e:	654b      	str	r3, [r1, #84]	; 0x54
 8004760:	e001      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004762:	7dfb      	ldrb	r3, [r7, #23]
 8004764:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d044      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800477c:	d01b      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800477e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004782:	d805      	bhi.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004784:	2b00      	cmp	r3, #0
 8004786:	d022      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800478e:	e01b      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004794:	d01d      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004796:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800479a:	d01c      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800479c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047a0:	d01b      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80047a2:	e011      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	2100      	movs	r1, #0
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fca2 	bl	80050f4 <RCCEx_PLL2_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80047b4:	e012      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3324      	adds	r3, #36	; 0x24
 80047ba:	2102      	movs	r1, #2
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fd4b 	bl	8005258 <RCCEx_PLL3_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80047c6:	e009      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	75fb      	strb	r3, [r7, #23]
      break;
 80047cc:	e006      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80047ce:	bf00      	nop
 80047d0:	e004      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80047d2:	bf00      	nop
 80047d4:	e002      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80047d6:	bf00      	nop
 80047d8:	e000      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80047da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047e2:	4b67      	ldr	r3, [pc, #412]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80047e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047f0:	4963      	ldr	r1, [pc, #396]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	658b      	str	r3, [r1, #88]	; 0x58
 80047f6:	e001      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f8:	7dfb      	ldrb	r3, [r7, #23]
 80047fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004804:	2b00      	cmp	r3, #0
 8004806:	d044      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800480e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004812:	d01b      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004818:	d805      	bhi.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d022      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800481e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004824:	e01b      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8004826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800482a:	d01d      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800482c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004830:	d01c      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8004832:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004836:	d01b      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004838:	e011      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3304      	adds	r3, #4
 800483e:	2100      	movs	r1, #0
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fc57 	bl	80050f4 <RCCEx_PLL2_Config>
 8004846:	4603      	mov	r3, r0
 8004848:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800484a:	e012      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3324      	adds	r3, #36	; 0x24
 8004850:	2102      	movs	r1, #2
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fd00 	bl	8005258 <RCCEx_PLL3_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800485c:	e009      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	75fb      	strb	r3, [r7, #23]
      break;
 8004862:	e006      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004864:	bf00      	nop
 8004866:	e004      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004868:	bf00      	nop
 800486a:	e002      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800486c:	bf00      	nop
 800486e:	e000      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004872:	7dfb      	ldrb	r3, [r7, #23]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004878:	4b41      	ldr	r3, [pc, #260]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800487a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004886:	493e      	ldr	r1, [pc, #248]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004888:	4313      	orrs	r3, r2
 800488a:	658b      	str	r3, [r1, #88]	; 0x58
 800488c:	e001      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488e:	7dfb      	ldrb	r3, [r7, #23]
 8004890:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d01a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a8:	d10a      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3324      	adds	r3, #36	; 0x24
 80048ae:	2102      	movs	r1, #2
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fcd1 	bl	8005258 <RCCEx_PLL3_Config>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80048c0:	4b2f      	ldr	r3, [pc, #188]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80048c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ce:	492c      	ldr	r1, [pc, #176]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ea:	d10a      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3324      	adds	r3, #36	; 0x24
 80048f0:	2102      	movs	r1, #2
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fcb0 	bl	8005258 <RCCEx_PLL3_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004902:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004906:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004910:	491b      	ldr	r1, [pc, #108]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004912:	4313      	orrs	r3, r2
 8004914:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d032      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492c:	d00d      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800492e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004932:	d016      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8004934:	2b00      	cmp	r3, #0
 8004936:	d111      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fbd8 	bl	80050f4 <RCCEx_PLL2_Config>
 8004944:	4603      	mov	r3, r0
 8004946:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004948:	e00c      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3324      	adds	r3, #36	; 0x24
 800494e:	2102      	movs	r1, #2
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fc81 	bl	8005258 <RCCEx_PLL3_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800495a:	e003      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	75fb      	strb	r3, [r7, #23]
      break;
 8004960:	e000      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8004962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004964:	7dfb      	ldrb	r3, [r7, #23]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10c      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004978:	4901      	ldr	r1, [pc, #4]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800497a:	4313      	orrs	r3, r2
 800497c:	658b      	str	r3, [r1, #88]	; 0x58
 800497e:	e003      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004980:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004984:	7dfb      	ldrb	r3, [r7, #23]
 8004986:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d02f      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800499e:	d00c      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80049a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049a4:	d015      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80049a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049aa:	d10f      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ac:	4b79      	ldr	r3, [pc, #484]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	4a78      	ldr	r2, [pc, #480]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80049b8:	e00c      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3324      	adds	r3, #36	; 0x24
 80049be:	2101      	movs	r1, #1
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fc49 	bl	8005258 <RCCEx_PLL3_Config>
 80049c6:	4603      	mov	r3, r0
 80049c8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80049ca:	e003      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	75fb      	strb	r3, [r7, #23]
      break;
 80049d0:	e000      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80049d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10a      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049da:	4b6e      	ldr	r3, [pc, #440]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e8:	496a      	ldr	r1, [pc, #424]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	654b      	str	r3, [r1, #84]	; 0x54
 80049ee:	e001      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f0:	7dfb      	ldrb	r3, [r7, #23]
 80049f2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d029      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0c:	d007      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004a0e:	e00f      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a10:	4b60      	ldr	r3, [pc, #384]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	4a5f      	ldr	r2, [pc, #380]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004a1c:	e00b      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3304      	adds	r3, #4
 8004a22:	2102      	movs	r1, #2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 fb65 	bl	80050f4 <RCCEx_PLL2_Config>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004a2e:	e002      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	75fb      	strb	r3, [r7, #23]
      break;
 8004a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a3c:	4b55      	ldr	r3, [pc, #340]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a48:	4952      	ldr	r1, [pc, #328]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a4e:	e001      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a50:	7dfb      	ldrb	r3, [r7, #23]
 8004a52:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3324      	adds	r3, #36	; 0x24
 8004a64:	2102      	movs	r1, #2
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fbf6 	bl	8005258 <RCCEx_PLL3_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d02f      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a8a:	d00c      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a90:	d802      	bhi.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d011      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8004a96:	e00d      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8004a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a9c:	d00f      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004a9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aa2:	d00e      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004aa4:	e006      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aa6:	4b3b      	ldr	r3, [pc, #236]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	4a3a      	ldr	r2, [pc, #232]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004ab2:	e007      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab8:	e004      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004aba:	bf00      	nop
 8004abc:	e002      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004abe:	bf00      	nop
 8004ac0:	e000      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004ac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ac4:	7dfb      	ldrb	r3, [r7, #23]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d109      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004aca:	4b32      	ldr	r3, [pc, #200]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ace:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ad6:	492f      	ldr	r1, [pc, #188]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	654b      	str	r3, [r1, #84]	; 0x54
 8004adc:	e001      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ade:	7dfb      	ldrb	r3, [r7, #23]
 8004ae0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d008      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004aee:	4b29      	ldr	r3, [pc, #164]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afa:	4926      	ldr	r1, [pc, #152]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d009      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b0c:	4b21      	ldr	r3, [pc, #132]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b1a:	491e      	ldr	r1, [pc, #120]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b2c:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b38:	4916      	ldr	r1, [pc, #88]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00d      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b4a:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	4a11      	ldr	r2, [pc, #68]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b54:	6113      	str	r3, [r2, #16]
 8004b56:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004b60:	490c      	ldr	r1, [pc, #48]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	da08      	bge.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7a:	4906      	ldr	r1, [pc, #24]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004b80:	7dbb      	ldrb	r3, [r7, #22]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	e000      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	58024400 	.word	0x58024400

08004b98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b9c:	f7ff f870 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8004ba0:	4601      	mov	r1, r0
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	091b      	lsrs	r3, r3, #4
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004bae:	5cd3      	ldrb	r3, [r2, r3]
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	58024400 	.word	0x58024400
 8004bc0:	0800c134 	.word	0x0800c134

08004bc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b089      	sub	sp, #36	; 0x24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bcc:	4b9d      	ldr	r3, [pc, #628]	; (8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004bd6:	4b9b      	ldr	r3, [pc, #620]	; (8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	0b1b      	lsrs	r3, r3, #12
 8004bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004be0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004be2:	4b98      	ldr	r3, [pc, #608]	; (8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	091b      	lsrs	r3, r3, #4
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004bee:	4b95      	ldr	r3, [pc, #596]	; (8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf2:	08db      	lsrs	r3, r3, #3
 8004bf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	fb02 f303 	mul.w	r3, r2, r3
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 810a 	beq.w	8004e26 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d05a      	beq.n	8004cce <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d302      	bcc.n	8004c22 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d078      	beq.n	8004d12 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004c20:	e099      	b.n	8004d56 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c22:	4b88      	ldr	r3, [pc, #544]	; (8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d02d      	beq.n	8004c8a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c2e:	4b85      	ldr	r3, [pc, #532]	; (8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	08db      	lsrs	r3, r3, #3
 8004c34:	f003 0303 	and.w	r3, r3, #3
 8004c38:	4a83      	ldr	r2, [pc, #524]	; (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c58:	4b7a      	ldr	r3, [pc, #488]	; (8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c60:	ee07 3a90 	vmov	s15, r3
 8004c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c68:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c6c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004e4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004c70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c84:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004c88:	e087      	b.n	8004d9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	ee07 3a90 	vmov	s15, r3
 8004c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c94:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9c:	4b69      	ldr	r3, [pc, #420]	; (8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca4:	ee07 3a90 	vmov	s15, r3
 8004ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cac:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cb0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004e4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ccc:	e065      	b.n	8004d9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	ee07 3a90 	vmov	s15, r3
 8004cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce0:	4b58      	ldr	r3, [pc, #352]	; (8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce8:	ee07 3a90 	vmov	s15, r3
 8004cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf0:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cf4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004e4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d10:	e043      	b.n	8004d9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	ee07 3a90 	vmov	s15, r3
 8004d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004e58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d24:	4b47      	ldr	r3, [pc, #284]	; (8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2c:	ee07 3a90 	vmov	s15, r3
 8004d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d34:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d38:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004e4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d54:	e021      	b.n	8004d9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	ee07 3a90 	vmov	s15, r3
 8004d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d60:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004d64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d68:	4b36      	ldr	r3, [pc, #216]	; (8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d70:	ee07 3a90 	vmov	s15, r3
 8004d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d78:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d7c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004e4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004d80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d98:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004d9a:	4b2a      	ldr	r3, [pc, #168]	; (8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	0a5b      	lsrs	r3, r3, #9
 8004da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da4:	ee07 3a90 	vmov	s15, r3
 8004da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004db0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004db4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc0:	ee17 2a90 	vmov	r2, s15
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004dc8:	4b1e      	ldr	r3, [pc, #120]	; (8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	0c1b      	lsrs	r3, r3, #16
 8004dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dee:	ee17 2a90 	vmov	r2, s15
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004df6:	4b13      	ldr	r3, [pc, #76]	; (8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	0e1b      	lsrs	r3, r3, #24
 8004dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e00:	ee07 3a90 	vmov	s15, r3
 8004e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e1c:	ee17 2a90 	vmov	r2, s15
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e24:	e008      	b.n	8004e38 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	609a      	str	r2, [r3, #8]
}
 8004e38:	bf00      	nop
 8004e3a:	3724      	adds	r7, #36	; 0x24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	58024400 	.word	0x58024400
 8004e48:	03d09000 	.word	0x03d09000
 8004e4c:	46000000 	.word	0x46000000
 8004e50:	4c742400 	.word	0x4c742400
 8004e54:	4a742400 	.word	0x4a742400
 8004e58:	4af42400 	.word	0x4af42400

08004e5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b089      	sub	sp, #36	; 0x24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e64:	4b9d      	ldr	r3, [pc, #628]	; (80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e68:	f003 0303 	and.w	r3, r3, #3
 8004e6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004e6e:	4b9b      	ldr	r3, [pc, #620]	; (80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e72:	0d1b      	lsrs	r3, r3, #20
 8004e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e7a:	4b98      	ldr	r3, [pc, #608]	; (80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	0a1b      	lsrs	r3, r3, #8
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004e86:	4b95      	ldr	r3, [pc, #596]	; (80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8a:	08db      	lsrs	r3, r3, #3
 8004e8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	fb02 f303 	mul.w	r3, r2, r3
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 810a 	beq.w	80050be <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d05a      	beq.n	8004f66 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d302      	bcc.n	8004eba <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d078      	beq.n	8004faa <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004eb8:	e099      	b.n	8004fee <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eba:	4b88      	ldr	r3, [pc, #544]	; (80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d02d      	beq.n	8004f22 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ec6:	4b85      	ldr	r3, [pc, #532]	; (80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	08db      	lsrs	r3, r3, #3
 8004ecc:	f003 0303 	and.w	r3, r3, #3
 8004ed0:	4a83      	ldr	r2, [pc, #524]	; (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	ee07 3a90 	vmov	s15, r3
 8004ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef0:	4b7a      	ldr	r3, [pc, #488]	; (80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef8:	ee07 3a90 	vmov	s15, r3
 8004efc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f00:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f04:	eddf 5a77 	vldr	s11, [pc, #476]	; 80050e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004f08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004f20:	e087      	b.n	8005032 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	ee07 3a90 	vmov	s15, r3
 8004f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80050e8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004f30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f34:	4b69      	ldr	r3, [pc, #420]	; (80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3c:	ee07 3a90 	vmov	s15, r3
 8004f40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f44:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f48:	eddf 5a66 	vldr	s11, [pc, #408]	; 80050e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004f4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f64:	e065      	b.n	8005032 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	ee07 3a90 	vmov	s15, r3
 8004f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f70:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80050ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004f74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f78:	4b58      	ldr	r3, [pc, #352]	; (80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f80:	ee07 3a90 	vmov	s15, r3
 8004f84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f88:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f8c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80050e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004f90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fa8:	e043      	b.n	8005032 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	ee07 3a90 	vmov	s15, r3
 8004fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004fb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fbc:	4b47      	ldr	r3, [pc, #284]	; (80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc4:	ee07 3a90 	vmov	s15, r3
 8004fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fcc:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fd0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80050e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004fd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fe0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fec:	e021      	b.n	8005032 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	ee07 3a90 	vmov	s15, r3
 8004ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80050ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004ffc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005000:	4b36      	ldr	r3, [pc, #216]	; (80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005008:	ee07 3a90 	vmov	s15, r3
 800500c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005010:	ed97 6a03 	vldr	s12, [r7, #12]
 8005014:	eddf 5a33 	vldr	s11, [pc, #204]	; 80050e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005018:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800501c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005020:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005024:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800502c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005030:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005032:	4b2a      	ldr	r3, [pc, #168]	; (80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	0a5b      	lsrs	r3, r3, #9
 8005038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800503c:	ee07 3a90 	vmov	s15, r3
 8005040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005044:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005048:	ee37 7a87 	vadd.f32	s14, s15, s14
 800504c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005058:	ee17 2a90 	vmov	r2, s15
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005060:	4b1e      	ldr	r3, [pc, #120]	; (80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	0c1b      	lsrs	r3, r3, #16
 8005066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005076:	ee37 7a87 	vadd.f32	s14, s15, s14
 800507a:	edd7 6a07 	vldr	s13, [r7, #28]
 800507e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005086:	ee17 2a90 	vmov	r2, s15
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800508e:	4b13      	ldr	r3, [pc, #76]	; (80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	0e1b      	lsrs	r3, r3, #24
 8005094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005098:	ee07 3a90 	vmov	s15, r3
 800509c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80050ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050b4:	ee17 2a90 	vmov	r2, s15
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80050bc:	e008      	b.n	80050d0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	609a      	str	r2, [r3, #8]
}
 80050d0:	bf00      	nop
 80050d2:	3724      	adds	r7, #36	; 0x24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	58024400 	.word	0x58024400
 80050e0:	03d09000 	.word	0x03d09000
 80050e4:	46000000 	.word	0x46000000
 80050e8:	4c742400 	.word	0x4c742400
 80050ec:	4a742400 	.word	0x4a742400
 80050f0:	4af42400 	.word	0x4af42400

080050f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005102:	4b53      	ldr	r3, [pc, #332]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 8005104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	2b03      	cmp	r3, #3
 800510c:	d101      	bne.n	8005112 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e099      	b.n	8005246 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005112:	4b4f      	ldr	r3, [pc, #316]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a4e      	ldr	r2, [pc, #312]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 8005118:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800511c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511e:	f7fc fd05 	bl	8001b2c <HAL_GetTick>
 8005122:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005124:	e008      	b.n	8005138 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005126:	f7fc fd01 	bl	8001b2c <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e086      	b.n	8005246 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005138:	4b45      	ldr	r3, [pc, #276]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1f0      	bne.n	8005126 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005144:	4b42      	ldr	r3, [pc, #264]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	031b      	lsls	r3, r3, #12
 8005152:	493f      	ldr	r1, [pc, #252]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 8005154:	4313      	orrs	r3, r2
 8005156:	628b      	str	r3, [r1, #40]	; 0x28
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	3b01      	subs	r3, #1
 800515e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	3b01      	subs	r3, #1
 8005168:	025b      	lsls	r3, r3, #9
 800516a:	b29b      	uxth	r3, r3
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	3b01      	subs	r3, #1
 8005174:	041b      	lsls	r3, r3, #16
 8005176:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	3b01      	subs	r3, #1
 8005182:	061b      	lsls	r3, r3, #24
 8005184:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005188:	4931      	ldr	r1, [pc, #196]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 800518a:	4313      	orrs	r3, r2
 800518c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800518e:	4b30      	ldr	r3, [pc, #192]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 8005190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005192:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	492d      	ldr	r1, [pc, #180]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 800519c:	4313      	orrs	r3, r2
 800519e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80051a0:	4b2b      	ldr	r3, [pc, #172]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	f023 0220 	bic.w	r2, r3, #32
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	4928      	ldr	r1, [pc, #160]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80051b2:	4b27      	ldr	r3, [pc, #156]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 80051b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b6:	4a26      	ldr	r2, [pc, #152]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 80051b8:	f023 0310 	bic.w	r3, r3, #16
 80051bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80051be:	4b24      	ldr	r3, [pc, #144]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 80051c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051c2:	4b24      	ldr	r3, [pc, #144]	; (8005254 <RCCEx_PLL2_Config+0x160>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	69d2      	ldr	r2, [r2, #28]
 80051ca:	00d2      	lsls	r2, r2, #3
 80051cc:	4920      	ldr	r1, [pc, #128]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80051d2:	4b1f      	ldr	r3, [pc, #124]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d6:	4a1e      	ldr	r2, [pc, #120]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 80051d8:	f043 0310 	orr.w	r3, r3, #16
 80051dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d106      	bne.n	80051f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80051e4:	4b1a      	ldr	r3, [pc, #104]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	4a19      	ldr	r2, [pc, #100]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 80051ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051f0:	e00f      	b.n	8005212 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d106      	bne.n	8005206 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80051f8:	4b15      	ldr	r3, [pc, #84]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	4a14      	ldr	r2, [pc, #80]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 80051fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005202:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005204:	e005      	b.n	8005212 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005206:	4b12      	ldr	r3, [pc, #72]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 8005208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520a:	4a11      	ldr	r2, [pc, #68]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 800520c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005210:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005212:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a0e      	ldr	r2, [pc, #56]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 8005218:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800521c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800521e:	f7fc fc85 	bl	8001b2c <HAL_GetTick>
 8005222:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005224:	e008      	b.n	8005238 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005226:	f7fc fc81 	bl	8001b2c <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e006      	b.n	8005246 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005238:	4b05      	ldr	r3, [pc, #20]	; (8005250 <RCCEx_PLL2_Config+0x15c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0f0      	beq.n	8005226 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	58024400 	.word	0x58024400
 8005254:	ffff0007 	.word	0xffff0007

08005258 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005266:	4b53      	ldr	r3, [pc, #332]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	f003 0303 	and.w	r3, r3, #3
 800526e:	2b03      	cmp	r3, #3
 8005270:	d101      	bne.n	8005276 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e099      	b.n	80053aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005276:	4b4f      	ldr	r3, [pc, #316]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a4e      	ldr	r2, [pc, #312]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 800527c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005282:	f7fc fc53 	bl	8001b2c <HAL_GetTick>
 8005286:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005288:	e008      	b.n	800529c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800528a:	f7fc fc4f 	bl	8001b2c <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e086      	b.n	80053aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800529c:	4b45      	ldr	r3, [pc, #276]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1f0      	bne.n	800528a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80052a8:	4b42      	ldr	r3, [pc, #264]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	051b      	lsls	r3, r3, #20
 80052b6:	493f      	ldr	r1, [pc, #252]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	628b      	str	r3, [r1, #40]	; 0x28
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	025b      	lsls	r3, r3, #9
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	041b      	lsls	r3, r3, #16
 80052da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	061b      	lsls	r3, r3, #24
 80052e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052ec:	4931      	ldr	r1, [pc, #196]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80052f2:	4b30      	ldr	r3, [pc, #192]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	492d      	ldr	r1, [pc, #180]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 8005300:	4313      	orrs	r3, r2
 8005302:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005304:	4b2b      	ldr	r3, [pc, #172]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	4928      	ldr	r1, [pc, #160]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 8005312:	4313      	orrs	r3, r2
 8005314:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005316:	4b27      	ldr	r3, [pc, #156]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 8005318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531a:	4a26      	ldr	r2, [pc, #152]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 800531c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005320:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005322:	4b24      	ldr	r3, [pc, #144]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 8005324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005326:	4b24      	ldr	r3, [pc, #144]	; (80053b8 <RCCEx_PLL3_Config+0x160>)
 8005328:	4013      	ands	r3, r2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	69d2      	ldr	r2, [r2, #28]
 800532e:	00d2      	lsls	r2, r2, #3
 8005330:	4920      	ldr	r1, [pc, #128]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 8005332:	4313      	orrs	r3, r2
 8005334:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005336:	4b1f      	ldr	r3, [pc, #124]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	4a1e      	ldr	r2, [pc, #120]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 800533c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005340:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d106      	bne.n	8005356 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005348:	4b1a      	ldr	r3, [pc, #104]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 800534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534c:	4a19      	ldr	r2, [pc, #100]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 800534e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005352:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005354:	e00f      	b.n	8005376 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d106      	bne.n	800536a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800535c:	4b15      	ldr	r3, [pc, #84]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	4a14      	ldr	r2, [pc, #80]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 8005362:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005366:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005368:	e005      	b.n	8005376 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800536a:	4b12      	ldr	r3, [pc, #72]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	4a11      	ldr	r2, [pc, #68]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 8005370:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005374:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005376:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a0e      	ldr	r2, [pc, #56]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 800537c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005382:	f7fc fbd3 	bl	8001b2c <HAL_GetTick>
 8005386:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005388:	e008      	b.n	800539c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800538a:	f7fc fbcf 	bl	8001b2c <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e006      	b.n	80053aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800539c:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <RCCEx_PLL3_Config+0x15c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0f0      	beq.n	800538a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	58024400 	.word	0x58024400
 80053b8:	ffff0007 	.word	0xffff0007

080053bc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e0e2      	b.n	8005598 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a70      	ldr	r2, [pc, #448]	; (80055a0 <HAL_SPI_Init+0x1e4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00f      	beq.n	8005402 <HAL_SPI_Init+0x46>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a6f      	ldr	r2, [pc, #444]	; (80055a4 <HAL_SPI_Init+0x1e8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00a      	beq.n	8005402 <HAL_SPI_Init+0x46>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a6d      	ldr	r2, [pc, #436]	; (80055a8 <HAL_SPI_Init+0x1ec>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d005      	beq.n	8005402 <HAL_SPI_Init+0x46>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	2b0f      	cmp	r3, #15
 80053fc:	d901      	bls.n	8005402 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e0ca      	b.n	8005598 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f001 f870 	bl	80064e8 <SPI_GetPacketSize>
 8005408:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a64      	ldr	r2, [pc, #400]	; (80055a0 <HAL_SPI_Init+0x1e4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00c      	beq.n	800542e <HAL_SPI_Init+0x72>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a62      	ldr	r2, [pc, #392]	; (80055a4 <HAL_SPI_Init+0x1e8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d007      	beq.n	800542e <HAL_SPI_Init+0x72>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a61      	ldr	r2, [pc, #388]	; (80055a8 <HAL_SPI_Init+0x1ec>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d002      	beq.n	800542e <HAL_SPI_Init+0x72>
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b08      	cmp	r3, #8
 800542c:	d811      	bhi.n	8005452 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005432:	4a5b      	ldr	r2, [pc, #364]	; (80055a0 <HAL_SPI_Init+0x1e4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d009      	beq.n	800544c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a59      	ldr	r2, [pc, #356]	; (80055a4 <HAL_SPI_Init+0x1e8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d004      	beq.n	800544c <HAL_SPI_Init+0x90>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a58      	ldr	r2, [pc, #352]	; (80055a8 <HAL_SPI_Init+0x1ec>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d104      	bne.n	8005456 <HAL_SPI_Init+0x9a>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b10      	cmp	r3, #16
 8005450:	d901      	bls.n	8005456 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e0a0      	b.n	8005598 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7fc f880 	bl	8001570 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0201 	bic.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005490:	d110      	bne.n	80054b4 <HAL_SPI_Init+0xf8>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800549a:	d10b      	bne.n	80054b4 <HAL_SPI_Init+0xf8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d107      	bne.n	80054b4 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054b2:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69da      	ldr	r2, [r3, #28]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	431a      	orrs	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c6:	ea42 0103 	orr.w	r1, r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005514:	ea42 0103 	orr.w	r1, r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d113      	bne.n	8005554 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800553e:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005552:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0201 	bic.w	r2, r2, #1
 8005562:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40013000 	.word	0x40013000
 80055a4:	40003800 	.word	0x40003800
 80055a8:	40003c00 	.word	0x40003c00

080055ac <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08a      	sub	sp, #40	; 0x28
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	4613      	mov	r3, r2
 80055ba:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3320      	adds	r3, #32
 80055c2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_SPI_Transmit+0x2a>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e1d7      	b.n	8005986 <HAL_SPI_Transmit+0x3da>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055de:	f7fc faa5 	bl	8001b2c <HAL_GetTick>
 80055e2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d007      	beq.n	8005600 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80055f0:	2302      	movs	r3, #2
 80055f2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80055fc:	7efb      	ldrb	r3, [r7, #27]
 80055fe:	e1c2      	b.n	8005986 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <HAL_SPI_Transmit+0x60>
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d107      	bne.n	800561c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005618:	7efb      	ldrb	r3, [r7, #27]
 800561a:	e1b4      	b.n	8005986 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2203      	movs	r2, #3
 8005620:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	88fa      	ldrh	r2, [r7, #6]
 8005636:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	88fa      	ldrh	r2, [r7, #6]
 800563e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800566c:	d107      	bne.n	800567e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800567c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	4b96      	ldr	r3, [pc, #600]	; (80058e0 <HAL_SPI_Transmit+0x334>)
 8005686:	4013      	ands	r3, r2
 8005688:	88f9      	ldrh	r1, [r7, #6]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	430b      	orrs	r3, r1
 8005690:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f042 0201 	orr.w	r2, r2, #1
 80056a0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056aa:	d107      	bne.n	80056bc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	2b0f      	cmp	r3, #15
 80056c2:	d947      	bls.n	8005754 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80056c4:	e03f      	b.n	8005746 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d114      	bne.n	80056fe <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6812      	ldr	r2, [r2, #0]
 80056de:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e4:	1d1a      	adds	r2, r3, #4
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80056fc:	e023      	b.n	8005746 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056fe:	f7fc fa15 	bl	8001b2c <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d803      	bhi.n	8005716 <HAL_SPI_Transmit+0x16a>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005714:	d102      	bne.n	800571c <HAL_SPI_Transmit+0x170>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d114      	bne.n	8005746 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 fe15 	bl	800634c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005730:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e11f      	b.n	8005986 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800574c:	b29b      	uxth	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1b9      	bne.n	80056c6 <HAL_SPI_Transmit+0x11a>
 8005752:	e0f2      	b.n	800593a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	2b07      	cmp	r3, #7
 800575a:	f240 80e7 	bls.w	800592c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800575e:	e05d      	b.n	800581c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b02      	cmp	r3, #2
 800576c:	d132      	bne.n	80057d4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b01      	cmp	r3, #1
 8005778:	d918      	bls.n	80057ac <HAL_SPI_Transmit+0x200>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577e:	2b00      	cmp	r3, #0
 8005780:	d014      	beq.n	80057ac <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6812      	ldr	r2, [r2, #0]
 800578c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005792:	1d1a      	adds	r2, r3, #4
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b02      	subs	r3, #2
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80057aa:	e037      	b.n	800581c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b0:	881a      	ldrh	r2, [r3, #0]
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ba:	1c9a      	adds	r2, r3, #2
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80057d2:	e023      	b.n	800581c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057d4:	f7fc f9aa 	bl	8001b2c <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d803      	bhi.n	80057ec <HAL_SPI_Transmit+0x240>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ea:	d102      	bne.n	80057f2 <HAL_SPI_Transmit+0x246>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d114      	bne.n	800581c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 fdaa 	bl	800634c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005806:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e0b4      	b.n	8005986 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005822:	b29b      	uxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d19b      	bne.n	8005760 <HAL_SPI_Transmit+0x1b4>
 8005828:	e087      	b.n	800593a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b02      	cmp	r3, #2
 8005836:	d155      	bne.n	80058e4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b03      	cmp	r3, #3
 8005842:	d918      	bls.n	8005876 <HAL_SPI_Transmit+0x2ca>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005848:	2b40      	cmp	r3, #64	; 0x40
 800584a:	d914      	bls.n	8005876 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6812      	ldr	r2, [r2, #0]
 8005856:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585c:	1d1a      	adds	r2, r3, #4
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005868:	b29b      	uxth	r3, r3
 800586a:	3b04      	subs	r3, #4
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005874:	e05a      	b.n	800592c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b01      	cmp	r3, #1
 8005880:	d917      	bls.n	80058b2 <HAL_SPI_Transmit+0x306>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d013      	beq.n	80058b2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588e:	881a      	ldrh	r2, [r3, #0]
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005898:	1c9a      	adds	r2, r3, #2
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3b02      	subs	r3, #2
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80058b0:	e03c      	b.n	800592c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3320      	adds	r3, #32
 80058bc:	7812      	ldrb	r2, [r2, #0]
 80058be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80058dc:	e026      	b.n	800592c <HAL_SPI_Transmit+0x380>
 80058de:	bf00      	nop
 80058e0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058e4:	f7fc f922 	bl	8001b2c <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d803      	bhi.n	80058fc <HAL_SPI_Transmit+0x350>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fa:	d102      	bne.n	8005902 <HAL_SPI_Transmit+0x356>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d114      	bne.n	800592c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 fd22 	bl	800634c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005916:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e02c      	b.n	8005986 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005932:	b29b      	uxth	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	f47f af78 	bne.w	800582a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2200      	movs	r2, #0
 8005942:	2108      	movs	r1, #8
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 fda1 	bl	800648c <SPI_WaitOnFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d007      	beq.n	8005960 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005956:	f043 0220 	orr.w	r2, r3, #32
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 fcf3 	bl	800634c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8005984:	7efb      	ldrb	r3, [r7, #27]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3720      	adds	r7, #32
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop

08005990 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b08a      	sub	sp, #40	; 0x28
 8005994:	af02      	add	r7, sp, #8
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	603b      	str	r3, [r7, #0]
 800599c:	4613      	mov	r3, r2
 800599e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3330      	adds	r3, #48	; 0x30
 80059aa:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059b4:	d112      	bne.n	80059dc <HAL_SPI_Receive+0x4c>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10e      	bne.n	80059dc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2204      	movs	r2, #4
 80059c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80059c6:	88fa      	ldrh	r2, [r7, #6]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	4613      	mov	r3, r2
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	68b9      	ldr	r1, [r7, #8]
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 f9ce 	bl	8005d74 <HAL_SPI_TransmitReceive>
 80059d8:	4603      	mov	r3, r0
 80059da:	e1c7      	b.n	8005d6c <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d101      	bne.n	80059ea <HAL_SPI_Receive+0x5a>
 80059e6:	2302      	movs	r3, #2
 80059e8:	e1c0      	b.n	8005d6c <HAL_SPI_Receive+0x3dc>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059f2:	f7fc f89b 	bl	8001b2c <HAL_GetTick>
 80059f6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d007      	beq.n	8005a14 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8005a04:	2302      	movs	r3, #2
 8005a06:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005a10:	7ffb      	ldrb	r3, [r7, #31]
 8005a12:	e1ab      	b.n	8005d6c <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_SPI_Receive+0x90>
 8005a1a:	88fb      	ldrh	r3, [r7, #6]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d107      	bne.n	8005a30 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005a2c:	7ffb      	ldrb	r3, [r7, #31]
 8005a2e:	e19d      	b.n	8005d6c <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2204      	movs	r2, #4
 8005a34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	88fa      	ldrh	r2, [r7, #6]
 8005a4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	88fa      	ldrh	r2, [r7, #6]
 8005a52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005a80:	d107      	bne.n	8005a92 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a90:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	4b94      	ldr	r3, [pc, #592]	; (8005cec <HAL_SPI_Receive+0x35c>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	88f9      	ldrh	r1, [r7, #6]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	430b      	orrs	r3, r1
 8005aa4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0201 	orr.w	r2, r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005abe:	d107      	bne.n	8005ad0 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ace:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	2b0f      	cmp	r3, #15
 8005ad6:	d948      	bls.n	8005b6a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005ad8:	e040      	b.n	8005b5c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	695a      	ldr	r2, [r3, #20]
 8005ae0:	f248 0308 	movw	r3, #32776	; 0x8008
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d014      	beq.n	8005b14 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005af2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005af4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005afa:	1d1a      	adds	r2, r3, #4
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005b12:	e023      	b.n	8005b5c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b14:	f7fc f80a 	bl	8001b2c <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d803      	bhi.n	8005b2c <HAL_SPI_Receive+0x19c>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2a:	d102      	bne.n	8005b32 <HAL_SPI_Receive+0x1a2>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d114      	bne.n	8005b5c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 fc0a 	bl	800634c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e107      	b.n	8005d6c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1b8      	bne.n	8005ada <HAL_SPI_Receive+0x14a>
 8005b68:	e0ed      	b.n	8005d46 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	2b07      	cmp	r3, #7
 8005b70:	f240 80e2 	bls.w	8005d38 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005b74:	e05b      	b.n	8005c2e <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d030      	beq.n	8005be6 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d014      	beq.n	8005bbc <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b9c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ba2:	1d1a      	adds	r2, r3, #4
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b02      	subs	r3, #2
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005bba:	e038      	b.n	8005c2e <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	8812      	ldrh	r2, [r2, #0]
 8005bc4:	b292      	uxth	r2, r2
 8005bc6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bcc:	1c9a      	adds	r2, r3, #2
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005be4:	e023      	b.n	8005c2e <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005be6:	f7fb ffa1 	bl	8001b2c <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d803      	bhi.n	8005bfe <HAL_SPI_Receive+0x26e>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfc:	d102      	bne.n	8005c04 <HAL_SPI_Receive+0x274>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d114      	bne.n	8005c2e <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 fba1 	bl	800634c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e09e      	b.n	8005d6c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d19d      	bne.n	8005b76 <HAL_SPI_Receive+0x1e6>
 8005c3a:	e084      	b.n	8005d46 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d052      	beq.n	8005cf0 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d014      	beq.n	8005c82 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c62:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c68:	1d1a      	adds	r2, r3, #4
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b04      	subs	r3, #4
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005c80:	e05a      	b.n	8005d38 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8005c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c90:	d914      	bls.n	8005cbc <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	8812      	ldrh	r2, [r2, #0]
 8005c9a:	b292      	uxth	r2, r2
 8005c9c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ca2:	1c9a      	adds	r2, r3, #2
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	3b02      	subs	r3, #2
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005cba:	e03d      	b.n	8005d38 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cc8:	7812      	ldrb	r2, [r2, #0]
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005cea:	e025      	b.n	8005d38 <HAL_SPI_Receive+0x3a8>
 8005cec:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cf0:	f7fb ff1c 	bl	8001b2c <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d803      	bhi.n	8005d08 <HAL_SPI_Receive+0x378>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d06:	d102      	bne.n	8005d0e <HAL_SPI_Receive+0x37e>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d114      	bne.n	8005d38 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 fb1c 	bl	800634c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e019      	b.n	8005d6c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f47f af7b 	bne.w	8005c3c <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fb00 	bl	800634c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 8005d6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3720      	adds	r7, #32
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08e      	sub	sp, #56	; 0x38
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3320      	adds	r3, #32
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3330      	adds	r3, #48	; 0x30
 8005d96:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_SPI_TransmitReceive+0x32>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e2ce      	b.n	8006344 <HAL_SPI_TransmitReceive+0x5d0>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dae:	f7fb febd 	bl	8001b2c <HAL_GetTick>
 8005db2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8005db4:	887b      	ldrh	r3, [r7, #2]
 8005db6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8005db8:	887b      	ldrh	r3, [r7, #2]
 8005dba:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005dc2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dca:	7efb      	ldrb	r3, [r7, #27]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d014      	beq.n	8005dfa <HAL_SPI_TransmitReceive+0x86>
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dd6:	d106      	bne.n	8005de6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d102      	bne.n	8005de6 <HAL_SPI_TransmitReceive+0x72>
 8005de0:	7efb      	ldrb	r3, [r7, #27]
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d009      	beq.n	8005dfa <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8005de6:	2302      	movs	r3, #2
 8005de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005df4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005df8:	e2a4      	b.n	8006344 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d005      	beq.n	8005e0c <HAL_SPI_TransmitReceive+0x98>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_SPI_TransmitReceive+0x98>
 8005e06:	887b      	ldrh	r3, [r7, #2]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d109      	bne.n	8005e20 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005e1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e1e:	e291      	b.n	8006344 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d003      	beq.n	8005e34 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2205      	movs	r2, #5
 8005e30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	887a      	ldrh	r2, [r7, #2]
 8005e46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	887a      	ldrh	r2, [r7, #2]
 8005e4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	887a      	ldrh	r2, [r7, #2]
 8005e5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	887a      	ldrh	r2, [r7, #2]
 8005e64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	4b9f      	ldr	r3, [pc, #636]	; (80060f8 <HAL_SPI_TransmitReceive+0x384>)
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	8879      	ldrh	r1, [r7, #2]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	6812      	ldr	r2, [r2, #0]
 8005e84:	430b      	orrs	r3, r1
 8005e86:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0201 	orr.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ea0:	d107      	bne.n	8005eb2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	2b0f      	cmp	r3, #15
 8005eb8:	d970      	bls.n	8005f9c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005eba:	e068      	b.n	8005f8e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d11a      	bne.n	8005f00 <HAL_SPI_TransmitReceive+0x18c>
 8005eca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d017      	beq.n	8005f00 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6812      	ldr	r2, [r2, #0]
 8005eda:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee0:	1d1a      	adds	r2, r3, #4
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005efe:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695a      	ldr	r2, [r3, #20]
 8005f06:	f248 0308 	movw	r3, #32776	; 0x8008
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01a      	beq.n	8005f46 <HAL_SPI_TransmitReceive+0x1d2>
 8005f10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d017      	beq.n	8005f46 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f20:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f26:	1d1a      	adds	r2, r3, #4
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	3b01      	subs	r3, #1
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f44:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f46:	f7fb fdf1 	bl	8001b2c <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d803      	bhi.n	8005f5e <HAL_SPI_TransmitReceive+0x1ea>
 8005f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5c:	d102      	bne.n	8005f64 <HAL_SPI_TransmitReceive+0x1f0>
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d114      	bne.n	8005f8e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 f9f1 	bl	800634c <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e1da      	b.n	8006344 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005f8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d193      	bne.n	8005ebc <HAL_SPI_TransmitReceive+0x148>
 8005f94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d190      	bne.n	8005ebc <HAL_SPI_TransmitReceive+0x148>
 8005f9a:	e1ac      	b.n	80062f6 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	2b07      	cmp	r3, #7
 8005fa2:	f240 81a0 	bls.w	80062e6 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005fa6:	e0a9      	b.n	80060fc <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d139      	bne.n	800602a <HAL_SPI_TransmitReceive+0x2b6>
 8005fb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d036      	beq.n	800602a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005fbc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d91c      	bls.n	8005ffc <HAL_SPI_TransmitReceive+0x288>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d018      	beq.n	8005ffc <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fda:	1d1a      	adds	r2, r3, #4
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b02      	subs	r3, #2
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ff8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005ffa:	e016      	b.n	800602a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006000:	881a      	ldrh	r2, [r3, #0]
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600a:	1c9a      	adds	r2, r3, #2
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006016:	b29b      	uxth	r3, r3
 8006018:	3b01      	subs	r3, #1
 800601a:	b29a      	uxth	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006028:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d03a      	beq.n	80060ae <HAL_SPI_TransmitReceive+0x33a>
 8006038:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800603a:	2b00      	cmp	r3, #0
 800603c:	d037      	beq.n	80060ae <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d018      	beq.n	800607e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006054:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006056:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800605c:	1d1a      	adds	r2, r3, #4
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b02      	subs	r3, #2
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800607a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800607c:	e017      	b.n	80060ae <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006082:	6a3a      	ldr	r2, [r7, #32]
 8006084:	8812      	ldrh	r2, [r2, #0]
 8006086:	b292      	uxth	r2, r2
 8006088:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800608e:	1c9a      	adds	r2, r3, #2
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80060ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ae:	f7fb fd3d 	bl	8001b2c <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d803      	bhi.n	80060c6 <HAL_SPI_TransmitReceive+0x352>
 80060be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c4:	d102      	bne.n	80060cc <HAL_SPI_TransmitReceive+0x358>
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d117      	bne.n	80060fc <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 f93d 	bl	800634c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e126      	b.n	8006344 <HAL_SPI_TransmitReceive+0x5d0>
 80060f6:	bf00      	nop
 80060f8:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80060fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f47f af52 	bne.w	8005fa8 <HAL_SPI_TransmitReceive+0x234>
 8006104:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006106:	2b00      	cmp	r3, #0
 8006108:	f47f af4e 	bne.w	8005fa8 <HAL_SPI_TransmitReceive+0x234>
 800610c:	e0f3      	b.n	80062f6 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b02      	cmp	r3, #2
 800611a:	d15a      	bne.n	80061d2 <HAL_SPI_TransmitReceive+0x45e>
 800611c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800611e:	2b00      	cmp	r3, #0
 8006120:	d057      	beq.n	80061d2 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006122:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006124:	2b03      	cmp	r3, #3
 8006126:	d91c      	bls.n	8006162 <HAL_SPI_TransmitReceive+0x3ee>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612c:	2b40      	cmp	r3, #64	; 0x40
 800612e:	d918      	bls.n	8006162 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6812      	ldr	r2, [r2, #0]
 800613a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006140:	1d1a      	adds	r2, r3, #4
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800614c:	b29b      	uxth	r3, r3
 800614e:	3b04      	subs	r3, #4
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800615e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006160:	e037      	b.n	80061d2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006162:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006164:	2b01      	cmp	r3, #1
 8006166:	d91b      	bls.n	80061a0 <HAL_SPI_TransmitReceive+0x42c>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616c:	2b00      	cmp	r3, #0
 800616e:	d017      	beq.n	80061a0 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006174:	881a      	ldrh	r2, [r3, #0]
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617e:	1c9a      	adds	r2, r3, #2
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800618a:	b29b      	uxth	r3, r3
 800618c:	3b02      	subs	r3, #2
 800618e:	b29a      	uxth	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800619c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800619e:	e018      	b.n	80061d2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3320      	adds	r3, #32
 80061aa:	7812      	ldrb	r2, [r2, #0]
 80061ac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d05e      	beq.n	800629e <HAL_SPI_TransmitReceive+0x52a>
 80061e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d05b      	beq.n	800629e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d018      	beq.n	8006226 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80061fe:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006204:	1d1a      	adds	r2, r3, #4
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006210:	b29b      	uxth	r3, r3
 8006212:	3b04      	subs	r3, #4
 8006214:	b29a      	uxth	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006222:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006224:	e03b      	b.n	800629e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8006230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006234:	d918      	bls.n	8006268 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800623a:	6a3a      	ldr	r2, [r7, #32]
 800623c:	8812      	ldrh	r2, [r2, #0]
 800623e:	b292      	uxth	r2, r2
 8006240:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006246:	1c9a      	adds	r2, r3, #2
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006252:	b29b      	uxth	r3, r3
 8006254:	3b02      	subs	r3, #2
 8006256:	b29a      	uxth	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006264:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006266:	e01a      	b.n	800629e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006274:	7812      	ldrb	r2, [r2, #0]
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800628a:	b29b      	uxth	r3, r3
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800629c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800629e:	f7fb fc45 	bl	8001b2c <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d803      	bhi.n	80062b6 <HAL_SPI_TransmitReceive+0x542>
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b4:	d102      	bne.n	80062bc <HAL_SPI_TransmitReceive+0x548>
 80062b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d114      	bne.n	80062e6 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 f845 	bl	800634c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e02e      	b.n	8006344 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80062e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f47f af10 	bne.w	800610e <HAL_SPI_TransmitReceive+0x39a>
 80062ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f47f af0c 	bne.w	800610e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80062f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	2200      	movs	r2, #0
 80062fe:	2108      	movs	r1, #8
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f8c3 	bl	800648c <SPI_WaitOnFlagUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d007      	beq.n	800631c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006312:	f043 0220 	orr.w	r2, r3, #32
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f815 	bl	800634c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e001      	b.n	8006344 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8006340:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006344:	4618      	mov	r0, r3
 8006346:	3730      	adds	r7, #48	; 0x30
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0208 	orr.w	r2, r2, #8
 800636a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699a      	ldr	r2, [r3, #24]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0210 	orr.w	r2, r2, #16
 800637a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0201 	bic.w	r2, r2, #1
 800638a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6919      	ldr	r1, [r3, #16]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	4b3c      	ldr	r3, [pc, #240]	; (8006488 <SPI_CloseTransfer+0x13c>)
 8006398:	400b      	ands	r3, r1
 800639a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80063aa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d014      	beq.n	80063e2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00f      	beq.n	80063e2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	699a      	ldr	r2, [r3, #24]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f042 0220 	orr.w	r2, r2, #32
 80063e0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d014      	beq.n	8006418 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00f      	beq.n	8006418 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063fe:	f043 0204 	orr.w	r2, r3, #4
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006416:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00f      	beq.n	8006442 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006428:	f043 0201 	orr.w	r2, r3, #1
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	699a      	ldr	r2, [r3, #24]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006440:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00f      	beq.n	800646c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006452:	f043 0208 	orr.w	r2, r3, #8
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699a      	ldr	r2, [r3, #24]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800646a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800647c:	bf00      	nop
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	fffffc90 	.word	0xfffffc90

0800648c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	4613      	mov	r3, r2
 800649a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800649c:	e010      	b.n	80064c0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800649e:	f7fb fb45 	bl	8001b2c <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d803      	bhi.n	80064b6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b4:	d102      	bne.n	80064bc <SPI_WaitOnFlagUntilTimeout+0x30>
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e00f      	b.n	80064e0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695a      	ldr	r2, [r3, #20]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	4013      	ands	r3, r2
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	bf0c      	ite	eq
 80064d0:	2301      	moveq	r3, #1
 80064d2:	2300      	movne	r3, #0
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	461a      	mov	r2, r3
 80064d8:	79fb      	ldrb	r3, [r7, #7]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d0df      	beq.n	800649e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f4:	095b      	lsrs	r3, r3, #5
 80064f6:	3301      	adds	r3, #1
 80064f8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	3301      	adds	r3, #1
 8006500:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	3307      	adds	r3, #7
 8006506:	08db      	lsrs	r3, r3, #3
 8006508:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b082      	sub	sp, #8
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e049      	b.n	80065c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d106      	bne.n	800654a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f841 	bl	80065cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2202      	movs	r2, #2
 800654e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	3304      	adds	r3, #4
 800655a:	4619      	mov	r1, r3
 800655c:	4610      	mov	r0, r2
 800655e:	f000 f9bd 	bl	80068dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d001      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e021      	b.n	800663c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0201 	orr.w	r2, r2, #1
 800660e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689a      	ldr	r2, [r3, #8]
 8006616:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <HAL_TIM_Base_Start_IT+0x68>)
 8006618:	4013      	ands	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b06      	cmp	r3, #6
 8006620:	d00b      	beq.n	800663a <HAL_TIM_Base_Start_IT+0x5a>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006628:	d007      	beq.n	800663a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f042 0201 	orr.w	r2, r2, #1
 8006638:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	00010007 	.word	0x00010007

0800664c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b02      	cmp	r3, #2
 8006660:	d122      	bne.n	80066a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b02      	cmp	r3, #2
 800666e:	d11b      	bne.n	80066a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f06f 0202 	mvn.w	r2, #2
 8006678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f905 	bl	800689e <HAL_TIM_IC_CaptureCallback>
 8006694:	e005      	b.n	80066a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f8f7 	bl	800688a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f908 	bl	80068b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f003 0304 	and.w	r3, r3, #4
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d122      	bne.n	80066fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d11b      	bne.n	80066fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f06f 0204 	mvn.w	r2, #4
 80066cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2202      	movs	r2, #2
 80066d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f8db 	bl	800689e <HAL_TIM_IC_CaptureCallback>
 80066e8:	e005      	b.n	80066f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f8cd 	bl	800688a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f8de 	bl	80068b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f003 0308 	and.w	r3, r3, #8
 8006706:	2b08      	cmp	r3, #8
 8006708:	d122      	bne.n	8006750 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b08      	cmp	r3, #8
 8006716:	d11b      	bne.n	8006750 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f06f 0208 	mvn.w	r2, #8
 8006720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2204      	movs	r2, #4
 8006726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f8b1 	bl	800689e <HAL_TIM_IC_CaptureCallback>
 800673c:	e005      	b.n	800674a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f8a3 	bl	800688a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f8b4 	bl	80068b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f003 0310 	and.w	r3, r3, #16
 800675a:	2b10      	cmp	r3, #16
 800675c:	d122      	bne.n	80067a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f003 0310 	and.w	r3, r3, #16
 8006768:	2b10      	cmp	r3, #16
 800676a:	d11b      	bne.n	80067a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f06f 0210 	mvn.w	r2, #16
 8006774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2208      	movs	r2, #8
 800677a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f887 	bl	800689e <HAL_TIM_IC_CaptureCallback>
 8006790:	e005      	b.n	800679e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f879 	bl	800688a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f88a 	bl	80068b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d10e      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d107      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f06f 0201 	mvn.w	r2, #1
 80067c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7fa fe52 	bl	8001474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067da:	2b80      	cmp	r3, #128	; 0x80
 80067dc:	d10e      	bne.n	80067fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e8:	2b80      	cmp	r3, #128	; 0x80
 80067ea:	d107      	bne.n	80067fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f914 	bl	8006a24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800680a:	d10e      	bne.n	800682a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006816:	2b80      	cmp	r3, #128	; 0x80
 8006818:	d107      	bne.n	800682a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f907 	bl	8006a38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006834:	2b40      	cmp	r3, #64	; 0x40
 8006836:	d10e      	bne.n	8006856 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006842:	2b40      	cmp	r3, #64	; 0x40
 8006844:	d107      	bne.n	8006856 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800684e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f838 	bl	80068c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	f003 0320 	and.w	r3, r3, #32
 8006860:	2b20      	cmp	r3, #32
 8006862:	d10e      	bne.n	8006882 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b20      	cmp	r3, #32
 8006870:	d107      	bne.n	8006882 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f06f 0220 	mvn.w	r2, #32
 800687a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f8c7 	bl	8006a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006882:	bf00      	nop
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b083      	sub	sp, #12
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068ce:	bf00      	nop
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
	...

080068dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a40      	ldr	r2, [pc, #256]	; (80069f0 <TIM_Base_SetConfig+0x114>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d013      	beq.n	800691c <TIM_Base_SetConfig+0x40>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068fa:	d00f      	beq.n	800691c <TIM_Base_SetConfig+0x40>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a3d      	ldr	r2, [pc, #244]	; (80069f4 <TIM_Base_SetConfig+0x118>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d00b      	beq.n	800691c <TIM_Base_SetConfig+0x40>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a3c      	ldr	r2, [pc, #240]	; (80069f8 <TIM_Base_SetConfig+0x11c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d007      	beq.n	800691c <TIM_Base_SetConfig+0x40>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a3b      	ldr	r2, [pc, #236]	; (80069fc <TIM_Base_SetConfig+0x120>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d003      	beq.n	800691c <TIM_Base_SetConfig+0x40>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a3a      	ldr	r2, [pc, #232]	; (8006a00 <TIM_Base_SetConfig+0x124>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d108      	bne.n	800692e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a2f      	ldr	r2, [pc, #188]	; (80069f0 <TIM_Base_SetConfig+0x114>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d01f      	beq.n	8006976 <TIM_Base_SetConfig+0x9a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800693c:	d01b      	beq.n	8006976 <TIM_Base_SetConfig+0x9a>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a2c      	ldr	r2, [pc, #176]	; (80069f4 <TIM_Base_SetConfig+0x118>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d017      	beq.n	8006976 <TIM_Base_SetConfig+0x9a>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a2b      	ldr	r2, [pc, #172]	; (80069f8 <TIM_Base_SetConfig+0x11c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d013      	beq.n	8006976 <TIM_Base_SetConfig+0x9a>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a2a      	ldr	r2, [pc, #168]	; (80069fc <TIM_Base_SetConfig+0x120>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d00f      	beq.n	8006976 <TIM_Base_SetConfig+0x9a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a29      	ldr	r2, [pc, #164]	; (8006a00 <TIM_Base_SetConfig+0x124>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00b      	beq.n	8006976 <TIM_Base_SetConfig+0x9a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a28      	ldr	r2, [pc, #160]	; (8006a04 <TIM_Base_SetConfig+0x128>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d007      	beq.n	8006976 <TIM_Base_SetConfig+0x9a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a27      	ldr	r2, [pc, #156]	; (8006a08 <TIM_Base_SetConfig+0x12c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d003      	beq.n	8006976 <TIM_Base_SetConfig+0x9a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a26      	ldr	r2, [pc, #152]	; (8006a0c <TIM_Base_SetConfig+0x130>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d108      	bne.n	8006988 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800697c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	4313      	orrs	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a10      	ldr	r2, [pc, #64]	; (80069f0 <TIM_Base_SetConfig+0x114>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00f      	beq.n	80069d4 <TIM_Base_SetConfig+0xf8>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a12      	ldr	r2, [pc, #72]	; (8006a00 <TIM_Base_SetConfig+0x124>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00b      	beq.n	80069d4 <TIM_Base_SetConfig+0xf8>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a11      	ldr	r2, [pc, #68]	; (8006a04 <TIM_Base_SetConfig+0x128>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d007      	beq.n	80069d4 <TIM_Base_SetConfig+0xf8>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a10      	ldr	r2, [pc, #64]	; (8006a08 <TIM_Base_SetConfig+0x12c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d003      	beq.n	80069d4 <TIM_Base_SetConfig+0xf8>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a0f      	ldr	r2, [pc, #60]	; (8006a0c <TIM_Base_SetConfig+0x130>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d103      	bne.n	80069dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	615a      	str	r2, [r3, #20]
}
 80069e2:	bf00      	nop
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	40010000 	.word	0x40010000
 80069f4:	40000400 	.word	0x40000400
 80069f8:	40000800 	.word	0x40000800
 80069fc:	40000c00 	.word	0x40000c00
 8006a00:	40010400 	.word	0x40010400
 8006a04:	40014000 	.word	0x40014000
 8006a08:	40014400 	.word	0x40014400
 8006a0c:	40014800 	.word	0x40014800

08006a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e042      	b.n	8006ae4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d106      	bne.n	8006a76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7fa fdc7 	bl	8001604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2224      	movs	r2, #36	; 0x24
 8006a7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f022 0201 	bic.w	r2, r2, #1
 8006a8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f91a 	bl	8006cc8 <UART_SetConfig>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e022      	b.n	8006ae4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d002      	beq.n	8006aac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 febe 	bl	8007828 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006aba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689a      	ldr	r2, [r3, #8]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006aca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f042 0201 	orr.w	r2, r2, #1
 8006ada:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 ff45 	bl	800796c <UART_CheckIdleState>
 8006ae2:	4603      	mov	r3, r0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e04a      	b.n	8006b94 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d106      	bne.n	8006b16 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7fa fd77 	bl	8001604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2224      	movs	r2, #36	; 0x24
 8006b1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0201 	bic.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f8ca 	bl	8006cc8 <UART_SetConfig>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d101      	bne.n	8006b3e <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e02a      	b.n	8006b94 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fe6e 	bl	8007828 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8006b6a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0208 	orr.w	r2, r2, #8
 8006b7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f042 0201 	orr.w	r2, r2, #1
 8006b8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 feed 	bl	800796c <UART_CheckIdleState>
 8006b92:	4603      	mov	r3, r0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b08a      	sub	sp, #40	; 0x28
 8006ba0:	af02      	add	r7, sp, #8
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bb2:	2b20      	cmp	r3, #32
 8006bb4:	f040 8083 	bne.w	8006cbe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d002      	beq.n	8006bc4 <HAL_UART_Transmit+0x28>
 8006bbe:	88fb      	ldrh	r3, [r7, #6]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e07b      	b.n	8006cc0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d101      	bne.n	8006bd6 <HAL_UART_Transmit+0x3a>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	e074      	b.n	8006cc0 <HAL_UART_Transmit+0x124>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2221      	movs	r2, #33	; 0x21
 8006bea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006bee:	f7fa ff9d 	bl	8001b2c <HAL_GetTick>
 8006bf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	88fa      	ldrh	r2, [r7, #6]
 8006bf8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	88fa      	ldrh	r2, [r7, #6]
 8006c00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0c:	d108      	bne.n	8006c20 <HAL_UART_Transmit+0x84>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d104      	bne.n	8006c20 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	61bb      	str	r3, [r7, #24]
 8006c1e:	e003      	b.n	8006c28 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c24:	2300      	movs	r3, #0
 8006c26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8006c30:	e02c      	b.n	8006c8c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2180      	movs	r1, #128	; 0x80
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 fedd 	bl	80079fc <UART_WaitOnFlagUntilTimeout>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e039      	b.n	8006cc0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10b      	bne.n	8006c6a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	3302      	adds	r3, #2
 8006c66:	61bb      	str	r3, [r7, #24]
 8006c68:	e007      	b.n	8006c7a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	781a      	ldrb	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	3301      	adds	r3, #1
 8006c78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1cc      	bne.n	8006c32 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2140      	movs	r1, #64	; 0x40
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 feaa 	bl	80079fc <UART_WaitOnFlagUntilTimeout>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e006      	b.n	8006cc0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	e000      	b.n	8006cc0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006cbe:	2302      	movs	r3, #2
  }
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3720      	adds	r7, #32
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cc8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006ccc:	b08e      	sub	sp, #56	; 0x38
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	4bc1      	ldr	r3, [pc, #772]	; (8007008 <UART_SetConfig+0x340>)
 8006d02:	4013      	ands	r3, r2
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6812      	ldr	r2, [r2, #0]
 8006d08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d0a:	430b      	orrs	r3, r1
 8006d0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4ab7      	ldr	r2, [pc, #732]	; (800700c <UART_SetConfig+0x344>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d004      	beq.n	8006d3e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	4bb2      	ldr	r3, [pc, #712]	; (8007010 <UART_SetConfig+0x348>)
 8006d46:	4013      	ands	r3, r2
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	6812      	ldr	r2, [r2, #0]
 8006d4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d4e:	430b      	orrs	r3, r1
 8006d50:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d58:	f023 010f 	bic.w	r1, r3, #15
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4aa9      	ldr	r2, [pc, #676]	; (8007014 <UART_SetConfig+0x34c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d177      	bne.n	8006e62 <UART_SetConfig+0x19a>
 8006d72:	4ba9      	ldr	r3, [pc, #676]	; (8007018 <UART_SetConfig+0x350>)
 8006d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d7a:	2b28      	cmp	r3, #40	; 0x28
 8006d7c:	d86c      	bhi.n	8006e58 <UART_SetConfig+0x190>
 8006d7e:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <UART_SetConfig+0xbc>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006e29 	.word	0x08006e29
 8006d88:	08006e59 	.word	0x08006e59
 8006d8c:	08006e59 	.word	0x08006e59
 8006d90:	08006e59 	.word	0x08006e59
 8006d94:	08006e59 	.word	0x08006e59
 8006d98:	08006e59 	.word	0x08006e59
 8006d9c:	08006e59 	.word	0x08006e59
 8006da0:	08006e59 	.word	0x08006e59
 8006da4:	08006e31 	.word	0x08006e31
 8006da8:	08006e59 	.word	0x08006e59
 8006dac:	08006e59 	.word	0x08006e59
 8006db0:	08006e59 	.word	0x08006e59
 8006db4:	08006e59 	.word	0x08006e59
 8006db8:	08006e59 	.word	0x08006e59
 8006dbc:	08006e59 	.word	0x08006e59
 8006dc0:	08006e59 	.word	0x08006e59
 8006dc4:	08006e39 	.word	0x08006e39
 8006dc8:	08006e59 	.word	0x08006e59
 8006dcc:	08006e59 	.word	0x08006e59
 8006dd0:	08006e59 	.word	0x08006e59
 8006dd4:	08006e59 	.word	0x08006e59
 8006dd8:	08006e59 	.word	0x08006e59
 8006ddc:	08006e59 	.word	0x08006e59
 8006de0:	08006e59 	.word	0x08006e59
 8006de4:	08006e41 	.word	0x08006e41
 8006de8:	08006e59 	.word	0x08006e59
 8006dec:	08006e59 	.word	0x08006e59
 8006df0:	08006e59 	.word	0x08006e59
 8006df4:	08006e59 	.word	0x08006e59
 8006df8:	08006e59 	.word	0x08006e59
 8006dfc:	08006e59 	.word	0x08006e59
 8006e00:	08006e59 	.word	0x08006e59
 8006e04:	08006e49 	.word	0x08006e49
 8006e08:	08006e59 	.word	0x08006e59
 8006e0c:	08006e59 	.word	0x08006e59
 8006e10:	08006e59 	.word	0x08006e59
 8006e14:	08006e59 	.word	0x08006e59
 8006e18:	08006e59 	.word	0x08006e59
 8006e1c:	08006e59 	.word	0x08006e59
 8006e20:	08006e59 	.word	0x08006e59
 8006e24:	08006e51 	.word	0x08006e51
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e2e:	e233      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006e30:	2304      	movs	r3, #4
 8006e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e36:	e22f      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006e38:	2308      	movs	r3, #8
 8006e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e3e:	e22b      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006e40:	2310      	movs	r3, #16
 8006e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e46:	e227      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006e48:	2320      	movs	r3, #32
 8006e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e4e:	e223      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006e50:	2340      	movs	r3, #64	; 0x40
 8006e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e56:	e21f      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006e58:	2380      	movs	r3, #128	; 0x80
 8006e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e5e:	bf00      	nop
 8006e60:	e21a      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a6d      	ldr	r2, [pc, #436]	; (800701c <UART_SetConfig+0x354>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d132      	bne.n	8006ed2 <UART_SetConfig+0x20a>
 8006e6c:	4b6a      	ldr	r3, [pc, #424]	; (8007018 <UART_SetConfig+0x350>)
 8006e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e70:	f003 0307 	and.w	r3, r3, #7
 8006e74:	2b05      	cmp	r3, #5
 8006e76:	d827      	bhi.n	8006ec8 <UART_SetConfig+0x200>
 8006e78:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <UART_SetConfig+0x1b8>)
 8006e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7e:	bf00      	nop
 8006e80:	08006e99 	.word	0x08006e99
 8006e84:	08006ea1 	.word	0x08006ea1
 8006e88:	08006ea9 	.word	0x08006ea9
 8006e8c:	08006eb1 	.word	0x08006eb1
 8006e90:	08006eb9 	.word	0x08006eb9
 8006e94:	08006ec1 	.word	0x08006ec1
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e9e:	e1fb      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ea6:	e1f7      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eae:	e1f3      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eb6:	e1ef      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006eb8:	2320      	movs	r3, #32
 8006eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ebe:	e1eb      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006ec0:	2340      	movs	r3, #64	; 0x40
 8006ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ec6:	e1e7      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006ec8:	2380      	movs	r3, #128	; 0x80
 8006eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ece:	bf00      	nop
 8006ed0:	e1e2      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a52      	ldr	r2, [pc, #328]	; (8007020 <UART_SetConfig+0x358>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d132      	bne.n	8006f42 <UART_SetConfig+0x27a>
 8006edc:	4b4e      	ldr	r3, [pc, #312]	; (8007018 <UART_SetConfig+0x350>)
 8006ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	2b05      	cmp	r3, #5
 8006ee6:	d827      	bhi.n	8006f38 <UART_SetConfig+0x270>
 8006ee8:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <UART_SetConfig+0x228>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f09 	.word	0x08006f09
 8006ef4:	08006f11 	.word	0x08006f11
 8006ef8:	08006f19 	.word	0x08006f19
 8006efc:	08006f21 	.word	0x08006f21
 8006f00:	08006f29 	.word	0x08006f29
 8006f04:	08006f31 	.word	0x08006f31
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f0e:	e1c3      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006f10:	2304      	movs	r3, #4
 8006f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f16:	e1bf      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006f18:	2308      	movs	r3, #8
 8006f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f1e:	e1bb      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006f20:	2310      	movs	r3, #16
 8006f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f26:	e1b7      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006f28:	2320      	movs	r3, #32
 8006f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f2e:	e1b3      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006f30:	2340      	movs	r3, #64	; 0x40
 8006f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f36:	e1af      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006f38:	2380      	movs	r3, #128	; 0x80
 8006f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f3e:	bf00      	nop
 8006f40:	e1aa      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a37      	ldr	r2, [pc, #220]	; (8007024 <UART_SetConfig+0x35c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d132      	bne.n	8006fb2 <UART_SetConfig+0x2ea>
 8006f4c:	4b32      	ldr	r3, [pc, #200]	; (8007018 <UART_SetConfig+0x350>)
 8006f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	2b05      	cmp	r3, #5
 8006f56:	d827      	bhi.n	8006fa8 <UART_SetConfig+0x2e0>
 8006f58:	a201      	add	r2, pc, #4	; (adr r2, 8006f60 <UART_SetConfig+0x298>)
 8006f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5e:	bf00      	nop
 8006f60:	08006f79 	.word	0x08006f79
 8006f64:	08006f81 	.word	0x08006f81
 8006f68:	08006f89 	.word	0x08006f89
 8006f6c:	08006f91 	.word	0x08006f91
 8006f70:	08006f99 	.word	0x08006f99
 8006f74:	08006fa1 	.word	0x08006fa1
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f7e:	e18b      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006f80:	2304      	movs	r3, #4
 8006f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f86:	e187      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006f88:	2308      	movs	r3, #8
 8006f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f8e:	e183      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006f90:	2310      	movs	r3, #16
 8006f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f96:	e17f      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006f98:	2320      	movs	r3, #32
 8006f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f9e:	e17b      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006fa0:	2340      	movs	r3, #64	; 0x40
 8006fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fa6:	e177      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006fa8:	2380      	movs	r3, #128	; 0x80
 8006faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fae:	bf00      	nop
 8006fb0:	e172      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a1c      	ldr	r2, [pc, #112]	; (8007028 <UART_SetConfig+0x360>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d144      	bne.n	8007046 <UART_SetConfig+0x37e>
 8006fbc:	4b16      	ldr	r3, [pc, #88]	; (8007018 <UART_SetConfig+0x350>)
 8006fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc0:	f003 0307 	and.w	r3, r3, #7
 8006fc4:	2b05      	cmp	r3, #5
 8006fc6:	d839      	bhi.n	800703c <UART_SetConfig+0x374>
 8006fc8:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <UART_SetConfig+0x308>)
 8006fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fce:	bf00      	nop
 8006fd0:	08006fe9 	.word	0x08006fe9
 8006fd4:	08006ff1 	.word	0x08006ff1
 8006fd8:	08006ff9 	.word	0x08006ff9
 8006fdc:	08007001 	.word	0x08007001
 8006fe0:	0800702d 	.word	0x0800702d
 8006fe4:	08007035 	.word	0x08007035
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fee:	e153      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006ff0:	2304      	movs	r3, #4
 8006ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ff6:	e14f      	b.n	8007298 <UART_SetConfig+0x5d0>
 8006ff8:	2308      	movs	r3, #8
 8006ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ffe:	e14b      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007000:	2310      	movs	r3, #16
 8007002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007006:	e147      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007008:	cfff69f3 	.word	0xcfff69f3
 800700c:	58000c00 	.word	0x58000c00
 8007010:	11fff4ff 	.word	0x11fff4ff
 8007014:	40011000 	.word	0x40011000
 8007018:	58024400 	.word	0x58024400
 800701c:	40004400 	.word	0x40004400
 8007020:	40004800 	.word	0x40004800
 8007024:	40004c00 	.word	0x40004c00
 8007028:	40005000 	.word	0x40005000
 800702c:	2320      	movs	r3, #32
 800702e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007032:	e131      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007034:	2340      	movs	r3, #64	; 0x40
 8007036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800703a:	e12d      	b.n	8007298 <UART_SetConfig+0x5d0>
 800703c:	2380      	movs	r3, #128	; 0x80
 800703e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007042:	bf00      	nop
 8007044:	e128      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4ab6      	ldr	r2, [pc, #728]	; (8007324 <UART_SetConfig+0x65c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d178      	bne.n	8007142 <UART_SetConfig+0x47a>
 8007050:	4bb5      	ldr	r3, [pc, #724]	; (8007328 <UART_SetConfig+0x660>)
 8007052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007054:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007058:	2b28      	cmp	r3, #40	; 0x28
 800705a:	d86d      	bhi.n	8007138 <UART_SetConfig+0x470>
 800705c:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <UART_SetConfig+0x39c>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	08007109 	.word	0x08007109
 8007068:	08007139 	.word	0x08007139
 800706c:	08007139 	.word	0x08007139
 8007070:	08007139 	.word	0x08007139
 8007074:	08007139 	.word	0x08007139
 8007078:	08007139 	.word	0x08007139
 800707c:	08007139 	.word	0x08007139
 8007080:	08007139 	.word	0x08007139
 8007084:	08007111 	.word	0x08007111
 8007088:	08007139 	.word	0x08007139
 800708c:	08007139 	.word	0x08007139
 8007090:	08007139 	.word	0x08007139
 8007094:	08007139 	.word	0x08007139
 8007098:	08007139 	.word	0x08007139
 800709c:	08007139 	.word	0x08007139
 80070a0:	08007139 	.word	0x08007139
 80070a4:	08007119 	.word	0x08007119
 80070a8:	08007139 	.word	0x08007139
 80070ac:	08007139 	.word	0x08007139
 80070b0:	08007139 	.word	0x08007139
 80070b4:	08007139 	.word	0x08007139
 80070b8:	08007139 	.word	0x08007139
 80070bc:	08007139 	.word	0x08007139
 80070c0:	08007139 	.word	0x08007139
 80070c4:	08007121 	.word	0x08007121
 80070c8:	08007139 	.word	0x08007139
 80070cc:	08007139 	.word	0x08007139
 80070d0:	08007139 	.word	0x08007139
 80070d4:	08007139 	.word	0x08007139
 80070d8:	08007139 	.word	0x08007139
 80070dc:	08007139 	.word	0x08007139
 80070e0:	08007139 	.word	0x08007139
 80070e4:	08007129 	.word	0x08007129
 80070e8:	08007139 	.word	0x08007139
 80070ec:	08007139 	.word	0x08007139
 80070f0:	08007139 	.word	0x08007139
 80070f4:	08007139 	.word	0x08007139
 80070f8:	08007139 	.word	0x08007139
 80070fc:	08007139 	.word	0x08007139
 8007100:	08007139 	.word	0x08007139
 8007104:	08007131 	.word	0x08007131
 8007108:	2301      	movs	r3, #1
 800710a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800710e:	e0c3      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007110:	2304      	movs	r3, #4
 8007112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007116:	e0bf      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007118:	2308      	movs	r3, #8
 800711a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800711e:	e0bb      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007120:	2310      	movs	r3, #16
 8007122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007126:	e0b7      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007128:	2320      	movs	r3, #32
 800712a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800712e:	e0b3      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007130:	2340      	movs	r3, #64	; 0x40
 8007132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007136:	e0af      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007138:	2380      	movs	r3, #128	; 0x80
 800713a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800713e:	bf00      	nop
 8007140:	e0aa      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a79      	ldr	r2, [pc, #484]	; (800732c <UART_SetConfig+0x664>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d132      	bne.n	80071b2 <UART_SetConfig+0x4ea>
 800714c:	4b76      	ldr	r3, [pc, #472]	; (8007328 <UART_SetConfig+0x660>)
 800714e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	2b05      	cmp	r3, #5
 8007156:	d827      	bhi.n	80071a8 <UART_SetConfig+0x4e0>
 8007158:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <UART_SetConfig+0x498>)
 800715a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715e:	bf00      	nop
 8007160:	08007179 	.word	0x08007179
 8007164:	08007181 	.word	0x08007181
 8007168:	08007189 	.word	0x08007189
 800716c:	08007191 	.word	0x08007191
 8007170:	08007199 	.word	0x08007199
 8007174:	080071a1 	.word	0x080071a1
 8007178:	2300      	movs	r3, #0
 800717a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800717e:	e08b      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007180:	2304      	movs	r3, #4
 8007182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007186:	e087      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007188:	2308      	movs	r3, #8
 800718a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800718e:	e083      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007190:	2310      	movs	r3, #16
 8007192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007196:	e07f      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007198:	2320      	movs	r3, #32
 800719a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800719e:	e07b      	b.n	8007298 <UART_SetConfig+0x5d0>
 80071a0:	2340      	movs	r3, #64	; 0x40
 80071a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071a6:	e077      	b.n	8007298 <UART_SetConfig+0x5d0>
 80071a8:	2380      	movs	r3, #128	; 0x80
 80071aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ae:	bf00      	nop
 80071b0:	e072      	b.n	8007298 <UART_SetConfig+0x5d0>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a5e      	ldr	r2, [pc, #376]	; (8007330 <UART_SetConfig+0x668>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d132      	bne.n	8007222 <UART_SetConfig+0x55a>
 80071bc:	4b5a      	ldr	r3, [pc, #360]	; (8007328 <UART_SetConfig+0x660>)
 80071be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c0:	f003 0307 	and.w	r3, r3, #7
 80071c4:	2b05      	cmp	r3, #5
 80071c6:	d827      	bhi.n	8007218 <UART_SetConfig+0x550>
 80071c8:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <UART_SetConfig+0x508>)
 80071ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ce:	bf00      	nop
 80071d0:	080071e9 	.word	0x080071e9
 80071d4:	080071f1 	.word	0x080071f1
 80071d8:	080071f9 	.word	0x080071f9
 80071dc:	08007201 	.word	0x08007201
 80071e0:	08007209 	.word	0x08007209
 80071e4:	08007211 	.word	0x08007211
 80071e8:	2300      	movs	r3, #0
 80071ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ee:	e053      	b.n	8007298 <UART_SetConfig+0x5d0>
 80071f0:	2304      	movs	r3, #4
 80071f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071f6:	e04f      	b.n	8007298 <UART_SetConfig+0x5d0>
 80071f8:	2308      	movs	r3, #8
 80071fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071fe:	e04b      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007200:	2310      	movs	r3, #16
 8007202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007206:	e047      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007208:	2320      	movs	r3, #32
 800720a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800720e:	e043      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007210:	2340      	movs	r3, #64	; 0x40
 8007212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007216:	e03f      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007218:	2380      	movs	r3, #128	; 0x80
 800721a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800721e:	bf00      	nop
 8007220:	e03a      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a43      	ldr	r2, [pc, #268]	; (8007334 <UART_SetConfig+0x66c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d132      	bne.n	8007292 <UART_SetConfig+0x5ca>
 800722c:	4b3e      	ldr	r3, [pc, #248]	; (8007328 <UART_SetConfig+0x660>)
 800722e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	2b05      	cmp	r3, #5
 8007236:	d827      	bhi.n	8007288 <UART_SetConfig+0x5c0>
 8007238:	a201      	add	r2, pc, #4	; (adr r2, 8007240 <UART_SetConfig+0x578>)
 800723a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723e:	bf00      	nop
 8007240:	08007259 	.word	0x08007259
 8007244:	08007261 	.word	0x08007261
 8007248:	08007269 	.word	0x08007269
 800724c:	08007271 	.word	0x08007271
 8007250:	08007279 	.word	0x08007279
 8007254:	08007281 	.word	0x08007281
 8007258:	2302      	movs	r3, #2
 800725a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800725e:	e01b      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007260:	2304      	movs	r3, #4
 8007262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007266:	e017      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007268:	2308      	movs	r3, #8
 800726a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800726e:	e013      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007270:	2310      	movs	r3, #16
 8007272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007276:	e00f      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007278:	2320      	movs	r3, #32
 800727a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800727e:	e00b      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007280:	2340      	movs	r3, #64	; 0x40
 8007282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007286:	e007      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007288:	2380      	movs	r3, #128	; 0x80
 800728a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800728e:	bf00      	nop
 8007290:	e002      	b.n	8007298 <UART_SetConfig+0x5d0>
 8007292:	2380      	movs	r3, #128	; 0x80
 8007294:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a25      	ldr	r2, [pc, #148]	; (8007334 <UART_SetConfig+0x66c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	f040 80b8 	bne.w	8007414 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d019      	beq.n	80072e0 <UART_SetConfig+0x618>
 80072ac:	2b08      	cmp	r3, #8
 80072ae:	dc04      	bgt.n	80072ba <UART_SetConfig+0x5f2>
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d009      	beq.n	80072c8 <UART_SetConfig+0x600>
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d00b      	beq.n	80072d0 <UART_SetConfig+0x608>
 80072b8:	e042      	b.n	8007340 <UART_SetConfig+0x678>
 80072ba:	2b20      	cmp	r3, #32
 80072bc:	d02b      	beq.n	8007316 <UART_SetConfig+0x64e>
 80072be:	2b40      	cmp	r3, #64	; 0x40
 80072c0:	d02c      	beq.n	800731c <UART_SetConfig+0x654>
 80072c2:	2b10      	cmp	r3, #16
 80072c4:	d014      	beq.n	80072f0 <UART_SetConfig+0x628>
 80072c6:	e03b      	b.n	8007340 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80072c8:	f7fd fc66 	bl	8004b98 <HAL_RCCEx_GetD3PCLK1Freq>
 80072cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80072ce:	e03d      	b.n	800734c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072d0:	f107 0314 	add.w	r3, r7, #20
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fd fc75 	bl	8004bc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072de:	e035      	b.n	800734c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072e0:	f107 0308 	add.w	r3, r7, #8
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fd fdb9 	bl	8004e5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072ee:	e02d      	b.n	800734c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072f0:	4b0d      	ldr	r3, [pc, #52]	; (8007328 <UART_SetConfig+0x660>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0320 	and.w	r3, r3, #32
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d009      	beq.n	8007310 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80072fc:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <UART_SetConfig+0x660>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	08db      	lsrs	r3, r3, #3
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	4a0c      	ldr	r2, [pc, #48]	; (8007338 <UART_SetConfig+0x670>)
 8007308:	fa22 f303 	lsr.w	r3, r2, r3
 800730c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800730e:	e01d      	b.n	800734c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8007310:	4b09      	ldr	r3, [pc, #36]	; (8007338 <UART_SetConfig+0x670>)
 8007312:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007314:	e01a      	b.n	800734c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007316:	4b09      	ldr	r3, [pc, #36]	; (800733c <UART_SetConfig+0x674>)
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800731a:	e017      	b.n	800734c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800731c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007320:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007322:	e013      	b.n	800734c <UART_SetConfig+0x684>
 8007324:	40011400 	.word	0x40011400
 8007328:	58024400 	.word	0x58024400
 800732c:	40007800 	.word	0x40007800
 8007330:	40007c00 	.word	0x40007c00
 8007334:	58000c00 	.word	0x58000c00
 8007338:	03d09000 	.word	0x03d09000
 800733c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800734a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800734c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 824d 	beq.w	80077ee <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	4aad      	ldr	r2, [pc, #692]	; (8007610 <UART_SetConfig+0x948>)
 800735a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800735e:	461a      	mov	r2, r3
 8007360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007362:	fbb3 f3f2 	udiv	r3, r3, r2
 8007366:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	4613      	mov	r3, r2
 800736e:	005b      	lsls	r3, r3, #1
 8007370:	4413      	add	r3, r2
 8007372:	6a3a      	ldr	r2, [r7, #32]
 8007374:	429a      	cmp	r2, r3
 8007376:	d305      	bcc.n	8007384 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800737e:	6a3a      	ldr	r2, [r7, #32]
 8007380:	429a      	cmp	r2, r3
 8007382:	d903      	bls.n	800738c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800738a:	e230      	b.n	80077ee <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738e:	4618      	mov	r0, r3
 8007390:	f04f 0100 	mov.w	r1, #0
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	4a9d      	ldr	r2, [pc, #628]	; (8007610 <UART_SetConfig+0x948>)
 800739a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	f04f 0400 	mov.w	r4, #0
 80073a4:	461a      	mov	r2, r3
 80073a6:	4623      	mov	r3, r4
 80073a8:	f7f8 ff9a 	bl	80002e0 <__aeabi_uldivmod>
 80073ac:	4603      	mov	r3, r0
 80073ae:	460c      	mov	r4, r1
 80073b0:	4619      	mov	r1, r3
 80073b2:	4622      	mov	r2, r4
 80073b4:	f04f 0300 	mov.w	r3, #0
 80073b8:	f04f 0400 	mov.w	r4, #0
 80073bc:	0214      	lsls	r4, r2, #8
 80073be:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80073c2:	020b      	lsls	r3, r1, #8
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	6852      	ldr	r2, [r2, #4]
 80073c8:	0852      	lsrs	r2, r2, #1
 80073ca:	4611      	mov	r1, r2
 80073cc:	f04f 0200 	mov.w	r2, #0
 80073d0:	eb13 0b01 	adds.w	fp, r3, r1
 80073d4:	eb44 0c02 	adc.w	ip, r4, r2
 80073d8:	4658      	mov	r0, fp
 80073da:	4661      	mov	r1, ip
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f04f 0400 	mov.w	r4, #0
 80073e4:	461a      	mov	r2, r3
 80073e6:	4623      	mov	r3, r4
 80073e8:	f7f8 ff7a 	bl	80002e0 <__aeabi_uldivmod>
 80073ec:	4603      	mov	r3, r0
 80073ee:	460c      	mov	r4, r1
 80073f0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073f8:	d308      	bcc.n	800740c <UART_SetConfig+0x744>
 80073fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007400:	d204      	bcs.n	800740c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007408:	60da      	str	r2, [r3, #12]
 800740a:	e1f0      	b.n	80077ee <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007412:	e1ec      	b.n	80077ee <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800741c:	f040 8100 	bne.w	8007620 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8007420:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007424:	2b40      	cmp	r3, #64	; 0x40
 8007426:	f200 80b7 	bhi.w	8007598 <UART_SetConfig+0x8d0>
 800742a:	a201      	add	r2, pc, #4	; (adr r2, 8007430 <UART_SetConfig+0x768>)
 800742c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007430:	08007535 	.word	0x08007535
 8007434:	0800753d 	.word	0x0800753d
 8007438:	08007599 	.word	0x08007599
 800743c:	08007599 	.word	0x08007599
 8007440:	08007545 	.word	0x08007545
 8007444:	08007599 	.word	0x08007599
 8007448:	08007599 	.word	0x08007599
 800744c:	08007599 	.word	0x08007599
 8007450:	08007555 	.word	0x08007555
 8007454:	08007599 	.word	0x08007599
 8007458:	08007599 	.word	0x08007599
 800745c:	08007599 	.word	0x08007599
 8007460:	08007599 	.word	0x08007599
 8007464:	08007599 	.word	0x08007599
 8007468:	08007599 	.word	0x08007599
 800746c:	08007599 	.word	0x08007599
 8007470:	08007565 	.word	0x08007565
 8007474:	08007599 	.word	0x08007599
 8007478:	08007599 	.word	0x08007599
 800747c:	08007599 	.word	0x08007599
 8007480:	08007599 	.word	0x08007599
 8007484:	08007599 	.word	0x08007599
 8007488:	08007599 	.word	0x08007599
 800748c:	08007599 	.word	0x08007599
 8007490:	08007599 	.word	0x08007599
 8007494:	08007599 	.word	0x08007599
 8007498:	08007599 	.word	0x08007599
 800749c:	08007599 	.word	0x08007599
 80074a0:	08007599 	.word	0x08007599
 80074a4:	08007599 	.word	0x08007599
 80074a8:	08007599 	.word	0x08007599
 80074ac:	08007599 	.word	0x08007599
 80074b0:	0800758b 	.word	0x0800758b
 80074b4:	08007599 	.word	0x08007599
 80074b8:	08007599 	.word	0x08007599
 80074bc:	08007599 	.word	0x08007599
 80074c0:	08007599 	.word	0x08007599
 80074c4:	08007599 	.word	0x08007599
 80074c8:	08007599 	.word	0x08007599
 80074cc:	08007599 	.word	0x08007599
 80074d0:	08007599 	.word	0x08007599
 80074d4:	08007599 	.word	0x08007599
 80074d8:	08007599 	.word	0x08007599
 80074dc:	08007599 	.word	0x08007599
 80074e0:	08007599 	.word	0x08007599
 80074e4:	08007599 	.word	0x08007599
 80074e8:	08007599 	.word	0x08007599
 80074ec:	08007599 	.word	0x08007599
 80074f0:	08007599 	.word	0x08007599
 80074f4:	08007599 	.word	0x08007599
 80074f8:	08007599 	.word	0x08007599
 80074fc:	08007599 	.word	0x08007599
 8007500:	08007599 	.word	0x08007599
 8007504:	08007599 	.word	0x08007599
 8007508:	08007599 	.word	0x08007599
 800750c:	08007599 	.word	0x08007599
 8007510:	08007599 	.word	0x08007599
 8007514:	08007599 	.word	0x08007599
 8007518:	08007599 	.word	0x08007599
 800751c:	08007599 	.word	0x08007599
 8007520:	08007599 	.word	0x08007599
 8007524:	08007599 	.word	0x08007599
 8007528:	08007599 	.word	0x08007599
 800752c:	08007599 	.word	0x08007599
 8007530:	08007591 	.word	0x08007591
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007534:	f7fc fbd4 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8007538:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800753a:	e033      	b.n	80075a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800753c:	f7fc fbe6 	bl	8003d0c <HAL_RCC_GetPCLK2Freq>
 8007540:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007542:	e02f      	b.n	80075a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007544:	f107 0314 	add.w	r3, r7, #20
 8007548:	4618      	mov	r0, r3
 800754a:	f7fd fb3b 	bl	8004bc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007552:	e027      	b.n	80075a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007554:	f107 0308 	add.w	r3, r7, #8
 8007558:	4618      	mov	r0, r3
 800755a:	f7fd fc7f 	bl	8004e5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007562:	e01f      	b.n	80075a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007564:	4b2b      	ldr	r3, [pc, #172]	; (8007614 <UART_SetConfig+0x94c>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0320 	and.w	r3, r3, #32
 800756c:	2b00      	cmp	r3, #0
 800756e:	d009      	beq.n	8007584 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007570:	4b28      	ldr	r3, [pc, #160]	; (8007614 <UART_SetConfig+0x94c>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	08db      	lsrs	r3, r3, #3
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	4a27      	ldr	r2, [pc, #156]	; (8007618 <UART_SetConfig+0x950>)
 800757c:	fa22 f303 	lsr.w	r3, r2, r3
 8007580:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007582:	e00f      	b.n	80075a4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8007584:	4b24      	ldr	r3, [pc, #144]	; (8007618 <UART_SetConfig+0x950>)
 8007586:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007588:	e00c      	b.n	80075a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800758a:	4b24      	ldr	r3, [pc, #144]	; (800761c <UART_SetConfig+0x954>)
 800758c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800758e:	e009      	b.n	80075a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007590:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007594:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007596:	e005      	b.n	80075a4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80075a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 8121 	beq.w	80077ee <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	4a17      	ldr	r2, [pc, #92]	; (8007610 <UART_SetConfig+0x948>)
 80075b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075b6:	461a      	mov	r2, r3
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80075be:	005a      	lsls	r2, r3, #1
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	085b      	lsrs	r3, r3, #1
 80075c6:	441a      	add	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	2b0f      	cmp	r3, #15
 80075d8:	d916      	bls.n	8007608 <UART_SetConfig+0x940>
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075e0:	d212      	bcs.n	8007608 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	f023 030f 	bic.w	r3, r3, #15
 80075ea:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ee:	085b      	lsrs	r3, r3, #1
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80075fa:	4313      	orrs	r3, r2
 80075fc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007604:	60da      	str	r2, [r3, #12]
 8007606:	e0f2      	b.n	80077ee <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800760e:	e0ee      	b.n	80077ee <UART_SetConfig+0xb26>
 8007610:	0800c144 	.word	0x0800c144
 8007614:	58024400 	.word	0x58024400
 8007618:	03d09000 	.word	0x03d09000
 800761c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8007620:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007624:	2b40      	cmp	r3, #64	; 0x40
 8007626:	f200 80b7 	bhi.w	8007798 <UART_SetConfig+0xad0>
 800762a:	a201      	add	r2, pc, #4	; (adr r2, 8007630 <UART_SetConfig+0x968>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	08007735 	.word	0x08007735
 8007634:	0800773d 	.word	0x0800773d
 8007638:	08007799 	.word	0x08007799
 800763c:	08007799 	.word	0x08007799
 8007640:	08007745 	.word	0x08007745
 8007644:	08007799 	.word	0x08007799
 8007648:	08007799 	.word	0x08007799
 800764c:	08007799 	.word	0x08007799
 8007650:	08007755 	.word	0x08007755
 8007654:	08007799 	.word	0x08007799
 8007658:	08007799 	.word	0x08007799
 800765c:	08007799 	.word	0x08007799
 8007660:	08007799 	.word	0x08007799
 8007664:	08007799 	.word	0x08007799
 8007668:	08007799 	.word	0x08007799
 800766c:	08007799 	.word	0x08007799
 8007670:	08007765 	.word	0x08007765
 8007674:	08007799 	.word	0x08007799
 8007678:	08007799 	.word	0x08007799
 800767c:	08007799 	.word	0x08007799
 8007680:	08007799 	.word	0x08007799
 8007684:	08007799 	.word	0x08007799
 8007688:	08007799 	.word	0x08007799
 800768c:	08007799 	.word	0x08007799
 8007690:	08007799 	.word	0x08007799
 8007694:	08007799 	.word	0x08007799
 8007698:	08007799 	.word	0x08007799
 800769c:	08007799 	.word	0x08007799
 80076a0:	08007799 	.word	0x08007799
 80076a4:	08007799 	.word	0x08007799
 80076a8:	08007799 	.word	0x08007799
 80076ac:	08007799 	.word	0x08007799
 80076b0:	0800778b 	.word	0x0800778b
 80076b4:	08007799 	.word	0x08007799
 80076b8:	08007799 	.word	0x08007799
 80076bc:	08007799 	.word	0x08007799
 80076c0:	08007799 	.word	0x08007799
 80076c4:	08007799 	.word	0x08007799
 80076c8:	08007799 	.word	0x08007799
 80076cc:	08007799 	.word	0x08007799
 80076d0:	08007799 	.word	0x08007799
 80076d4:	08007799 	.word	0x08007799
 80076d8:	08007799 	.word	0x08007799
 80076dc:	08007799 	.word	0x08007799
 80076e0:	08007799 	.word	0x08007799
 80076e4:	08007799 	.word	0x08007799
 80076e8:	08007799 	.word	0x08007799
 80076ec:	08007799 	.word	0x08007799
 80076f0:	08007799 	.word	0x08007799
 80076f4:	08007799 	.word	0x08007799
 80076f8:	08007799 	.word	0x08007799
 80076fc:	08007799 	.word	0x08007799
 8007700:	08007799 	.word	0x08007799
 8007704:	08007799 	.word	0x08007799
 8007708:	08007799 	.word	0x08007799
 800770c:	08007799 	.word	0x08007799
 8007710:	08007799 	.word	0x08007799
 8007714:	08007799 	.word	0x08007799
 8007718:	08007799 	.word	0x08007799
 800771c:	08007799 	.word	0x08007799
 8007720:	08007799 	.word	0x08007799
 8007724:	08007799 	.word	0x08007799
 8007728:	08007799 	.word	0x08007799
 800772c:	08007799 	.word	0x08007799
 8007730:	08007791 	.word	0x08007791
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007734:	f7fc fad4 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8007738:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800773a:	e033      	b.n	80077a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800773c:	f7fc fae6 	bl	8003d0c <HAL_RCC_GetPCLK2Freq>
 8007740:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007742:	e02f      	b.n	80077a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007744:	f107 0314 	add.w	r3, r7, #20
 8007748:	4618      	mov	r0, r3
 800774a:	f7fd fa3b 	bl	8004bc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007752:	e027      	b.n	80077a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007754:	f107 0308 	add.w	r3, r7, #8
 8007758:	4618      	mov	r0, r3
 800775a:	f7fd fb7f 	bl	8004e5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007762:	e01f      	b.n	80077a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007764:	4b2c      	ldr	r3, [pc, #176]	; (8007818 <UART_SetConfig+0xb50>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0320 	and.w	r3, r3, #32
 800776c:	2b00      	cmp	r3, #0
 800776e:	d009      	beq.n	8007784 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007770:	4b29      	ldr	r3, [pc, #164]	; (8007818 <UART_SetConfig+0xb50>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	08db      	lsrs	r3, r3, #3
 8007776:	f003 0303 	and.w	r3, r3, #3
 800777a:	4a28      	ldr	r2, [pc, #160]	; (800781c <UART_SetConfig+0xb54>)
 800777c:	fa22 f303 	lsr.w	r3, r2, r3
 8007780:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007782:	e00f      	b.n	80077a4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8007784:	4b25      	ldr	r3, [pc, #148]	; (800781c <UART_SetConfig+0xb54>)
 8007786:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007788:	e00c      	b.n	80077a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800778a:	4b25      	ldr	r3, [pc, #148]	; (8007820 <UART_SetConfig+0xb58>)
 800778c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800778e:	e009      	b.n	80077a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007794:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007796:	e005      	b.n	80077a4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80077a2:	bf00      	nop
    }

    if (pclk != 0U)
 80077a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d021      	beq.n	80077ee <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	4a1d      	ldr	r2, [pc, #116]	; (8007824 <UART_SetConfig+0xb5c>)
 80077b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077b4:	461a      	mov	r2, r3
 80077b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	085b      	lsrs	r3, r3, #1
 80077c2:	441a      	add	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d2:	2b0f      	cmp	r3, #15
 80077d4:	d908      	bls.n	80077e8 <UART_SetConfig+0xb20>
 80077d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077dc:	d204      	bcs.n	80077e8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077e4:	60da      	str	r2, [r3, #12]
 80077e6:	e002      	b.n	80077ee <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800780a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800780e:	4618      	mov	r0, r3
 8007810:	3738      	adds	r7, #56	; 0x38
 8007812:	46bd      	mov	sp, r7
 8007814:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007818:	58024400 	.word	0x58024400
 800781c:	03d09000 	.word	0x03d09000
 8007820:	003d0900 	.word	0x003d0900
 8007824:	0800c144 	.word	0x0800c144

08007828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00a      	beq.n	8007852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007856:	f003 0302 	and.w	r3, r3, #2
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007878:	f003 0304 	and.w	r3, r3, #4
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00a      	beq.n	8007896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	430a      	orrs	r2, r1
 8007894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789a:	f003 0308 	and.w	r3, r3, #8
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00a      	beq.n	80078b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	430a      	orrs	r2, r1
 80078b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078bc:	f003 0310 	and.w	r3, r3, #16
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00a      	beq.n	80078da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078de:	f003 0320 	and.w	r3, r3, #32
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00a      	beq.n	80078fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	430a      	orrs	r2, r1
 80078fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01a      	beq.n	800793e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007926:	d10a      	bne.n	800793e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	430a      	orrs	r2, r1
 800793c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	605a      	str	r2, [r3, #4]
  }
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af02      	add	r7, sp, #8
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800797c:	f7fa f8d6 	bl	8001b2c <HAL_GetTick>
 8007980:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0308 	and.w	r3, r3, #8
 800798c:	2b08      	cmp	r3, #8
 800798e:	d10e      	bne.n	80079ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f82c 	bl	80079fc <UART_WaitOnFlagUntilTimeout>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e022      	b.n	80079f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0304 	and.w	r3, r3, #4
 80079b8:	2b04      	cmp	r3, #4
 80079ba:	d10e      	bne.n	80079da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f816 	bl	80079fc <UART_WaitOnFlagUntilTimeout>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e00c      	b.n	80079f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2220      	movs	r2, #32
 80079de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2220      	movs	r2, #32
 80079e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	603b      	str	r3, [r7, #0]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a0c:	e062      	b.n	8007ad4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a14:	d05e      	beq.n	8007ad4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a16:	f7fa f889 	bl	8001b2c <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d302      	bcc.n	8007a2c <UART_WaitOnFlagUntilTimeout+0x30>
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d11d      	bne.n	8007a68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a3a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689a      	ldr	r2, [r3, #8]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0201 	bic.w	r2, r2, #1
 8007a4a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2220      	movs	r2, #32
 8007a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2220      	movs	r2, #32
 8007a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e045      	b.n	8007af4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0304 	and.w	r3, r3, #4
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d02e      	beq.n	8007ad4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a84:	d126      	bne.n	8007ad4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a8e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a9e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689a      	ldr	r2, [r3, #8]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0201 	bic.w	r2, r2, #1
 8007aae:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2220      	movs	r2, #32
 8007abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e00f      	b.n	8007af4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	69da      	ldr	r2, [r3, #28]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	4013      	ands	r3, r2
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	bf0c      	ite	eq
 8007ae4:	2301      	moveq	r3, #1
 8007ae6:	2300      	movne	r3, #0
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	461a      	mov	r2, r3
 8007aec:	79fb      	ldrb	r3, [r7, #7]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d08d      	beq.n	8007a0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d101      	bne.n	8007b12 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e027      	b.n	8007b62 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2224      	movs	r2, #36	; 0x24
 8007b1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0201 	bic.w	r2, r2, #1
 8007b38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d101      	bne.n	8007b86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b82:	2302      	movs	r3, #2
 8007b84:	e02d      	b.n	8007be2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2224      	movs	r2, #36	; 0x24
 8007b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 0201 	bic.w	r2, r2, #1
 8007bac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f850 	bl	8007c68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d101      	bne.n	8007c02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bfe:	2302      	movs	r3, #2
 8007c00:	e02d      	b.n	8007c5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2224      	movs	r2, #36	; 0x24
 8007c0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f022 0201 	bic.w	r2, r2, #1
 8007c28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f812 	bl	8007c68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b089      	sub	sp, #36	; 0x24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007c70:	4a2f      	ldr	r2, [pc, #188]	; (8007d30 <UARTEx_SetNbDataToProcess+0xc8>)
 8007c72:	f107 0314 	add.w	r3, r7, #20
 8007c76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c7a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007c7e:	4a2d      	ldr	r2, [pc, #180]	; (8007d34 <UARTEx_SetNbDataToProcess+0xcc>)
 8007c80:	f107 030c 	add.w	r3, r7, #12
 8007c84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c88:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d108      	bne.n	8007ca6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ca4:	e03d      	b.n	8007d22 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ca6:	2310      	movs	r3, #16
 8007ca8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007caa:	2310      	movs	r3, #16
 8007cac:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	0e5b      	lsrs	r3, r3, #25
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	f003 0307 	and.w	r3, r3, #7
 8007cbc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	0f5b      	lsrs	r3, r3, #29
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	f003 0307 	and.w	r3, r3, #7
 8007ccc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007cce:	7fbb      	ldrb	r3, [r7, #30]
 8007cd0:	7f3a      	ldrb	r2, [r7, #28]
 8007cd2:	f107 0120 	add.w	r1, r7, #32
 8007cd6:	440a      	add	r2, r1
 8007cd8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007cdc:	fb02 f303 	mul.w	r3, r2, r3
 8007ce0:	7f3a      	ldrb	r2, [r7, #28]
 8007ce2:	f107 0120 	add.w	r1, r7, #32
 8007ce6:	440a      	add	r2, r1
 8007ce8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007cec:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007cf8:	7ffb      	ldrb	r3, [r7, #31]
 8007cfa:	7f7a      	ldrb	r2, [r7, #29]
 8007cfc:	f107 0120 	add.w	r1, r7, #32
 8007d00:	440a      	add	r2, r1
 8007d02:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007d06:	fb02 f303 	mul.w	r3, r2, r3
 8007d0a:	7f7a      	ldrb	r2, [r7, #29]
 8007d0c:	f107 0120 	add.w	r1, r7, #32
 8007d10:	440a      	add	r2, r1
 8007d12:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007d16:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d22:	bf00      	nop
 8007d24:	3724      	adds	r7, #36	; 0x24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	0800b07c 	.word	0x0800b07c
 8007d34:	0800b084 	.word	0x0800b084

08007d38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d38:	b084      	sub	sp, #16
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	f107 001c 	add.w	r0, r7, #28
 8007d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d120      	bne.n	8007d92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68da      	ldr	r2, [r3, #12]
 8007d60:	4b25      	ldr	r3, [pc, #148]	; (8007df8 <USB_CoreInit+0xc0>)
 8007d62:	4013      	ands	r3, r2
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d105      	bne.n	8007d86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fa4c 	bl	8008224 <USB_CoreReset>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	73fb      	strb	r3, [r7, #15]
 8007d90:	e01a      	b.n	8007dc8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fa40 	bl	8008224 <USB_CoreReset>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d106      	bne.n	8007dbc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	639a      	str	r2, [r3, #56]	; 0x38
 8007dba:	e005      	b.n	8007dc8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d10b      	bne.n	8007de6 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f043 0206 	orr.w	r2, r3, #6
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f043 0220 	orr.w	r2, r3, #32
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007df2:	b004      	add	sp, #16
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	ffbdffbf 	.word	0xffbdffbf

08007dfc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f023 0201 	bic.w	r2, r3, #1
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b082      	sub	sp, #8
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	460b      	mov	r3, r1
 8007e28:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d106      	bne.n	8007e4a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	60da      	str	r2, [r3, #12]
 8007e48:	e00b      	b.n	8007e62 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e4a:	78fb      	ldrb	r3, [r7, #3]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d106      	bne.n	8007e5e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	60da      	str	r2, [r3, #12]
 8007e5c:	e001      	b.n	8007e62 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e003      	b.n	8007e6a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007e62:	2032      	movs	r0, #50	; 0x32
 8007e64:	f7f9 fe6e 	bl	8001b44 <HAL_Delay>

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
	...

08007e74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e74:	b084      	sub	sp, #16
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b086      	sub	sp, #24
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e8e:	2300      	movs	r3, #0
 8007e90:	613b      	str	r3, [r7, #16]
 8007e92:	e009      	b.n	8007ea8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	3340      	adds	r3, #64	; 0x40
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4413      	add	r3, r2
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	613b      	str	r3, [r7, #16]
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	2b0e      	cmp	r3, #14
 8007eac:	d9f2      	bls.n	8007e94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d11c      	bne.n	8007eee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ec2:	f043 0302 	orr.w	r3, r3, #2
 8007ec6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ecc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	e005      	b.n	8007efa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f00:	461a      	mov	r2, r3
 8007f02:	2300      	movs	r3, #0
 8007f04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f14:	461a      	mov	r2, r3
 8007f16:	680b      	ldr	r3, [r1, #0]
 8007f18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d10c      	bne.n	8007f3a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d104      	bne.n	8007f30 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f26:	2100      	movs	r1, #0
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f949 	bl	80081c0 <USB_SetDevSpeed>
 8007f2e:	e008      	b.n	8007f42 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f30:	2101      	movs	r1, #1
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f944 	bl	80081c0 <USB_SetDevSpeed>
 8007f38:	e003      	b.n	8007f42 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f3a:	2103      	movs	r1, #3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f93f 	bl	80081c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f42:	2110      	movs	r1, #16
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f8f3 	bl	8008130 <USB_FlushTxFifo>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f911 	bl	800817c <USB_FlushRxFifo>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f76:	461a      	mov	r2, r3
 8007f78:	2300      	movs	r3, #0
 8007f7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f82:	461a      	mov	r2, r3
 8007f84:	2300      	movs	r3, #0
 8007f86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f88:	2300      	movs	r3, #0
 8007f8a:	613b      	str	r3, [r7, #16]
 8007f8c:	e043      	b.n	8008016 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fa4:	d118      	bne.n	8007fd8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10a      	bne.n	8007fc2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb8:	461a      	mov	r2, r3
 8007fba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fbe:	6013      	str	r3, [r2, #0]
 8007fc0:	e013      	b.n	8007fea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	e008      	b.n	8007fea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	015a      	lsls	r2, r3, #5
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4413      	add	r3, r2
 8008004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008008:	461a      	mov	r2, r3
 800800a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800800e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	3301      	adds	r3, #1
 8008014:	613b      	str	r3, [r7, #16]
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	429a      	cmp	r2, r3
 800801c:	d3b7      	bcc.n	8007f8e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800801e:	2300      	movs	r3, #0
 8008020:	613b      	str	r3, [r7, #16]
 8008022:	e043      	b.n	80080ac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008036:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800803a:	d118      	bne.n	800806e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10a      	bne.n	8008058 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	4413      	add	r3, r2
 800804a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800804e:	461a      	mov	r2, r3
 8008050:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	e013      	b.n	8008080 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	4413      	add	r3, r2
 8008060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008064:	461a      	mov	r2, r3
 8008066:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800806a:	6013      	str	r3, [r2, #0]
 800806c:	e008      	b.n	8008080 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	4413      	add	r3, r2
 8008076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807a:	461a      	mov	r2, r3
 800807c:	2300      	movs	r3, #0
 800807e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808c:	461a      	mov	r2, r3
 800808e:	2300      	movs	r3, #0
 8008090:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800809e:	461a      	mov	r2, r3
 80080a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	3301      	adds	r3, #1
 80080aa:	613b      	str	r3, [r7, #16]
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d3b7      	bcc.n	8008024 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80080d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d105      	bne.n	80080e8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	f043 0210 	orr.w	r2, r3, #16
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699a      	ldr	r2, [r3, #24]
 80080ec:	4b0e      	ldr	r3, [pc, #56]	; (8008128 <USB_DevInit+0x2b4>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80080f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d005      	beq.n	8008106 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	f043 0208 	orr.w	r2, r3, #8
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008108:	2b01      	cmp	r3, #1
 800810a:	d105      	bne.n	8008118 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	699a      	ldr	r2, [r3, #24]
 8008110:	4b06      	ldr	r3, [pc, #24]	; (800812c <USB_DevInit+0x2b8>)
 8008112:	4313      	orrs	r3, r2
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008118:	7dfb      	ldrb	r3, [r7, #23]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3718      	adds	r7, #24
 800811e:	46bd      	mov	sp, r7
 8008120:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008124:	b004      	add	sp, #16
 8008126:	4770      	bx	lr
 8008128:	803c3800 	.word	0x803c3800
 800812c:	40000004 	.word	0x40000004

08008130 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	019b      	lsls	r3, r3, #6
 8008142:	f043 0220 	orr.w	r2, r3, #32
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3301      	adds	r3, #1
 800814e:	60fb      	str	r3, [r7, #12]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	4a09      	ldr	r2, [pc, #36]	; (8008178 <USB_FlushTxFifo+0x48>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d901      	bls.n	800815c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e006      	b.n	800816a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	f003 0320 	and.w	r3, r3, #32
 8008164:	2b20      	cmp	r3, #32
 8008166:	d0f0      	beq.n	800814a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	00030d40 	.word	0x00030d40

0800817c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008184:	2300      	movs	r3, #0
 8008186:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2210      	movs	r2, #16
 800818c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	3301      	adds	r3, #1
 8008192:	60fb      	str	r3, [r7, #12]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4a09      	ldr	r2, [pc, #36]	; (80081bc <USB_FlushRxFifo+0x40>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d901      	bls.n	80081a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e006      	b.n	80081ae <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	f003 0310 	and.w	r3, r3, #16
 80081a8:	2b10      	cmp	r3, #16
 80081aa:	d0f0      	beq.n	800818e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	00030d40 	.word	0x00030d40

080081c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	78fb      	ldrb	r3, [r7, #3]
 80081da:	68f9      	ldr	r1, [r7, #12]
 80081dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081e0:	4313      	orrs	r3, r2
 80081e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800820c:	f043 0302 	orr.w	r3, r3, #2
 8008210:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008212:	2003      	movs	r0, #3
 8008214:	f7f9 fc96 	bl	8001b44 <HAL_Delay>

  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
	...

08008224 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	3301      	adds	r3, #1
 8008234:	60fb      	str	r3, [r7, #12]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	4a13      	ldr	r2, [pc, #76]	; (8008288 <USB_CoreReset+0x64>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d901      	bls.n	8008242 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e01b      	b.n	800827a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	2b00      	cmp	r3, #0
 8008248:	daf2      	bge.n	8008230 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800824a:	2300      	movs	r3, #0
 800824c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	f043 0201 	orr.w	r2, r3, #1
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3301      	adds	r3, #1
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4a09      	ldr	r2, [pc, #36]	; (8008288 <USB_CoreReset+0x64>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d901      	bls.n	800826c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e006      	b.n	800827a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	f003 0301 	and.w	r3, r3, #1
 8008274:	2b01      	cmp	r3, #1
 8008276:	d0f0      	beq.n	800825a <USB_CoreReset+0x36>

  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	00030d40 	.word	0x00030d40

0800828c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008290:	bf00      	nop
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
	...

0800829c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082a2:	f3ef 8305 	mrs	r3, IPSR
 80082a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80082a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10f      	bne.n	80082ce <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082ae:	f3ef 8310 	mrs	r3, PRIMASK
 80082b2:	607b      	str	r3, [r7, #4]
  return(result);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d105      	bne.n	80082c6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80082ba:	f3ef 8311 	mrs	r3, BASEPRI
 80082be:	603b      	str	r3, [r7, #0]
  return(result);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d007      	beq.n	80082d6 <osKernelInitialize+0x3a>
 80082c6:	4b0e      	ldr	r3, [pc, #56]	; (8008300 <osKernelInitialize+0x64>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d103      	bne.n	80082d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80082ce:	f06f 0305 	mvn.w	r3, #5
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	e00c      	b.n	80082f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80082d6:	4b0a      	ldr	r3, [pc, #40]	; (8008300 <osKernelInitialize+0x64>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d105      	bne.n	80082ea <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80082de:	4b08      	ldr	r3, [pc, #32]	; (8008300 <osKernelInitialize+0x64>)
 80082e0:	2201      	movs	r2, #1
 80082e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	e002      	b.n	80082f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80082ea:	f04f 33ff 	mov.w	r3, #4294967295
 80082ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80082f0:	68fb      	ldr	r3, [r7, #12]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	24000030 	.word	0x24000030

08008304 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800830a:	f3ef 8305 	mrs	r3, IPSR
 800830e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008310:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10f      	bne.n	8008336 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008316:	f3ef 8310 	mrs	r3, PRIMASK
 800831a:	607b      	str	r3, [r7, #4]
  return(result);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d105      	bne.n	800832e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008322:	f3ef 8311 	mrs	r3, BASEPRI
 8008326:	603b      	str	r3, [r7, #0]
  return(result);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d007      	beq.n	800833e <osKernelStart+0x3a>
 800832e:	4b0f      	ldr	r3, [pc, #60]	; (800836c <osKernelStart+0x68>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b02      	cmp	r3, #2
 8008334:	d103      	bne.n	800833e <osKernelStart+0x3a>
    stat = osErrorISR;
 8008336:	f06f 0305 	mvn.w	r3, #5
 800833a:	60fb      	str	r3, [r7, #12]
 800833c:	e010      	b.n	8008360 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800833e:	4b0b      	ldr	r3, [pc, #44]	; (800836c <osKernelStart+0x68>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d109      	bne.n	800835a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008346:	f7ff ffa1 	bl	800828c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800834a:	4b08      	ldr	r3, [pc, #32]	; (800836c <osKernelStart+0x68>)
 800834c:	2202      	movs	r2, #2
 800834e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008350:	f001 f914 	bl	800957c <vTaskStartScheduler>
      stat = osOK;
 8008354:	2300      	movs	r3, #0
 8008356:	60fb      	str	r3, [r7, #12]
 8008358:	e002      	b.n	8008360 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800835a:	f04f 33ff 	mov.w	r3, #4294967295
 800835e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008360:	68fb      	ldr	r3, [r7, #12]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	24000030 	.word	0x24000030

08008370 <osKernelLock>:

int32_t osKernelLock (void) {
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008376:	f3ef 8305 	mrs	r3, IPSR
 800837a:	60bb      	str	r3, [r7, #8]
  return(result);
 800837c:	68bb      	ldr	r3, [r7, #8]
  int32_t lock;

  if (IS_IRQ()) {
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10f      	bne.n	80083a2 <osKernelLock+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008382:	f3ef 8310 	mrs	r3, PRIMASK
 8008386:	607b      	str	r3, [r7, #4]
  return(result);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d105      	bne.n	800839a <osKernelLock+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800838e:	f3ef 8311 	mrs	r3, BASEPRI
 8008392:	603b      	str	r3, [r7, #0]
  return(result);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d007      	beq.n	80083aa <osKernelLock+0x3a>
 800839a:	4b10      	ldr	r3, [pc, #64]	; (80083dc <osKernelLock+0x6c>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d103      	bne.n	80083aa <osKernelLock+0x3a>
    lock = (int32_t)osErrorISR;
 80083a2:	f06f 0305 	mvn.w	r3, #5
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	e013      	b.n	80083d2 <osKernelLock+0x62>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 80083aa:	f001 fd2f 	bl	8009e0c <xTaskGetSchedulerState>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <osKernelLock+0x4a>
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d003      	beq.n	80083c0 <osKernelLock+0x50>
 80083b8:	e007      	b.n	80083ca <osKernelLock+0x5a>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 80083ba:	2301      	movs	r3, #1
 80083bc:	60fb      	str	r3, [r7, #12]
        break;
 80083be:	e008      	b.n	80083d2 <osKernelLock+0x62>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 80083c0:	f001 f940 	bl	8009644 <vTaskSuspendAll>
        lock = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	60fb      	str	r3, [r7, #12]
        break;
 80083c8:	e003      	b.n	80083d2 <osKernelLock+0x62>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 80083ca:	f04f 33ff 	mov.w	r3, #4294967295
 80083ce:	60fb      	str	r3, [r7, #12]
        break;
 80083d0:	bf00      	nop
    }
  }

  return (lock);
 80083d2:	68fb      	ldr	r3, [r7, #12]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	24000030 	.word	0x24000030

080083e0 <osKernelUnlock>:

int32_t osKernelUnlock (void) {
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083e6:	f3ef 8305 	mrs	r3, IPSR
 80083ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80083ec:	68bb      	ldr	r3, [r7, #8]
  int32_t lock;

  if (IS_IRQ()) {
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10f      	bne.n	8008412 <osKernelUnlock+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083f2:	f3ef 8310 	mrs	r3, PRIMASK
 80083f6:	607b      	str	r3, [r7, #4]
  return(result);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d105      	bne.n	800840a <osKernelUnlock+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083fe:	f3ef 8311 	mrs	r3, BASEPRI
 8008402:	603b      	str	r3, [r7, #0]
  return(result);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d007      	beq.n	800841a <osKernelUnlock+0x3a>
 800840a:	4b16      	ldr	r3, [pc, #88]	; (8008464 <osKernelUnlock+0x84>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b02      	cmp	r3, #2
 8008410:	d103      	bne.n	800841a <osKernelUnlock+0x3a>
    lock = (int32_t)osErrorISR;
 8008412:	f06f 0305 	mvn.w	r3, #5
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	e01f      	b.n	800845a <osKernelUnlock+0x7a>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 800841a:	f001 fcf7 	bl	8009e0c <xTaskGetSchedulerState>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d002      	beq.n	800842a <osKernelUnlock+0x4a>
 8008424:	2b02      	cmp	r3, #2
 8008426:	d010      	beq.n	800844a <osKernelUnlock+0x6a>
 8008428:	e012      	b.n	8008450 <osKernelUnlock+0x70>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 800842a:	2301      	movs	r3, #1
 800842c:	60fb      	str	r3, [r7, #12]

        if (xTaskResumeAll() != pdTRUE) {
 800842e:	f001 f917 	bl	8009660 <xTaskResumeAll>
 8008432:	4603      	mov	r3, r0
 8008434:	2b01      	cmp	r3, #1
 8008436:	d00f      	beq.n	8008458 <osKernelUnlock+0x78>
          if (xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) {
 8008438:	f001 fce8 	bl	8009e0c <xTaskGetSchedulerState>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10a      	bne.n	8008458 <osKernelUnlock+0x78>
            lock = (int32_t)osError;
 8008442:	f04f 33ff 	mov.w	r3, #4294967295
 8008446:	60fb      	str	r3, [r7, #12]
          }
        }
        break;
 8008448:	e006      	b.n	8008458 <osKernelUnlock+0x78>

      case taskSCHEDULER_RUNNING:
        lock = 0;
 800844a:	2300      	movs	r3, #0
 800844c:	60fb      	str	r3, [r7, #12]
        break;
 800844e:	e004      	b.n	800845a <osKernelUnlock+0x7a>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8008450:	f04f 33ff 	mov.w	r3, #4294967295
 8008454:	60fb      	str	r3, [r7, #12]
        break;
 8008456:	e000      	b.n	800845a <osKernelUnlock+0x7a>
        break;
 8008458:	bf00      	nop
    }
  }

  return (lock);
 800845a:	68fb      	ldr	r3, [r7, #12]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	24000030 	.word	0x24000030

08008468 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800846e:	f3ef 8305 	mrs	r3, IPSR
 8008472:	60bb      	str	r3, [r7, #8]
  return(result);
 8008474:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10f      	bne.n	800849a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800847a:	f3ef 8310 	mrs	r3, PRIMASK
 800847e:	607b      	str	r3, [r7, #4]
  return(result);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d105      	bne.n	8008492 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008486:	f3ef 8311 	mrs	r3, BASEPRI
 800848a:	603b      	str	r3, [r7, #0]
  return(result);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <osKernelGetTickCount+0x3a>
 8008492:	4b08      	ldr	r3, [pc, #32]	; (80084b4 <osKernelGetTickCount+0x4c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b02      	cmp	r3, #2
 8008498:	d103      	bne.n	80084a2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800849a:	f001 f98d 	bl	80097b8 <xTaskGetTickCountFromISR>
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	e002      	b.n	80084a8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80084a2:	f001 f979 	bl	8009798 <xTaskGetTickCount>
 80084a6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80084a8:	68fb      	ldr	r3, [r7, #12]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	24000030 	.word	0x24000030

080084b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b090      	sub	sp, #64	; 0x40
 80084bc:	af04      	add	r7, sp, #16
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80084c4:	2300      	movs	r3, #0
 80084c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084c8:	f3ef 8305 	mrs	r3, IPSR
 80084cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80084ce:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f040 808f 	bne.w	80085f4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084d6:	f3ef 8310 	mrs	r3, PRIMASK
 80084da:	61bb      	str	r3, [r7, #24]
  return(result);
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d105      	bne.n	80084ee <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084e2:	f3ef 8311 	mrs	r3, BASEPRI
 80084e6:	617b      	str	r3, [r7, #20]
  return(result);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d003      	beq.n	80084f6 <osThreadNew+0x3e>
 80084ee:	4b44      	ldr	r3, [pc, #272]	; (8008600 <osThreadNew+0x148>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d07e      	beq.n	80085f4 <osThreadNew+0x13c>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d07b      	beq.n	80085f4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80084fc:	2380      	movs	r3, #128	; 0x80
 80084fe:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008500:	2318      	movs	r3, #24
 8008502:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008504:	2300      	movs	r3, #0
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008508:	f04f 33ff 	mov.w	r3, #4294967295
 800850c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d045      	beq.n	80085a0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <osThreadNew+0x6a>
        name = attr->name;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	2b00      	cmp	r3, #0
 8008534:	d008      	beq.n	8008548 <osThreadNew+0x90>
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	2b38      	cmp	r3, #56	; 0x38
 800853a:	d805      	bhi.n	8008548 <osThreadNew+0x90>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <osThreadNew+0x94>
        return (NULL);
 8008548:	2300      	movs	r3, #0
 800854a:	e054      	b.n	80085f6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	695b      	ldr	r3, [r3, #20]
 8008558:	089b      	lsrs	r3, r3, #2
 800855a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00e      	beq.n	8008582 <osThreadNew+0xca>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	2b5b      	cmp	r3, #91	; 0x5b
 800856a:	d90a      	bls.n	8008582 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008570:	2b00      	cmp	r3, #0
 8008572:	d006      	beq.n	8008582 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d002      	beq.n	8008582 <osThreadNew+0xca>
        mem = 1;
 800857c:	2301      	movs	r3, #1
 800857e:	623b      	str	r3, [r7, #32]
 8008580:	e010      	b.n	80085a4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10c      	bne.n	80085a4 <osThreadNew+0xec>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d108      	bne.n	80085a4 <osThreadNew+0xec>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d104      	bne.n	80085a4 <osThreadNew+0xec>
          mem = 0;
 800859a:	2300      	movs	r3, #0
 800859c:	623b      	str	r3, [r7, #32]
 800859e:	e001      	b.n	80085a4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80085a0:	2300      	movs	r3, #0
 80085a2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80085a4:	6a3b      	ldr	r3, [r7, #32]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d110      	bne.n	80085cc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085b2:	9202      	str	r2, [sp, #8]
 80085b4:	9301      	str	r3, [sp, #4]
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 fe09 	bl	80091d8 <xTaskCreateStatic>
 80085c6:	4603      	mov	r3, r0
 80085c8:	613b      	str	r3, [r7, #16]
 80085ca:	e013      	b.n	80085f4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d110      	bne.n	80085f4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80085d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	f107 0310 	add.w	r3, r7, #16
 80085da:	9301      	str	r3, [sp, #4]
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 fe51 	bl	800928c <xTaskCreate>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d001      	beq.n	80085f4 <osThreadNew+0x13c>
          hTask = NULL;
 80085f0:	2300      	movs	r3, #0
 80085f2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80085f4:	693b      	ldr	r3, [r7, #16]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3730      	adds	r7, #48	; 0x30
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	24000030 	.word	0x24000030

08008604 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800860c:	f3ef 8305 	mrs	r3, IPSR
 8008610:	613b      	str	r3, [r7, #16]
  return(result);
 8008612:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10f      	bne.n	8008638 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008618:	f3ef 8310 	mrs	r3, PRIMASK
 800861c:	60fb      	str	r3, [r7, #12]
  return(result);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d105      	bne.n	8008630 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008624:	f3ef 8311 	mrs	r3, BASEPRI
 8008628:	60bb      	str	r3, [r7, #8]
  return(result);
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d007      	beq.n	8008640 <osDelay+0x3c>
 8008630:	4b0a      	ldr	r3, [pc, #40]	; (800865c <osDelay+0x58>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b02      	cmp	r3, #2
 8008636:	d103      	bne.n	8008640 <osDelay+0x3c>
    stat = osErrorISR;
 8008638:	f06f 0305 	mvn.w	r3, #5
 800863c:	617b      	str	r3, [r7, #20]
 800863e:	e007      	b.n	8008650 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008640:	2300      	movs	r3, #0
 8008642:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d002      	beq.n	8008650 <osDelay+0x4c>
      vTaskDelay(ticks);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 ff62 	bl	8009514 <vTaskDelay>
    }
  }

  return (stat);
 8008650:	697b      	ldr	r3, [r7, #20]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3718      	adds	r7, #24
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	24000030 	.word	0x24000030

08008660 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	4a07      	ldr	r2, [pc, #28]	; (800868c <vApplicationGetIdleTaskMemory+0x2c>)
 8008670:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	4a06      	ldr	r2, [pc, #24]	; (8008690 <vApplicationGetIdleTaskMemory+0x30>)
 8008676:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2280      	movs	r2, #128	; 0x80
 800867c:	601a      	str	r2, [r3, #0]
}
 800867e:	bf00      	nop
 8008680:	3714      	adds	r7, #20
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	24000034 	.word	0x24000034
 8008690:	24000090 	.word	0x24000090

08008694 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4a07      	ldr	r2, [pc, #28]	; (80086c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80086a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	4a06      	ldr	r2, [pc, #24]	; (80086c4 <vApplicationGetTimerTaskMemory+0x30>)
 80086aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086b2:	601a      	str	r2, [r3, #0]
}
 80086b4:	bf00      	nop
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	24000290 	.word	0x24000290
 80086c4:	240002ec 	.word	0x240002ec

080086c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f103 0208 	add.w	r2, r3, #8
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f04f 32ff 	mov.w	r2, #4294967295
 80086e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f103 0208 	add.w	r2, r3, #8
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f103 0208 	add.w	r2, r3, #8
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008716:	bf00      	nop
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008722:	b480      	push	{r7}
 8008724:	b085      	sub	sp, #20
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	689a      	ldr	r2, [r3, #8]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	1c5a      	adds	r2, r3, #1
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	601a      	str	r2, [r3, #0]
}
 800875e:	bf00      	nop
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800876a:	b480      	push	{r7}
 800876c:	b085      	sub	sp, #20
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008780:	d103      	bne.n	800878a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	60fb      	str	r3, [r7, #12]
 8008788:	e00c      	b.n	80087a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	3308      	adds	r3, #8
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	e002      	b.n	8008798 <vListInsert+0x2e>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d2f6      	bcs.n	8008792 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	685a      	ldr	r2, [r3, #4]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	683a      	ldr	r2, [r7, #0]
 80087be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	1c5a      	adds	r2, r3, #1
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	601a      	str	r2, [r3, #0]
}
 80087d0:	bf00      	nop
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	6892      	ldr	r2, [r2, #8]
 80087f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	6852      	ldr	r2, [r2, #4]
 80087fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	429a      	cmp	r2, r3
 8008806:	d103      	bne.n	8008810 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	689a      	ldr	r2, [r3, #8]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	1e5a      	subs	r2, r3, #1
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3714      	adds	r7, #20
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d109      	bne.n	8008858 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	60bb      	str	r3, [r7, #8]
 8008856:	e7fe      	b.n	8008856 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008858:	f002 f820 	bl	800a89c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008864:	68f9      	ldr	r1, [r7, #12]
 8008866:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008868:	fb01 f303 	mul.w	r3, r1, r3
 800886c:	441a      	add	r2, r3
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008888:	3b01      	subs	r3, #1
 800888a:	68f9      	ldr	r1, [r7, #12]
 800888c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800888e:	fb01 f303 	mul.w	r3, r1, r3
 8008892:	441a      	add	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	22ff      	movs	r2, #255	; 0xff
 800889c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	22ff      	movs	r2, #255	; 0xff
 80088a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d114      	bne.n	80088d8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d01a      	beq.n	80088ec <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3310      	adds	r3, #16
 80088ba:	4618      	mov	r0, r3
 80088bc:	f001 f8f0 	bl	8009aa0 <xTaskRemoveFromEventList>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d012      	beq.n	80088ec <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80088c6:	4b0d      	ldr	r3, [pc, #52]	; (80088fc <xQueueGenericReset+0xcc>)
 80088c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088cc:	601a      	str	r2, [r3, #0]
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	e009      	b.n	80088ec <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	3310      	adds	r3, #16
 80088dc:	4618      	mov	r0, r3
 80088de:	f7ff fef3 	bl	80086c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	3324      	adds	r3, #36	; 0x24
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7ff feee 	bl	80086c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80088ec:	f002 f804 	bl	800a8f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80088f0:	2301      	movs	r3, #1
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	e000ed04 	.word	0xe000ed04

08008900 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08e      	sub	sp, #56	; 0x38
 8008904:	af02      	add	r7, sp, #8
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
 800890c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d109      	bne.n	8008928 <xQueueGenericCreateStatic+0x28>
 8008914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	62bb      	str	r3, [r7, #40]	; 0x28
 8008926:	e7fe      	b.n	8008926 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d109      	bne.n	8008942 <xQueueGenericCreateStatic+0x42>
 800892e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	627b      	str	r3, [r7, #36]	; 0x24
 8008940:	e7fe      	b.n	8008940 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <xQueueGenericCreateStatic+0x4e>
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <xQueueGenericCreateStatic+0x52>
 800894e:	2301      	movs	r3, #1
 8008950:	e000      	b.n	8008954 <xQueueGenericCreateStatic+0x54>
 8008952:	2300      	movs	r3, #0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d109      	bne.n	800896c <xQueueGenericCreateStatic+0x6c>
 8008958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	623b      	str	r3, [r7, #32]
 800896a:	e7fe      	b.n	800896a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d102      	bne.n	8008978 <xQueueGenericCreateStatic+0x78>
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <xQueueGenericCreateStatic+0x7c>
 8008978:	2301      	movs	r3, #1
 800897a:	e000      	b.n	800897e <xQueueGenericCreateStatic+0x7e>
 800897c:	2300      	movs	r3, #0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d109      	bne.n	8008996 <xQueueGenericCreateStatic+0x96>
 8008982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	61fb      	str	r3, [r7, #28]
 8008994:	e7fe      	b.n	8008994 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008996:	2350      	movs	r3, #80	; 0x50
 8008998:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b50      	cmp	r3, #80	; 0x50
 800899e:	d009      	beq.n	80089b4 <xQueueGenericCreateStatic+0xb4>
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	61bb      	str	r3, [r7, #24]
 80089b2:	e7fe      	b.n	80089b2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80089b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80089ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00d      	beq.n	80089dc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80089c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80089c8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80089cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ce:	9300      	str	r3, [sp, #0]
 80089d0:	4613      	mov	r3, r2
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	68b9      	ldr	r1, [r7, #8]
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f000 f805 	bl	80089e6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80089dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80089de:	4618      	mov	r0, r3
 80089e0:	3730      	adds	r7, #48	; 0x30
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	60f8      	str	r0, [r7, #12]
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	607a      	str	r2, [r7, #4]
 80089f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d103      	bne.n	8008a02 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	69ba      	ldr	r2, [r7, #24]
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	e002      	b.n	8008a08 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008a14:	2101      	movs	r1, #1
 8008a16:	69b8      	ldr	r0, [r7, #24]
 8008a18:	f7ff ff0a 	bl	8008830 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	78fa      	ldrb	r2, [r7, #3]
 8008a20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008a24:	bf00      	nop
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b08e      	sub	sp, #56	; 0x38
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
 8008a38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d109      	bne.n	8008a5c <xQueueGenericSend+0x30>
 8008a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a5a:	e7fe      	b.n	8008a5a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d103      	bne.n	8008a6a <xQueueGenericSend+0x3e>
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <xQueueGenericSend+0x42>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e000      	b.n	8008a70 <xQueueGenericSend+0x44>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d109      	bne.n	8008a88 <xQueueGenericSend+0x5c>
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	627b      	str	r3, [r7, #36]	; 0x24
 8008a86:	e7fe      	b.n	8008a86 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d103      	bne.n	8008a96 <xQueueGenericSend+0x6a>
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d101      	bne.n	8008a9a <xQueueGenericSend+0x6e>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e000      	b.n	8008a9c <xQueueGenericSend+0x70>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d109      	bne.n	8008ab4 <xQueueGenericSend+0x88>
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	623b      	str	r3, [r7, #32]
 8008ab2:	e7fe      	b.n	8008ab2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ab4:	f001 f9aa 	bl	8009e0c <xTaskGetSchedulerState>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d102      	bne.n	8008ac4 <xQueueGenericSend+0x98>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d101      	bne.n	8008ac8 <xQueueGenericSend+0x9c>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e000      	b.n	8008aca <xQueueGenericSend+0x9e>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d109      	bne.n	8008ae2 <xQueueGenericSend+0xb6>
 8008ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	61fb      	str	r3, [r7, #28]
 8008ae0:	e7fe      	b.n	8008ae0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ae2:	f001 fedb 	bl	800a89c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d302      	bcc.n	8008af8 <xQueueGenericSend+0xcc>
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d129      	bne.n	8008b4c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	68b9      	ldr	r1, [r7, #8]
 8008afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008afe:	f000 f9ff 	bl	8008f00 <prvCopyDataToQueue>
 8008b02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d010      	beq.n	8008b2e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0e:	3324      	adds	r3, #36	; 0x24
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 ffc5 	bl	8009aa0 <xTaskRemoveFromEventList>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d013      	beq.n	8008b44 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008b1c:	4b3f      	ldr	r3, [pc, #252]	; (8008c1c <xQueueGenericSend+0x1f0>)
 8008b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b22:	601a      	str	r2, [r3, #0]
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	f3bf 8f6f 	isb	sy
 8008b2c:	e00a      	b.n	8008b44 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d007      	beq.n	8008b44 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008b34:	4b39      	ldr	r3, [pc, #228]	; (8008c1c <xQueueGenericSend+0x1f0>)
 8008b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008b44:	f001 fed8 	bl	800a8f8 <vPortExitCritical>
				return pdPASS;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e063      	b.n	8008c14 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d103      	bne.n	8008b5a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b52:	f001 fed1 	bl	800a8f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008b56:	2300      	movs	r3, #0
 8008b58:	e05c      	b.n	8008c14 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d106      	bne.n	8008b6e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b60:	f107 0314 	add.w	r3, r7, #20
 8008b64:	4618      	mov	r0, r3
 8008b66:	f000 fffd 	bl	8009b64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b6e:	f001 fec3 	bl	800a8f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b72:	f000 fd67 	bl	8009644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b76:	f001 fe91 	bl	800a89c <vPortEnterCritical>
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b80:	b25b      	sxtb	r3, r3
 8008b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b86:	d103      	bne.n	8008b90 <xQueueGenericSend+0x164>
 8008b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b96:	b25b      	sxtb	r3, r3
 8008b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9c:	d103      	bne.n	8008ba6 <xQueueGenericSend+0x17a>
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ba6:	f001 fea7 	bl	800a8f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008baa:	1d3a      	adds	r2, r7, #4
 8008bac:	f107 0314 	add.w	r3, r7, #20
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 ffec 	bl	8009b90 <xTaskCheckForTimeOut>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d124      	bne.n	8008c08 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008bbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bc0:	f000 fa96 	bl	80090f0 <prvIsQueueFull>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d018      	beq.n	8008bfc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bcc:	3310      	adds	r3, #16
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 ff16 	bl	8009a04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bda:	f000 fa21 	bl	8009020 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008bde:	f000 fd3f 	bl	8009660 <xTaskResumeAll>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f47f af7c 	bne.w	8008ae2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008bea:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <xQueueGenericSend+0x1f0>)
 8008bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bf0:	601a      	str	r2, [r3, #0]
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	e772      	b.n	8008ae2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bfe:	f000 fa0f 	bl	8009020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c02:	f000 fd2d 	bl	8009660 <xTaskResumeAll>
 8008c06:	e76c      	b.n	8008ae2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c0a:	f000 fa09 	bl	8009020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c0e:	f000 fd27 	bl	8009660 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3738      	adds	r7, #56	; 0x38
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	e000ed04 	.word	0xe000ed04

08008c20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b08e      	sub	sp, #56	; 0x38
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
 8008c2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d109      	bne.n	8008c4c <xQueueGenericSendFromISR+0x2c>
 8008c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3c:	f383 8811 	msr	BASEPRI, r3
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	f3bf 8f4f 	dsb	sy
 8008c48:	627b      	str	r3, [r7, #36]	; 0x24
 8008c4a:	e7fe      	b.n	8008c4a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d103      	bne.n	8008c5a <xQueueGenericSendFromISR+0x3a>
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <xQueueGenericSendFromISR+0x3e>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e000      	b.n	8008c60 <xQueueGenericSendFromISR+0x40>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d109      	bne.n	8008c78 <xQueueGenericSendFromISR+0x58>
 8008c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	623b      	str	r3, [r7, #32]
 8008c76:	e7fe      	b.n	8008c76 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d103      	bne.n	8008c86 <xQueueGenericSendFromISR+0x66>
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d101      	bne.n	8008c8a <xQueueGenericSendFromISR+0x6a>
 8008c86:	2301      	movs	r3, #1
 8008c88:	e000      	b.n	8008c8c <xQueueGenericSendFromISR+0x6c>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d109      	bne.n	8008ca4 <xQueueGenericSendFromISR+0x84>
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	61fb      	str	r3, [r7, #28]
 8008ca2:	e7fe      	b.n	8008ca2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ca4:	f001 fed6 	bl	800aa54 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ca8:	f3ef 8211 	mrs	r2, BASEPRI
 8008cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb0:	f383 8811 	msr	BASEPRI, r3
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	61ba      	str	r2, [r7, #24]
 8008cbe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008cc0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d302      	bcc.n	8008cd6 <xQueueGenericSendFromISR+0xb6>
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d12c      	bne.n	8008d30 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ce0:	683a      	ldr	r2, [r7, #0]
 8008ce2:	68b9      	ldr	r1, [r7, #8]
 8008ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ce6:	f000 f90b 	bl	8008f00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008cea:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf2:	d112      	bne.n	8008d1a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d016      	beq.n	8008d2a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfe:	3324      	adds	r3, #36	; 0x24
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 fecd 	bl	8009aa0 <xTaskRemoveFromEventList>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00e      	beq.n	8008d2a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00b      	beq.n	8008d2a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2201      	movs	r2, #1
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	e007      	b.n	8008d2a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d1e:	3301      	adds	r3, #1
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	b25a      	sxtb	r2, r3
 8008d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008d2e:	e001      	b.n	8008d34 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d30:	2300      	movs	r3, #0
 8008d32:	637b      	str	r3, [r7, #52]	; 0x34
 8008d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d36:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3738      	adds	r7, #56	; 0x38
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b08c      	sub	sp, #48	; 0x30
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d54:	2300      	movs	r3, #0
 8008d56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d109      	bne.n	8008d76 <xQueueReceive+0x2e>
	__asm volatile
 8008d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	623b      	str	r3, [r7, #32]
 8008d74:	e7fe      	b.n	8008d74 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d103      	bne.n	8008d84 <xQueueReceive+0x3c>
 8008d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d101      	bne.n	8008d88 <xQueueReceive+0x40>
 8008d84:	2301      	movs	r3, #1
 8008d86:	e000      	b.n	8008d8a <xQueueReceive+0x42>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d109      	bne.n	8008da2 <xQueueReceive+0x5a>
 8008d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	61fb      	str	r3, [r7, #28]
 8008da0:	e7fe      	b.n	8008da0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008da2:	f001 f833 	bl	8009e0c <xTaskGetSchedulerState>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d102      	bne.n	8008db2 <xQueueReceive+0x6a>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d101      	bne.n	8008db6 <xQueueReceive+0x6e>
 8008db2:	2301      	movs	r3, #1
 8008db4:	e000      	b.n	8008db8 <xQueueReceive+0x70>
 8008db6:	2300      	movs	r3, #0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d109      	bne.n	8008dd0 <xQueueReceive+0x88>
 8008dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	61bb      	str	r3, [r7, #24]
 8008dce:	e7fe      	b.n	8008dce <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008dd0:	f001 fd64 	bl	800a89c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d01f      	beq.n	8008e20 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008de0:	68b9      	ldr	r1, [r7, #8]
 8008de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008de4:	f000 f8f6 	bl	8008fd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	1e5a      	subs	r2, r3, #1
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00f      	beq.n	8008e18 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	3310      	adds	r3, #16
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 fe4f 	bl	8009aa0 <xTaskRemoveFromEventList>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d007      	beq.n	8008e18 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e08:	4b3c      	ldr	r3, [pc, #240]	; (8008efc <xQueueReceive+0x1b4>)
 8008e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e18:	f001 fd6e 	bl	800a8f8 <vPortExitCritical>
				return pdPASS;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e069      	b.n	8008ef4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d103      	bne.n	8008e2e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e26:	f001 fd67 	bl	800a8f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	e062      	b.n	8008ef4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d106      	bne.n	8008e42 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e34:	f107 0310 	add.w	r3, r7, #16
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f000 fe93 	bl	8009b64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e42:	f001 fd59 	bl	800a8f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e46:	f000 fbfd 	bl	8009644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e4a:	f001 fd27 	bl	800a89c <vPortEnterCritical>
 8008e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e54:	b25b      	sxtb	r3, r3
 8008e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5a:	d103      	bne.n	8008e64 <xQueueReceive+0x11c>
 8008e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e6a:	b25b      	sxtb	r3, r3
 8008e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e70:	d103      	bne.n	8008e7a <xQueueReceive+0x132>
 8008e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e7a:	f001 fd3d 	bl	800a8f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e7e:	1d3a      	adds	r2, r7, #4
 8008e80:	f107 0310 	add.w	r3, r7, #16
 8008e84:	4611      	mov	r1, r2
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 fe82 	bl	8009b90 <xTaskCheckForTimeOut>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d123      	bne.n	8008eda <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e94:	f000 f916 	bl	80090c4 <prvIsQueueEmpty>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d017      	beq.n	8008ece <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea0:	3324      	adds	r3, #36	; 0x24
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 fdac 	bl	8009a04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eae:	f000 f8b7 	bl	8009020 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008eb2:	f000 fbd5 	bl	8009660 <xTaskResumeAll>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d189      	bne.n	8008dd0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008ebc:	4b0f      	ldr	r3, [pc, #60]	; (8008efc <xQueueReceive+0x1b4>)
 8008ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	e780      	b.n	8008dd0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ed0:	f000 f8a6 	bl	8009020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ed4:	f000 fbc4 	bl	8009660 <xTaskResumeAll>
 8008ed8:	e77a      	b.n	8008dd0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008edc:	f000 f8a0 	bl	8009020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ee0:	f000 fbbe 	bl	8009660 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ee6:	f000 f8ed 	bl	80090c4 <prvIsQueueEmpty>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f43f af6f 	beq.w	8008dd0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ef2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3730      	adds	r7, #48	; 0x30
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	e000ed04 	.word	0xe000ed04

08008f00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10d      	bne.n	8008f3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d14d      	bne.n	8008fc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f000 ff8c 	bl	8009e48 <xTaskPriorityDisinherit>
 8008f30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	609a      	str	r2, [r3, #8]
 8008f38:	e043      	b.n	8008fc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d119      	bne.n	8008f74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6858      	ldr	r0, [r3, #4]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f48:	461a      	mov	r2, r3
 8008f4a:	68b9      	ldr	r1, [r7, #8]
 8008f4c:	f001 ffba 	bl	800aec4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	685a      	ldr	r2, [r3, #4]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f58:	441a      	add	r2, r3
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	685a      	ldr	r2, [r3, #4]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d32b      	bcc.n	8008fc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	605a      	str	r2, [r3, #4]
 8008f72:	e026      	b.n	8008fc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	68d8      	ldr	r0, [r3, #12]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	68b9      	ldr	r1, [r7, #8]
 8008f80:	f001 ffa0 	bl	800aec4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	68da      	ldr	r2, [r3, #12]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8c:	425b      	negs	r3, r3
 8008f8e:	441a      	add	r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	68da      	ldr	r2, [r3, #12]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d207      	bcs.n	8008fb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	689a      	ldr	r2, [r3, #8]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa8:	425b      	negs	r3, r3
 8008faa:	441a      	add	r2, r3
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d105      	bne.n	8008fc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d002      	beq.n	8008fc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	1c5a      	adds	r2, r3, #1
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008fca:	697b      	ldr	r3, [r7, #20]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3718      	adds	r7, #24
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d018      	beq.n	8009018 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68da      	ldr	r2, [r3, #12]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fee:	441a      	add	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	68da      	ldr	r2, [r3, #12]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d303      	bcc.n	8009008 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68d9      	ldr	r1, [r3, #12]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009010:	461a      	mov	r2, r3
 8009012:	6838      	ldr	r0, [r7, #0]
 8009014:	f001 ff56 	bl	800aec4 <memcpy>
	}
}
 8009018:	bf00      	nop
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009028:	f001 fc38 	bl	800a89c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009032:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009034:	e011      	b.n	800905a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903a:	2b00      	cmp	r3, #0
 800903c:	d012      	beq.n	8009064 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	3324      	adds	r3, #36	; 0x24
 8009042:	4618      	mov	r0, r3
 8009044:	f000 fd2c 	bl	8009aa0 <xTaskRemoveFromEventList>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800904e:	f000 fdff 	bl	8009c50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009052:	7bfb      	ldrb	r3, [r7, #15]
 8009054:	3b01      	subs	r3, #1
 8009056:	b2db      	uxtb	r3, r3
 8009058:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800905a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800905e:	2b00      	cmp	r3, #0
 8009060:	dce9      	bgt.n	8009036 <prvUnlockQueue+0x16>
 8009062:	e000      	b.n	8009066 <prvUnlockQueue+0x46>
					break;
 8009064:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	22ff      	movs	r2, #255	; 0xff
 800906a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800906e:	f001 fc43 	bl	800a8f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009072:	f001 fc13 	bl	800a89c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800907c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800907e:	e011      	b.n	80090a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d012      	beq.n	80090ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	3310      	adds	r3, #16
 800908c:	4618      	mov	r0, r3
 800908e:	f000 fd07 	bl	8009aa0 <xTaskRemoveFromEventList>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009098:	f000 fdda 	bl	8009c50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800909c:	7bbb      	ldrb	r3, [r7, #14]
 800909e:	3b01      	subs	r3, #1
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	dce9      	bgt.n	8009080 <prvUnlockQueue+0x60>
 80090ac:	e000      	b.n	80090b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80090ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	22ff      	movs	r2, #255	; 0xff
 80090b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80090b8:	f001 fc1e 	bl	800a8f8 <vPortExitCritical>
}
 80090bc:	bf00      	nop
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090cc:	f001 fbe6 	bl	800a89c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d102      	bne.n	80090de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80090d8:	2301      	movs	r3, #1
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	e001      	b.n	80090e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80090de:	2300      	movs	r3, #0
 80090e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090e2:	f001 fc09 	bl	800a8f8 <vPortExitCritical>

	return xReturn;
 80090e6:	68fb      	ldr	r3, [r7, #12]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3710      	adds	r7, #16
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090f8:	f001 fbd0 	bl	800a89c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009104:	429a      	cmp	r2, r3
 8009106:	d102      	bne.n	800910e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009108:	2301      	movs	r3, #1
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	e001      	b.n	8009112 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800910e:	2300      	movs	r3, #0
 8009110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009112:	f001 fbf1 	bl	800a8f8 <vPortExitCritical>

	return xReturn;
 8009116:	68fb      	ldr	r3, [r7, #12]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800912a:	2300      	movs	r3, #0
 800912c:	60fb      	str	r3, [r7, #12]
 800912e:	e014      	b.n	800915a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009130:	4a0e      	ldr	r2, [pc, #56]	; (800916c <vQueueAddToRegistry+0x4c>)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d10b      	bne.n	8009154 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800913c:	490b      	ldr	r1, [pc, #44]	; (800916c <vQueueAddToRegistry+0x4c>)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009146:	4a09      	ldr	r2, [pc, #36]	; (800916c <vQueueAddToRegistry+0x4c>)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	00db      	lsls	r3, r3, #3
 800914c:	4413      	add	r3, r2
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009152:	e005      	b.n	8009160 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	3301      	adds	r3, #1
 8009158:	60fb      	str	r3, [r7, #12]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2b07      	cmp	r3, #7
 800915e:	d9e7      	bls.n	8009130 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009160:	bf00      	nop
 8009162:	3714      	adds	r7, #20
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	24005018 	.word	0x24005018

08009170 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009180:	f001 fb8c 	bl	800a89c <vPortEnterCritical>
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800918a:	b25b      	sxtb	r3, r3
 800918c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009190:	d103      	bne.n	800919a <vQueueWaitForMessageRestricted+0x2a>
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091a0:	b25b      	sxtb	r3, r3
 80091a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a6:	d103      	bne.n	80091b0 <vQueueWaitForMessageRestricted+0x40>
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091b0:	f001 fba2 	bl	800a8f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d106      	bne.n	80091ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	3324      	adds	r3, #36	; 0x24
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	68b9      	ldr	r1, [r7, #8]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f000 fc41 	bl	8009a4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80091ca:	6978      	ldr	r0, [r7, #20]
 80091cc:	f7ff ff28 	bl	8009020 <prvUnlockQueue>
	}
 80091d0:	bf00      	nop
 80091d2:	3718      	adds	r7, #24
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b08e      	sub	sp, #56	; 0x38
 80091dc:	af04      	add	r7, sp, #16
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
 80091e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80091e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d109      	bne.n	8009200 <xTaskCreateStatic+0x28>
 80091ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	623b      	str	r3, [r7, #32]
 80091fe:	e7fe      	b.n	80091fe <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009202:	2b00      	cmp	r3, #0
 8009204:	d109      	bne.n	800921a <xTaskCreateStatic+0x42>
 8009206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920a:	f383 8811 	msr	BASEPRI, r3
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	61fb      	str	r3, [r7, #28]
 8009218:	e7fe      	b.n	8009218 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800921a:	235c      	movs	r3, #92	; 0x5c
 800921c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2b5c      	cmp	r3, #92	; 0x5c
 8009222:	d009      	beq.n	8009238 <xTaskCreateStatic+0x60>
 8009224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	61bb      	str	r3, [r7, #24]
 8009236:	e7fe      	b.n	8009236 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009238:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800923a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923c:	2b00      	cmp	r3, #0
 800923e:	d01e      	beq.n	800927e <xTaskCreateStatic+0xa6>
 8009240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009242:	2b00      	cmp	r3, #0
 8009244:	d01b      	beq.n	800927e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009248:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800924e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	2202      	movs	r2, #2
 8009254:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009258:	2300      	movs	r3, #0
 800925a:	9303      	str	r3, [sp, #12]
 800925c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925e:	9302      	str	r3, [sp, #8]
 8009260:	f107 0314 	add.w	r3, r7, #20
 8009264:	9301      	str	r3, [sp, #4]
 8009266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	68b9      	ldr	r1, [r7, #8]
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f000 f850 	bl	8009316 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009276:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009278:	f000 f8dc 	bl	8009434 <prvAddNewTaskToReadyList>
 800927c:	e001      	b.n	8009282 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800927e:	2300      	movs	r3, #0
 8009280:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009282:	697b      	ldr	r3, [r7, #20]
	}
 8009284:	4618      	mov	r0, r3
 8009286:	3728      	adds	r7, #40	; 0x28
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08c      	sub	sp, #48	; 0x30
 8009290:	af04      	add	r7, sp, #16
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	603b      	str	r3, [r7, #0]
 8009298:	4613      	mov	r3, r2
 800929a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800929c:	88fb      	ldrh	r3, [r7, #6]
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4618      	mov	r0, r3
 80092a2:	f001 fc15 	bl	800aad0 <pvPortMalloc>
 80092a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00e      	beq.n	80092cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80092ae:	205c      	movs	r0, #92	; 0x5c
 80092b0:	f001 fc0e 	bl	800aad0 <pvPortMalloc>
 80092b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d003      	beq.n	80092c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	697a      	ldr	r2, [r7, #20]
 80092c0:	631a      	str	r2, [r3, #48]	; 0x30
 80092c2:	e005      	b.n	80092d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80092c4:	6978      	ldr	r0, [r7, #20]
 80092c6:	f001 fcc5 	bl	800ac54 <vPortFree>
 80092ca:	e001      	b.n	80092d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092cc:	2300      	movs	r3, #0
 80092ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d017      	beq.n	8009306 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092de:	88fa      	ldrh	r2, [r7, #6]
 80092e0:	2300      	movs	r3, #0
 80092e2:	9303      	str	r3, [sp, #12]
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	9302      	str	r3, [sp, #8]
 80092e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ea:	9301      	str	r3, [sp, #4]
 80092ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	68b9      	ldr	r1, [r7, #8]
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f000 f80e 	bl	8009316 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092fa:	69f8      	ldr	r0, [r7, #28]
 80092fc:	f000 f89a 	bl	8009434 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009300:	2301      	movs	r3, #1
 8009302:	61bb      	str	r3, [r7, #24]
 8009304:	e002      	b.n	800930c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009306:	f04f 33ff 	mov.w	r3, #4294967295
 800930a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800930c:	69bb      	ldr	r3, [r7, #24]
	}
 800930e:	4618      	mov	r0, r3
 8009310:	3720      	adds	r7, #32
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b088      	sub	sp, #32
 800931a:	af00      	add	r7, sp, #0
 800931c:	60f8      	str	r0, [r7, #12]
 800931e:	60b9      	str	r1, [r7, #8]
 8009320:	607a      	str	r2, [r7, #4]
 8009322:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009326:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	461a      	mov	r2, r3
 800932e:	21a5      	movs	r1, #165	; 0xa5
 8009330:	f001 fdd3 	bl	800aeda <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009338:	6879      	ldr	r1, [r7, #4]
 800933a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800933e:	440b      	add	r3, r1
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	4413      	add	r3, r2
 8009344:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	f023 0307 	bic.w	r3, r3, #7
 800934c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	f003 0307 	and.w	r3, r3, #7
 8009354:	2b00      	cmp	r3, #0
 8009356:	d009      	beq.n	800936c <prvInitialiseNewTask+0x56>
 8009358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935c:	f383 8811 	msr	BASEPRI, r3
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	617b      	str	r3, [r7, #20]
 800936a:	e7fe      	b.n	800936a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d01f      	beq.n	80093b2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009372:	2300      	movs	r3, #0
 8009374:	61fb      	str	r3, [r7, #28]
 8009376:	e012      	b.n	800939e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009378:	68ba      	ldr	r2, [r7, #8]
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	4413      	add	r3, r2
 800937e:	7819      	ldrb	r1, [r3, #0]
 8009380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	4413      	add	r3, r2
 8009386:	3334      	adds	r3, #52	; 0x34
 8009388:	460a      	mov	r2, r1
 800938a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	4413      	add	r3, r2
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d006      	beq.n	80093a6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	3301      	adds	r3, #1
 800939c:	61fb      	str	r3, [r7, #28]
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	2b0f      	cmp	r3, #15
 80093a2:	d9e9      	bls.n	8009378 <prvInitialiseNewTask+0x62>
 80093a4:	e000      	b.n	80093a8 <prvInitialiseNewTask+0x92>
			{
				break;
 80093a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80093a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093b0:	e003      	b.n	80093ba <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80093b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80093ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093bc:	2b37      	cmp	r3, #55	; 0x37
 80093be:	d901      	bls.n	80093c4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80093c0:	2337      	movs	r3, #55	; 0x37
 80093c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80093c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80093ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80093d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d2:	2200      	movs	r2, #0
 80093d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d8:	3304      	adds	r3, #4
 80093da:	4618      	mov	r0, r3
 80093dc:	f7ff f994 	bl	8008708 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e2:	3318      	adds	r3, #24
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7ff f98f 	bl	8008708 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009402:	2200      	movs	r2, #0
 8009404:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	68f9      	ldr	r1, [r7, #12]
 8009412:	69b8      	ldr	r0, [r7, #24]
 8009414:	f001 f91e 	bl	800a654 <pxPortInitialiseStack>
 8009418:	4602      	mov	r2, r0
 800941a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800941e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009420:	2b00      	cmp	r3, #0
 8009422:	d002      	beq.n	800942a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009428:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800942a:	bf00      	nop
 800942c:	3720      	adds	r7, #32
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
	...

08009434 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800943c:	f001 fa2e 	bl	800a89c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009440:	4b2d      	ldr	r3, [pc, #180]	; (80094f8 <prvAddNewTaskToReadyList+0xc4>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3301      	adds	r3, #1
 8009446:	4a2c      	ldr	r2, [pc, #176]	; (80094f8 <prvAddNewTaskToReadyList+0xc4>)
 8009448:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800944a:	4b2c      	ldr	r3, [pc, #176]	; (80094fc <prvAddNewTaskToReadyList+0xc8>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d109      	bne.n	8009466 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009452:	4a2a      	ldr	r2, [pc, #168]	; (80094fc <prvAddNewTaskToReadyList+0xc8>)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009458:	4b27      	ldr	r3, [pc, #156]	; (80094f8 <prvAddNewTaskToReadyList+0xc4>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d110      	bne.n	8009482 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009460:	f000 fc1a 	bl	8009c98 <prvInitialiseTaskLists>
 8009464:	e00d      	b.n	8009482 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009466:	4b26      	ldr	r3, [pc, #152]	; (8009500 <prvAddNewTaskToReadyList+0xcc>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d109      	bne.n	8009482 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800946e:	4b23      	ldr	r3, [pc, #140]	; (80094fc <prvAddNewTaskToReadyList+0xc8>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009478:	429a      	cmp	r2, r3
 800947a:	d802      	bhi.n	8009482 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800947c:	4a1f      	ldr	r2, [pc, #124]	; (80094fc <prvAddNewTaskToReadyList+0xc8>)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009482:	4b20      	ldr	r3, [pc, #128]	; (8009504 <prvAddNewTaskToReadyList+0xd0>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3301      	adds	r3, #1
 8009488:	4a1e      	ldr	r2, [pc, #120]	; (8009504 <prvAddNewTaskToReadyList+0xd0>)
 800948a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800948c:	4b1d      	ldr	r3, [pc, #116]	; (8009504 <prvAddNewTaskToReadyList+0xd0>)
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009498:	4b1b      	ldr	r3, [pc, #108]	; (8009508 <prvAddNewTaskToReadyList+0xd4>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	429a      	cmp	r2, r3
 800949e:	d903      	bls.n	80094a8 <prvAddNewTaskToReadyList+0x74>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a4:	4a18      	ldr	r2, [pc, #96]	; (8009508 <prvAddNewTaskToReadyList+0xd4>)
 80094a6:	6013      	str	r3, [r2, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ac:	4613      	mov	r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4a15      	ldr	r2, [pc, #84]	; (800950c <prvAddNewTaskToReadyList+0xd8>)
 80094b6:	441a      	add	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	3304      	adds	r3, #4
 80094bc:	4619      	mov	r1, r3
 80094be:	4610      	mov	r0, r2
 80094c0:	f7ff f92f 	bl	8008722 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80094c4:	f001 fa18 	bl	800a8f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80094c8:	4b0d      	ldr	r3, [pc, #52]	; (8009500 <prvAddNewTaskToReadyList+0xcc>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00e      	beq.n	80094ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80094d0:	4b0a      	ldr	r3, [pc, #40]	; (80094fc <prvAddNewTaskToReadyList+0xc8>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094da:	429a      	cmp	r2, r3
 80094dc:	d207      	bcs.n	80094ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80094de:	4b0c      	ldr	r3, [pc, #48]	; (8009510 <prvAddNewTaskToReadyList+0xdc>)
 80094e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094e4:	601a      	str	r2, [r3, #0]
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094ee:	bf00      	nop
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	24000bc0 	.word	0x24000bc0
 80094fc:	240006ec 	.word	0x240006ec
 8009500:	24000bcc 	.word	0x24000bcc
 8009504:	24000bdc 	.word	0x24000bdc
 8009508:	24000bc8 	.word	0x24000bc8
 800950c:	240006f0 	.word	0x240006f0
 8009510:	e000ed04 	.word	0xe000ed04

08009514 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800951c:	2300      	movs	r3, #0
 800951e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d016      	beq.n	8009554 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009526:	4b13      	ldr	r3, [pc, #76]	; (8009574 <vTaskDelay+0x60>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d009      	beq.n	8009542 <vTaskDelay+0x2e>
 800952e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	60bb      	str	r3, [r7, #8]
 8009540:	e7fe      	b.n	8009540 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009542:	f000 f87f 	bl	8009644 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009546:	2100      	movs	r1, #0
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 fce9 	bl	8009f20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800954e:	f000 f887 	bl	8009660 <xTaskResumeAll>
 8009552:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d107      	bne.n	800956a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800955a:	4b07      	ldr	r3, [pc, #28]	; (8009578 <vTaskDelay+0x64>)
 800955c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009560:	601a      	str	r2, [r3, #0]
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800956a:	bf00      	nop
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	24000be8 	.word	0x24000be8
 8009578:	e000ed04 	.word	0xe000ed04

0800957c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b08a      	sub	sp, #40	; 0x28
 8009580:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009582:	2300      	movs	r3, #0
 8009584:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009586:	2300      	movs	r3, #0
 8009588:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800958a:	463a      	mov	r2, r7
 800958c:	1d39      	adds	r1, r7, #4
 800958e:	f107 0308 	add.w	r3, r7, #8
 8009592:	4618      	mov	r0, r3
 8009594:	f7ff f864 	bl	8008660 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	9202      	str	r2, [sp, #8]
 80095a0:	9301      	str	r3, [sp, #4]
 80095a2:	2300      	movs	r3, #0
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	2300      	movs	r3, #0
 80095a8:	460a      	mov	r2, r1
 80095aa:	4920      	ldr	r1, [pc, #128]	; (800962c <vTaskStartScheduler+0xb0>)
 80095ac:	4820      	ldr	r0, [pc, #128]	; (8009630 <vTaskStartScheduler+0xb4>)
 80095ae:	f7ff fe13 	bl	80091d8 <xTaskCreateStatic>
 80095b2:	4602      	mov	r2, r0
 80095b4:	4b1f      	ldr	r3, [pc, #124]	; (8009634 <vTaskStartScheduler+0xb8>)
 80095b6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80095b8:	4b1e      	ldr	r3, [pc, #120]	; (8009634 <vTaskStartScheduler+0xb8>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80095c0:	2301      	movs	r3, #1
 80095c2:	617b      	str	r3, [r7, #20]
 80095c4:	e001      	b.n	80095ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d102      	bne.n	80095d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80095d0:	f000 fcfa 	bl	8009fc8 <xTimerCreateTimerTask>
 80095d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d115      	bne.n	8009608 <vTaskStartScheduler+0x8c>
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095ee:	4b12      	ldr	r3, [pc, #72]	; (8009638 <vTaskStartScheduler+0xbc>)
 80095f0:	f04f 32ff 	mov.w	r2, #4294967295
 80095f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095f6:	4b11      	ldr	r3, [pc, #68]	; (800963c <vTaskStartScheduler+0xc0>)
 80095f8:	2201      	movs	r2, #1
 80095fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80095fc:	4b10      	ldr	r3, [pc, #64]	; (8009640 <vTaskStartScheduler+0xc4>)
 80095fe:	2200      	movs	r2, #0
 8009600:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009602:	f001 f8ad 	bl	800a760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009606:	e00d      	b.n	8009624 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960e:	d109      	bne.n	8009624 <vTaskStartScheduler+0xa8>
 8009610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009614:	f383 8811 	msr	BASEPRI, r3
 8009618:	f3bf 8f6f 	isb	sy
 800961c:	f3bf 8f4f 	dsb	sy
 8009620:	60fb      	str	r3, [r7, #12]
 8009622:	e7fe      	b.n	8009622 <vTaskStartScheduler+0xa6>
}
 8009624:	bf00      	nop
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	0800b08c 	.word	0x0800b08c
 8009630:	08009c69 	.word	0x08009c69
 8009634:	24000be4 	.word	0x24000be4
 8009638:	24000be0 	.word	0x24000be0
 800963c:	24000bcc 	.word	0x24000bcc
 8009640:	24000bc4 	.word	0x24000bc4

08009644 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009644:	b480      	push	{r7}
 8009646:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009648:	4b04      	ldr	r3, [pc, #16]	; (800965c <vTaskSuspendAll+0x18>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3301      	adds	r3, #1
 800964e:	4a03      	ldr	r2, [pc, #12]	; (800965c <vTaskSuspendAll+0x18>)
 8009650:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009652:	bf00      	nop
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	24000be8 	.word	0x24000be8

08009660 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009666:	2300      	movs	r3, #0
 8009668:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800966a:	2300      	movs	r3, #0
 800966c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800966e:	4b41      	ldr	r3, [pc, #260]	; (8009774 <xTaskResumeAll+0x114>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d109      	bne.n	800968a <xTaskResumeAll+0x2a>
 8009676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967a:	f383 8811 	msr	BASEPRI, r3
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f3bf 8f4f 	dsb	sy
 8009686:	603b      	str	r3, [r7, #0]
 8009688:	e7fe      	b.n	8009688 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800968a:	f001 f907 	bl	800a89c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800968e:	4b39      	ldr	r3, [pc, #228]	; (8009774 <xTaskResumeAll+0x114>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3b01      	subs	r3, #1
 8009694:	4a37      	ldr	r2, [pc, #220]	; (8009774 <xTaskResumeAll+0x114>)
 8009696:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009698:	4b36      	ldr	r3, [pc, #216]	; (8009774 <xTaskResumeAll+0x114>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d162      	bne.n	8009766 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096a0:	4b35      	ldr	r3, [pc, #212]	; (8009778 <xTaskResumeAll+0x118>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d05e      	beq.n	8009766 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096a8:	e02f      	b.n	800970a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096aa:	4b34      	ldr	r3, [pc, #208]	; (800977c <xTaskResumeAll+0x11c>)
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	3318      	adds	r3, #24
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7ff f890 	bl	80087dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	3304      	adds	r3, #4
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7ff f88b 	bl	80087dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ca:	4b2d      	ldr	r3, [pc, #180]	; (8009780 <xTaskResumeAll+0x120>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d903      	bls.n	80096da <xTaskResumeAll+0x7a>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d6:	4a2a      	ldr	r2, [pc, #168]	; (8009780 <xTaskResumeAll+0x120>)
 80096d8:	6013      	str	r3, [r2, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096de:	4613      	mov	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	4413      	add	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4a27      	ldr	r2, [pc, #156]	; (8009784 <xTaskResumeAll+0x124>)
 80096e8:	441a      	add	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	3304      	adds	r3, #4
 80096ee:	4619      	mov	r1, r3
 80096f0:	4610      	mov	r0, r2
 80096f2:	f7ff f816 	bl	8008722 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096fa:	4b23      	ldr	r3, [pc, #140]	; (8009788 <xTaskResumeAll+0x128>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009700:	429a      	cmp	r2, r3
 8009702:	d302      	bcc.n	800970a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009704:	4b21      	ldr	r3, [pc, #132]	; (800978c <xTaskResumeAll+0x12c>)
 8009706:	2201      	movs	r2, #1
 8009708:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800970a:	4b1c      	ldr	r3, [pc, #112]	; (800977c <xTaskResumeAll+0x11c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1cb      	bne.n	80096aa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009718:	f000 fb58 	bl	8009dcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800971c:	4b1c      	ldr	r3, [pc, #112]	; (8009790 <xTaskResumeAll+0x130>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d010      	beq.n	800974a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009728:	f000 f858 	bl	80097dc <xTaskIncrementTick>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d002      	beq.n	8009738 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009732:	4b16      	ldr	r3, [pc, #88]	; (800978c <xTaskResumeAll+0x12c>)
 8009734:	2201      	movs	r2, #1
 8009736:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	3b01      	subs	r3, #1
 800973c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1f1      	bne.n	8009728 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009744:	4b12      	ldr	r3, [pc, #72]	; (8009790 <xTaskResumeAll+0x130>)
 8009746:	2200      	movs	r2, #0
 8009748:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800974a:	4b10      	ldr	r3, [pc, #64]	; (800978c <xTaskResumeAll+0x12c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d009      	beq.n	8009766 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009752:	2301      	movs	r3, #1
 8009754:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009756:	4b0f      	ldr	r3, [pc, #60]	; (8009794 <xTaskResumeAll+0x134>)
 8009758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009766:	f001 f8c7 	bl	800a8f8 <vPortExitCritical>

	return xAlreadyYielded;
 800976a:	68bb      	ldr	r3, [r7, #8]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	24000be8 	.word	0x24000be8
 8009778:	24000bc0 	.word	0x24000bc0
 800977c:	24000b80 	.word	0x24000b80
 8009780:	24000bc8 	.word	0x24000bc8
 8009784:	240006f0 	.word	0x240006f0
 8009788:	240006ec 	.word	0x240006ec
 800978c:	24000bd4 	.word	0x24000bd4
 8009790:	24000bd0 	.word	0x24000bd0
 8009794:	e000ed04 	.word	0xe000ed04

08009798 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800979e:	4b05      	ldr	r3, [pc, #20]	; (80097b4 <xTaskGetTickCount+0x1c>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80097a4:	687b      	ldr	r3, [r7, #4]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	24000bc4 	.word	0x24000bc4

080097b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097be:	f001 f949 	bl	800aa54 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80097c2:	2300      	movs	r3, #0
 80097c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80097c6:	4b04      	ldr	r3, [pc, #16]	; (80097d8 <xTaskGetTickCountFromISR+0x20>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097cc:	683b      	ldr	r3, [r7, #0]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	24000bc4 	.word	0x24000bc4

080097dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80097e2:	2300      	movs	r3, #0
 80097e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097e6:	4b4e      	ldr	r3, [pc, #312]	; (8009920 <xTaskIncrementTick+0x144>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f040 8088 	bne.w	8009900 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80097f0:	4b4c      	ldr	r3, [pc, #304]	; (8009924 <xTaskIncrementTick+0x148>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	3301      	adds	r3, #1
 80097f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097f8:	4a4a      	ldr	r2, [pc, #296]	; (8009924 <xTaskIncrementTick+0x148>)
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d11f      	bne.n	8009844 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009804:	4b48      	ldr	r3, [pc, #288]	; (8009928 <xTaskIncrementTick+0x14c>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d009      	beq.n	8009822 <xTaskIncrementTick+0x46>
 800980e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	603b      	str	r3, [r7, #0]
 8009820:	e7fe      	b.n	8009820 <xTaskIncrementTick+0x44>
 8009822:	4b41      	ldr	r3, [pc, #260]	; (8009928 <xTaskIncrementTick+0x14c>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	60fb      	str	r3, [r7, #12]
 8009828:	4b40      	ldr	r3, [pc, #256]	; (800992c <xTaskIncrementTick+0x150>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a3e      	ldr	r2, [pc, #248]	; (8009928 <xTaskIncrementTick+0x14c>)
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	4a3e      	ldr	r2, [pc, #248]	; (800992c <xTaskIncrementTick+0x150>)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	4b3e      	ldr	r3, [pc, #248]	; (8009930 <xTaskIncrementTick+0x154>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3301      	adds	r3, #1
 800983c:	4a3c      	ldr	r2, [pc, #240]	; (8009930 <xTaskIncrementTick+0x154>)
 800983e:	6013      	str	r3, [r2, #0]
 8009840:	f000 fac4 	bl	8009dcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009844:	4b3b      	ldr	r3, [pc, #236]	; (8009934 <xTaskIncrementTick+0x158>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	429a      	cmp	r2, r3
 800984c:	d349      	bcc.n	80098e2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800984e:	4b36      	ldr	r3, [pc, #216]	; (8009928 <xTaskIncrementTick+0x14c>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d104      	bne.n	8009862 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009858:	4b36      	ldr	r3, [pc, #216]	; (8009934 <xTaskIncrementTick+0x158>)
 800985a:	f04f 32ff 	mov.w	r2, #4294967295
 800985e:	601a      	str	r2, [r3, #0]
					break;
 8009860:	e03f      	b.n	80098e2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009862:	4b31      	ldr	r3, [pc, #196]	; (8009928 <xTaskIncrementTick+0x14c>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009872:	693a      	ldr	r2, [r7, #16]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	429a      	cmp	r2, r3
 8009878:	d203      	bcs.n	8009882 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800987a:	4a2e      	ldr	r2, [pc, #184]	; (8009934 <xTaskIncrementTick+0x158>)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009880:	e02f      	b.n	80098e2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	3304      	adds	r3, #4
 8009886:	4618      	mov	r0, r3
 8009888:	f7fe ffa8 	bl	80087dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009890:	2b00      	cmp	r3, #0
 8009892:	d004      	beq.n	800989e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	3318      	adds	r3, #24
 8009898:	4618      	mov	r0, r3
 800989a:	f7fe ff9f 	bl	80087dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a2:	4b25      	ldr	r3, [pc, #148]	; (8009938 <xTaskIncrementTick+0x15c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d903      	bls.n	80098b2 <xTaskIncrementTick+0xd6>
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ae:	4a22      	ldr	r2, [pc, #136]	; (8009938 <xTaskIncrementTick+0x15c>)
 80098b0:	6013      	str	r3, [r2, #0]
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b6:	4613      	mov	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4413      	add	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4a1f      	ldr	r2, [pc, #124]	; (800993c <xTaskIncrementTick+0x160>)
 80098c0:	441a      	add	r2, r3
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	3304      	adds	r3, #4
 80098c6:	4619      	mov	r1, r3
 80098c8:	4610      	mov	r0, r2
 80098ca:	f7fe ff2a 	bl	8008722 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d2:	4b1b      	ldr	r3, [pc, #108]	; (8009940 <xTaskIncrementTick+0x164>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d8:	429a      	cmp	r2, r3
 80098da:	d3b8      	bcc.n	800984e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80098dc:	2301      	movs	r3, #1
 80098de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098e0:	e7b5      	b.n	800984e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098e2:	4b17      	ldr	r3, [pc, #92]	; (8009940 <xTaskIncrementTick+0x164>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e8:	4914      	ldr	r1, [pc, #80]	; (800993c <xTaskIncrementTick+0x160>)
 80098ea:	4613      	mov	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4413      	add	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	440b      	add	r3, r1
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d907      	bls.n	800990a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80098fa:	2301      	movs	r3, #1
 80098fc:	617b      	str	r3, [r7, #20]
 80098fe:	e004      	b.n	800990a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009900:	4b10      	ldr	r3, [pc, #64]	; (8009944 <xTaskIncrementTick+0x168>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	3301      	adds	r3, #1
 8009906:	4a0f      	ldr	r2, [pc, #60]	; (8009944 <xTaskIncrementTick+0x168>)
 8009908:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800990a:	4b0f      	ldr	r3, [pc, #60]	; (8009948 <xTaskIncrementTick+0x16c>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d001      	beq.n	8009916 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8009912:	2301      	movs	r3, #1
 8009914:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009916:	697b      	ldr	r3, [r7, #20]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3718      	adds	r7, #24
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	24000be8 	.word	0x24000be8
 8009924:	24000bc4 	.word	0x24000bc4
 8009928:	24000b78 	.word	0x24000b78
 800992c:	24000b7c 	.word	0x24000b7c
 8009930:	24000bd8 	.word	0x24000bd8
 8009934:	24000be0 	.word	0x24000be0
 8009938:	24000bc8 	.word	0x24000bc8
 800993c:	240006f0 	.word	0x240006f0
 8009940:	240006ec 	.word	0x240006ec
 8009944:	24000bd0 	.word	0x24000bd0
 8009948:	24000bd4 	.word	0x24000bd4

0800994c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009952:	4b27      	ldr	r3, [pc, #156]	; (80099f0 <vTaskSwitchContext+0xa4>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800995a:	4b26      	ldr	r3, [pc, #152]	; (80099f4 <vTaskSwitchContext+0xa8>)
 800995c:	2201      	movs	r2, #1
 800995e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009960:	e040      	b.n	80099e4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009962:	4b24      	ldr	r3, [pc, #144]	; (80099f4 <vTaskSwitchContext+0xa8>)
 8009964:	2200      	movs	r2, #0
 8009966:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009968:	4b23      	ldr	r3, [pc, #140]	; (80099f8 <vTaskSwitchContext+0xac>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	60fb      	str	r3, [r7, #12]
 800996e:	e00f      	b.n	8009990 <vTaskSwitchContext+0x44>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d109      	bne.n	800998a <vTaskSwitchContext+0x3e>
 8009976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	607b      	str	r3, [r7, #4]
 8009988:	e7fe      	b.n	8009988 <vTaskSwitchContext+0x3c>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	3b01      	subs	r3, #1
 800998e:	60fb      	str	r3, [r7, #12]
 8009990:	491a      	ldr	r1, [pc, #104]	; (80099fc <vTaskSwitchContext+0xb0>)
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	4613      	mov	r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	4413      	add	r3, r2
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	440b      	add	r3, r1
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0e5      	beq.n	8009970 <vTaskSwitchContext+0x24>
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	4613      	mov	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4a13      	ldr	r2, [pc, #76]	; (80099fc <vTaskSwitchContext+0xb0>)
 80099b0:	4413      	add	r3, r2
 80099b2:	60bb      	str	r3, [r7, #8]
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	605a      	str	r2, [r3, #4]
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	685a      	ldr	r2, [r3, #4]
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	3308      	adds	r3, #8
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d104      	bne.n	80099d4 <vTaskSwitchContext+0x88>
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	685a      	ldr	r2, [r3, #4]
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	605a      	str	r2, [r3, #4]
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	4a09      	ldr	r2, [pc, #36]	; (8009a00 <vTaskSwitchContext+0xb4>)
 80099dc:	6013      	str	r3, [r2, #0]
 80099de:	4a06      	ldr	r2, [pc, #24]	; (80099f8 <vTaskSwitchContext+0xac>)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6013      	str	r3, [r2, #0]
}
 80099e4:	bf00      	nop
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	24000be8 	.word	0x24000be8
 80099f4:	24000bd4 	.word	0x24000bd4
 80099f8:	24000bc8 	.word	0x24000bc8
 80099fc:	240006f0 	.word	0x240006f0
 8009a00:	240006ec 	.word	0x240006ec

08009a04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d109      	bne.n	8009a28 <vTaskPlaceOnEventList+0x24>
 8009a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	60fb      	str	r3, [r7, #12]
 8009a26:	e7fe      	b.n	8009a26 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a28:	4b07      	ldr	r3, [pc, #28]	; (8009a48 <vTaskPlaceOnEventList+0x44>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3318      	adds	r3, #24
 8009a2e:	4619      	mov	r1, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7fe fe9a 	bl	800876a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a36:	2101      	movs	r1, #1
 8009a38:	6838      	ldr	r0, [r7, #0]
 8009a3a:	f000 fa71 	bl	8009f20 <prvAddCurrentTaskToDelayedList>
}
 8009a3e:	bf00      	nop
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	240006ec 	.word	0x240006ec

08009a4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d109      	bne.n	8009a72 <vTaskPlaceOnEventListRestricted+0x26>
 8009a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	617b      	str	r3, [r7, #20]
 8009a70:	e7fe      	b.n	8009a70 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a72:	4b0a      	ldr	r3, [pc, #40]	; (8009a9c <vTaskPlaceOnEventListRestricted+0x50>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	3318      	adds	r3, #24
 8009a78:	4619      	mov	r1, r3
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	f7fe fe51 	bl	8008722 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d002      	beq.n	8009a8c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009a86:	f04f 33ff 	mov.w	r3, #4294967295
 8009a8a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a8c:	6879      	ldr	r1, [r7, #4]
 8009a8e:	68b8      	ldr	r0, [r7, #8]
 8009a90:	f000 fa46 	bl	8009f20 <prvAddCurrentTaskToDelayedList>
	}
 8009a94:	bf00      	nop
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	240006ec 	.word	0x240006ec

08009aa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d109      	bne.n	8009aca <xTaskRemoveFromEventList+0x2a>
 8009ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	60fb      	str	r3, [r7, #12]
 8009ac8:	e7fe      	b.n	8009ac8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	3318      	adds	r3, #24
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fe fe84 	bl	80087dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ad4:	4b1d      	ldr	r3, [pc, #116]	; (8009b4c <xTaskRemoveFromEventList+0xac>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d11d      	bne.n	8009b18 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	3304      	adds	r3, #4
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7fe fe7b 	bl	80087dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aea:	4b19      	ldr	r3, [pc, #100]	; (8009b50 <xTaskRemoveFromEventList+0xb0>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d903      	bls.n	8009afa <xTaskRemoveFromEventList+0x5a>
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af6:	4a16      	ldr	r2, [pc, #88]	; (8009b50 <xTaskRemoveFromEventList+0xb0>)
 8009af8:	6013      	str	r3, [r2, #0]
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009afe:	4613      	mov	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4a13      	ldr	r2, [pc, #76]	; (8009b54 <xTaskRemoveFromEventList+0xb4>)
 8009b08:	441a      	add	r2, r3
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	4619      	mov	r1, r3
 8009b10:	4610      	mov	r0, r2
 8009b12:	f7fe fe06 	bl	8008722 <vListInsertEnd>
 8009b16:	e005      	b.n	8009b24 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	3318      	adds	r3, #24
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	480e      	ldr	r0, [pc, #56]	; (8009b58 <xTaskRemoveFromEventList+0xb8>)
 8009b20:	f7fe fdff 	bl	8008722 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b28:	4b0c      	ldr	r3, [pc, #48]	; (8009b5c <xTaskRemoveFromEventList+0xbc>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d905      	bls.n	8009b3e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b32:	2301      	movs	r3, #1
 8009b34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b36:	4b0a      	ldr	r3, [pc, #40]	; (8009b60 <xTaskRemoveFromEventList+0xc0>)
 8009b38:	2201      	movs	r2, #1
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	e001      	b.n	8009b42 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b42:	697b      	ldr	r3, [r7, #20]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3718      	adds	r7, #24
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	24000be8 	.word	0x24000be8
 8009b50:	24000bc8 	.word	0x24000bc8
 8009b54:	240006f0 	.word	0x240006f0
 8009b58:	24000b80 	.word	0x24000b80
 8009b5c:	240006ec 	.word	0x240006ec
 8009b60:	24000bd4 	.word	0x24000bd4

08009b64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b6c:	4b06      	ldr	r3, [pc, #24]	; (8009b88 <vTaskInternalSetTimeOutState+0x24>)
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b74:	4b05      	ldr	r3, [pc, #20]	; (8009b8c <vTaskInternalSetTimeOutState+0x28>)
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	605a      	str	r2, [r3, #4]
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	24000bd8 	.word	0x24000bd8
 8009b8c:	24000bc4 	.word	0x24000bc4

08009b90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b088      	sub	sp, #32
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d109      	bne.n	8009bb4 <xTaskCheckForTimeOut+0x24>
 8009ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	613b      	str	r3, [r7, #16]
 8009bb2:	e7fe      	b.n	8009bb2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d109      	bne.n	8009bce <xTaskCheckForTimeOut+0x3e>
 8009bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	e7fe      	b.n	8009bcc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009bce:	f000 fe65 	bl	800a89c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009bd2:	4b1d      	ldr	r3, [pc, #116]	; (8009c48 <xTaskCheckForTimeOut+0xb8>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	69ba      	ldr	r2, [r7, #24]
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bea:	d102      	bne.n	8009bf2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bec:	2300      	movs	r3, #0
 8009bee:	61fb      	str	r3, [r7, #28]
 8009bf0:	e023      	b.n	8009c3a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	4b15      	ldr	r3, [pc, #84]	; (8009c4c <xTaskCheckForTimeOut+0xbc>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d007      	beq.n	8009c0e <xTaskCheckForTimeOut+0x7e>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	69ba      	ldr	r2, [r7, #24]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d302      	bcc.n	8009c0e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	61fb      	str	r3, [r7, #28]
 8009c0c:	e015      	b.n	8009c3a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	697a      	ldr	r2, [r7, #20]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d20b      	bcs.n	8009c30 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	1ad2      	subs	r2, r2, r3
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7ff ff9d 	bl	8009b64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	61fb      	str	r3, [r7, #28]
 8009c2e:	e004      	b.n	8009c3a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	2200      	movs	r2, #0
 8009c34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c36:	2301      	movs	r3, #1
 8009c38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c3a:	f000 fe5d 	bl	800a8f8 <vPortExitCritical>

	return xReturn;
 8009c3e:	69fb      	ldr	r3, [r7, #28]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3720      	adds	r7, #32
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	24000bc4 	.word	0x24000bc4
 8009c4c:	24000bd8 	.word	0x24000bd8

08009c50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c50:	b480      	push	{r7}
 8009c52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c54:	4b03      	ldr	r3, [pc, #12]	; (8009c64 <vTaskMissedYield+0x14>)
 8009c56:	2201      	movs	r2, #1
 8009c58:	601a      	str	r2, [r3, #0]
}
 8009c5a:	bf00      	nop
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr
 8009c64:	24000bd4 	.word	0x24000bd4

08009c68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c70:	f000 f852 	bl	8009d18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c74:	4b06      	ldr	r3, [pc, #24]	; (8009c90 <prvIdleTask+0x28>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d9f9      	bls.n	8009c70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c7c:	4b05      	ldr	r3, [pc, #20]	; (8009c94 <prvIdleTask+0x2c>)
 8009c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c82:	601a      	str	r2, [r3, #0]
 8009c84:	f3bf 8f4f 	dsb	sy
 8009c88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c8c:	e7f0      	b.n	8009c70 <prvIdleTask+0x8>
 8009c8e:	bf00      	nop
 8009c90:	240006f0 	.word	0x240006f0
 8009c94:	e000ed04 	.word	0xe000ed04

08009c98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	607b      	str	r3, [r7, #4]
 8009ca2:	e00c      	b.n	8009cbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4a12      	ldr	r2, [pc, #72]	; (8009cf8 <prvInitialiseTaskLists+0x60>)
 8009cb0:	4413      	add	r3, r2
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7fe fd08 	bl	80086c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	607b      	str	r3, [r7, #4]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b37      	cmp	r3, #55	; 0x37
 8009cc2:	d9ef      	bls.n	8009ca4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009cc4:	480d      	ldr	r0, [pc, #52]	; (8009cfc <prvInitialiseTaskLists+0x64>)
 8009cc6:	f7fe fcff 	bl	80086c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009cca:	480d      	ldr	r0, [pc, #52]	; (8009d00 <prvInitialiseTaskLists+0x68>)
 8009ccc:	f7fe fcfc 	bl	80086c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009cd0:	480c      	ldr	r0, [pc, #48]	; (8009d04 <prvInitialiseTaskLists+0x6c>)
 8009cd2:	f7fe fcf9 	bl	80086c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009cd6:	480c      	ldr	r0, [pc, #48]	; (8009d08 <prvInitialiseTaskLists+0x70>)
 8009cd8:	f7fe fcf6 	bl	80086c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009cdc:	480b      	ldr	r0, [pc, #44]	; (8009d0c <prvInitialiseTaskLists+0x74>)
 8009cde:	f7fe fcf3 	bl	80086c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ce2:	4b0b      	ldr	r3, [pc, #44]	; (8009d10 <prvInitialiseTaskLists+0x78>)
 8009ce4:	4a05      	ldr	r2, [pc, #20]	; (8009cfc <prvInitialiseTaskLists+0x64>)
 8009ce6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ce8:	4b0a      	ldr	r3, [pc, #40]	; (8009d14 <prvInitialiseTaskLists+0x7c>)
 8009cea:	4a05      	ldr	r2, [pc, #20]	; (8009d00 <prvInitialiseTaskLists+0x68>)
 8009cec:	601a      	str	r2, [r3, #0]
}
 8009cee:	bf00      	nop
 8009cf0:	3708      	adds	r7, #8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	240006f0 	.word	0x240006f0
 8009cfc:	24000b50 	.word	0x24000b50
 8009d00:	24000b64 	.word	0x24000b64
 8009d04:	24000b80 	.word	0x24000b80
 8009d08:	24000b94 	.word	0x24000b94
 8009d0c:	24000bac 	.word	0x24000bac
 8009d10:	24000b78 	.word	0x24000b78
 8009d14:	24000b7c 	.word	0x24000b7c

08009d18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d1e:	e019      	b.n	8009d54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d20:	f000 fdbc 	bl	800a89c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d24:	4b0f      	ldr	r3, [pc, #60]	; (8009d64 <prvCheckTasksWaitingTermination+0x4c>)
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	3304      	adds	r3, #4
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fe fd53 	bl	80087dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d36:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <prvCheckTasksWaitingTermination+0x50>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	4a0a      	ldr	r2, [pc, #40]	; (8009d68 <prvCheckTasksWaitingTermination+0x50>)
 8009d3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d40:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <prvCheckTasksWaitingTermination+0x54>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	3b01      	subs	r3, #1
 8009d46:	4a09      	ldr	r2, [pc, #36]	; (8009d6c <prvCheckTasksWaitingTermination+0x54>)
 8009d48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d4a:	f000 fdd5 	bl	800a8f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f80e 	bl	8009d70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d54:	4b05      	ldr	r3, [pc, #20]	; (8009d6c <prvCheckTasksWaitingTermination+0x54>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1e1      	bne.n	8009d20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d5c:	bf00      	nop
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	24000b94 	.word	0x24000b94
 8009d68:	24000bc0 	.word	0x24000bc0
 8009d6c:	24000ba8 	.word	0x24000ba8

08009d70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d108      	bne.n	8009d94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d86:	4618      	mov	r0, r3
 8009d88:	f000 ff64 	bl	800ac54 <vPortFree>
				vPortFree( pxTCB );
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 ff61 	bl	800ac54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d92:	e017      	b.n	8009dc4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d103      	bne.n	8009da6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 ff58 	bl	800ac54 <vPortFree>
	}
 8009da4:	e00e      	b.n	8009dc4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d009      	beq.n	8009dc4 <prvDeleteTCB+0x54>
 8009db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	60fb      	str	r3, [r7, #12]
 8009dc2:	e7fe      	b.n	8009dc2 <prvDeleteTCB+0x52>
	}
 8009dc4:	bf00      	nop
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dd2:	4b0c      	ldr	r3, [pc, #48]	; (8009e04 <prvResetNextTaskUnblockTime+0x38>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d104      	bne.n	8009de6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ddc:	4b0a      	ldr	r3, [pc, #40]	; (8009e08 <prvResetNextTaskUnblockTime+0x3c>)
 8009dde:	f04f 32ff 	mov.w	r2, #4294967295
 8009de2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009de4:	e008      	b.n	8009df8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009de6:	4b07      	ldr	r3, [pc, #28]	; (8009e04 <prvResetNextTaskUnblockTime+0x38>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	4a04      	ldr	r2, [pc, #16]	; (8009e08 <prvResetNextTaskUnblockTime+0x3c>)
 8009df6:	6013      	str	r3, [r2, #0]
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	24000b78 	.word	0x24000b78
 8009e08:	24000be0 	.word	0x24000be0

08009e0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e12:	4b0b      	ldr	r3, [pc, #44]	; (8009e40 <xTaskGetSchedulerState+0x34>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d102      	bne.n	8009e20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	607b      	str	r3, [r7, #4]
 8009e1e:	e008      	b.n	8009e32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e20:	4b08      	ldr	r3, [pc, #32]	; (8009e44 <xTaskGetSchedulerState+0x38>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d102      	bne.n	8009e2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e28:	2302      	movs	r3, #2
 8009e2a:	607b      	str	r3, [r7, #4]
 8009e2c:	e001      	b.n	8009e32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e32:	687b      	ldr	r3, [r7, #4]
	}
 8009e34:	4618      	mov	r0, r3
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	24000bcc 	.word	0x24000bcc
 8009e44:	24000be8 	.word	0x24000be8

08009e48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b086      	sub	sp, #24
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e54:	2300      	movs	r3, #0
 8009e56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d054      	beq.n	8009f08 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e5e:	4b2d      	ldr	r3, [pc, #180]	; (8009f14 <xTaskPriorityDisinherit+0xcc>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d009      	beq.n	8009e7c <xTaskPriorityDisinherit+0x34>
 8009e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	60fb      	str	r3, [r7, #12]
 8009e7a:	e7fe      	b.n	8009e7a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d109      	bne.n	8009e98 <xTaskPriorityDisinherit+0x50>
 8009e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	60bb      	str	r3, [r7, #8]
 8009e96:	e7fe      	b.n	8009e96 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e9c:	1e5a      	subs	r2, r3, #1
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d02c      	beq.n	8009f08 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d128      	bne.n	8009f08 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	3304      	adds	r3, #4
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fe fc8e 	bl	80087dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ecc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed8:	4b0f      	ldr	r3, [pc, #60]	; (8009f18 <xTaskPriorityDisinherit+0xd0>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d903      	bls.n	8009ee8 <xTaskPriorityDisinherit+0xa0>
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee4:	4a0c      	ldr	r2, [pc, #48]	; (8009f18 <xTaskPriorityDisinherit+0xd0>)
 8009ee6:	6013      	str	r3, [r2, #0]
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eec:	4613      	mov	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4413      	add	r3, r2
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	4a09      	ldr	r2, [pc, #36]	; (8009f1c <xTaskPriorityDisinherit+0xd4>)
 8009ef6:	441a      	add	r2, r3
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	3304      	adds	r3, #4
 8009efc:	4619      	mov	r1, r3
 8009efe:	4610      	mov	r0, r2
 8009f00:	f7fe fc0f 	bl	8008722 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f04:	2301      	movs	r3, #1
 8009f06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f08:	697b      	ldr	r3, [r7, #20]
	}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3718      	adds	r7, #24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	240006ec 	.word	0x240006ec
 8009f18:	24000bc8 	.word	0x24000bc8
 8009f1c:	240006f0 	.word	0x240006f0

08009f20 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f2a:	4b21      	ldr	r3, [pc, #132]	; (8009fb0 <prvAddCurrentTaskToDelayedList+0x90>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f30:	4b20      	ldr	r3, [pc, #128]	; (8009fb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	3304      	adds	r3, #4
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fe fc50 	bl	80087dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f42:	d10a      	bne.n	8009f5a <prvAddCurrentTaskToDelayedList+0x3a>
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d007      	beq.n	8009f5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f4a:	4b1a      	ldr	r3, [pc, #104]	; (8009fb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	3304      	adds	r3, #4
 8009f50:	4619      	mov	r1, r3
 8009f52:	4819      	ldr	r0, [pc, #100]	; (8009fb8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009f54:	f7fe fbe5 	bl	8008722 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f58:	e026      	b.n	8009fa8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4413      	add	r3, r2
 8009f60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f62:	4b14      	ldr	r3, [pc, #80]	; (8009fb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d209      	bcs.n	8009f86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f72:	4b12      	ldr	r3, [pc, #72]	; (8009fbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	4b0f      	ldr	r3, [pc, #60]	; (8009fb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3304      	adds	r3, #4
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	4610      	mov	r0, r2
 8009f80:	f7fe fbf3 	bl	800876a <vListInsert>
}
 8009f84:	e010      	b.n	8009fa8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f86:	4b0e      	ldr	r3, [pc, #56]	; (8009fc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	4b0a      	ldr	r3, [pc, #40]	; (8009fb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	3304      	adds	r3, #4
 8009f90:	4619      	mov	r1, r3
 8009f92:	4610      	mov	r0, r2
 8009f94:	f7fe fbe9 	bl	800876a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f98:	4b0a      	ldr	r3, [pc, #40]	; (8009fc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68ba      	ldr	r2, [r7, #8]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d202      	bcs.n	8009fa8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009fa2:	4a08      	ldr	r2, [pc, #32]	; (8009fc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	6013      	str	r3, [r2, #0]
}
 8009fa8:	bf00      	nop
 8009faa:	3710      	adds	r7, #16
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	24000bc4 	.word	0x24000bc4
 8009fb4:	240006ec 	.word	0x240006ec
 8009fb8:	24000bac 	.word	0x24000bac
 8009fbc:	24000b7c 	.word	0x24000b7c
 8009fc0:	24000b78 	.word	0x24000b78
 8009fc4:	24000be0 	.word	0x24000be0

08009fc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b08a      	sub	sp, #40	; 0x28
 8009fcc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009fd2:	f000 faff 	bl	800a5d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009fd6:	4b1c      	ldr	r3, [pc, #112]	; (800a048 <xTimerCreateTimerTask+0x80>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d021      	beq.n	800a022 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009fe6:	1d3a      	adds	r2, r7, #4
 8009fe8:	f107 0108 	add.w	r1, r7, #8
 8009fec:	f107 030c 	add.w	r3, r7, #12
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7fe fb4f 	bl	8008694 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ff6:	6879      	ldr	r1, [r7, #4]
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	9202      	str	r2, [sp, #8]
 8009ffe:	9301      	str	r3, [sp, #4]
 800a000:	2302      	movs	r3, #2
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	2300      	movs	r3, #0
 800a006:	460a      	mov	r2, r1
 800a008:	4910      	ldr	r1, [pc, #64]	; (800a04c <xTimerCreateTimerTask+0x84>)
 800a00a:	4811      	ldr	r0, [pc, #68]	; (800a050 <xTimerCreateTimerTask+0x88>)
 800a00c:	f7ff f8e4 	bl	80091d8 <xTaskCreateStatic>
 800a010:	4602      	mov	r2, r0
 800a012:	4b10      	ldr	r3, [pc, #64]	; (800a054 <xTimerCreateTimerTask+0x8c>)
 800a014:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a016:	4b0f      	ldr	r3, [pc, #60]	; (800a054 <xTimerCreateTimerTask+0x8c>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a01e:	2301      	movs	r3, #1
 800a020:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d109      	bne.n	800a03c <xTimerCreateTimerTask+0x74>
 800a028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	613b      	str	r3, [r7, #16]
 800a03a:	e7fe      	b.n	800a03a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a03c:	697b      	ldr	r3, [r7, #20]
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3718      	adds	r7, #24
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	24000c1c 	.word	0x24000c1c
 800a04c:	0800b094 	.word	0x0800b094
 800a050:	0800a189 	.word	0x0800a189
 800a054:	24000c20 	.word	0x24000c20

0800a058 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b08a      	sub	sp, #40	; 0x28
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a066:	2300      	movs	r3, #0
 800a068:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d109      	bne.n	800a084 <xTimerGenericCommand+0x2c>
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	623b      	str	r3, [r7, #32]
 800a082:	e7fe      	b.n	800a082 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a084:	4b19      	ldr	r3, [pc, #100]	; (800a0ec <xTimerGenericCommand+0x94>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d02a      	beq.n	800a0e2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	2b05      	cmp	r3, #5
 800a09c:	dc18      	bgt.n	800a0d0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a09e:	f7ff feb5 	bl	8009e0c <xTaskGetSchedulerState>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	d109      	bne.n	800a0bc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a0a8:	4b10      	ldr	r3, [pc, #64]	; (800a0ec <xTimerGenericCommand+0x94>)
 800a0aa:	6818      	ldr	r0, [r3, #0]
 800a0ac:	f107 0110 	add.w	r1, r7, #16
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0b4:	f7fe fcba 	bl	8008a2c <xQueueGenericSend>
 800a0b8:	6278      	str	r0, [r7, #36]	; 0x24
 800a0ba:	e012      	b.n	800a0e2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a0bc:	4b0b      	ldr	r3, [pc, #44]	; (800a0ec <xTimerGenericCommand+0x94>)
 800a0be:	6818      	ldr	r0, [r3, #0]
 800a0c0:	f107 0110 	add.w	r1, r7, #16
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f7fe fcb0 	bl	8008a2c <xQueueGenericSend>
 800a0cc:	6278      	str	r0, [r7, #36]	; 0x24
 800a0ce:	e008      	b.n	800a0e2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0d0:	4b06      	ldr	r3, [pc, #24]	; (800a0ec <xTimerGenericCommand+0x94>)
 800a0d2:	6818      	ldr	r0, [r3, #0]
 800a0d4:	f107 0110 	add.w	r1, r7, #16
 800a0d8:	2300      	movs	r3, #0
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	f7fe fda0 	bl	8008c20 <xQueueGenericSendFromISR>
 800a0e0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3728      	adds	r7, #40	; 0x28
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	24000c1c 	.word	0x24000c1c

0800a0f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b088      	sub	sp, #32
 800a0f4:	af02      	add	r7, sp, #8
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0fa:	4b22      	ldr	r3, [pc, #136]	; (800a184 <prvProcessExpiredTimer+0x94>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	3304      	adds	r3, #4
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fe fb67 	bl	80087dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a114:	f003 0304 	and.w	r3, r3, #4
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d021      	beq.n	800a160 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	699a      	ldr	r2, [r3, #24]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	18d1      	adds	r1, r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	6978      	ldr	r0, [r7, #20]
 800a12a:	f000 f8d1 	bl	800a2d0 <prvInsertTimerInActiveList>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d01e      	beq.n	800a172 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a134:	2300      	movs	r3, #0
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	2300      	movs	r3, #0
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	2100      	movs	r1, #0
 800a13e:	6978      	ldr	r0, [r7, #20]
 800a140:	f7ff ff8a 	bl	800a058 <xTimerGenericCommand>
 800a144:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d112      	bne.n	800a172 <prvProcessExpiredTimer+0x82>
 800a14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	60fb      	str	r3, [r7, #12]
 800a15e:	e7fe      	b.n	800a15e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a166:	f023 0301 	bic.w	r3, r3, #1
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	6978      	ldr	r0, [r7, #20]
 800a178:	4798      	blx	r3
}
 800a17a:	bf00      	nop
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	24000c14 	.word	0x24000c14

0800a188 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a190:	f107 0308 	add.w	r3, r7, #8
 800a194:	4618      	mov	r0, r3
 800a196:	f000 f857 	bl	800a248 <prvGetNextExpireTime>
 800a19a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	4619      	mov	r1, r3
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 f803 	bl	800a1ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a1a6:	f000 f8d5 	bl	800a354 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1aa:	e7f1      	b.n	800a190 <prvTimerTask+0x8>

0800a1ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a1b6:	f7ff fa45 	bl	8009644 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1ba:	f107 0308 	add.w	r3, r7, #8
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 f866 	bl	800a290 <prvSampleTimeNow>
 800a1c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d130      	bne.n	800a22e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10a      	bne.n	800a1e8 <prvProcessTimerOrBlockTask+0x3c>
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d806      	bhi.n	800a1e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a1da:	f7ff fa41 	bl	8009660 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a1de:	68f9      	ldr	r1, [r7, #12]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7ff ff85 	bl	800a0f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a1e6:	e024      	b.n	800a232 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d008      	beq.n	800a200 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1ee:	4b13      	ldr	r3, [pc, #76]	; (800a23c <prvProcessTimerOrBlockTask+0x90>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d101      	bne.n	800a1fc <prvProcessTimerOrBlockTask+0x50>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e000      	b.n	800a1fe <prvProcessTimerOrBlockTask+0x52>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a200:	4b0f      	ldr	r3, [pc, #60]	; (800a240 <prvProcessTimerOrBlockTask+0x94>)
 800a202:	6818      	ldr	r0, [r3, #0]
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	683a      	ldr	r2, [r7, #0]
 800a20c:	4619      	mov	r1, r3
 800a20e:	f7fe ffaf 	bl	8009170 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a212:	f7ff fa25 	bl	8009660 <xTaskResumeAll>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d10a      	bne.n	800a232 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a21c:	4b09      	ldr	r3, [pc, #36]	; (800a244 <prvProcessTimerOrBlockTask+0x98>)
 800a21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a222:	601a      	str	r2, [r3, #0]
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	f3bf 8f6f 	isb	sy
}
 800a22c:	e001      	b.n	800a232 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a22e:	f7ff fa17 	bl	8009660 <xTaskResumeAll>
}
 800a232:	bf00      	nop
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	24000c18 	.word	0x24000c18
 800a240:	24000c1c 	.word	0x24000c1c
 800a244:	e000ed04 	.word	0xe000ed04

0800a248 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a250:	4b0e      	ldr	r3, [pc, #56]	; (800a28c <prvGetNextExpireTime+0x44>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d101      	bne.n	800a25e <prvGetNextExpireTime+0x16>
 800a25a:	2201      	movs	r2, #1
 800a25c:	e000      	b.n	800a260 <prvGetNextExpireTime+0x18>
 800a25e:	2200      	movs	r2, #0
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d105      	bne.n	800a278 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a26c:	4b07      	ldr	r3, [pc, #28]	; (800a28c <prvGetNextExpireTime+0x44>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	60fb      	str	r3, [r7, #12]
 800a276:	e001      	b.n	800a27c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a278:	2300      	movs	r3, #0
 800a27a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a27c:	68fb      	ldr	r3, [r7, #12]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	24000c14 	.word	0x24000c14

0800a290 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a298:	f7ff fa7e 	bl	8009798 <xTaskGetTickCount>
 800a29c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a29e:	4b0b      	ldr	r3, [pc, #44]	; (800a2cc <prvSampleTimeNow+0x3c>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d205      	bcs.n	800a2b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a2a8:	f000 f930 	bl	800a50c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	601a      	str	r2, [r3, #0]
 800a2b2:	e002      	b.n	800a2ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a2ba:	4a04      	ldr	r2, [pc, #16]	; (800a2cc <prvSampleTimeNow+0x3c>)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	24000c24 	.word	0x24000c24

0800a2d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
 800a2dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d812      	bhi.n	800a31c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	1ad2      	subs	r2, r2, r3
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	699b      	ldr	r3, [r3, #24]
 800a300:	429a      	cmp	r2, r3
 800a302:	d302      	bcc.n	800a30a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a304:	2301      	movs	r3, #1
 800a306:	617b      	str	r3, [r7, #20]
 800a308:	e01b      	b.n	800a342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a30a:	4b10      	ldr	r3, [pc, #64]	; (800a34c <prvInsertTimerInActiveList+0x7c>)
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	3304      	adds	r3, #4
 800a312:	4619      	mov	r1, r3
 800a314:	4610      	mov	r0, r2
 800a316:	f7fe fa28 	bl	800876a <vListInsert>
 800a31a:	e012      	b.n	800a342 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	429a      	cmp	r2, r3
 800a322:	d206      	bcs.n	800a332 <prvInsertTimerInActiveList+0x62>
 800a324:	68ba      	ldr	r2, [r7, #8]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d302      	bcc.n	800a332 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a32c:	2301      	movs	r3, #1
 800a32e:	617b      	str	r3, [r7, #20]
 800a330:	e007      	b.n	800a342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a332:	4b07      	ldr	r3, [pc, #28]	; (800a350 <prvInsertTimerInActiveList+0x80>)
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	3304      	adds	r3, #4
 800a33a:	4619      	mov	r1, r3
 800a33c:	4610      	mov	r0, r2
 800a33e:	f7fe fa14 	bl	800876a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a342:	697b      	ldr	r3, [r7, #20]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3718      	adds	r7, #24
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	24000c18 	.word	0x24000c18
 800a350:	24000c14 	.word	0x24000c14

0800a354 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b08e      	sub	sp, #56	; 0x38
 800a358:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a35a:	e0c6      	b.n	800a4ea <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	da17      	bge.n	800a392 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a362:	1d3b      	adds	r3, r7, #4
 800a364:	3304      	adds	r3, #4
 800a366:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d109      	bne.n	800a382 <prvProcessReceivedCommands+0x2e>
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	61fb      	str	r3, [r7, #28]
 800a380:	e7fe      	b.n	800a380 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a388:	6850      	ldr	r0, [r2, #4]
 800a38a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a38c:	6892      	ldr	r2, [r2, #8]
 800a38e:	4611      	mov	r1, r2
 800a390:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	f2c0 80a7 	blt.w	800a4e8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d004      	beq.n	800a3b0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a8:	3304      	adds	r3, #4
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fe fa16 	bl	80087dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3b0:	463b      	mov	r3, r7
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7ff ff6c 	bl	800a290 <prvSampleTimeNow>
 800a3b8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b09      	cmp	r3, #9
 800a3be:	f200 8094 	bhi.w	800a4ea <prvProcessReceivedCommands+0x196>
 800a3c2:	a201      	add	r2, pc, #4	; (adr r2, 800a3c8 <prvProcessReceivedCommands+0x74>)
 800a3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c8:	0800a3f1 	.word	0x0800a3f1
 800a3cc:	0800a3f1 	.word	0x0800a3f1
 800a3d0:	0800a3f1 	.word	0x0800a3f1
 800a3d4:	0800a463 	.word	0x0800a463
 800a3d8:	0800a477 	.word	0x0800a477
 800a3dc:	0800a4bf 	.word	0x0800a4bf
 800a3e0:	0800a3f1 	.word	0x0800a3f1
 800a3e4:	0800a3f1 	.word	0x0800a3f1
 800a3e8:	0800a463 	.word	0x0800a463
 800a3ec:	0800a477 	.word	0x0800a477
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3f6:	f043 0301 	orr.w	r3, r3, #1
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	18d1      	adds	r1, r2, r3
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a40e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a410:	f7ff ff5e 	bl	800a2d0 <prvInsertTimerInActiveList>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d067      	beq.n	800a4ea <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41c:	6a1b      	ldr	r3, [r3, #32]
 800a41e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a420:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a428:	f003 0304 	and.w	r3, r3, #4
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d05c      	beq.n	800a4ea <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a434:	699b      	ldr	r3, [r3, #24]
 800a436:	441a      	add	r2, r3
 800a438:	2300      	movs	r3, #0
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	2300      	movs	r3, #0
 800a43e:	2100      	movs	r1, #0
 800a440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a442:	f7ff fe09 	bl	800a058 <xTimerGenericCommand>
 800a446:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a448:	6a3b      	ldr	r3, [r7, #32]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d14d      	bne.n	800a4ea <prvProcessReceivedCommands+0x196>
 800a44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	61bb      	str	r3, [r7, #24]
 800a460:	e7fe      	b.n	800a460 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a468:	f023 0301 	bic.w	r3, r3, #1
 800a46c:	b2da      	uxtb	r2, r3
 800a46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a470:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a474:	e039      	b.n	800a4ea <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a47c:	f043 0301 	orr.w	r3, r3, #1
 800a480:	b2da      	uxtb	r2, r3
 800a482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a484:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a488:	68ba      	ldr	r2, [r7, #8]
 800a48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d109      	bne.n	800a4aa <prvProcessReceivedCommands+0x156>
 800a496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	617b      	str	r3, [r7, #20]
 800a4a8:	e7fe      	b.n	800a4a8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ac:	699a      	ldr	r2, [r3, #24]
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	18d1      	adds	r1, r2, r3
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4b8:	f7ff ff0a 	bl	800a2d0 <prvInsertTimerInActiveList>
					break;
 800a4bc:	e015      	b.n	800a4ea <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4c4:	f003 0302 	and.w	r3, r3, #2
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d103      	bne.n	800a4d4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800a4cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4ce:	f000 fbc1 	bl	800ac54 <vPortFree>
 800a4d2:	e00a      	b.n	800a4ea <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4da:	f023 0301 	bic.w	r3, r3, #1
 800a4de:	b2da      	uxtb	r2, r3
 800a4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a4e6:	e000      	b.n	800a4ea <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a4e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4ea:	4b07      	ldr	r3, [pc, #28]	; (800a508 <prvProcessReceivedCommands+0x1b4>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	1d39      	adds	r1, r7, #4
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fe fc28 	bl	8008d48 <xQueueReceive>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f47f af2e 	bne.w	800a35c <prvProcessReceivedCommands+0x8>
	}
}
 800a500:	bf00      	nop
 800a502:	3730      	adds	r7, #48	; 0x30
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	24000c1c 	.word	0x24000c1c

0800a50c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a512:	e047      	b.n	800a5a4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a514:	4b2d      	ldr	r3, [pc, #180]	; (800a5cc <prvSwitchTimerLists+0xc0>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a51e:	4b2b      	ldr	r3, [pc, #172]	; (800a5cc <prvSwitchTimerLists+0xc0>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	3304      	adds	r3, #4
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fe f955 	bl	80087dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a540:	f003 0304 	and.w	r3, r3, #4
 800a544:	2b00      	cmp	r3, #0
 800a546:	d02d      	beq.n	800a5a4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	699b      	ldr	r3, [r3, #24]
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	4413      	add	r3, r2
 800a550:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a552:	68ba      	ldr	r2, [r7, #8]
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	429a      	cmp	r2, r3
 800a558:	d90e      	bls.n	800a578 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a566:	4b19      	ldr	r3, [pc, #100]	; (800a5cc <prvSwitchTimerLists+0xc0>)
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	3304      	adds	r3, #4
 800a56e:	4619      	mov	r1, r3
 800a570:	4610      	mov	r0, r2
 800a572:	f7fe f8fa 	bl	800876a <vListInsert>
 800a576:	e015      	b.n	800a5a4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a578:	2300      	movs	r3, #0
 800a57a:	9300      	str	r3, [sp, #0]
 800a57c:	2300      	movs	r3, #0
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	2100      	movs	r1, #0
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f7ff fd68 	bl	800a058 <xTimerGenericCommand>
 800a588:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d109      	bne.n	800a5a4 <prvSwitchTimerLists+0x98>
 800a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	603b      	str	r3, [r7, #0]
 800a5a2:	e7fe      	b.n	800a5a2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5a4:	4b09      	ldr	r3, [pc, #36]	; (800a5cc <prvSwitchTimerLists+0xc0>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d1b2      	bne.n	800a514 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a5ae:	4b07      	ldr	r3, [pc, #28]	; (800a5cc <prvSwitchTimerLists+0xc0>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a5b4:	4b06      	ldr	r3, [pc, #24]	; (800a5d0 <prvSwitchTimerLists+0xc4>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a04      	ldr	r2, [pc, #16]	; (800a5cc <prvSwitchTimerLists+0xc0>)
 800a5ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a5bc:	4a04      	ldr	r2, [pc, #16]	; (800a5d0 <prvSwitchTimerLists+0xc4>)
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	6013      	str	r3, [r2, #0]
}
 800a5c2:	bf00      	nop
 800a5c4:	3718      	adds	r7, #24
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	24000c14 	.word	0x24000c14
 800a5d0:	24000c18 	.word	0x24000c18

0800a5d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a5da:	f000 f95f 	bl	800a89c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a5de:	4b15      	ldr	r3, [pc, #84]	; (800a634 <prvCheckForValidListAndQueue+0x60>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d120      	bne.n	800a628 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a5e6:	4814      	ldr	r0, [pc, #80]	; (800a638 <prvCheckForValidListAndQueue+0x64>)
 800a5e8:	f7fe f86e 	bl	80086c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a5ec:	4813      	ldr	r0, [pc, #76]	; (800a63c <prvCheckForValidListAndQueue+0x68>)
 800a5ee:	f7fe f86b 	bl	80086c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a5f2:	4b13      	ldr	r3, [pc, #76]	; (800a640 <prvCheckForValidListAndQueue+0x6c>)
 800a5f4:	4a10      	ldr	r2, [pc, #64]	; (800a638 <prvCheckForValidListAndQueue+0x64>)
 800a5f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a5f8:	4b12      	ldr	r3, [pc, #72]	; (800a644 <prvCheckForValidListAndQueue+0x70>)
 800a5fa:	4a10      	ldr	r2, [pc, #64]	; (800a63c <prvCheckForValidListAndQueue+0x68>)
 800a5fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a5fe:	2300      	movs	r3, #0
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	4b11      	ldr	r3, [pc, #68]	; (800a648 <prvCheckForValidListAndQueue+0x74>)
 800a604:	4a11      	ldr	r2, [pc, #68]	; (800a64c <prvCheckForValidListAndQueue+0x78>)
 800a606:	2110      	movs	r1, #16
 800a608:	200a      	movs	r0, #10
 800a60a:	f7fe f979 	bl	8008900 <xQueueGenericCreateStatic>
 800a60e:	4602      	mov	r2, r0
 800a610:	4b08      	ldr	r3, [pc, #32]	; (800a634 <prvCheckForValidListAndQueue+0x60>)
 800a612:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a614:	4b07      	ldr	r3, [pc, #28]	; (800a634 <prvCheckForValidListAndQueue+0x60>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d005      	beq.n	800a628 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a61c:	4b05      	ldr	r3, [pc, #20]	; (800a634 <prvCheckForValidListAndQueue+0x60>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	490b      	ldr	r1, [pc, #44]	; (800a650 <prvCheckForValidListAndQueue+0x7c>)
 800a622:	4618      	mov	r0, r3
 800a624:	f7fe fd7c 	bl	8009120 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a628:	f000 f966 	bl	800a8f8 <vPortExitCritical>
}
 800a62c:	bf00      	nop
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	24000c1c 	.word	0x24000c1c
 800a638:	24000bec 	.word	0x24000bec
 800a63c:	24000c00 	.word	0x24000c00
 800a640:	24000c14 	.word	0x24000c14
 800a644:	24000c18 	.word	0x24000c18
 800a648:	24000cc8 	.word	0x24000cc8
 800a64c:	24000c28 	.word	0x24000c28
 800a650:	0800b09c 	.word	0x0800b09c

0800a654 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	3b04      	subs	r3, #4
 800a664:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a66c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3b04      	subs	r3, #4
 800a672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	f023 0201 	bic.w	r2, r3, #1
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	3b04      	subs	r3, #4
 800a682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a684:	4a0c      	ldr	r2, [pc, #48]	; (800a6b8 <pxPortInitialiseStack+0x64>)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3b14      	subs	r3, #20
 800a68e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3b04      	subs	r3, #4
 800a69a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f06f 0202 	mvn.w	r2, #2
 800a6a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3b20      	subs	r3, #32
 800a6a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3714      	adds	r7, #20
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	0800a6bd 	.word	0x0800a6bd

0800a6bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a6c6:	4b11      	ldr	r3, [pc, #68]	; (800a70c <prvTaskExitError+0x50>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ce:	d009      	beq.n	800a6e4 <prvTaskExitError+0x28>
 800a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	60fb      	str	r3, [r7, #12]
 800a6e2:	e7fe      	b.n	800a6e2 <prvTaskExitError+0x26>
 800a6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e8:	f383 8811 	msr	BASEPRI, r3
 800a6ec:	f3bf 8f6f 	isb	sy
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a6f6:	bf00      	nop
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d0fc      	beq.n	800a6f8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a6fe:	bf00      	nop
 800a700:	3714      	adds	r7, #20
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	24000010 	.word	0x24000010

0800a710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a710:	4b07      	ldr	r3, [pc, #28]	; (800a730 <pxCurrentTCBConst2>)
 800a712:	6819      	ldr	r1, [r3, #0]
 800a714:	6808      	ldr	r0, [r1, #0]
 800a716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71a:	f380 8809 	msr	PSP, r0
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f04f 0000 	mov.w	r0, #0
 800a726:	f380 8811 	msr	BASEPRI, r0
 800a72a:	4770      	bx	lr
 800a72c:	f3af 8000 	nop.w

0800a730 <pxCurrentTCBConst2>:
 800a730:	240006ec 	.word	0x240006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a734:	bf00      	nop
 800a736:	bf00      	nop

0800a738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a738:	4808      	ldr	r0, [pc, #32]	; (800a75c <prvPortStartFirstTask+0x24>)
 800a73a:	6800      	ldr	r0, [r0, #0]
 800a73c:	6800      	ldr	r0, [r0, #0]
 800a73e:	f380 8808 	msr	MSP, r0
 800a742:	f04f 0000 	mov.w	r0, #0
 800a746:	f380 8814 	msr	CONTROL, r0
 800a74a:	b662      	cpsie	i
 800a74c:	b661      	cpsie	f
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	df00      	svc	0
 800a758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a75a:	bf00      	nop
 800a75c:	e000ed08 	.word	0xe000ed08

0800a760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a766:	4b44      	ldr	r3, [pc, #272]	; (800a878 <xPortStartScheduler+0x118>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a44      	ldr	r2, [pc, #272]	; (800a87c <xPortStartScheduler+0x11c>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d109      	bne.n	800a784 <xPortStartScheduler+0x24>
 800a770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	613b      	str	r3, [r7, #16]
 800a782:	e7fe      	b.n	800a782 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a784:	4b3c      	ldr	r3, [pc, #240]	; (800a878 <xPortStartScheduler+0x118>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a3d      	ldr	r2, [pc, #244]	; (800a880 <xPortStartScheduler+0x120>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d109      	bne.n	800a7a2 <xPortStartScheduler+0x42>
 800a78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	e7fe      	b.n	800a7a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a7a2:	4b38      	ldr	r3, [pc, #224]	; (800a884 <xPortStartScheduler+0x124>)
 800a7a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	22ff      	movs	r2, #255	; 0xff
 800a7b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a7bc:	78fb      	ldrb	r3, [r7, #3]
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a7c4:	b2da      	uxtb	r2, r3
 800a7c6:	4b30      	ldr	r3, [pc, #192]	; (800a888 <xPortStartScheduler+0x128>)
 800a7c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a7ca:	4b30      	ldr	r3, [pc, #192]	; (800a88c <xPortStartScheduler+0x12c>)
 800a7cc:	2207      	movs	r2, #7
 800a7ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7d0:	e009      	b.n	800a7e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a7d2:	4b2e      	ldr	r3, [pc, #184]	; (800a88c <xPortStartScheduler+0x12c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	4a2c      	ldr	r2, [pc, #176]	; (800a88c <xPortStartScheduler+0x12c>)
 800a7da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a7dc:	78fb      	ldrb	r3, [r7, #3]
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	005b      	lsls	r3, r3, #1
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7e6:	78fb      	ldrb	r3, [r7, #3]
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ee:	2b80      	cmp	r3, #128	; 0x80
 800a7f0:	d0ef      	beq.n	800a7d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a7f2:	4b26      	ldr	r3, [pc, #152]	; (800a88c <xPortStartScheduler+0x12c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f1c3 0307 	rsb	r3, r3, #7
 800a7fa:	2b04      	cmp	r3, #4
 800a7fc:	d009      	beq.n	800a812 <xPortStartScheduler+0xb2>
 800a7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	60bb      	str	r3, [r7, #8]
 800a810:	e7fe      	b.n	800a810 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a812:	4b1e      	ldr	r3, [pc, #120]	; (800a88c <xPortStartScheduler+0x12c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	021b      	lsls	r3, r3, #8
 800a818:	4a1c      	ldr	r2, [pc, #112]	; (800a88c <xPortStartScheduler+0x12c>)
 800a81a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a81c:	4b1b      	ldr	r3, [pc, #108]	; (800a88c <xPortStartScheduler+0x12c>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a824:	4a19      	ldr	r2, [pc, #100]	; (800a88c <xPortStartScheduler+0x12c>)
 800a826:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	b2da      	uxtb	r2, r3
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a830:	4b17      	ldr	r3, [pc, #92]	; (800a890 <xPortStartScheduler+0x130>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a16      	ldr	r2, [pc, #88]	; (800a890 <xPortStartScheduler+0x130>)
 800a836:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a83a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a83c:	4b14      	ldr	r3, [pc, #80]	; (800a890 <xPortStartScheduler+0x130>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a13      	ldr	r2, [pc, #76]	; (800a890 <xPortStartScheduler+0x130>)
 800a842:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a846:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a848:	f000 f8d6 	bl	800a9f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a84c:	4b11      	ldr	r3, [pc, #68]	; (800a894 <xPortStartScheduler+0x134>)
 800a84e:	2200      	movs	r2, #0
 800a850:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a852:	f000 f8f5 	bl	800aa40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a856:	4b10      	ldr	r3, [pc, #64]	; (800a898 <xPortStartScheduler+0x138>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a0f      	ldr	r2, [pc, #60]	; (800a898 <xPortStartScheduler+0x138>)
 800a85c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a860:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a862:	f7ff ff69 	bl	800a738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a866:	f7ff f871 	bl	800994c <vTaskSwitchContext>
	prvTaskExitError();
 800a86a:	f7ff ff27 	bl	800a6bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3718      	adds	r7, #24
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	e000ed00 	.word	0xe000ed00
 800a87c:	410fc271 	.word	0x410fc271
 800a880:	410fc270 	.word	0x410fc270
 800a884:	e000e400 	.word	0xe000e400
 800a888:	24000d18 	.word	0x24000d18
 800a88c:	24000d1c 	.word	0x24000d1c
 800a890:	e000ed20 	.word	0xe000ed20
 800a894:	24000010 	.word	0x24000010
 800a898:	e000ef34 	.word	0xe000ef34

0800a89c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a8b4:	4b0e      	ldr	r3, [pc, #56]	; (800a8f0 <vPortEnterCritical+0x54>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	4a0d      	ldr	r2, [pc, #52]	; (800a8f0 <vPortEnterCritical+0x54>)
 800a8bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a8be:	4b0c      	ldr	r3, [pc, #48]	; (800a8f0 <vPortEnterCritical+0x54>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d10e      	bne.n	800a8e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a8c6:	4b0b      	ldr	r3, [pc, #44]	; (800a8f4 <vPortEnterCritical+0x58>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d009      	beq.n	800a8e4 <vPortEnterCritical+0x48>
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	603b      	str	r3, [r7, #0]
 800a8e2:	e7fe      	b.n	800a8e2 <vPortEnterCritical+0x46>
	}
}
 800a8e4:	bf00      	nop
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr
 800a8f0:	24000010 	.word	0x24000010
 800a8f4:	e000ed04 	.word	0xe000ed04

0800a8f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a8fe:	4b11      	ldr	r3, [pc, #68]	; (800a944 <vPortExitCritical+0x4c>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d109      	bne.n	800a91a <vPortExitCritical+0x22>
 800a906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	607b      	str	r3, [r7, #4]
 800a918:	e7fe      	b.n	800a918 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a91a:	4b0a      	ldr	r3, [pc, #40]	; (800a944 <vPortExitCritical+0x4c>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	3b01      	subs	r3, #1
 800a920:	4a08      	ldr	r2, [pc, #32]	; (800a944 <vPortExitCritical+0x4c>)
 800a922:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a924:	4b07      	ldr	r3, [pc, #28]	; (800a944 <vPortExitCritical+0x4c>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d104      	bne.n	800a936 <vPortExitCritical+0x3e>
 800a92c:	2300      	movs	r3, #0
 800a92e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a936:	bf00      	nop
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	24000010 	.word	0x24000010
	...

0800a950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a950:	f3ef 8009 	mrs	r0, PSP
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	4b15      	ldr	r3, [pc, #84]	; (800a9b0 <pxCurrentTCBConst>)
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	f01e 0f10 	tst.w	lr, #16
 800a960:	bf08      	it	eq
 800a962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a96a:	6010      	str	r0, [r2, #0]
 800a96c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a970:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a974:	f380 8811 	msr	BASEPRI, r0
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f7fe ffe4 	bl	800994c <vTaskSwitchContext>
 800a984:	f04f 0000 	mov.w	r0, #0
 800a988:	f380 8811 	msr	BASEPRI, r0
 800a98c:	bc09      	pop	{r0, r3}
 800a98e:	6819      	ldr	r1, [r3, #0]
 800a990:	6808      	ldr	r0, [r1, #0]
 800a992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a996:	f01e 0f10 	tst.w	lr, #16
 800a99a:	bf08      	it	eq
 800a99c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a9a0:	f380 8809 	msr	PSP, r0
 800a9a4:	f3bf 8f6f 	isb	sy
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	f3af 8000 	nop.w

0800a9b0 <pxCurrentTCBConst>:
 800a9b0:	240006ec 	.word	0x240006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a9b4:	bf00      	nop
 800a9b6:	bf00      	nop

0800a9b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a9d0:	f7fe ff04 	bl	80097dc <xTaskIncrementTick>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d003      	beq.n	800a9e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a9da:	4b06      	ldr	r3, [pc, #24]	; (800a9f4 <SysTick_Handler+0x3c>)
 800a9dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9e0:	601a      	str	r2, [r3, #0]
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a9ec:	bf00      	nop
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	e000ed04 	.word	0xe000ed04

0800a9f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a9fc:	4b0b      	ldr	r3, [pc, #44]	; (800aa2c <vPortSetupTimerInterrupt+0x34>)
 800a9fe:	2200      	movs	r2, #0
 800aa00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa02:	4b0b      	ldr	r3, [pc, #44]	; (800aa30 <vPortSetupTimerInterrupt+0x38>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa08:	4b0a      	ldr	r3, [pc, #40]	; (800aa34 <vPortSetupTimerInterrupt+0x3c>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a0a      	ldr	r2, [pc, #40]	; (800aa38 <vPortSetupTimerInterrupt+0x40>)
 800aa0e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa12:	099b      	lsrs	r3, r3, #6
 800aa14:	4a09      	ldr	r2, [pc, #36]	; (800aa3c <vPortSetupTimerInterrupt+0x44>)
 800aa16:	3b01      	subs	r3, #1
 800aa18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa1a:	4b04      	ldr	r3, [pc, #16]	; (800aa2c <vPortSetupTimerInterrupt+0x34>)
 800aa1c:	2207      	movs	r2, #7
 800aa1e:	601a      	str	r2, [r3, #0]
}
 800aa20:	bf00      	nop
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	e000e010 	.word	0xe000e010
 800aa30:	e000e018 	.word	0xe000e018
 800aa34:	24000000 	.word	0x24000000
 800aa38:	10624dd3 	.word	0x10624dd3
 800aa3c:	e000e014 	.word	0xe000e014

0800aa40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aa50 <vPortEnableVFP+0x10>
 800aa44:	6801      	ldr	r1, [r0, #0]
 800aa46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aa4a:	6001      	str	r1, [r0, #0]
 800aa4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa4e:	bf00      	nop
 800aa50:	e000ed88 	.word	0xe000ed88

0800aa54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa5a:	f3ef 8305 	mrs	r3, IPSR
 800aa5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2b0f      	cmp	r3, #15
 800aa64:	d913      	bls.n	800aa8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa66:	4a16      	ldr	r2, [pc, #88]	; (800aac0 <vPortValidateInterruptPriority+0x6c>)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa70:	4b14      	ldr	r3, [pc, #80]	; (800aac4 <vPortValidateInterruptPriority+0x70>)
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	7afa      	ldrb	r2, [r7, #11]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d209      	bcs.n	800aa8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800aa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	607b      	str	r3, [r7, #4]
 800aa8c:	e7fe      	b.n	800aa8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa8e:	4b0e      	ldr	r3, [pc, #56]	; (800aac8 <vPortValidateInterruptPriority+0x74>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa96:	4b0d      	ldr	r3, [pc, #52]	; (800aacc <vPortValidateInterruptPriority+0x78>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d909      	bls.n	800aab2 <vPortValidateInterruptPriority+0x5e>
 800aa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	603b      	str	r3, [r7, #0]
 800aab0:	e7fe      	b.n	800aab0 <vPortValidateInterruptPriority+0x5c>
	}
 800aab2:	bf00      	nop
 800aab4:	3714      	adds	r7, #20
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	e000e3f0 	.word	0xe000e3f0
 800aac4:	24000d18 	.word	0x24000d18
 800aac8:	e000ed0c 	.word	0xe000ed0c
 800aacc:	24000d1c 	.word	0x24000d1c

0800aad0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b08a      	sub	sp, #40	; 0x28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aad8:	2300      	movs	r3, #0
 800aada:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aadc:	f7fe fdb2 	bl	8009644 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aae0:	4b57      	ldr	r3, [pc, #348]	; (800ac40 <pvPortMalloc+0x170>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d101      	bne.n	800aaec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aae8:	f000 f90c 	bl	800ad04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aaec:	4b55      	ldr	r3, [pc, #340]	; (800ac44 <pvPortMalloc+0x174>)
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f040 808c 	bne.w	800ac12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d01c      	beq.n	800ab3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ab00:	2208      	movs	r2, #8
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4413      	add	r3, r2
 800ab06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f003 0307 	and.w	r3, r3, #7
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d013      	beq.n	800ab3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f023 0307 	bic.w	r3, r3, #7
 800ab18:	3308      	adds	r3, #8
 800ab1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f003 0307 	and.w	r3, r3, #7
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d009      	beq.n	800ab3a <pvPortMalloc+0x6a>
 800ab26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2a:	f383 8811 	msr	BASEPRI, r3
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	617b      	str	r3, [r7, #20]
 800ab38:	e7fe      	b.n	800ab38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d068      	beq.n	800ac12 <pvPortMalloc+0x142>
 800ab40:	4b41      	ldr	r3, [pc, #260]	; (800ac48 <pvPortMalloc+0x178>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d863      	bhi.n	800ac12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab4a:	4b40      	ldr	r3, [pc, #256]	; (800ac4c <pvPortMalloc+0x17c>)
 800ab4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab4e:	4b3f      	ldr	r3, [pc, #252]	; (800ac4c <pvPortMalloc+0x17c>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab54:	e004      	b.n	800ab60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ab56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d903      	bls.n	800ab72 <pvPortMalloc+0xa2>
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1f1      	bne.n	800ab56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ab72:	4b33      	ldr	r3, [pc, #204]	; (800ac40 <pvPortMalloc+0x170>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d04a      	beq.n	800ac12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab7c:	6a3b      	ldr	r3, [r7, #32]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2208      	movs	r2, #8
 800ab82:	4413      	add	r3, r2
 800ab84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	6a3b      	ldr	r3, [r7, #32]
 800ab8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab90:	685a      	ldr	r2, [r3, #4]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	1ad2      	subs	r2, r2, r3
 800ab96:	2308      	movs	r3, #8
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d91e      	bls.n	800abdc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4413      	add	r3, r2
 800aba4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	f003 0307 	and.w	r3, r3, #7
 800abac:	2b00      	cmp	r3, #0
 800abae:	d009      	beq.n	800abc4 <pvPortMalloc+0xf4>
 800abb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb4:	f383 8811 	msr	BASEPRI, r3
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	613b      	str	r3, [r7, #16]
 800abc2:	e7fe      	b.n	800abc2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc6:	685a      	ldr	r2, [r3, #4]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	1ad2      	subs	r2, r2, r3
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800abd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800abd6:	69b8      	ldr	r0, [r7, #24]
 800abd8:	f000 f8f6 	bl	800adc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800abdc:	4b1a      	ldr	r3, [pc, #104]	; (800ac48 <pvPortMalloc+0x178>)
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	1ad3      	subs	r3, r2, r3
 800abe6:	4a18      	ldr	r2, [pc, #96]	; (800ac48 <pvPortMalloc+0x178>)
 800abe8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800abea:	4b17      	ldr	r3, [pc, #92]	; (800ac48 <pvPortMalloc+0x178>)
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	4b18      	ldr	r3, [pc, #96]	; (800ac50 <pvPortMalloc+0x180>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d203      	bcs.n	800abfe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800abf6:	4b14      	ldr	r3, [pc, #80]	; (800ac48 <pvPortMalloc+0x178>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a15      	ldr	r2, [pc, #84]	; (800ac50 <pvPortMalloc+0x180>)
 800abfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800abfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	4b10      	ldr	r3, [pc, #64]	; (800ac44 <pvPortMalloc+0x174>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	431a      	orrs	r2, r3
 800ac08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	2200      	movs	r2, #0
 800ac10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac12:	f7fe fd25 	bl	8009660 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	f003 0307 	and.w	r3, r3, #7
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d009      	beq.n	800ac34 <pvPortMalloc+0x164>
 800ac20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	60fb      	str	r3, [r7, #12]
 800ac32:	e7fe      	b.n	800ac32 <pvPortMalloc+0x162>
	return pvReturn;
 800ac34:	69fb      	ldr	r3, [r7, #28]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3728      	adds	r7, #40	; 0x28
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	24004928 	.word	0x24004928
 800ac44:	24004934 	.word	0x24004934
 800ac48:	2400492c 	.word	0x2400492c
 800ac4c:	24004920 	.word	0x24004920
 800ac50:	24004930 	.word	0x24004930

0800ac54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b086      	sub	sp, #24
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d046      	beq.n	800acf4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac66:	2308      	movs	r3, #8
 800ac68:	425b      	negs	r3, r3
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	685a      	ldr	r2, [r3, #4]
 800ac78:	4b20      	ldr	r3, [pc, #128]	; (800acfc <vPortFree+0xa8>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d109      	bne.n	800ac96 <vPortFree+0x42>
 800ac82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac86:	f383 8811 	msr	BASEPRI, r3
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	60fb      	str	r3, [r7, #12]
 800ac94:	e7fe      	b.n	800ac94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d009      	beq.n	800acb2 <vPortFree+0x5e>
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	60bb      	str	r3, [r7, #8]
 800acb0:	e7fe      	b.n	800acb0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	685a      	ldr	r2, [r3, #4]
 800acb6:	4b11      	ldr	r3, [pc, #68]	; (800acfc <vPortFree+0xa8>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4013      	ands	r3, r2
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d019      	beq.n	800acf4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d115      	bne.n	800acf4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	685a      	ldr	r2, [r3, #4]
 800accc:	4b0b      	ldr	r3, [pc, #44]	; (800acfc <vPortFree+0xa8>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	43db      	mvns	r3, r3
 800acd2:	401a      	ands	r2, r3
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800acd8:	f7fe fcb4 	bl	8009644 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	685a      	ldr	r2, [r3, #4]
 800ace0:	4b07      	ldr	r3, [pc, #28]	; (800ad00 <vPortFree+0xac>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4413      	add	r3, r2
 800ace6:	4a06      	ldr	r2, [pc, #24]	; (800ad00 <vPortFree+0xac>)
 800ace8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800acea:	6938      	ldr	r0, [r7, #16]
 800acec:	f000 f86c 	bl	800adc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800acf0:	f7fe fcb6 	bl	8009660 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800acf4:	bf00      	nop
 800acf6:	3718      	adds	r7, #24
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	24004934 	.word	0x24004934
 800ad00:	2400492c 	.word	0x2400492c

0800ad04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ad0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad10:	4b27      	ldr	r3, [pc, #156]	; (800adb0 <prvHeapInit+0xac>)
 800ad12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f003 0307 	and.w	r3, r3, #7
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00c      	beq.n	800ad38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	3307      	adds	r3, #7
 800ad22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f023 0307 	bic.w	r3, r3, #7
 800ad2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad2c:	68ba      	ldr	r2, [r7, #8]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	1ad3      	subs	r3, r2, r3
 800ad32:	4a1f      	ldr	r2, [pc, #124]	; (800adb0 <prvHeapInit+0xac>)
 800ad34:	4413      	add	r3, r2
 800ad36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad3c:	4a1d      	ldr	r2, [pc, #116]	; (800adb4 <prvHeapInit+0xb0>)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad42:	4b1c      	ldr	r3, [pc, #112]	; (800adb4 <prvHeapInit+0xb0>)
 800ad44:	2200      	movs	r2, #0
 800ad46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad50:	2208      	movs	r2, #8
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	1a9b      	subs	r3, r3, r2
 800ad56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f023 0307 	bic.w	r3, r3, #7
 800ad5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	4a15      	ldr	r2, [pc, #84]	; (800adb8 <prvHeapInit+0xb4>)
 800ad64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ad66:	4b14      	ldr	r3, [pc, #80]	; (800adb8 <prvHeapInit+0xb4>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad6e:	4b12      	ldr	r3, [pc, #72]	; (800adb8 <prvHeapInit+0xb4>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2200      	movs	r2, #0
 800ad74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	1ad2      	subs	r2, r2, r3
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad84:	4b0c      	ldr	r3, [pc, #48]	; (800adb8 <prvHeapInit+0xb4>)
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	4a0a      	ldr	r2, [pc, #40]	; (800adbc <prvHeapInit+0xb8>)
 800ad92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	4a09      	ldr	r2, [pc, #36]	; (800adc0 <prvHeapInit+0xbc>)
 800ad9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad9c:	4b09      	ldr	r3, [pc, #36]	; (800adc4 <prvHeapInit+0xc0>)
 800ad9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ada2:	601a      	str	r2, [r3, #0]
}
 800ada4:	bf00      	nop
 800ada6:	3714      	adds	r7, #20
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr
 800adb0:	24000d20 	.word	0x24000d20
 800adb4:	24004920 	.word	0x24004920
 800adb8:	24004928 	.word	0x24004928
 800adbc:	24004930 	.word	0x24004930
 800adc0:	2400492c 	.word	0x2400492c
 800adc4:	24004934 	.word	0x24004934

0800adc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800add0:	4b28      	ldr	r3, [pc, #160]	; (800ae74 <prvInsertBlockIntoFreeList+0xac>)
 800add2:	60fb      	str	r3, [r7, #12]
 800add4:	e002      	b.n	800addc <prvInsertBlockIntoFreeList+0x14>
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	60fb      	str	r3, [r7, #12]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d8f7      	bhi.n	800add6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	4413      	add	r3, r2
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d108      	bne.n	800ae0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	685a      	ldr	r2, [r3, #4]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	441a      	add	r2, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	68ba      	ldr	r2, [r7, #8]
 800ae14:	441a      	add	r2, r3
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d118      	bne.n	800ae50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	4b15      	ldr	r3, [pc, #84]	; (800ae78 <prvInsertBlockIntoFreeList+0xb0>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d00d      	beq.n	800ae46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	685a      	ldr	r2, [r3, #4]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	441a      	add	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	601a      	str	r2, [r3, #0]
 800ae44:	e008      	b.n	800ae58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae46:	4b0c      	ldr	r3, [pc, #48]	; (800ae78 <prvInsertBlockIntoFreeList+0xb0>)
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	601a      	str	r2, [r3, #0]
 800ae4e:	e003      	b.n	800ae58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d002      	beq.n	800ae66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae66:	bf00      	nop
 800ae68:	3714      	adds	r7, #20
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	24004920 	.word	0x24004920
 800ae78:	24004928 	.word	0x24004928

0800ae7c <__libc_init_array>:
 800ae7c:	b570      	push	{r4, r5, r6, lr}
 800ae7e:	4e0d      	ldr	r6, [pc, #52]	; (800aeb4 <__libc_init_array+0x38>)
 800ae80:	4c0d      	ldr	r4, [pc, #52]	; (800aeb8 <__libc_init_array+0x3c>)
 800ae82:	1ba4      	subs	r4, r4, r6
 800ae84:	10a4      	asrs	r4, r4, #2
 800ae86:	2500      	movs	r5, #0
 800ae88:	42a5      	cmp	r5, r4
 800ae8a:	d109      	bne.n	800aea0 <__libc_init_array+0x24>
 800ae8c:	4e0b      	ldr	r6, [pc, #44]	; (800aebc <__libc_init_array+0x40>)
 800ae8e:	4c0c      	ldr	r4, [pc, #48]	; (800aec0 <__libc_init_array+0x44>)
 800ae90:	f000 f82c 	bl	800aeec <_init>
 800ae94:	1ba4      	subs	r4, r4, r6
 800ae96:	10a4      	asrs	r4, r4, #2
 800ae98:	2500      	movs	r5, #0
 800ae9a:	42a5      	cmp	r5, r4
 800ae9c:	d105      	bne.n	800aeaa <__libc_init_array+0x2e>
 800ae9e:	bd70      	pop	{r4, r5, r6, pc}
 800aea0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aea4:	4798      	blx	r3
 800aea6:	3501      	adds	r5, #1
 800aea8:	e7ee      	b.n	800ae88 <__libc_init_array+0xc>
 800aeaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aeae:	4798      	blx	r3
 800aeb0:	3501      	adds	r5, #1
 800aeb2:	e7f2      	b.n	800ae9a <__libc_init_array+0x1e>
 800aeb4:	0800c164 	.word	0x0800c164
 800aeb8:	0800c164 	.word	0x0800c164
 800aebc:	0800c164 	.word	0x0800c164
 800aec0:	0800c168 	.word	0x0800c168

0800aec4 <memcpy>:
 800aec4:	b510      	push	{r4, lr}
 800aec6:	1e43      	subs	r3, r0, #1
 800aec8:	440a      	add	r2, r1
 800aeca:	4291      	cmp	r1, r2
 800aecc:	d100      	bne.n	800aed0 <memcpy+0xc>
 800aece:	bd10      	pop	{r4, pc}
 800aed0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aed4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aed8:	e7f7      	b.n	800aeca <memcpy+0x6>

0800aeda <memset>:
 800aeda:	4402      	add	r2, r0
 800aedc:	4603      	mov	r3, r0
 800aede:	4293      	cmp	r3, r2
 800aee0:	d100      	bne.n	800aee4 <memset+0xa>
 800aee2:	4770      	bx	lr
 800aee4:	f803 1b01 	strb.w	r1, [r3], #1
 800aee8:	e7f9      	b.n	800aede <memset+0x4>
	...

0800aeec <_init>:
 800aeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeee:	bf00      	nop
 800aef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aef2:	bc08      	pop	{r3}
 800aef4:	469e      	mov	lr, r3
 800aef6:	4770      	bx	lr

0800aef8 <_fini>:
 800aef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefa:	bf00      	nop
 800aefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aefe:	bc08      	pop	{r3}
 800af00:	469e      	mov	lr, r3
 800af02:	4770      	bx	lr
