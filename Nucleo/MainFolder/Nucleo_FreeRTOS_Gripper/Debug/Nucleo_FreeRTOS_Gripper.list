
Nucleo_FreeRTOS_Gripper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c714  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001260  0800c9b4  0800c9b4  0001c9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc14  0800dc14  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc14  0800dc14  0001dc14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc1c  0800dc1c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc1c  0800dc1c  0001dc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc20  0800dc20  0001dc20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  0800dc24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050bc  24000014  0800dc38  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240050d0  0800dc38  000250d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034feb  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f39  00000000  00000000  0005502d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fe0  00000000  00000000  00059f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e08  00000000  00000000  0005bf48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005ad7  00000000  00000000  0005dd50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c254  00000000  00000000  00063827  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00172222  00000000  00000000  0007fa7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f1c9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008984  00000000  00000000  001f1d18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c99c 	.word	0x0800c99c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	0800c99c 	.word	0x0800c99c

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f001 fae2 	bl	8001bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f85a 	bl	80006a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  HAL_I2C_MspInit(&hi2c1);
 80005ec:	481e      	ldr	r0, [pc, #120]	; (8000668 <main+0x88>)
 80005ee:	f000 ffbf 	bl	8001570 <HAL_I2C_MspInit>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 faf1 	bl	8000bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005f6:	f000 facf 	bl	8000b98 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 fa4f 	bl	8000a9c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005fe:	f000 fa99 	bl	8000b34 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 8000602:	f000 f957 	bl	80008b4 <MX_SPI4_Init>
  MX_UART7_Init();
 8000606:	f000 f9ad 	bl	8000964 <MX_UART7_Init>
  MX_USART2_UART_Init();
 800060a:	f000 f9f9 	bl	8000a00 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800060e:	f000 f911 	bl	8000834 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	2110      	movs	r1, #16
 8000616:	4815      	ldr	r0, [pc, #84]	; (800066c <main+0x8c>)
 8000618:	f003 faa4 	bl	8003b64 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800061c:	f009 fb90 	bl	8009d40 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ControlTask */
  ControlTaskHandle = osThreadNew(StartControlTask, NULL, &ControlTask_attributes);
 8000620:	4a13      	ldr	r2, [pc, #76]	; (8000670 <main+0x90>)
 8000622:	2100      	movs	r1, #0
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <main+0x94>)
 8000626:	f009 fc99 	bl	8009f5c <osThreadNew>
 800062a:	4602      	mov	r2, r0
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <main+0x98>)
 800062e:	601a      	str	r2, [r3, #0]

  /* creation of CommBoard */
  CommBoardHandle = osThreadNew(StartCommBoard, NULL, &CommBoard_attributes);
 8000630:	4a12      	ldr	r2, [pc, #72]	; (800067c <main+0x9c>)
 8000632:	2100      	movs	r1, #0
 8000634:	4812      	ldr	r0, [pc, #72]	; (8000680 <main+0xa0>)
 8000636:	f009 fc91 	bl	8009f5c <osThreadNew>
 800063a:	4602      	mov	r2, r0
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <main+0xa4>)
 800063e:	601a      	str	r2, [r3, #0]

  /* creation of SensorRead */
  SensorReadHandle = osThreadNew(StartSensorRead, NULL, &SensorRead_attributes);
 8000640:	4a11      	ldr	r2, [pc, #68]	; (8000688 <main+0xa8>)
 8000642:	2100      	movs	r1, #0
 8000644:	4811      	ldr	r0, [pc, #68]	; (800068c <main+0xac>)
 8000646:	f009 fc89 	bl	8009f5c <osThreadNew>
 800064a:	4602      	mov	r2, r0
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <main+0xb0>)
 800064e:	601a      	str	r2, [r3, #0]

  /* creation of Safety */
  SafetyHandle = osThreadNew(StartSafety, NULL, &Safety_attributes);
 8000650:	4a10      	ldr	r2, [pc, #64]	; (8000694 <main+0xb4>)
 8000652:	2100      	movs	r1, #0
 8000654:	4810      	ldr	r0, [pc, #64]	; (8000698 <main+0xb8>)
 8000656:	f009 fc81 	bl	8009f5c <osThreadNew>
 800065a:	4602      	mov	r2, r0
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <main+0xbc>)
 800065e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000660:	f009 fba2 	bl	8009da8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0x84>
 8000666:	bf00      	nop
 8000668:	24004a50 	.word	0x24004a50
 800066c:	58021000 	.word	0x58021000
 8000670:	0800cb54 	.word	0x0800cb54
 8000674:	08001429 	.word	0x08001429
 8000678:	2400503c 	.word	0x2400503c
 800067c:	0800cb78 	.word	0x0800cb78
 8000680:	08001449 	.word	0x08001449
 8000684:	24004eac 	.word	0x24004eac
 8000688:	0800cb9c 	.word	0x0800cb9c
 800068c:	080014c9 	.word	0x080014c9
 8000690:	24004ea8 	.word	0x24004ea8
 8000694:	0800cbc0 	.word	0x0800cbc0
 8000698:	080014e9 	.word	0x080014e9
 800069c:	24004ea4 	.word	0x24004ea4

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b0cc      	sub	sp, #304	; 0x130
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006aa:	224c      	movs	r2, #76	; 0x4c
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f00c f96b 	bl	800c98a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006b8:	2220      	movs	r2, #32
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f00c f964 	bl	800c98a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	4618      	mov	r0, r3
 80006c8:	23bc      	movs	r3, #188	; 0xbc
 80006ca:	461a      	mov	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f00c f95c 	bl	800c98a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006d2:	2002      	movs	r0, #2
 80006d4:	f004 f8a4 	bl	8004820 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	4b52      	ldr	r3, [pc, #328]	; (8000828 <SystemClock_Config+0x188>)
 80006e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e2:	4a51      	ldr	r2, [pc, #324]	; (8000828 <SystemClock_Config+0x188>)
 80006e4:	f023 0301 	bic.w	r3, r3, #1
 80006e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006ea:	4b4f      	ldr	r3, [pc, #316]	; (8000828 <SystemClock_Config+0x188>)
 80006ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ee:	f003 0201 	and.w	r2, r3, #1
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	4b4d      	ldr	r3, [pc, #308]	; (800082c <SystemClock_Config+0x18c>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006fe:	4a4b      	ldr	r2, [pc, #300]	; (800082c <SystemClock_Config+0x18c>)
 8000700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b49      	ldr	r3, [pc, #292]	; (800082c <SystemClock_Config+0x18c>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000716:	bf00      	nop
 8000718:	4b44      	ldr	r3, [pc, #272]	; (800082c <SystemClock_Config+0x18c>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000724:	d1f8      	bne.n	8000718 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000726:	2303      	movs	r3, #3
 8000728:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800072c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000730:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000734:	2301      	movs	r3, #1
 8000736:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073a:	2340      	movs	r3, #64	; 0x40
 800073c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000746:	2302      	movs	r3, #2
 8000748:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800074c:	2301      	movs	r3, #1
 800074e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000752:	2318      	movs	r3, #24
 8000754:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800075e:	2304      	movs	r3, #4
 8000760:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000764:	2302      	movs	r3, #2
 8000766:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800076a:	230c      	movs	r3, #12
 800076c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000770:	2300      	movs	r3, #0
 8000772:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000780:	4618      	mov	r0, r3
 8000782:	f004 f897 	bl	80048b4 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800078c:	f000 fece 	bl	800152c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	233f      	movs	r3, #63	; 0x3f
 8000792:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000796:	2300      	movs	r3, #0
 8000798:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f004 fc84 	bl	80050d4 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x136>
  {
    Error_Handler();
 80007d2:	f000 feab 	bl	800152c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	4a15      	ldr	r2, [pc, #84]	; (8000830 <SystemClock_Config+0x190>)
 80007dc:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2200      	movs	r2, #0
 80007e4:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	2200      	movs	r2, #0
 80007ec:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2200      	movs	r2, #0
 80007f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	4618      	mov	r0, r3
 800080a:	f005 f829 	bl	8005860 <HAL_RCCEx_PeriphCLKConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x178>
  {
    Error_Handler();
 8000814:	f000 fe8a 	bl	800152c <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000818:	f004 f83c 	bl	8004894 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800081c:	bf00      	nop
 800081e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	58000400 	.word	0x58000400
 800082c:	58024800 	.word	0x58024800
 8000830:	0004200a 	.word	0x0004200a

08000834 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_I2C1_Init+0x74>)
 800083a:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <MX_I2C1_Init+0x78>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <MX_I2C1_Init+0x7c>)
 8000842:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 10;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000846:	220a      	movs	r2, #10
 8000848:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_I2C1_Init+0x74>)
 800084c:	2201      	movs	r2, #1
 800084e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000870:	f003 f9ac 	bl	8003bcc <HAL_I2C_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800087a:	f000 fe57 	bl	800152c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800087e:	2100      	movs	r1, #0
 8000880:	4809      	ldr	r0, [pc, #36]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000882:	f003 fded 	bl	8004460 <HAL_I2CEx_ConfigAnalogFilter>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800088c:	f000 fe4e 	bl	800152c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000894:	f003 fe2f 	bl	80044f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800089e:	f000 fe45 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	24004a50 	.word	0x24004a50
 80008ac:	40005400 	.word	0x40005400
 80008b0:	00602173 	.word	0x00602173

080008b4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80008b8:	4b28      	ldr	r3, [pc, #160]	; (800095c <MX_SPI4_Init+0xa8>)
 80008ba:	4a29      	ldr	r2, [pc, #164]	; (8000960 <MX_SPI4_Init+0xac>)
 80008bc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80008be:	4b27      	ldr	r3, [pc, #156]	; (800095c <MX_SPI4_Init+0xa8>)
 80008c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008c4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80008c6:	4b25      	ldr	r3, [pc, #148]	; (800095c <MX_SPI4_Init+0xa8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <MX_SPI4_Init+0xa8>)
 80008ce:	2207      	movs	r2, #7
 80008d0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <MX_SPI4_Init+0xa8>)
 80008d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80008d8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80008da:	4b20      	ldr	r3, [pc, #128]	; (800095c <MX_SPI4_Init+0xa8>)
 80008dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008e0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_SPI4_Init+0xa8>)
 80008e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80008e8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_SPI4_Init+0xa8>)
 80008ec:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80008f0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_SPI4_Init+0xa8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_SPI4_Init+0xa8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_SPI4_Init+0xa8>)
 8000900:	2200      	movs	r2, #0
 8000902:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_SPI4_Init+0xa8>)
 8000906:	2200      	movs	r2, #0
 8000908:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_SPI4_Init+0xa8>)
 800090c:	2200      	movs	r2, #0
 800090e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_SPI4_Init+0xa8>)
 8000912:	2200      	movs	r2, #0
 8000914:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_SPI4_Init+0xa8>)
 8000918:	2200      	movs	r2, #0
 800091a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_SPI4_Init+0xa8>)
 800091e:	2200      	movs	r2, #0
 8000920:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_SPI4_Init+0xa8>)
 8000924:	2200      	movs	r2, #0
 8000926:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_SPI4_Init+0xa8>)
 800092a:	2200      	movs	r2, #0
 800092c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_SPI4_Init+0xa8>)
 8000930:	2200      	movs	r2, #0
 8000932:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_SPI4_Init+0xa8>)
 8000936:	2200      	movs	r2, #0
 8000938:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_SPI4_Init+0xa8>)
 800093c:	2200      	movs	r2, #0
 800093e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_SPI4_Init+0xa8>)
 8000942:	2200      	movs	r2, #0
 8000944:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_SPI4_Init+0xa8>)
 8000948:	f006 fa8a 	bl	8006e60 <HAL_SPI_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8000952:	f000 fdeb 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	24004eb0 	.word	0x24004eb0
 8000960:	40013400 	.word	0x40013400

08000964 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <MX_UART7_Init+0x90>)
 800096a:	4a23      	ldr	r2, [pc, #140]	; (80009f8 <MX_UART7_Init+0x94>)
 800096c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1000000;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <MX_UART7_Init+0x90>)
 8000970:	4a22      	ldr	r2, [pc, #136]	; (80009fc <MX_UART7_Init+0x98>)
 8000972:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <MX_UART7_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800097a:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <MX_UART7_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000980:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_UART7_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000986:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_UART7_Init+0x90>)
 8000988:	220c      	movs	r2, #12
 800098a:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098c:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_UART7_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_UART7_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_UART7_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_UART7_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_UART7_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart7) != HAL_OK)
 80009aa:	4812      	ldr	r0, [pc, #72]	; (80009f4 <MX_UART7_Init+0x90>)
 80009ac:	f007 fdf0 	bl	8008590 <HAL_HalfDuplex_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_UART7_Init+0x56>
  {
    Error_Handler();
 80009b6:	f000 fdb9 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <MX_UART7_Init+0x90>)
 80009be:	f008 fe28 	bl	8009612 <HAL_UARTEx_SetTxFifoThreshold>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_UART7_Init+0x68>
  {
    Error_Handler();
 80009c8:	f000 fdb0 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009cc:	2100      	movs	r1, #0
 80009ce:	4809      	ldr	r0, [pc, #36]	; (80009f4 <MX_UART7_Init+0x90>)
 80009d0:	f008 fe5d 	bl	800968e <HAL_UARTEx_SetRxFifoThreshold>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 80009da:	f000 fda7 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_UART7_Init+0x90>)
 80009e0:	f008 fdde 	bl	80095a0 <HAL_UARTEx_DisableFifoMode>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 80009ea:	f000 fd9f 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	24004938 	.word	0x24004938
 80009f8:	40007800 	.word	0x40007800
 80009fc:	000f4240 	.word	0x000f4240

08000a00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a06:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <MX_USART2_UART_Init+0x94>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a0c:	4a22      	ldr	r2, [pc, #136]	; (8000a98 <MX_USART2_UART_Init+0x98>)
 8000a0e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a24:	220c      	movs	r2, #12
 8000a26:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000a46:	4812      	ldr	r0, [pc, #72]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a48:	f007 fda2 	bl	8008590 <HAL_HalfDuplex_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000a52:	f000 fd6b 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a5a:	f008 fdda 	bl	8009612 <HAL_UARTEx_SetTxFifoThreshold>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8000a64:	f000 fd62 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4809      	ldr	r0, [pc, #36]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a6c:	f008 fe0f 	bl	800968e <HAL_UARTEx_SetRxFifoThreshold>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8000a76:	f000 fd59 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a7c:	f008 fd90 	bl	80095a0 <HAL_UARTEx_DisableFifoMode>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000a86:	f000 fd51 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	24004fb0 	.word	0x24004fb0
 8000a94:	40004400 	.word	0x40004400
 8000a98:	000f4240 	.word	0x000f4240

08000a9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000aa2:	4a23      	ldr	r2, [pc, #140]	; (8000b30 <MX_USART3_UART_Init+0x94>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ae4:	4811      	ldr	r0, [pc, #68]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000ae6:	f007 fd03 	bl	80084f0 <HAL_UART_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000af0:	f000 fd1c 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af4:	2100      	movs	r1, #0
 8000af6:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000af8:	f008 fd8b 	bl	8009612 <HAL_UARTEx_SetTxFifoThreshold>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b02:	f000 fd13 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b06:	2100      	movs	r1, #0
 8000b08:	4808      	ldr	r0, [pc, #32]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000b0a:	f008 fdc0 	bl	800968e <HAL_UARTEx_SetRxFifoThreshold>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b14:	f000 fd0a 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000b1a:	f008 fd41 	bl	80095a0 <HAL_UARTEx_DisableFifoMode>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b24:	f000 fd02 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	240049c4 	.word	0x240049c4
 8000b30:	40004800 	.word	0x40004800

08000b34 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3a:	4a16      	ldr	r2, [pc, #88]	; (8000b94 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b40:	2209      	movs	r2, #9
 8000b42:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b46:	2202      	movs	r2, #2
 8000b48:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b52:	2202      	movs	r2, #2
 8000b54:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7c:	f003 fd07 	bl	800458e <HAL_PCD_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b86:	f000 fcd1 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	24004a9c 	.word	0x24004a9c
 8000b94:	40080000 	.word	0x40080000

08000b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <MX_DMA_Init+0x3c>)
 8000ba0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba4:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <MX_DMA_Init+0x3c>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_DMA_Init+0x3c>)
 8000bb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	200b      	movs	r0, #11
 8000bc2:	f001 f935 	bl	8001e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bc6:	200b      	movs	r0, #11
 8000bc8:	f001 f94c 	bl	8001e64 <HAL_NVIC_EnableIRQ>

}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	58024400 	.word	0x58024400

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08e      	sub	sp, #56	; 0x38
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bee:	4b93      	ldr	r3, [pc, #588]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	4a91      	ldr	r2, [pc, #580]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfe:	4b8f      	ldr	r3, [pc, #572]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	623b      	str	r3, [r7, #32]
 8000c0a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0c:	4b8b      	ldr	r3, [pc, #556]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c12:	4a8a      	ldr	r2, [pc, #552]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1c:	4b87      	ldr	r3, [pc, #540]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2a:	4b84      	ldr	r3, [pc, #528]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c30:	4a82      	ldr	r2, [pc, #520]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000c32:	f043 0320 	orr.w	r3, r3, #32
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3a:	4b80      	ldr	r3, [pc, #512]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	f003 0320 	and.w	r3, r3, #32
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c48:	4b7c      	ldr	r3, [pc, #496]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4e:	4a7b      	ldr	r2, [pc, #492]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c58:	4b78      	ldr	r3, [pc, #480]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	4b75      	ldr	r3, [pc, #468]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6c:	4a73      	ldr	r2, [pc, #460]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c76:	4b71      	ldr	r3, [pc, #452]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c84:	4b6d      	ldr	r3, [pc, #436]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	4a6c      	ldr	r2, [pc, #432]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c94:	4b69      	ldr	r3, [pc, #420]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca2:	4b66      	ldr	r3, [pc, #408]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca8:	4a64      	ldr	r2, [pc, #400]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000caa:	f043 0308 	orr.w	r3, r3, #8
 8000cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb2:	4b62      	ldr	r3, [pc, #392]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	f003 0308 	and.w	r3, r3, #8
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cc0:	4b5e      	ldr	r3, [pc, #376]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc6:	4a5d      	ldr	r2, [pc, #372]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd0:	4b5a      	ldr	r3, [pc, #360]	; (8000e3c <MX_GPIO_Init+0x264>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2112      	movs	r1, #18
 8000ce2:	4857      	ldr	r0, [pc, #348]	; (8000e40 <MX_GPIO_Init+0x268>)
 8000ce4:	f002 ff3e 	bl	8003b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2102      	movs	r1, #2
 8000cec:	4855      	ldr	r0, [pc, #340]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000cee:	f002 ff39 	bl	8003b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cf8:	4853      	ldr	r0, [pc, #332]	; (8000e48 <MX_GPIO_Init+0x270>)
 8000cfa:	f002 ff33 	bl	8003b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d04:	4851      	ldr	r0, [pc, #324]	; (8000e4c <MX_GPIO_Init+0x274>)
 8000d06:	f002 ff2d 	bl	8003b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000d0a:	2312      	movs	r3, #18
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4847      	ldr	r0, [pc, #284]	; (8000e40 <MX_GPIO_Init+0x268>)
 8000d22:	f002 fd6f 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4845      	ldr	r0, [pc, #276]	; (8000e50 <MX_GPIO_Init+0x278>)
 8000d3c:	f002 fd62 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d40:	2332      	movs	r3, #50	; 0x32
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d50:	230b      	movs	r3, #11
 8000d52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	483d      	ldr	r0, [pc, #244]	; (8000e50 <MX_GPIO_Init+0x278>)
 8000d5c:	f002 fd52 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d60:	2302      	movs	r3, #2
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d74:	4619      	mov	r1, r3
 8000d76:	4833      	ldr	r0, [pc, #204]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000d78:	f002 fd44 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d8c:	230b      	movs	r3, #11
 8000d8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	482b      	ldr	r0, [pc, #172]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000d98:	f002 fd34 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin;
 8000d9c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	4824      	ldr	r0, [pc, #144]	; (8000e48 <MX_GPIO_Init+0x270>)
 8000db6:	f002 fd25 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dcc:	230b      	movs	r3, #11
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	481c      	ldr	r0, [pc, #112]	; (8000e48 <MX_GPIO_Init+0x270>)
 8000dd8:	f002 fd14 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df2:	4619      	mov	r1, r3
 8000df4:	4815      	ldr	r0, [pc, #84]	; (8000e4c <MX_GPIO_Init+0x274>)
 8000df6:	f002 fd05 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000dfa:	2380      	movs	r3, #128	; 0x80
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_GPIO_Init+0x27c>)
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4812      	ldr	r0, [pc, #72]	; (8000e58 <MX_GPIO_Init+0x280>)
 8000e0e:	f002 fcf9 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e12:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e24:	230b      	movs	r3, #11
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480a      	ldr	r0, [pc, #40]	; (8000e58 <MX_GPIO_Init+0x280>)
 8000e30:	f002 fce8 	bl	8003804 <HAL_GPIO_Init>

}
 8000e34:	bf00      	nop
 8000e36:	3738      	adds	r7, #56	; 0x38
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	58024400 	.word	0x58024400
 8000e40:	58021000 	.word	0x58021000
 8000e44:	58020000 	.word	0x58020000
 8000e48:	58020400 	.word	0x58020400
 8000e4c:	58020c00 	.word	0x58020c00
 8000e50:	58020800 	.word	0x58020800
 8000e54:	11110000 	.word	0x11110000
 8000e58:	58021800 	.word	0x58021800

08000e5c <SPI_E_ReadReg>:

/* USER CODE BEGIN 4 */

void SPI_E_ReadReg(uint8_t *REG_ADDR, uint8_t *readByte )
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  char READ_REG_ADDR;
  READ_REG_ADDR = *REG_ADDR & 0x7F;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2110      	movs	r1, #16
 8000e76:	480f      	ldr	r0, [pc, #60]	; (8000eb4 <SPI_E_ReadReg+0x58>)
 8000e78:	f002 fe74 	bl	8003b64 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi4,(uint8_t *) &READ_REG_ADDR, 1, 100);
 8000e7c:	f107 010f 	add.w	r1, r7, #15
 8000e80:	2364      	movs	r3, #100	; 0x64
 8000e82:	2201      	movs	r2, #1
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <SPI_E_ReadReg+0x5c>)
 8000e86:	f006 f8e3 	bl	8007050 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi4,(uint8_t *) readByte, 1, 100);
 8000e8a:	2364      	movs	r3, #100	; 0x64
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	6839      	ldr	r1, [r7, #0]
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <SPI_E_ReadReg+0x5c>)
 8000e92:	f006 facf 	bl	8007434 <HAL_SPI_Receive>

  //HAL_Delay(5);
  osDelay(1);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f009 f906 	bl	800a0a8 <osDelay>

  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <SPI_E_ReadReg+0x58>)
 8000ea2:	f002 fe5f 	bl	8003b64 <HAL_GPIO_WritePin>

  osDelay(1);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f009 f8fe 	bl	800a0a8 <osDelay>

}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	58021000 	.word	0x58021000
 8000eb8:	24004eb0 	.word	0x24004eb0

08000ebc <SPI_E_WriteReg>:

void SPI_E_WriteReg(uint8_t *REG_ADDR, uint8_t *sendByte )
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  char READ_REG_ADDR;
  READ_REG_ADDR = *REG_ADDR | 0x80;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2110      	movs	r1, #16
 8000ed6:	480f      	ldr	r0, [pc, #60]	; (8000f14 <SPI_E_WriteReg+0x58>)
 8000ed8:	f002 fe44 	bl	8003b64 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi4,(uint8_t *) &READ_REG_ADDR, 1, 100);
 8000edc:	f107 010f 	add.w	r1, r7, #15
 8000ee0:	2364      	movs	r3, #100	; 0x64
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <SPI_E_WriteReg+0x5c>)
 8000ee6:	f006 f8b3 	bl	8007050 <HAL_SPI_Transmit>

  HAL_SPI_Transmit(&hspi4,(uint8_t *) sendByte, 1, 100);
 8000eea:	2364      	movs	r3, #100	; 0x64
 8000eec:	2201      	movs	r2, #1
 8000eee:	6839      	ldr	r1, [r7, #0]
 8000ef0:	4809      	ldr	r0, [pc, #36]	; (8000f18 <SPI_E_WriteReg+0x5c>)
 8000ef2:	f006 f8ad 	bl	8007050 <HAL_SPI_Transmit>

  //HAL_Delay(5);
  osDelay(1);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f009 f8d6 	bl	800a0a8 <osDelay>

  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2110      	movs	r1, #16
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <SPI_E_WriteReg+0x58>)
 8000f02:	f002 fe2f 	bl	8003b64 <HAL_GPIO_WritePin>

  osDelay(1);
 8000f06:	2001      	movs	r0, #1
 8000f08:	f009 f8ce 	bl	800a0a8 <osDelay>

}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	58021000 	.word	0x58021000
 8000f18:	24004eb0 	.word	0x24004eb0

08000f1c <startUpMouse>:


void startUpMouse()
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0

  // Memory registers to read and write.
  uint8_t startUpRegAddr[] = {0x3A,0x02,0x03,0x04,0x05,0x06,0x10,0x13,0x13,0x62,0x2A,0x10};
 8000f22:	4a60      	ldr	r2, [pc, #384]	; (80010a4 <startUpMouse+0x188>)
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t sendByte;
  uint8_t readByte;


  // Ensure reset
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2110      	movs	r1, #16
 8000f32:	485d      	ldr	r0, [pc, #372]	; (80010a8 <startUpMouse+0x18c>)
 8000f34:	f002 fe16 	bl	8003b64 <HAL_GPIO_WritePin>
  osDelay(1);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f009 f8b5 	bl	800a0a8 <osDelay>
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2110      	movs	r1, #16
 8000f42:	4859      	ldr	r0, [pc, #356]	; (80010a8 <startUpMouse+0x18c>)
 8000f44:	f002 fe0e 	bl	8003b64 <HAL_GPIO_WritePin>
  osDelay(1);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f009 f8ad 	bl	800a0a8 <osDelay>
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2110      	movs	r1, #16
 8000f52:	4855      	ldr	r0, [pc, #340]	; (80010a8 <startUpMouse+0x18c>)
 8000f54:	f002 fe06 	bl	8003b64 <HAL_GPIO_WritePin>
  osDelay(1);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f009 f8a5 	bl	800a0a8 <osDelay>

  // Start up register
  sendByte = 0x5A;
 8000f5e:	235a      	movs	r3, #90	; 0x5a
 8000f60:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[0], &sendByte );
 8000f62:	1dfa      	adds	r2, r7, #7
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ffa6 	bl	8000ebc <SPI_E_WriteReg>

  // Must wait 50 milliseconds.
  osDelay(50);
 8000f70:	2032      	movs	r0, #50	; 0x32
 8000f72:	f009 f899 	bl	800a0a8 <osDelay>
  // Read and discard data.
  SPI_E_ReadReg(&startUpRegAddr[1], &readByte );
 8000f76:	1dba      	adds	r2, r7, #6
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff6b 	bl	8000e5c <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[2], &readByte );
 8000f86:	1dba      	adds	r2, r7, #6
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff63 	bl	8000e5c <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[3], &readByte );
 8000f96:	1dba      	adds	r2, r7, #6
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	3303      	adds	r3, #3
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5b 	bl	8000e5c <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[4], &readByte );
 8000fa6:	1dba      	adds	r2, r7, #6
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	3304      	adds	r3, #4
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff53 	bl	8000e5c <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[5], &readByte );
 8000fb6:	1dba      	adds	r2, r7, #6
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	3305      	adds	r3, #5
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff4b 	bl	8000e5c <SPI_E_ReadReg>

  // Upload SROM data to mouse sensor.

  // Write 0 to Rest_En bit of Config2 register to disable Rest mode.
  sendByte = 0x00;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[6], &sendByte );
 8000fca:	1dfa      	adds	r2, r7, #7
 8000fcc:	f107 0308 	add.w	r3, r7, #8
 8000fd0:	3306      	adds	r3, #6
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff71 	bl	8000ebc <SPI_E_WriteReg>

  // Write 0x1d to SROM_Enable register for initializing.
  sendByte = 0x1D;
 8000fda:	231d      	movs	r3, #29
 8000fdc:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[7], &sendByte );
 8000fde:	1dfa      	adds	r2, r7, #7
 8000fe0:	f107 0308 	add.w	r3, r7, #8
 8000fe4:	3307      	adds	r3, #7
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff67 	bl	8000ebc <SPI_E_WriteReg>

  // Wait 10 ms
  osDelay(10);
 8000fee:	200a      	movs	r0, #10
 8000ff0:	f009 f85a 	bl	800a0a8 <osDelay>

  // Write 0x18 to SROM_Enable register again to start SROM download.
  sendByte = 0x18;
 8000ff4:	2318      	movs	r3, #24
 8000ff6:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[8], &sendByte );
 8000ff8:	1dfa      	adds	r2, r7, #7
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	3308      	adds	r3, #8
 8001000:	4611      	mov	r1, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ff5a 	bl	8000ebc <SPI_E_WriteReg>


  // Send the SROM data
  // Select Slave during the whole transfer.
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2110      	movs	r1, #16
 800100c:	4826      	ldr	r0, [pc, #152]	; (80010a8 <startUpMouse+0x18c>)
 800100e:	f002 fda9 	bl	8003b64 <HAL_GPIO_WritePin>
  // Select SROM_Load_Burst register
  HAL_SPI_Transmit(&hspi4, &startUpRegAddr[9], 1, 100);
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	f103 0109 	add.w	r1, r3, #9
 800101a:	2364      	movs	r3, #100	; 0x64
 800101c:	2201      	movs	r2, #1
 800101e:	4823      	ldr	r0, [pc, #140]	; (80010ac <startUpMouse+0x190>)
 8001020:	f006 f816 	bl	8007050 <HAL_SPI_Transmit>


  for(int i=0;i<firmware_length;i++)
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	e00d      	b.n	8001046 <startUpMouse+0x12a>
  {
	  HAL_SPI_Transmit(&hspi4,(uint8_t *) &firmware_data[i], 1, 100);
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	4a20      	ldr	r2, [pc, #128]	; (80010b0 <startUpMouse+0x194>)
 800102e:	1899      	adds	r1, r3, r2
 8001030:	2364      	movs	r3, #100	; 0x64
 8001032:	2201      	movs	r2, #1
 8001034:	481d      	ldr	r0, [pc, #116]	; (80010ac <startUpMouse+0x190>)
 8001036:	f006 f80b 	bl	8007050 <HAL_SPI_Transmit>
	  osDelay(1);
 800103a:	2001      	movs	r0, #1
 800103c:	f009 f834 	bl	800a0a8 <osDelay>
  for(int i=0;i<firmware_length;i++)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	3301      	adds	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	f640 73fe 	movw	r3, #4094	; 0xffe
 800104a:	461a      	mov	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	4293      	cmp	r3, r2
 8001050:	dbeb      	blt.n	800102a <startUpMouse+0x10e>
  }

  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	2110      	movs	r1, #16
 8001056:	4814      	ldr	r0, [pc, #80]	; (80010a8 <startUpMouse+0x18c>)
 8001058:	f002 fd84 	bl	8003b64 <HAL_GPIO_WritePin>

  osDelay(1);
 800105c:	2001      	movs	r0, #1
 800105e:	f009 f823 	bl	800a0a8 <osDelay>

  // Read the SROM_ID (0x2A) register to verify the ID before any other register reads or writes.
  SPI_E_ReadReg(&startUpRegAddr[10], &readByte );
 8001062:	1dba      	adds	r2, r7, #6
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	330a      	adds	r3, #10
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fef5 	bl	8000e5c <SPI_E_ReadReg>

  // Write 0x00 to config2 register for wired mouse design.
  sendByte = 0x00;
 8001072:	2300      	movs	r3, #0
 8001074:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[11], &sendByte );
 8001076:	1dfa      	adds	r2, r7, #7
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	330b      	adds	r3, #11
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff1b 	bl	8000ebc <SPI_E_WriteReg>

  // Set Config1
  sendByte = 0x77;
 8001086:	2377      	movs	r3, #119	; 0x77
 8001088:	71fb      	strb	r3, [r7, #7]
  uint8_t conf1Addr = 0x0F;
 800108a:	230f      	movs	r3, #15
 800108c:	717b      	strb	r3, [r7, #5]
  SPI_E_WriteReg(&conf1Addr, &sendByte );
 800108e:	1dfa      	adds	r2, r7, #7
 8001090:	1d7b      	adds	r3, r7, #5
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff11 	bl	8000ebc <SPI_E_WriteReg>


}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	0800c9e0 	.word	0x0800c9e0
 80010a8:	58021000 	.word	0x58021000
 80010ac:	24004eb0 	.word	0x24004eb0
 80010b0:	0800cbe4 	.word	0x0800cbe4

080010b4 <readMouseSensor>:


void readMouseSensor(sensValue *sensorPacket)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

	uint8_t readByte = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	757b      	strb	r3, [r7, #21]
	uint8_t freeze = 0x01;
 80010c0:	2301      	movs	r3, #1
 80010c2:	753b      	strb	r3, [r7, #20]

	uint8_t motionADR[] = {0x02,0x03,0x04,0x05,0x06};
 80010c4:	4a30      	ldr	r2, [pc, #192]	; (8001188 <readMouseSensor+0xd4>)
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ce:	6018      	str	r0, [r3, #0]
 80010d0:	3304      	adds	r3, #4
 80010d2:	7019      	strb	r1, [r3, #0]
	uint8_t magnX_L = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	75fb      	strb	r3, [r7, #23]
	uint8_t magnY_L = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	75bb      	strb	r3, [r7, #22]
	// Write the motion address to freeze the current value of delta X and Y.
	SPI_E_WriteReg(&motionADR[0], &freeze );
 80010dc:	f107 0214 	add.w	r2, r7, #20
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	4611      	mov	r1, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fee8 	bl	8000ebc <SPI_E_WriteReg>
	// Check if any motion has occurred.
	SPI_E_ReadReg(&motionADR[0], &readByte );
 80010ec:	f107 0215 	add.w	r2, r7, #21
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff feb0 	bl	8000e5c <SPI_E_ReadReg>
	// Save the motion bit.
	sensorPacket->mouseMotion = 0 < (0x80 & readByte);
 80010fc:	7d7b      	ldrb	r3, [r7, #21]
 80010fe:	b25b      	sxtb	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	09db      	lsrs	r3, r3, #7
 8001104:	b2da      	uxtb	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	701a      	strb	r2, [r3, #0]


	//Read the delta X registers.
	SPI_E_ReadReg(&motionADR[1], &readByte );
 800110a:	f107 0215 	add.w	r2, r7, #21
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	3301      	adds	r3, #1
 8001114:	4611      	mov	r1, r2
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fea0 	bl	8000e5c <SPI_E_ReadReg>
	magnX_L = (uint8_t) readByte;
 800111c:	7d7b      	ldrb	r3, [r7, #21]
 800111e:	75fb      	strb	r3, [r7, #23]
	SPI_E_ReadReg(&motionADR[2], &readByte );
 8001120:	f107 0215 	add.w	r2, r7, #21
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	3302      	adds	r3, #2
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fe95 	bl	8000e5c <SPI_E_ReadReg>

	// Merge the lower and higher bit values of the delta X registers.
	sensorPacket->mouse_D_X = magnX_L | (readByte<<8);
 8001132:	7dfb      	ldrb	r3, [r7, #23]
 8001134:	b21a      	sxth	r2, r3
 8001136:	7d7b      	ldrb	r3, [r7, #21]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21b      	sxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b21a      	sxth	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	805a      	strh	r2, [r3, #2]

	//Read the delta X registers.
	SPI_E_ReadReg(&motionADR[3], &readByte );
 8001144:	f107 0215 	add.w	r2, r7, #21
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	3303      	adds	r3, #3
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fe83 	bl	8000e5c <SPI_E_ReadReg>
	magnY_L = (uint8_t) readByte;
 8001156:	7d7b      	ldrb	r3, [r7, #21]
 8001158:	75bb      	strb	r3, [r7, #22]
	SPI_E_ReadReg(&motionADR[4], &readByte );
 800115a:	f107 0215 	add.w	r2, r7, #21
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	3304      	adds	r3, #4
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fe78 	bl	8000e5c <SPI_E_ReadReg>

	// Merge the lower and higher bit values of the delta Y registers.
	sensorPacket->mouse_D_Y = magnY_L | (readByte<<8);
 800116c:	7dbb      	ldrb	r3, [r7, #22]
 800116e:	b21a      	sxth	r2, r3
 8001170:	7d7b      	ldrb	r3, [r7, #21]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b21a      	sxth	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	809a      	strh	r2, [r3, #4]

}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	0800c9ec 	.word	0x0800c9ec

0800118c <I2CCommandHandle>:
}



void I2CCommandHandle( )
{
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	b0ad      	sub	sp, #180	; 0xb4
 8001190:	af00      	add	r7, sp, #0
 8001192:	466b      	mov	r3, sp
 8001194:	461e      	mov	r6, r3
	// Debug messages.
	const char strF[] = "I2C buffer is empty.\n\r";
 8001196:	4b6a      	ldr	r3, [pc, #424]	; (8001340 <I2CCommandHandle+0x1b4>)
 8001198:	f107 0488 	add.w	r4, r7, #136	; 0x88
 800119c:	461d      	mov	r5, r3
 800119e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011a6:	6020      	str	r0, [r4, #0]
 80011a8:	3404      	adds	r4, #4
 80011aa:	8021      	strh	r1, [r4, #0]
 80011ac:	3402      	adds	r4, #2
 80011ae:	0c0b      	lsrs	r3, r1, #16
 80011b0:	7023      	strb	r3, [r4, #0]
	const char str0[] = "Undefined command.\n\r";
 80011b2:	4b64      	ldr	r3, [pc, #400]	; (8001344 <I2CCommandHandle+0x1b8>)
 80011b4:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80011b8:	461d      	mov	r5, r3
 80011ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011c2:	6020      	str	r0, [r4, #0]
 80011c4:	3404      	adds	r4, #4
 80011c6:	7021      	strb	r1, [r4, #0]
	const char str1[] = "Start the gripper.\n\r";
 80011c8:	4b5f      	ldr	r3, [pc, #380]	; (8001348 <I2CCommandHandle+0x1bc>)
 80011ca:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80011ce:	461d      	mov	r5, r3
 80011d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011d8:	6020      	str	r0, [r4, #0]
 80011da:	3404      	adds	r4, #4
 80011dc:	7021      	strb	r1, [r4, #0]
	const char str2[] = "Stop the gripper.\n\r";
 80011de:	4b5b      	ldr	r3, [pc, #364]	; (800134c <I2CCommandHandle+0x1c0>)
 80011e0:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80011e4:	461d      	mov	r5, r3
 80011e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ea:	682b      	ldr	r3, [r5, #0]
 80011ec:	6023      	str	r3, [r4, #0]
	const char str3[] = "Release object.\n\r";
 80011ee:	4b58      	ldr	r3, [pc, #352]	; (8001350 <I2CCommandHandle+0x1c4>)
 80011f0:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80011f4:	461d      	mov	r5, r3
 80011f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fa:	682b      	ldr	r3, [r5, #0]
 80011fc:	8023      	strh	r3, [r4, #0]
	const char str4[] = "Pause the gripper.\n\r";
 80011fe:	4b55      	ldr	r3, [pc, #340]	; (8001354 <I2CCommandHandle+0x1c8>)
 8001200:	f107 0418 	add.w	r4, r7, #24
 8001204:	461d      	mov	r5, r3
 8001206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800120e:	6020      	str	r0, [r4, #0]
 8001210:	3404      	adds	r4, #4
 8001212:	7021      	strb	r1, [r4, #0]
	const char str5[] = "Set motor angle.\n\r";
 8001214:	4b50      	ldr	r3, [pc, #320]	; (8001358 <I2CCommandHandle+0x1cc>)
 8001216:	1d3c      	adds	r4, r7, #4
 8001218:	461d      	mov	r5, r3
 800121a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121e:	682b      	ldr	r3, [r5, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	8022      	strh	r2, [r4, #0]
 8001224:	3402      	adds	r4, #2
 8001226:	0c1b      	lsrs	r3, r3, #16
 8001228:	7023      	strb	r3, [r4, #0]

	int arrSize = 30;
 800122a:	231e      	movs	r3, #30
 800122c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	char nrBuff[arrSize];
 8001230:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001234:	1e43      	subs	r3, r0, #1
 8001236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800123a:	4603      	mov	r3, r0
 800123c:	4619      	mov	r1, r3
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	f04f 0300 	mov.w	r3, #0
 8001246:	f04f 0400 	mov.w	r4, #0
 800124a:	00d4      	lsls	r4, r2, #3
 800124c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001250:	00cb      	lsls	r3, r1, #3
 8001252:	4603      	mov	r3, r0
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	f04f 0400 	mov.w	r4, #0
 8001262:	00d4      	lsls	r4, r2, #3
 8001264:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001268:	00cb      	lsls	r3, r1, #3
 800126a:	4603      	mov	r3, r0
 800126c:	3307      	adds	r3, #7
 800126e:	08db      	lsrs	r3, r3, #3
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	ebad 0d03 	sub.w	sp, sp, r3
 8001276:	466b      	mov	r3, sp
 8001278:	3300      	adds	r3, #0
 800127a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	// Indicate status of I2C.
	int I2CReceiveStatus;

	// Check if new I2C messages is available.
	I2CReceiveStatus = HAL_I2C_Slave_Receive(&hi2c1, (uint8_t *) &messageHeaderFromNano, (uint16_t) sizeof(messageStructHeaderFromNano), (uint32_t) 1);
 800127e:	4639      	mov	r1, r7
 8001280:	2301      	movs	r3, #1
 8001282:	2202      	movs	r2, #2
 8001284:	4835      	ldr	r0, [pc, #212]	; (800135c <I2CCommandHandle+0x1d0>)
 8001286:	f002 fe3a 	bl	8003efe <HAL_I2C_Slave_Receive>
 800128a:	4603      	mov	r3, r0
 800128c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

//	sprintf(nrBuff, "Status Receive: %d \n\r", I2CReceiveStatus);
//	HAL_UART_Transmit(&huart3,(uint8_t *) nrBuff, arrSize, 100);

	// If there is a message, follow the instructions dependent of the type of message.
	if( I2CReceiveStatus == 0 )
 8001290:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d144      	bne.n	8001322 <I2CCommandHandle+0x196>
	{

		switch(messageHeaderFromNano.frameType)
 8001298:	783b      	ldrb	r3, [r7, #0]
 800129a:	3b01      	subs	r3, #1
 800129c:	2b04      	cmp	r3, #4
 800129e:	d834      	bhi.n	800130a <I2CCommandHandle+0x17e>
 80012a0:	a201      	add	r2, pc, #4	; (adr r2, 80012a8 <I2CCommandHandle+0x11c>)
 80012a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a6:	bf00      	nop
 80012a8:	080012bd 	.word	0x080012bd
 80012ac:	080012cd 	.word	0x080012cd
 80012b0:	080012dd 	.word	0x080012dd
 80012b4:	080012ed 	.word	0x080012ed
 80012b8:	080012fd 	.word	0x080012fd
		{

			case 1:
			{
				// Should start the gripper
				HAL_UART_Transmit(&huart3,(uint8_t *) str1, sizeof(str1), 50);
 80012bc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80012c0:	2332      	movs	r3, #50	; 0x32
 80012c2:	2215      	movs	r2, #21
 80012c4:	4826      	ldr	r0, [pc, #152]	; (8001360 <I2CCommandHandle+0x1d4>)
 80012c6:	f007 f9bb 	bl	8008640 <HAL_UART_Transmit>
			}
				break;
 80012ca:	e034      	b.n	8001336 <I2CCommandHandle+0x1aa>

			case 2:
			{
				// Should stop the gripper and set it to the standby mode.
				HAL_UART_Transmit(&huart3,(uint8_t *) str2, sizeof(str2), 100);
 80012cc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80012d0:	2364      	movs	r3, #100	; 0x64
 80012d2:	2214      	movs	r2, #20
 80012d4:	4822      	ldr	r0, [pc, #136]	; (8001360 <I2CCommandHandle+0x1d4>)
 80012d6:	f007 f9b3 	bl	8008640 <HAL_UART_Transmit>
			}
				break;
 80012da:	e02c      	b.n	8001336 <I2CCommandHandle+0x1aa>

			case 3:
			{
				// Should set the gripper to release mode.
				HAL_UART_Transmit(&huart3,(uint8_t *) str3, sizeof(str3), 100);
 80012dc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80012e0:	2364      	movs	r3, #100	; 0x64
 80012e2:	2212      	movs	r2, #18
 80012e4:	481e      	ldr	r0, [pc, #120]	; (8001360 <I2CCommandHandle+0x1d4>)
 80012e6:	f007 f9ab 	bl	8008640 <HAL_UART_Transmit>
			}
				break;
 80012ea:	e024      	b.n	8001336 <I2CCommandHandle+0x1aa>

			case 4:
			{
				// Should pause the gripper in its current stage.
				HAL_UART_Transmit(&huart3,(uint8_t *) str4, sizeof(str4), 100);
 80012ec:	f107 0118 	add.w	r1, r7, #24
 80012f0:	2364      	movs	r3, #100	; 0x64
 80012f2:	2215      	movs	r2, #21
 80012f4:	481a      	ldr	r0, [pc, #104]	; (8001360 <I2CCommandHandle+0x1d4>)
 80012f6:	f007 f9a3 	bl	8008640 <HAL_UART_Transmit>
			}
				break;
 80012fa:	e01c      	b.n	8001336 <I2CCommandHandle+0x1aa>

			case 5:
			{
				// Should handle recommended motor commands from the Nano.
				HAL_UART_Transmit(&huart3,(uint8_t *) str5, sizeof(str5), 100);
 80012fc:	1d39      	adds	r1, r7, #4
 80012fe:	2364      	movs	r3, #100	; 0x64
 8001300:	2213      	movs	r2, #19
 8001302:	4817      	ldr	r0, [pc, #92]	; (8001360 <I2CCommandHandle+0x1d4>)
 8001304:	f007 f99c 	bl	8008640 <HAL_UART_Transmit>
			}
				break;
 8001308:	e015      	b.n	8001336 <I2CCommandHandle+0x1aa>

			default:
			{
				// Should Flush all I2C messages.
				HAL_I2C_Init(&hi2c1);
 800130a:	4814      	ldr	r0, [pc, #80]	; (800135c <I2CCommandHandle+0x1d0>)
 800130c:	f002 fc5e 	bl	8003bcc <HAL_I2C_Init>
				HAL_UART_Transmit(&huart3,(uint8_t *) str0, sizeof(str0), 100);
 8001310:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001314:	2364      	movs	r3, #100	; 0x64
 8001316:	2215      	movs	r2, #21
 8001318:	4811      	ldr	r0, [pc, #68]	; (8001360 <I2CCommandHandle+0x1d4>)
 800131a:	f007 f991 	bl	8008640 <HAL_UART_Transmit>
			}
				break;
 800131e:	bf00      	nop
 8001320:	e009      	b.n	8001336 <I2CCommandHandle+0x1aa>
		}
	}else{
		// Indicate that there was no data in the I2C buffer.
		HAL_UART_Transmit(&huart3,(uint8_t *) strF, sizeof(strF), 10);
 8001322:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001326:	230a      	movs	r3, #10
 8001328:	2217      	movs	r2, #23
 800132a:	480d      	ldr	r0, [pc, #52]	; (8001360 <I2CCommandHandle+0x1d4>)
 800132c:	f007 f988 	bl	8008640 <HAL_UART_Transmit>

		//__I2C1_FORCE_RESET;
		HAL_I2C_Init(&hi2c1);
 8001330:	480a      	ldr	r0, [pc, #40]	; (800135c <I2CCommandHandle+0x1d0>)
 8001332:	f002 fc4b 	bl	8003bcc <HAL_I2C_Init>
 8001336:	46b5      	mov	sp, r6

	}

}
 8001338:	bf00      	nop
 800133a:	37b4      	adds	r7, #180	; 0xb4
 800133c:	46bd      	mov	sp, r7
 800133e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001340:	0800ca30 	.word	0x0800ca30
 8001344:	0800ca48 	.word	0x0800ca48
 8001348:	0800ca60 	.word	0x0800ca60
 800134c:	0800ca78 	.word	0x0800ca78
 8001350:	0800ca8c 	.word	0x0800ca8c
 8001354:	0800caa0 	.word	0x0800caa0
 8001358:	0800cab8 	.word	0x0800cab8
 800135c:	24004a50 	.word	0x24004a50
 8001360:	240049c4 	.word	0x240049c4

08001364 <I2CTransmitHandle>:



uint32_t I2CTransmitHandle( )
{
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b09c      	sub	sp, #112	; 0x70
 8001368:	af00      	add	r7, sp, #0

	// Indicate status of I2C transmition.
	int transStatus;

	// Debug messages.
	const char str1[] = "Transmit Success.\n\r";
 800136a:	4b29      	ldr	r3, [pc, #164]	; (8001410 <I2CTransmitHandle+0xac>)
 800136c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001370:	461d      	mov	r5, r3
 8001372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001376:	682b      	ldr	r3, [r5, #0]
 8001378:	6023      	str	r3, [r4, #0]
	const char str2[] = "Transmit Failure.\n\r";
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <I2CTransmitHandle+0xb0>)
 800137c:	f107 0418 	add.w	r4, r7, #24
 8001380:	461d      	mov	r5, r3
 8001382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001386:	682b      	ldr	r3, [r5, #0]
 8001388:	6023      	str	r3, [r4, #0]
	const char str3[] = "About to transmit.\n\r";
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <I2CTransmitHandle+0xb4>)
 800138c:	463c      	mov	r4, r7
 800138e:	461d      	mov	r5, r3
 8001390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001394:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001398:	6020      	str	r0, [r4, #0]
 800139a:	3404      	adds	r4, #4
 800139c:	7021      	strb	r1, [r4, #0]

	// Is to debug communication with receiver.
	messageFormNucleo.motorStatus[0] = 1;
 800139e:	2301      	movs	r3, #1
 80013a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	messageFormNucleo.motorStatus[1] = 3;
 80013a4:	2303      	movs	r3, #3
 80013a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	messageFormNucleo.motorStatus[2] = 3;
 80013aa:	2303      	movs	r3, #3
 80013ac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	messageFormNucleo.motorStatus[3] = 7;
 80013b0:	2307      	movs	r3, #7
 80013b2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48


	// Indicate that a I2C transimtion is about to happen.
	HAL_UART_Transmit(&huart3,(uint8_t *) str3, sizeof(str1), 150);
 80013b6:	4639      	mov	r1, r7
 80013b8:	2396      	movs	r3, #150	; 0x96
 80013ba:	2214      	movs	r2, #20
 80013bc:	4817      	ldr	r0, [pc, #92]	; (800141c <I2CTransmitHandle+0xb8>)
 80013be:	f007 f93f 	bl	8008640 <HAL_UART_Transmit>

	// Need to reset I2C before transmition, don't know why...

	// Transmit the data from Nucleo.
	transStatus = HAL_I2C_Slave_Transmit(&hi2c1,(uint8_t *) &messageFormNucleo, sizeof(messageStructFromNucleo), 100);
 80013c2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80013c6:	2364      	movs	r3, #100	; 0x64
 80013c8:	222a      	movs	r2, #42	; 0x2a
 80013ca:	4815      	ldr	r0, [pc, #84]	; (8001420 <I2CTransmitHandle+0xbc>)
 80013cc:	f002 fc8e 	bl	8003cec <HAL_I2C_Slave_Transmit>
 80013d0:	4603      	mov	r3, r0
 80013d2:	66fb      	str	r3, [r7, #108]	; 0x6c

	//Print transmit status.
	if(transStatus == 0)
 80013d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10e      	bne.n	80013f8 <I2CTransmitHandle+0x94>
	{
		// Transmit gripper information.
		HAL_UART_Transmit(&huart3,(uint8_t *) str1, sizeof(str1), 50);
 80013da:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80013de:	2332      	movs	r3, #50	; 0x32
 80013e0:	2214      	movs	r2, #20
 80013e2:	480e      	ldr	r0, [pc, #56]	; (800141c <I2CTransmitHandle+0xb8>)
 80013e4:	f007 f92c 	bl	8008640 <HAL_UART_Transmit>

		// Toggle orange led to see transmition.
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80013e8:	2102      	movs	r1, #2
 80013ea:	480e      	ldr	r0, [pc, #56]	; (8001424 <I2CTransmitHandle+0xc0>)
 80013ec:	f002 fbd3 	bl	8003b96 <HAL_GPIO_TogglePin>

		// Return the latest transmit time.
		return osKernelGetTickCount();
 80013f0:	f008 fd8c 	bl	8009f0c <osKernelGetTickCount>
 80013f4:	4603      	mov	r3, r0
 80013f6:	e007      	b.n	8001408 <I2CTransmitHandle+0xa4>

	}else{

		// Transmit debug message.
		HAL_UART_Transmit(&huart3,(uint8_t *) str2, sizeof(str2), 50);
 80013f8:	f107 0118 	add.w	r1, r7, #24
 80013fc:	2332      	movs	r3, #50	; 0x32
 80013fe:	2214      	movs	r2, #20
 8001400:	4806      	ldr	r0, [pc, #24]	; (800141c <I2CTransmitHandle+0xb8>)
 8001402:	f007 f91d 	bl	8008640 <HAL_UART_Transmit>
		// Return error value.
		return 0;
 8001406:	2300      	movs	r3, #0
	}

}
 8001408:	4618      	mov	r0, r3
 800140a:	3770      	adds	r7, #112	; 0x70
 800140c:	46bd      	mov	sp, r7
 800140e:	bdb0      	pop	{r4, r5, r7, pc}
 8001410:	0800cacc 	.word	0x0800cacc
 8001414:	0800cae0 	.word	0x0800cae0
 8001418:	0800caf4 	.word	0x0800caf4
 800141c:	240049c4 	.word	0x240049c4
 8001420:	24004a50 	.word	0x24004a50
 8001424:	58021000 	.word	0x58021000

08001428 <StartControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartControlTask */
void StartControlTask(void *argument)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001430:	2101      	movs	r1, #1
 8001432:	4804      	ldr	r0, [pc, #16]	; (8001444 <StartControlTask+0x1c>)
 8001434:	f002 fbaf 	bl	8003b96 <HAL_GPIO_TogglePin>
	osDelay(2000);
 8001438:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800143c:	f008 fe34 	bl	800a0a8 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001440:	e7f6      	b.n	8001430 <StartControlTask+0x8>
 8001442:	bf00      	nop
 8001444:	58020400 	.word	0x58020400

08001448 <StartCommBoard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommBoard */
void StartCommBoard(void *argument)
{
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b090      	sub	sp, #64	; 0x40
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommBoard */
  /* Infinite loop */

	// Set up time variables.
	const uint32_t deadlineCommunication = 2000;
 8001450:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001454:	63bb      	str	r3, [r7, #56]	; 0x38
	const uint32_t communicationSleepTime = 25;
 8001456:	2319      	movs	r3, #25
 8001458:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t transmitionStatus;
	uint32_t lastTransmitTime = osKernelGetTickCount();
 800145a:	f008 fd57 	bl	8009f0c <osKernelGetTickCount>
 800145e:	63f8      	str	r0, [r7, #60]	; 0x3c

	// Indicate that I2C communication is started.
	const char str0[] = "Starting I2C Communication.\n\r";
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <StartCommBoard+0x78>)
 8001462:	f107 0410 	add.w	r4, r7, #16
 8001466:	461d      	mov	r5, r3
 8001468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800146c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001470:	c407      	stmia	r4!, {r0, r1, r2}
 8001472:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3,(uint8_t *) str0, sizeof(str0), 50);
 8001474:	f107 0110 	add.w	r1, r7, #16
 8001478:	2332      	movs	r3, #50	; 0x32
 800147a:	221e      	movs	r2, #30
 800147c:	4811      	ldr	r0, [pc, #68]	; (80014c4 <StartCommBoard+0x7c>)
 800147e:	f007 f8df 	bl	8008640 <HAL_UART_Transmit>
	  */


	// Check if for new incomming I2C messages.
	// Suspend all other task from interrupt.
	osKernelLock();
 8001482:	f008 fcc7 	bl	8009e14 <osKernelLock>
	// Handle received I2C data.
	I2CCommandHandle();
 8001486:	f7ff fe81 	bl	800118c <I2CCommandHandle>
	osKernelUnlock();
 800148a:	f008 fcfb 	bl	8009e84 <osKernelUnlock>


	// Check if it is time to do a new transmit. Otherwise it check if any new messages is available.
	if( (lastTransmitTime + deadlineCommunication) <= osKernelGetTickCount() )
 800148e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001492:	18d4      	adds	r4, r2, r3
 8001494:	f008 fd3a 	bl	8009f0c <osKernelGetTickCount>
 8001498:	4603      	mov	r3, r0
 800149a:	429c      	cmp	r4, r3
 800149c:	d80b      	bhi.n	80014b6 <StartCommBoard+0x6e>
	{
		// Suspend all other task from interrupt.
		osKernelLock();
 800149e:	f008 fcb9 	bl	8009e14 <osKernelLock>

		// Transmit data from Nucleo.
		transmitionStatus = I2CTransmitHandle();
 80014a2:	f7ff ff5f 	bl	8001364 <I2CTransmitHandle>
 80014a6:	6338      	str	r0, [r7, #48]	; 0x30

		// Check if the data were transmitted.
		if(transmitionStatus != 0)
 80014a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <StartCommBoard+0x6a>
		{
			lastTransmitTime = transmitionStatus;
 80014ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		}

		osKernelUnlock();
 80014b2:	f008 fce7 	bl	8009e84 <osKernelUnlock>

	}


	// Communication task sleep.
	osDelay(communicationSleepTime);
 80014b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014b8:	f008 fdf6 	bl	800a0a8 <osDelay>
	osKernelLock();
 80014bc:	e7e1      	b.n	8001482 <StartCommBoard+0x3a>
 80014be:	bf00      	nop
 80014c0:	0800cb0c 	.word	0x0800cb0c
 80014c4:	240049c4 	.word	0x240049c4

080014c8 <StartSensorRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorRead */
void StartSensorRead(void *argument)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  sensValue sensorPacket;



  startUpMouse();
 80014d0:	f7ff fd24 	bl	8000f1c <startUpMouse>
  /* Infinite loop */
  for(;;)
  {

    // Read the sensor values.
	readMouseSensor( &sensorPacket );
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fdeb 	bl	80010b4 <readMouseSensor>

    //UART Send data to console.
    // plotSensorData( &sensorPacket );

    osDelay(1000);
 80014de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e2:	f008 fde1 	bl	800a0a8 <osDelay>
	readMouseSensor( &sensorPacket );
 80014e6:	e7f5      	b.n	80014d4 <StartSensorRead+0xc>

080014e8 <StartSafety>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSafety */
void StartSafety(void *argument)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80014f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f4:	4803      	ldr	r0, [pc, #12]	; (8001504 <StartSafety+0x1c>)
 80014f6:	f002 fb4e 	bl	8003b96 <HAL_GPIO_TogglePin>
	osDelay(1500);
 80014fa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80014fe:	f008 fdd3 	bl	800a0a8 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001502:	e7f5      	b.n	80014f0 <StartSafety+0x8>
 8001504:	58020400 	.word	0x58020400

08001508 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d101      	bne.n	800151e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800151a:	f000 fb83 	bl	8001c24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40001000 	.word	0x40001000

0800152c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_MspInit+0x30>)
 8001544:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001548:	4a08      	ldr	r2, [pc, #32]	; (800156c <HAL_MspInit+0x30>)
 800154a:	f043 0302 	orr.w	r3, r3, #2
 800154e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_MspInit+0x30>)
 8001554:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	58024400 	.word	0x58024400

08001570 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a36      	ldr	r2, [pc, #216]	; (8001668 <HAL_I2C_MspInit+0xf8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d166      	bne.n	8001660 <HAL_I2C_MspInit+0xf0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	4b36      	ldr	r3, [pc, #216]	; (800166c <HAL_I2C_MspInit+0xfc>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001598:	4a34      	ldr	r2, [pc, #208]	; (800166c <HAL_I2C_MspInit+0xfc>)
 800159a:	f043 0302 	orr.w	r3, r3, #2
 800159e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a2:	4b32      	ldr	r3, [pc, #200]	; (800166c <HAL_I2C_MspInit+0xfc>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b6:	2312      	movs	r3, #18
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c2:	2304      	movs	r3, #4
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4828      	ldr	r0, [pc, #160]	; (8001670 <HAL_I2C_MspInit+0x100>)
 80015ce:	f002 f919 	bl	8003804 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <HAL_I2C_MspInit+0xfc>)
 80015d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015d8:	4a24      	ldr	r2, [pc, #144]	; (800166c <HAL_I2C_MspInit+0xfc>)
 80015da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015e2:	4b22      	ldr	r3, [pc, #136]	; (800166c <HAL_I2C_MspInit+0xfc>)
 80015e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80015f0:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_I2C_MspInit+0x104>)
 80015f2:	4a21      	ldr	r2, [pc, #132]	; (8001678 <HAL_I2C_MspInit+0x108>)
 80015f4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80015f6:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <HAL_I2C_MspInit+0x104>)
 80015f8:	2221      	movs	r2, #33	; 0x21
 80015fa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015fc:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <HAL_I2C_MspInit+0x104>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <HAL_I2C_MspInit+0x104>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001608:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_I2C_MspInit+0x104>)
 800160a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <HAL_I2C_MspInit+0x104>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_I2C_MspInit+0x104>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_I2C_MspInit+0x104>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <HAL_I2C_MspInit+0x104>)
 8001624:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001628:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_I2C_MspInit+0x104>)
 800162c:	2204      	movs	r2, #4
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001630:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_I2C_MspInit+0x104>)
 8001632:	2203      	movs	r2, #3
 8001634:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_INC16;
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_I2C_MspInit+0x104>)
 8001638:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_I2C_MspInit+0x104>)
 8001640:	2200      	movs	r2, #0
 8001642:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001644:	480b      	ldr	r0, [pc, #44]	; (8001674 <HAL_I2C_MspInit+0x104>)
 8001646:	f000 fc1b 	bl	8001e80 <HAL_DMA_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_I2C_MspInit+0xe4>
    {
      Error_Handler();
 8001650:	f7ff ff6c 	bl	800152c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a07      	ldr	r2, [pc, #28]	; (8001674 <HAL_I2C_MspInit+0x104>)
 8001658:	63da      	str	r2, [r3, #60]	; 0x3c
 800165a:	4a06      	ldr	r2, [pc, #24]	; (8001674 <HAL_I2C_MspInit+0x104>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001660:	bf00      	nop
 8001662:	3728      	adds	r7, #40	; 0x28
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40005400 	.word	0x40005400
 800166c:	58024400 	.word	0x58024400
 8001670:	58020400 	.word	0x58020400
 8001674:	24004f38 	.word	0x24004f38
 8001678:	40020010 	.word	0x40020010

0800167c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a1a      	ldr	r2, [pc, #104]	; (8001704 <HAL_SPI_MspInit+0x88>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d12d      	bne.n	80016fa <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <HAL_SPI_MspInit+0x8c>)
 80016a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016a4:	4a18      	ldr	r2, [pc, #96]	; (8001708 <HAL_SPI_MspInit+0x8c>)
 80016a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <HAL_SPI_MspInit+0x8c>)
 80016b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_SPI_MspInit+0x8c>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c2:	4a11      	ldr	r2, [pc, #68]	; (8001708 <HAL_SPI_MspInit+0x8c>)
 80016c4:	f043 0310 	orr.w	r3, r3, #16
 80016c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <HAL_SPI_MspInit+0x8c>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80016da:	2364      	movs	r3, #100	; 0x64
 80016dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80016ea:	2305      	movs	r3, #5
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <HAL_SPI_MspInit+0x90>)
 80016f6:	f002 f885 	bl	8003804 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40013400 	.word	0x40013400
 8001708:	58024400 	.word	0x58024400
 800170c:	58021000 	.word	0x58021000

08001710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08e      	sub	sp, #56	; 0x38
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a4e      	ldr	r2, [pc, #312]	; (8001868 <HAL_UART_MspInit+0x158>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d12e      	bne.n	8001790 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001732:	4b4e      	ldr	r3, [pc, #312]	; (800186c <HAL_UART_MspInit+0x15c>)
 8001734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001738:	4a4c      	ldr	r2, [pc, #304]	; (800186c <HAL_UART_MspInit+0x15c>)
 800173a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800173e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001742:	4b4a      	ldr	r3, [pc, #296]	; (800186c <HAL_UART_MspInit+0x15c>)
 8001744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001748:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800174c:	623b      	str	r3, [r7, #32]
 800174e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001750:	4b46      	ldr	r3, [pc, #280]	; (800186c <HAL_UART_MspInit+0x15c>)
 8001752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001756:	4a45      	ldr	r2, [pc, #276]	; (800186c <HAL_UART_MspInit+0x15c>)
 8001758:	f043 0320 	orr.w	r3, r3, #32
 800175c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001760:	4b42      	ldr	r3, [pc, #264]	; (800186c <HAL_UART_MspInit+0x15c>)
 8001762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001772:	2312      	movs	r3, #18
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800177e:	2307      	movs	r3, #7
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	4839      	ldr	r0, [pc, #228]	; (8001870 <HAL_UART_MspInit+0x160>)
 800178a:	f002 f83b 	bl	8003804 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800178e:	e067      	b.n	8001860 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a37      	ldr	r2, [pc, #220]	; (8001874 <HAL_UART_MspInit+0x164>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d12e      	bne.n	80017f8 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800179a:	4b34      	ldr	r3, [pc, #208]	; (800186c <HAL_UART_MspInit+0x15c>)
 800179c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017a0:	4a32      	ldr	r2, [pc, #200]	; (800186c <HAL_UART_MspInit+0x15c>)
 80017a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017aa:	4b30      	ldr	r3, [pc, #192]	; (800186c <HAL_UART_MspInit+0x15c>)
 80017ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b8:	4b2c      	ldr	r3, [pc, #176]	; (800186c <HAL_UART_MspInit+0x15c>)
 80017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017be:	4a2b      	ldr	r2, [pc, #172]	; (800186c <HAL_UART_MspInit+0x15c>)
 80017c0:	f043 0308 	orr.w	r3, r3, #8
 80017c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017c8:	4b28      	ldr	r3, [pc, #160]	; (800186c <HAL_UART_MspInit+0x15c>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017d6:	2320      	movs	r3, #32
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017da:	2312      	movs	r3, #18
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017e6:	2307      	movs	r3, #7
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ee:	4619      	mov	r1, r3
 80017f0:	4821      	ldr	r0, [pc, #132]	; (8001878 <HAL_UART_MspInit+0x168>)
 80017f2:	f002 f807 	bl	8003804 <HAL_GPIO_Init>
}
 80017f6:	e033      	b.n	8001860 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART3)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a1f      	ldr	r2, [pc, #124]	; (800187c <HAL_UART_MspInit+0x16c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d12e      	bne.n	8001860 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_UART_MspInit+0x15c>)
 8001804:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001808:	4a18      	ldr	r2, [pc, #96]	; (800186c <HAL_UART_MspInit+0x15c>)
 800180a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800180e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_UART_MspInit+0x15c>)
 8001814:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_UART_MspInit+0x15c>)
 8001822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001826:	4a11      	ldr	r2, [pc, #68]	; (800186c <HAL_UART_MspInit+0x15c>)
 8001828:	f043 0308 	orr.w	r3, r3, #8
 800182c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001830:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_UART_MspInit+0x15c>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800183e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001850:	2307      	movs	r3, #7
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001858:	4619      	mov	r1, r3
 800185a:	4807      	ldr	r0, [pc, #28]	; (8001878 <HAL_UART_MspInit+0x168>)
 800185c:	f001 ffd2 	bl	8003804 <HAL_GPIO_Init>
}
 8001860:	bf00      	nop
 8001862:	3738      	adds	r7, #56	; 0x38
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40007800 	.word	0x40007800
 800186c:	58024400 	.word	0x58024400
 8001870:	58021400 	.word	0x58021400
 8001874:	40004400 	.word	0x40004400
 8001878:	58020c00 	.word	0x58020c00
 800187c:	40004800 	.word	0x40004800

08001880 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a21      	ldr	r2, [pc, #132]	; (8001924 <HAL_PCD_MspInit+0xa4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d13b      	bne.n	800191a <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	4b21      	ldr	r3, [pc, #132]	; (8001928 <HAL_PCD_MspInit+0xa8>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a8:	4a1f      	ldr	r2, [pc, #124]	; (8001928 <HAL_PCD_MspInit+0xa8>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b2:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <HAL_PCD_MspInit+0xa8>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80018c0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80018d2:	230a      	movs	r3, #10
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	4813      	ldr	r0, [pc, #76]	; (800192c <HAL_PCD_MspInit+0xac>)
 80018de:	f001 ff91 	bl	8003804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	480d      	ldr	r0, [pc, #52]	; (800192c <HAL_PCD_MspInit+0xac>)
 80018f8:	f001 ff84 	bl	8003804 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_PCD_MspInit+0xa8>)
 80018fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001902:	4a09      	ldr	r2, [pc, #36]	; (8001928 <HAL_PCD_MspInit+0xa8>)
 8001904:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001908:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_PCD_MspInit+0xa8>)
 800190e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001912:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800191a:	bf00      	nop
 800191c:	3728      	adds	r7, #40	; 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40080000 	.word	0x40080000
 8001928:	58024400 	.word	0x58024400
 800192c:	58020000 	.word	0x58020000

08001930 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08e      	sub	sp, #56	; 0x38
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001940:	2200      	movs	r2, #0
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	2036      	movs	r0, #54	; 0x36
 8001946:	f000 fa73 	bl	8001e30 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800194a:	2036      	movs	r0, #54	; 0x36
 800194c:	f000 fa8a 	bl	8001e64 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001950:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_InitTick+0xa4>)
 8001952:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001956:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <HAL_InitTick+0xa4>)
 8001958:	f043 0310 	orr.w	r3, r3, #16
 800195c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001960:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <HAL_InitTick+0xa4>)
 8001962:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800196e:	f107 020c 	add.w	r2, r7, #12
 8001972:	f107 0310 	add.w	r3, r7, #16
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f003 ff2f 	bl	80057dc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800197e:	f003 ff01 	bl	8005784 <HAL_RCC_GetPCLK1Freq>
 8001982:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001986:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <HAL_InitTick+0xa8>)
 8001988:	fba2 2303 	umull	r2, r3, r2, r3
 800198c:	0c9b      	lsrs	r3, r3, #18
 800198e:	3b01      	subs	r3, #1
 8001990:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_InitTick+0xac>)
 8001994:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <HAL_InitTick+0xb0>)
 8001996:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_InitTick+0xac>)
 800199a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800199e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019a0:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <HAL_InitTick+0xac>)
 80019a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <HAL_InitTick+0xac>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_InitTick+0xac>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80019b2:	480a      	ldr	r0, [pc, #40]	; (80019dc <HAL_InitTick+0xac>)
 80019b4:	f006 fb05 	bl	8007fc2 <HAL_TIM_Base_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d104      	bne.n	80019c8 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80019be:	4807      	ldr	r0, [pc, #28]	; (80019dc <HAL_InitTick+0xac>)
 80019c0:	f006 fb60 	bl	8008084 <HAL_TIM_Base_Start_IT>
 80019c4:	4603      	mov	r3, r0
 80019c6:	e000      	b.n	80019ca <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3738      	adds	r7, #56	; 0x38
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	58024400 	.word	0x58024400
 80019d8:	431bde83 	.word	0x431bde83
 80019dc:	24005040 	.word	0x24005040
 80019e0:	40001000 	.word	0x40001000

080019e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <HardFault_Handler+0x4>

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <MemManage_Handler+0x4>

080019fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <BusFault_Handler+0x4>

08001a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <UsageFault_Handler+0x4>

08001a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <DMA1_Stream0_IRQHandler+0x10>)
 8001a1e:	f000 fd8b 	bl	8002538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	24004f38 	.word	0x24004f38

08001a2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <TIM6_DAC_IRQHandler+0x10>)
 8001a32:	f006 fb5d 	bl	80080f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	24005040 	.word	0x24005040

08001a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a44:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <SystemInit+0xec>)
 8001a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4a:	4a38      	ldr	r2, [pc, #224]	; (8001b2c <SystemInit+0xec>)
 8001a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a54:	4b36      	ldr	r3, [pc, #216]	; (8001b30 <SystemInit+0xf0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	2b06      	cmp	r3, #6
 8001a5e:	d807      	bhi.n	8001a70 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a60:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <SystemInit+0xf0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 030f 	bic.w	r3, r3, #15
 8001a68:	4a31      	ldr	r2, [pc, #196]	; (8001b30 <SystemInit+0xf0>)
 8001a6a:	f043 0307 	orr.w	r3, r3, #7
 8001a6e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a70:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <SystemInit+0xf4>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2f      	ldr	r2, [pc, #188]	; (8001b34 <SystemInit+0xf4>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a7c:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <SystemInit+0xf4>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a82:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <SystemInit+0xf4>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	492b      	ldr	r1, [pc, #172]	; (8001b34 <SystemInit+0xf4>)
 8001a88:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <SystemInit+0xf8>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a8e:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <SystemInit+0xf0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	2b07      	cmp	r3, #7
 8001a98:	d907      	bls.n	8001aaa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a9a:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <SystemInit+0xf0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 030f 	bic.w	r3, r3, #15
 8001aa2:	4a23      	ldr	r2, [pc, #140]	; (8001b30 <SystemInit+0xf0>)
 8001aa4:	f043 0307 	orr.w	r3, r3, #7
 8001aa8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001aaa:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <SystemInit+0xf4>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ab0:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <SystemInit+0xf4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <SystemInit+0xf4>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001abc:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <SystemInit+0xf4>)
 8001abe:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <SystemInit+0xfc>)
 8001ac0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <SystemInit+0xf4>)
 8001ac4:	4a1e      	ldr	r2, [pc, #120]	; (8001b40 <SystemInit+0x100>)
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <SystemInit+0xf4>)
 8001aca:	4a1e      	ldr	r2, [pc, #120]	; (8001b44 <SystemInit+0x104>)
 8001acc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <SystemInit+0xf4>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <SystemInit+0xf4>)
 8001ad6:	4a1b      	ldr	r2, [pc, #108]	; (8001b44 <SystemInit+0x104>)
 8001ad8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <SystemInit+0xf4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <SystemInit+0xf4>)
 8001ae2:	4a18      	ldr	r2, [pc, #96]	; (8001b44 <SystemInit+0x104>)
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <SystemInit+0xf4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <SystemInit+0xf4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <SystemInit+0xf4>)
 8001af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <SystemInit+0xf4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <SystemInit+0x108>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <SystemInit+0x10c>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b0a:	d202      	bcs.n	8001b12 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b0c:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <SystemInit+0x110>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <SystemInit+0x114>)
 8001b14:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b18:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <SystemInit+0xec>)
 8001b1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b20:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00
 8001b30:	52002000 	.word	0x52002000
 8001b34:	58024400 	.word	0x58024400
 8001b38:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b3c:	02020200 	.word	0x02020200
 8001b40:	01ff0000 	.word	0x01ff0000
 8001b44:	01010280 	.word	0x01010280
 8001b48:	5c001000 	.word	0x5c001000
 8001b4c:	ffff0000 	.word	0xffff0000
 8001b50:	51008108 	.word	0x51008108
 8001b54:	52004000 	.word	0x52004000

08001b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b90 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b5c:	f7ff ff70 	bl	8001a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b62:	e003      	b.n	8001b6c <LoopCopyDataInit>

08001b64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001b66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b6a:	3104      	adds	r1, #4

08001b6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b6c:	480a      	ldr	r0, [pc, #40]	; (8001b98 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001b70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b74:	d3f6      	bcc.n	8001b64 <CopyDataInit>
  ldr  r2, =_sbss
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001b78:	e002      	b.n	8001b80 <LoopFillZerobss>

08001b7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b7c:	f842 3b04 	str.w	r3, [r2], #4

08001b80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001b82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b84:	d3f9      	bcc.n	8001b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b86:	f00a fed1 	bl	800c92c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8a:	f7fe fd29 	bl	80005e0 <main>
  bx  lr    
 8001b8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b90:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001b94:	0800dc24 	.word	0x0800dc24
  ldr  r0, =_sdata
 8001b98:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001b9c:	24000014 	.word	0x24000014
  ldr  r2, =_sbss
 8001ba0:	24000014 	.word	0x24000014
  ldr  r3, = _ebss
 8001ba4:	240050d0 	.word	0x240050d0

08001ba8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC3_IRQHandler>
	...

08001bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb2:	2003      	movs	r0, #3
 8001bb4:	f000 f931 	bl	8001e1a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bb8:	f003 fc42 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 8001bbc:	4601      	mov	r1, r0
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_Init+0x68>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	0a1b      	lsrs	r3, r3, #8
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	4a13      	ldr	r2, [pc, #76]	; (8001c18 <HAL_Init+0x6c>)
 8001bca:	5cd3      	ldrb	r3, [r2, r3]
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	fa21 f303 	lsr.w	r3, r1, r3
 8001bd4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_Init+0x68>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_Init+0x6c>)
 8001be0:	5cd3      	ldrb	r3, [r2, r3]
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bec:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <HAL_Init+0x70>)
 8001bee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bf0:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <HAL_Init+0x74>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f7ff fe9a 	bl	8001930 <HAL_InitTick>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e002      	b.n	8001c0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c06:	f7ff fc99 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	58024400 	.word	0x58024400
 8001c18:	0800dbe4 	.word	0x0800dbe4
 8001c1c:	24000004 	.word	0x24000004
 8001c20:	24000000 	.word	0x24000000

08001c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x20>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x24>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_IncTick+0x24>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	2400000c 	.word	0x2400000c
 8001c48:	2400508c 	.word	0x2400508c

08001c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_GetTick+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	2400508c 	.word	0x2400508c

08001c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff ffee 	bl	8001c4c <HAL_GetTick>
 8001c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d005      	beq.n	8001c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_Delay+0x40>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c8a:	bf00      	nop
 8001c8c:	f7ff ffde 	bl	8001c4c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d8f7      	bhi.n	8001c8c <HAL_Delay+0x28>
  {
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	2400000c 	.word	0x2400000c

08001ca8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_GetREVID+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0c1b      	lsrs	r3, r3, #16
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	5c001000 	.word	0x5c001000

08001cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <__NVIC_SetPriorityGrouping+0x40>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00
 8001d04:	05fa0000 	.word	0x05fa0000

08001d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <__NVIC_GetPriorityGrouping+0x18>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0307 	and.w	r3, r3, #7
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db0b      	blt.n	8001d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	f003 021f 	and.w	r2, r3, #31
 8001d3c:	4907      	ldr	r1, [pc, #28]	; (8001d5c <__NVIC_EnableIRQ+0x38>)
 8001d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	2001      	movs	r0, #1
 8001d46:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	; (8001dac <__NVIC_SetPriority+0x4c>)
 8001d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4908      	ldr	r1, [pc, #32]	; (8001db0 <__NVIC_SetPriority+0x50>)
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3b04      	subs	r3, #4
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
         );
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ff4c 	bl	8001cc0 <__NVIC_SetPriorityGrouping>
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3e:	f7ff ff63 	bl	8001d08 <__NVIC_GetPriorityGrouping>
 8001e42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	68b9      	ldr	r1, [r7, #8]
 8001e48:	6978      	ldr	r0, [r7, #20]
 8001e4a:	f7ff ffb3 	bl	8001db4 <NVIC_EncodePriority>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff82 	bl	8001d60 <__NVIC_SetPriority>
}
 8001e5c:	bf00      	nop
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff56 	bl	8001d24 <__NVIC_EnableIRQ>
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff fee0 	bl	8001c4c <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e316      	b.n	80024c6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a66      	ldr	r2, [pc, #408]	; (8002038 <HAL_DMA_Init+0x1b8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d04a      	beq.n	8001f38 <HAL_DMA_Init+0xb8>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a65      	ldr	r2, [pc, #404]	; (800203c <HAL_DMA_Init+0x1bc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d045      	beq.n	8001f38 <HAL_DMA_Init+0xb8>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a63      	ldr	r2, [pc, #396]	; (8002040 <HAL_DMA_Init+0x1c0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d040      	beq.n	8001f38 <HAL_DMA_Init+0xb8>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a62      	ldr	r2, [pc, #392]	; (8002044 <HAL_DMA_Init+0x1c4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d03b      	beq.n	8001f38 <HAL_DMA_Init+0xb8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a60      	ldr	r2, [pc, #384]	; (8002048 <HAL_DMA_Init+0x1c8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d036      	beq.n	8001f38 <HAL_DMA_Init+0xb8>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a5f      	ldr	r2, [pc, #380]	; (800204c <HAL_DMA_Init+0x1cc>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d031      	beq.n	8001f38 <HAL_DMA_Init+0xb8>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a5d      	ldr	r2, [pc, #372]	; (8002050 <HAL_DMA_Init+0x1d0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d02c      	beq.n	8001f38 <HAL_DMA_Init+0xb8>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a5c      	ldr	r2, [pc, #368]	; (8002054 <HAL_DMA_Init+0x1d4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d027      	beq.n	8001f38 <HAL_DMA_Init+0xb8>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a5a      	ldr	r2, [pc, #360]	; (8002058 <HAL_DMA_Init+0x1d8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d022      	beq.n	8001f38 <HAL_DMA_Init+0xb8>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a59      	ldr	r2, [pc, #356]	; (800205c <HAL_DMA_Init+0x1dc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d01d      	beq.n	8001f38 <HAL_DMA_Init+0xb8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a57      	ldr	r2, [pc, #348]	; (8002060 <HAL_DMA_Init+0x1e0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d018      	beq.n	8001f38 <HAL_DMA_Init+0xb8>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a56      	ldr	r2, [pc, #344]	; (8002064 <HAL_DMA_Init+0x1e4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d013      	beq.n	8001f38 <HAL_DMA_Init+0xb8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a54      	ldr	r2, [pc, #336]	; (8002068 <HAL_DMA_Init+0x1e8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d00e      	beq.n	8001f38 <HAL_DMA_Init+0xb8>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a53      	ldr	r2, [pc, #332]	; (800206c <HAL_DMA_Init+0x1ec>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d009      	beq.n	8001f38 <HAL_DMA_Init+0xb8>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a51      	ldr	r2, [pc, #324]	; (8002070 <HAL_DMA_Init+0x1f0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d004      	beq.n	8001f38 <HAL_DMA_Init+0xb8>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a50      	ldr	r2, [pc, #320]	; (8002074 <HAL_DMA_Init+0x1f4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d101      	bne.n	8001f3c <HAL_DMA_Init+0xbc>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <HAL_DMA_Init+0xbe>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 813b 	beq.w	80021ba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a37      	ldr	r2, [pc, #220]	; (8002038 <HAL_DMA_Init+0x1b8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d04a      	beq.n	8001ff4 <HAL_DMA_Init+0x174>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a36      	ldr	r2, [pc, #216]	; (800203c <HAL_DMA_Init+0x1bc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d045      	beq.n	8001ff4 <HAL_DMA_Init+0x174>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a34      	ldr	r2, [pc, #208]	; (8002040 <HAL_DMA_Init+0x1c0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d040      	beq.n	8001ff4 <HAL_DMA_Init+0x174>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a33      	ldr	r2, [pc, #204]	; (8002044 <HAL_DMA_Init+0x1c4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d03b      	beq.n	8001ff4 <HAL_DMA_Init+0x174>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a31      	ldr	r2, [pc, #196]	; (8002048 <HAL_DMA_Init+0x1c8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d036      	beq.n	8001ff4 <HAL_DMA_Init+0x174>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a30      	ldr	r2, [pc, #192]	; (800204c <HAL_DMA_Init+0x1cc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d031      	beq.n	8001ff4 <HAL_DMA_Init+0x174>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a2e      	ldr	r2, [pc, #184]	; (8002050 <HAL_DMA_Init+0x1d0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d02c      	beq.n	8001ff4 <HAL_DMA_Init+0x174>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a2d      	ldr	r2, [pc, #180]	; (8002054 <HAL_DMA_Init+0x1d4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d027      	beq.n	8001ff4 <HAL_DMA_Init+0x174>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a2b      	ldr	r2, [pc, #172]	; (8002058 <HAL_DMA_Init+0x1d8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d022      	beq.n	8001ff4 <HAL_DMA_Init+0x174>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a2a      	ldr	r2, [pc, #168]	; (800205c <HAL_DMA_Init+0x1dc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d01d      	beq.n	8001ff4 <HAL_DMA_Init+0x174>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a28      	ldr	r2, [pc, #160]	; (8002060 <HAL_DMA_Init+0x1e0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d018      	beq.n	8001ff4 <HAL_DMA_Init+0x174>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a27      	ldr	r2, [pc, #156]	; (8002064 <HAL_DMA_Init+0x1e4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d013      	beq.n	8001ff4 <HAL_DMA_Init+0x174>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a25      	ldr	r2, [pc, #148]	; (8002068 <HAL_DMA_Init+0x1e8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00e      	beq.n	8001ff4 <HAL_DMA_Init+0x174>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a24      	ldr	r2, [pc, #144]	; (800206c <HAL_DMA_Init+0x1ec>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d009      	beq.n	8001ff4 <HAL_DMA_Init+0x174>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a22      	ldr	r2, [pc, #136]	; (8002070 <HAL_DMA_Init+0x1f0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d004      	beq.n	8001ff4 <HAL_DMA_Init+0x174>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a21      	ldr	r2, [pc, #132]	; (8002074 <HAL_DMA_Init+0x1f4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d108      	bne.n	8002006 <HAL_DMA_Init+0x186>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0201 	bic.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	e007      	b.n	8002016 <HAL_DMA_Init+0x196>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0201 	bic.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002016:	e02f      	b.n	8002078 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002018:	f7ff fe18 	bl	8001c4c <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b05      	cmp	r3, #5
 8002024:	d928      	bls.n	8002078 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2220      	movs	r2, #32
 800202a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2203      	movs	r2, #3
 8002030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e246      	b.n	80024c6 <HAL_DMA_Init+0x646>
 8002038:	40020010 	.word	0x40020010
 800203c:	40020028 	.word	0x40020028
 8002040:	40020040 	.word	0x40020040
 8002044:	40020058 	.word	0x40020058
 8002048:	40020070 	.word	0x40020070
 800204c:	40020088 	.word	0x40020088
 8002050:	400200a0 	.word	0x400200a0
 8002054:	400200b8 	.word	0x400200b8
 8002058:	40020410 	.word	0x40020410
 800205c:	40020428 	.word	0x40020428
 8002060:	40020440 	.word	0x40020440
 8002064:	40020458 	.word	0x40020458
 8002068:	40020470 	.word	0x40020470
 800206c:	40020488 	.word	0x40020488
 8002070:	400204a0 	.word	0x400204a0
 8002074:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1c8      	bne.n	8002018 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4b83      	ldr	r3, [pc, #524]	; (80022a0 <HAL_DMA_Init+0x420>)
 8002092:	4013      	ands	r3, r2
 8002094:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800209e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d107      	bne.n	80020dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4313      	orrs	r3, r2
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4313      	orrs	r3, r2
 80020da:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80020dc:	4b71      	ldr	r3, [pc, #452]	; (80022a4 <HAL_DMA_Init+0x424>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b71      	ldr	r3, [pc, #452]	; (80022a8 <HAL_DMA_Init+0x428>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020e8:	d328      	bcc.n	800213c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b28      	cmp	r3, #40	; 0x28
 80020f0:	d903      	bls.n	80020fa <HAL_DMA_Init+0x27a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b2e      	cmp	r3, #46	; 0x2e
 80020f8:	d917      	bls.n	800212a <HAL_DMA_Init+0x2aa>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b3e      	cmp	r3, #62	; 0x3e
 8002100:	d903      	bls.n	800210a <HAL_DMA_Init+0x28a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b42      	cmp	r3, #66	; 0x42
 8002108:	d90f      	bls.n	800212a <HAL_DMA_Init+0x2aa>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b46      	cmp	r3, #70	; 0x46
 8002110:	d903      	bls.n	800211a <HAL_DMA_Init+0x29a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b48      	cmp	r3, #72	; 0x48
 8002118:	d907      	bls.n	800212a <HAL_DMA_Init+0x2aa>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b4e      	cmp	r3, #78	; 0x4e
 8002120:	d905      	bls.n	800212e <HAL_DMA_Init+0x2ae>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b52      	cmp	r3, #82	; 0x52
 8002128:	d801      	bhi.n	800212e <HAL_DMA_Init+0x2ae>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_DMA_Init+0x2b0>
 800212e:	2300      	movs	r3, #0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800213a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f023 0307 	bic.w	r3, r3, #7
 8002152:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	4313      	orrs	r3, r2
 800215c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	2b04      	cmp	r3, #4
 8002164:	d117      	bne.n	8002196 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00e      	beq.n	8002196 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f001 f9b9 	bl	80034f0 <DMA_CheckFifoParam>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2240      	movs	r2, #64	; 0x40
 8002188:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e197      	b.n	80024c6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f001 f8f4 	bl	800338c <DMA_CalcBaseAndBitshift>
 80021a4:	4603      	mov	r3, r0
 80021a6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	223f      	movs	r2, #63	; 0x3f
 80021b2:	409a      	lsls	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	e0cd      	b.n	8002356 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a3b      	ldr	r2, [pc, #236]	; (80022ac <HAL_DMA_Init+0x42c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d022      	beq.n	800220a <HAL_DMA_Init+0x38a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a39      	ldr	r2, [pc, #228]	; (80022b0 <HAL_DMA_Init+0x430>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01d      	beq.n	800220a <HAL_DMA_Init+0x38a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a38      	ldr	r2, [pc, #224]	; (80022b4 <HAL_DMA_Init+0x434>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d018      	beq.n	800220a <HAL_DMA_Init+0x38a>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a36      	ldr	r2, [pc, #216]	; (80022b8 <HAL_DMA_Init+0x438>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <HAL_DMA_Init+0x38a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a35      	ldr	r2, [pc, #212]	; (80022bc <HAL_DMA_Init+0x43c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00e      	beq.n	800220a <HAL_DMA_Init+0x38a>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a33      	ldr	r2, [pc, #204]	; (80022c0 <HAL_DMA_Init+0x440>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d009      	beq.n	800220a <HAL_DMA_Init+0x38a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a32      	ldr	r2, [pc, #200]	; (80022c4 <HAL_DMA_Init+0x444>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d004      	beq.n	800220a <HAL_DMA_Init+0x38a>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a30      	ldr	r2, [pc, #192]	; (80022c8 <HAL_DMA_Init+0x448>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d101      	bne.n	800220e <HAL_DMA_Init+0x38e>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_DMA_Init+0x390>
 800220e:	2300      	movs	r3, #0
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 8097 	beq.w	8002344 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a24      	ldr	r2, [pc, #144]	; (80022ac <HAL_DMA_Init+0x42c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d021      	beq.n	8002264 <HAL_DMA_Init+0x3e4>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a22      	ldr	r2, [pc, #136]	; (80022b0 <HAL_DMA_Init+0x430>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01c      	beq.n	8002264 <HAL_DMA_Init+0x3e4>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a21      	ldr	r2, [pc, #132]	; (80022b4 <HAL_DMA_Init+0x434>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d017      	beq.n	8002264 <HAL_DMA_Init+0x3e4>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <HAL_DMA_Init+0x438>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d012      	beq.n	8002264 <HAL_DMA_Init+0x3e4>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1e      	ldr	r2, [pc, #120]	; (80022bc <HAL_DMA_Init+0x43c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00d      	beq.n	8002264 <HAL_DMA_Init+0x3e4>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1c      	ldr	r2, [pc, #112]	; (80022c0 <HAL_DMA_Init+0x440>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d008      	beq.n	8002264 <HAL_DMA_Init+0x3e4>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1b      	ldr	r2, [pc, #108]	; (80022c4 <HAL_DMA_Init+0x444>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d003      	beq.n	8002264 <HAL_DMA_Init+0x3e4>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <HAL_DMA_Init+0x448>)
 8002262:	4293      	cmp	r3, r2
 8002264:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2202      	movs	r2, #2
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_DMA_Init+0x44c>)
 8002282:	4013      	ands	r3, r2
 8002284:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b40      	cmp	r3, #64	; 0x40
 800228c:	d020      	beq.n	80022d0 <HAL_DMA_Init+0x450>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b80      	cmp	r3, #128	; 0x80
 8002294:	d102      	bne.n	800229c <HAL_DMA_Init+0x41c>
 8002296:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800229a:	e01a      	b.n	80022d2 <HAL_DMA_Init+0x452>
 800229c:	2300      	movs	r3, #0
 800229e:	e018      	b.n	80022d2 <HAL_DMA_Init+0x452>
 80022a0:	fe10803f 	.word	0xfe10803f
 80022a4:	5c001000 	.word	0x5c001000
 80022a8:	ffff0000 	.word	0xffff0000
 80022ac:	58025408 	.word	0x58025408
 80022b0:	5802541c 	.word	0x5802541c
 80022b4:	58025430 	.word	0x58025430
 80022b8:	58025444 	.word	0x58025444
 80022bc:	58025458 	.word	0x58025458
 80022c0:	5802546c 	.word	0x5802546c
 80022c4:	58025480 	.word	0x58025480
 80022c8:	58025494 	.word	0x58025494
 80022cc:	fffe000f 	.word	0xfffe000f
 80022d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68d2      	ldr	r2, [r2, #12]
 80022d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002300:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4313      	orrs	r3, r2
 8002306:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	4b6e      	ldr	r3, [pc, #440]	; (80024d0 <HAL_DMA_Init+0x650>)
 8002318:	4413      	add	r3, r2
 800231a:	4a6e      	ldr	r2, [pc, #440]	; (80024d4 <HAL_DMA_Init+0x654>)
 800231c:	fba2 2303 	umull	r2, r3, r2, r3
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	009a      	lsls	r2, r3, #2
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f001 f82f 	bl	800338c <DMA_CalcBaseAndBitshift>
 800232e:	4603      	mov	r3, r0
 8002330:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	2201      	movs	r2, #1
 800233c:	409a      	lsls	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	e008      	b.n	8002356 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2240      	movs	r2, #64	; 0x40
 8002348:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2203      	movs	r2, #3
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0b7      	b.n	80024c6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a5f      	ldr	r2, [pc, #380]	; (80024d8 <HAL_DMA_Init+0x658>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d072      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a5d      	ldr	r2, [pc, #372]	; (80024dc <HAL_DMA_Init+0x65c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d06d      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a5c      	ldr	r2, [pc, #368]	; (80024e0 <HAL_DMA_Init+0x660>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d068      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a5a      	ldr	r2, [pc, #360]	; (80024e4 <HAL_DMA_Init+0x664>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d063      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a59      	ldr	r2, [pc, #356]	; (80024e8 <HAL_DMA_Init+0x668>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d05e      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a57      	ldr	r2, [pc, #348]	; (80024ec <HAL_DMA_Init+0x66c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d059      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a56      	ldr	r2, [pc, #344]	; (80024f0 <HAL_DMA_Init+0x670>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d054      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a54      	ldr	r2, [pc, #336]	; (80024f4 <HAL_DMA_Init+0x674>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d04f      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a53      	ldr	r2, [pc, #332]	; (80024f8 <HAL_DMA_Init+0x678>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d04a      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a51      	ldr	r2, [pc, #324]	; (80024fc <HAL_DMA_Init+0x67c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d045      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a50      	ldr	r2, [pc, #320]	; (8002500 <HAL_DMA_Init+0x680>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d040      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a4e      	ldr	r2, [pc, #312]	; (8002504 <HAL_DMA_Init+0x684>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d03b      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a4d      	ldr	r2, [pc, #308]	; (8002508 <HAL_DMA_Init+0x688>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d036      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a4b      	ldr	r2, [pc, #300]	; (800250c <HAL_DMA_Init+0x68c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d031      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a4a      	ldr	r2, [pc, #296]	; (8002510 <HAL_DMA_Init+0x690>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d02c      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a48      	ldr	r2, [pc, #288]	; (8002514 <HAL_DMA_Init+0x694>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d027      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a47      	ldr	r2, [pc, #284]	; (8002518 <HAL_DMA_Init+0x698>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d022      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a45      	ldr	r2, [pc, #276]	; (800251c <HAL_DMA_Init+0x69c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d01d      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a44      	ldr	r2, [pc, #272]	; (8002520 <HAL_DMA_Init+0x6a0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d018      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a42      	ldr	r2, [pc, #264]	; (8002524 <HAL_DMA_Init+0x6a4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d013      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a41      	ldr	r2, [pc, #260]	; (8002528 <HAL_DMA_Init+0x6a8>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d00e      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a3f      	ldr	r2, [pc, #252]	; (800252c <HAL_DMA_Init+0x6ac>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d009      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a3e      	ldr	r2, [pc, #248]	; (8002530 <HAL_DMA_Init+0x6b0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d004      	beq.n	8002446 <HAL_DMA_Init+0x5c6>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a3c      	ldr	r2, [pc, #240]	; (8002534 <HAL_DMA_Init+0x6b4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_DMA_Init+0x5ca>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_DMA_Init+0x5cc>
 800244a:	2300      	movs	r3, #0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d032      	beq.n	80024b6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f001 f8c9 	bl	80035e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b80      	cmp	r3, #128	; 0x80
 800245c:	d102      	bne.n	8002464 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002478:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d010      	beq.n	80024a4 <HAL_DMA_Init+0x624>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b08      	cmp	r3, #8
 8002488:	d80c      	bhi.n	80024a4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f001 f946 	bl	800371c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	e008      	b.n	80024b6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	a7fdabf8 	.word	0xa7fdabf8
 80024d4:	cccccccd 	.word	0xcccccccd
 80024d8:	40020010 	.word	0x40020010
 80024dc:	40020028 	.word	0x40020028
 80024e0:	40020040 	.word	0x40020040
 80024e4:	40020058 	.word	0x40020058
 80024e8:	40020070 	.word	0x40020070
 80024ec:	40020088 	.word	0x40020088
 80024f0:	400200a0 	.word	0x400200a0
 80024f4:	400200b8 	.word	0x400200b8
 80024f8:	40020410 	.word	0x40020410
 80024fc:	40020428 	.word	0x40020428
 8002500:	40020440 	.word	0x40020440
 8002504:	40020458 	.word	0x40020458
 8002508:	40020470 	.word	0x40020470
 800250c:	40020488 	.word	0x40020488
 8002510:	400204a0 	.word	0x400204a0
 8002514:	400204b8 	.word	0x400204b8
 8002518:	58025408 	.word	0x58025408
 800251c:	5802541c 	.word	0x5802541c
 8002520:	58025430 	.word	0x58025430
 8002524:	58025444 	.word	0x58025444
 8002528:	58025458 	.word	0x58025458
 800252c:	5802546c 	.word	0x5802546c
 8002530:	58025480 	.word	0x58025480
 8002534:	58025494 	.word	0x58025494

08002538 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002544:	4b67      	ldr	r3, [pc, #412]	; (80026e4 <HAL_DMA_IRQHandler+0x1ac>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a67      	ldr	r2, [pc, #412]	; (80026e8 <HAL_DMA_IRQHandler+0x1b0>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	0a9b      	lsrs	r3, r3, #10
 8002550:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002556:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a5f      	ldr	r2, [pc, #380]	; (80026ec <HAL_DMA_IRQHandler+0x1b4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d04a      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a5d      	ldr	r2, [pc, #372]	; (80026f0 <HAL_DMA_IRQHandler+0x1b8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d045      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a5c      	ldr	r2, [pc, #368]	; (80026f4 <HAL_DMA_IRQHandler+0x1bc>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d040      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a5a      	ldr	r2, [pc, #360]	; (80026f8 <HAL_DMA_IRQHandler+0x1c0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d03b      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a59      	ldr	r2, [pc, #356]	; (80026fc <HAL_DMA_IRQHandler+0x1c4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d036      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a57      	ldr	r2, [pc, #348]	; (8002700 <HAL_DMA_IRQHandler+0x1c8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d031      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a56      	ldr	r2, [pc, #344]	; (8002704 <HAL_DMA_IRQHandler+0x1cc>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d02c      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a54      	ldr	r2, [pc, #336]	; (8002708 <HAL_DMA_IRQHandler+0x1d0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d027      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a53      	ldr	r2, [pc, #332]	; (800270c <HAL_DMA_IRQHandler+0x1d4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d022      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a51      	ldr	r2, [pc, #324]	; (8002710 <HAL_DMA_IRQHandler+0x1d8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01d      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a50      	ldr	r2, [pc, #320]	; (8002714 <HAL_DMA_IRQHandler+0x1dc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d018      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a4e      	ldr	r2, [pc, #312]	; (8002718 <HAL_DMA_IRQHandler+0x1e0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a4d      	ldr	r2, [pc, #308]	; (800271c <HAL_DMA_IRQHandler+0x1e4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00e      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a4b      	ldr	r2, [pc, #300]	; (8002720 <HAL_DMA_IRQHandler+0x1e8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d009      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a4a      	ldr	r2, [pc, #296]	; (8002724 <HAL_DMA_IRQHandler+0x1ec>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d004      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a48      	ldr	r2, [pc, #288]	; (8002728 <HAL_DMA_IRQHandler+0x1f0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d101      	bne.n	800260e <HAL_DMA_IRQHandler+0xd6>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_DMA_IRQHandler+0xd8>
 800260e:	2300      	movs	r3, #0
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 842b 	beq.w	8002e6c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	f003 031f 	and.w	r3, r3, #31
 800261e:	2208      	movs	r2, #8
 8002620:	409a      	lsls	r2, r3
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80a2 	beq.w	8002770 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a2e      	ldr	r2, [pc, #184]	; (80026ec <HAL_DMA_IRQHandler+0x1b4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d04a      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a2d      	ldr	r2, [pc, #180]	; (80026f0 <HAL_DMA_IRQHandler+0x1b8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d045      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a2b      	ldr	r2, [pc, #172]	; (80026f4 <HAL_DMA_IRQHandler+0x1bc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d040      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a2a      	ldr	r2, [pc, #168]	; (80026f8 <HAL_DMA_IRQHandler+0x1c0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d03b      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a28      	ldr	r2, [pc, #160]	; (80026fc <HAL_DMA_IRQHandler+0x1c4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d036      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a27      	ldr	r2, [pc, #156]	; (8002700 <HAL_DMA_IRQHandler+0x1c8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d031      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a25      	ldr	r2, [pc, #148]	; (8002704 <HAL_DMA_IRQHandler+0x1cc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d02c      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a24      	ldr	r2, [pc, #144]	; (8002708 <HAL_DMA_IRQHandler+0x1d0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d027      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a22      	ldr	r2, [pc, #136]	; (800270c <HAL_DMA_IRQHandler+0x1d4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d022      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a21      	ldr	r2, [pc, #132]	; (8002710 <HAL_DMA_IRQHandler+0x1d8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d01d      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <HAL_DMA_IRQHandler+0x1dc>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d018      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <HAL_DMA_IRQHandler+0x1e0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d013      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1c      	ldr	r2, [pc, #112]	; (800271c <HAL_DMA_IRQHandler+0x1e4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00e      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a1b      	ldr	r2, [pc, #108]	; (8002720 <HAL_DMA_IRQHandler+0x1e8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d009      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a19      	ldr	r2, [pc, #100]	; (8002724 <HAL_DMA_IRQHandler+0x1ec>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d004      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a18      	ldr	r2, [pc, #96]	; (8002728 <HAL_DMA_IRQHandler+0x1f0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d12f      	bne.n	800272c <HAL_DMA_IRQHandler+0x1f4>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf14      	ite	ne
 80026da:	2301      	movne	r3, #1
 80026dc:	2300      	moveq	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	e02e      	b.n	8002740 <HAL_DMA_IRQHandler+0x208>
 80026e2:	bf00      	nop
 80026e4:	24000000 	.word	0x24000000
 80026e8:	1b4e81b5 	.word	0x1b4e81b5
 80026ec:	40020010 	.word	0x40020010
 80026f0:	40020028 	.word	0x40020028
 80026f4:	40020040 	.word	0x40020040
 80026f8:	40020058 	.word	0x40020058
 80026fc:	40020070 	.word	0x40020070
 8002700:	40020088 	.word	0x40020088
 8002704:	400200a0 	.word	0x400200a0
 8002708:	400200b8 	.word	0x400200b8
 800270c:	40020410 	.word	0x40020410
 8002710:	40020428 	.word	0x40020428
 8002714:	40020440 	.word	0x40020440
 8002718:	40020458 	.word	0x40020458
 800271c:	40020470 	.word	0x40020470
 8002720:	40020488 	.word	0x40020488
 8002724:	400204a0 	.word	0x400204a0
 8002728:	400204b8 	.word	0x400204b8
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	bf14      	ite	ne
 800273a:	2301      	movne	r3, #1
 800273c:	2300      	moveq	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d015      	beq.n	8002770 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0204 	bic.w	r2, r2, #4
 8002752:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	2208      	movs	r2, #8
 800275e:	409a      	lsls	r2, r3
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002768:	f043 0201 	orr.w	r2, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	fa22 f303 	lsr.w	r3, r2, r3
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d06e      	beq.n	8002864 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a69      	ldr	r2, [pc, #420]	; (8002930 <HAL_DMA_IRQHandler+0x3f8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d04a      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a67      	ldr	r2, [pc, #412]	; (8002934 <HAL_DMA_IRQHandler+0x3fc>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d045      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a66      	ldr	r2, [pc, #408]	; (8002938 <HAL_DMA_IRQHandler+0x400>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d040      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a64      	ldr	r2, [pc, #400]	; (800293c <HAL_DMA_IRQHandler+0x404>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d03b      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a63      	ldr	r2, [pc, #396]	; (8002940 <HAL_DMA_IRQHandler+0x408>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d036      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a61      	ldr	r2, [pc, #388]	; (8002944 <HAL_DMA_IRQHandler+0x40c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d031      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a60      	ldr	r2, [pc, #384]	; (8002948 <HAL_DMA_IRQHandler+0x410>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d02c      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a5e      	ldr	r2, [pc, #376]	; (800294c <HAL_DMA_IRQHandler+0x414>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d027      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a5d      	ldr	r2, [pc, #372]	; (8002950 <HAL_DMA_IRQHandler+0x418>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d022      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a5b      	ldr	r2, [pc, #364]	; (8002954 <HAL_DMA_IRQHandler+0x41c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01d      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a5a      	ldr	r2, [pc, #360]	; (8002958 <HAL_DMA_IRQHandler+0x420>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d018      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a58      	ldr	r2, [pc, #352]	; (800295c <HAL_DMA_IRQHandler+0x424>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a57      	ldr	r2, [pc, #348]	; (8002960 <HAL_DMA_IRQHandler+0x428>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a55      	ldr	r2, [pc, #340]	; (8002964 <HAL_DMA_IRQHandler+0x42c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a54      	ldr	r2, [pc, #336]	; (8002968 <HAL_DMA_IRQHandler+0x430>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a52      	ldr	r2, [pc, #328]	; (800296c <HAL_DMA_IRQHandler+0x434>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d10a      	bne.n	800283c <HAL_DMA_IRQHandler+0x304>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf14      	ite	ne
 8002834:	2301      	movne	r3, #1
 8002836:	2300      	moveq	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	e003      	b.n	8002844 <HAL_DMA_IRQHandler+0x30c>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2300      	movs	r3, #0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00d      	beq.n	8002864 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	2201      	movs	r2, #1
 8002852:	409a      	lsls	r2, r3
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	f043 0202 	orr.w	r2, r3, #2
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	2204      	movs	r2, #4
 800286e:	409a      	lsls	r2, r3
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 808f 	beq.w	8002998 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a2c      	ldr	r2, [pc, #176]	; (8002930 <HAL_DMA_IRQHandler+0x3f8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d04a      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a2a      	ldr	r2, [pc, #168]	; (8002934 <HAL_DMA_IRQHandler+0x3fc>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d045      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a29      	ldr	r2, [pc, #164]	; (8002938 <HAL_DMA_IRQHandler+0x400>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d040      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a27      	ldr	r2, [pc, #156]	; (800293c <HAL_DMA_IRQHandler+0x404>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d03b      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a26      	ldr	r2, [pc, #152]	; (8002940 <HAL_DMA_IRQHandler+0x408>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d036      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a24      	ldr	r2, [pc, #144]	; (8002944 <HAL_DMA_IRQHandler+0x40c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d031      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a23      	ldr	r2, [pc, #140]	; (8002948 <HAL_DMA_IRQHandler+0x410>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d02c      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a21      	ldr	r2, [pc, #132]	; (800294c <HAL_DMA_IRQHandler+0x414>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d027      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a20      	ldr	r2, [pc, #128]	; (8002950 <HAL_DMA_IRQHandler+0x418>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d022      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1e      	ldr	r2, [pc, #120]	; (8002954 <HAL_DMA_IRQHandler+0x41c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01d      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <HAL_DMA_IRQHandler+0x420>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d018      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1b      	ldr	r2, [pc, #108]	; (800295c <HAL_DMA_IRQHandler+0x424>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d013      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1a      	ldr	r2, [pc, #104]	; (8002960 <HAL_DMA_IRQHandler+0x428>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00e      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a18      	ldr	r2, [pc, #96]	; (8002964 <HAL_DMA_IRQHandler+0x42c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d009      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a17      	ldr	r2, [pc, #92]	; (8002968 <HAL_DMA_IRQHandler+0x430>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d004      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a15      	ldr	r2, [pc, #84]	; (800296c <HAL_DMA_IRQHandler+0x434>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d12a      	bne.n	8002970 <HAL_DMA_IRQHandler+0x438>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf14      	ite	ne
 8002928:	2301      	movne	r3, #1
 800292a:	2300      	moveq	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	e023      	b.n	8002978 <HAL_DMA_IRQHandler+0x440>
 8002930:	40020010 	.word	0x40020010
 8002934:	40020028 	.word	0x40020028
 8002938:	40020040 	.word	0x40020040
 800293c:	40020058 	.word	0x40020058
 8002940:	40020070 	.word	0x40020070
 8002944:	40020088 	.word	0x40020088
 8002948:	400200a0 	.word	0x400200a0
 800294c:	400200b8 	.word	0x400200b8
 8002950:	40020410 	.word	0x40020410
 8002954:	40020428 	.word	0x40020428
 8002958:	40020440 	.word	0x40020440
 800295c:	40020458 	.word	0x40020458
 8002960:	40020470 	.word	0x40020470
 8002964:	40020488 	.word	0x40020488
 8002968:	400204a0 	.word	0x400204a0
 800296c:	400204b8 	.word	0x400204b8
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2300      	movs	r3, #0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00d      	beq.n	8002998 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	2204      	movs	r2, #4
 8002986:	409a      	lsls	r2, r3
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	f043 0204 	orr.w	r2, r3, #4
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	2210      	movs	r2, #16
 80029a2:	409a      	lsls	r2, r3
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a6 	beq.w	8002afa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a85      	ldr	r2, [pc, #532]	; (8002bc8 <HAL_DMA_IRQHandler+0x690>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d04a      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a83      	ldr	r2, [pc, #524]	; (8002bcc <HAL_DMA_IRQHandler+0x694>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d045      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a82      	ldr	r2, [pc, #520]	; (8002bd0 <HAL_DMA_IRQHandler+0x698>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d040      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a80      	ldr	r2, [pc, #512]	; (8002bd4 <HAL_DMA_IRQHandler+0x69c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d03b      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7f      	ldr	r2, [pc, #508]	; (8002bd8 <HAL_DMA_IRQHandler+0x6a0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d036      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a7d      	ldr	r2, [pc, #500]	; (8002bdc <HAL_DMA_IRQHandler+0x6a4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d031      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a7c      	ldr	r2, [pc, #496]	; (8002be0 <HAL_DMA_IRQHandler+0x6a8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d02c      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a7a      	ldr	r2, [pc, #488]	; (8002be4 <HAL_DMA_IRQHandler+0x6ac>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d027      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a79      	ldr	r2, [pc, #484]	; (8002be8 <HAL_DMA_IRQHandler+0x6b0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d022      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a77      	ldr	r2, [pc, #476]	; (8002bec <HAL_DMA_IRQHandler+0x6b4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d01d      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a76      	ldr	r2, [pc, #472]	; (8002bf0 <HAL_DMA_IRQHandler+0x6b8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d018      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a74      	ldr	r2, [pc, #464]	; (8002bf4 <HAL_DMA_IRQHandler+0x6bc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a73      	ldr	r2, [pc, #460]	; (8002bf8 <HAL_DMA_IRQHandler+0x6c0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d00e      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a71      	ldr	r2, [pc, #452]	; (8002bfc <HAL_DMA_IRQHandler+0x6c4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d009      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a70      	ldr	r2, [pc, #448]	; (8002c00 <HAL_DMA_IRQHandler+0x6c8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d004      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a6e      	ldr	r2, [pc, #440]	; (8002c04 <HAL_DMA_IRQHandler+0x6cc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d10a      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x52c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf14      	ite	ne
 8002a5c:	2301      	movne	r3, #1
 8002a5e:	2300      	moveq	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	e009      	b.n	8002a78 <HAL_DMA_IRQHandler+0x540>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	bf14      	ite	ne
 8002a72:	2301      	movne	r3, #1
 8002a74:	2300      	moveq	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d03e      	beq.n	8002afa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	2210      	movs	r2, #16
 8002a86:	409a      	lsls	r2, r3
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d018      	beq.n	8002acc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d108      	bne.n	8002aba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d024      	beq.n	8002afa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	4798      	blx	r3
 8002ab8:	e01f      	b.n	8002afa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d01b      	beq.n	8002afa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	4798      	blx	r3
 8002aca:	e016      	b.n	8002afa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d107      	bne.n	8002aea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0208 	bic.w	r2, r2, #8
 8002ae8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2220      	movs	r2, #32
 8002b04:	409a      	lsls	r2, r3
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8110 	beq.w	8002d30 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a2c      	ldr	r2, [pc, #176]	; (8002bc8 <HAL_DMA_IRQHandler+0x690>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d04a      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a2b      	ldr	r2, [pc, #172]	; (8002bcc <HAL_DMA_IRQHandler+0x694>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d045      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a29      	ldr	r2, [pc, #164]	; (8002bd0 <HAL_DMA_IRQHandler+0x698>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d040      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a28      	ldr	r2, [pc, #160]	; (8002bd4 <HAL_DMA_IRQHandler+0x69c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d03b      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a26      	ldr	r2, [pc, #152]	; (8002bd8 <HAL_DMA_IRQHandler+0x6a0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d036      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a25      	ldr	r2, [pc, #148]	; (8002bdc <HAL_DMA_IRQHandler+0x6a4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d031      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a23      	ldr	r2, [pc, #140]	; (8002be0 <HAL_DMA_IRQHandler+0x6a8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d02c      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a22      	ldr	r2, [pc, #136]	; (8002be4 <HAL_DMA_IRQHandler+0x6ac>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d027      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a20      	ldr	r2, [pc, #128]	; (8002be8 <HAL_DMA_IRQHandler+0x6b0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d022      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <HAL_DMA_IRQHandler+0x6b4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d01d      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a1d      	ldr	r2, [pc, #116]	; (8002bf0 <HAL_DMA_IRQHandler+0x6b8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d018      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1c      	ldr	r2, [pc, #112]	; (8002bf4 <HAL_DMA_IRQHandler+0x6bc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d013      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1a      	ldr	r2, [pc, #104]	; (8002bf8 <HAL_DMA_IRQHandler+0x6c0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00e      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a19      	ldr	r2, [pc, #100]	; (8002bfc <HAL_DMA_IRQHandler+0x6c4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <HAL_DMA_IRQHandler+0x6c8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a16      	ldr	r2, [pc, #88]	; (8002c04 <HAL_DMA_IRQHandler+0x6cc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d12b      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x6d0>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bf14      	ite	ne
 8002bbe:	2301      	movne	r3, #1
 8002bc0:	2300      	moveq	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	e02a      	b.n	8002c1c <HAL_DMA_IRQHandler+0x6e4>
 8002bc6:	bf00      	nop
 8002bc8:	40020010 	.word	0x40020010
 8002bcc:	40020028 	.word	0x40020028
 8002bd0:	40020040 	.word	0x40020040
 8002bd4:	40020058 	.word	0x40020058
 8002bd8:	40020070 	.word	0x40020070
 8002bdc:	40020088 	.word	0x40020088
 8002be0:	400200a0 	.word	0x400200a0
 8002be4:	400200b8 	.word	0x400200b8
 8002be8:	40020410 	.word	0x40020410
 8002bec:	40020428 	.word	0x40020428
 8002bf0:	40020440 	.word	0x40020440
 8002bf4:	40020458 	.word	0x40020458
 8002bf8:	40020470 	.word	0x40020470
 8002bfc:	40020488 	.word	0x40020488
 8002c00:	400204a0 	.word	0x400204a0
 8002c04:	400204b8 	.word	0x400204b8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf14      	ite	ne
 8002c16:	2301      	movne	r3, #1
 8002c18:	2300      	moveq	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8087 	beq.w	8002d30 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d139      	bne.n	8002cb2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0216 	bic.w	r2, r2, #22
 8002c4c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c5c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d103      	bne.n	8002c6e <HAL_DMA_IRQHandler+0x736>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d007      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0208 	bic.w	r2, r2, #8
 8002c7c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	223f      	movs	r2, #63	; 0x3f
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 834a 	beq.w	800333c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
          }
          return;
 8002cb0:	e344      	b.n	800333c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d018      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d108      	bne.n	8002ce0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d02c      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	4798      	blx	r3
 8002cde:	e027      	b.n	8002d30 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d023      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	4798      	blx	r3
 8002cf0:	e01e      	b.n	8002d30 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10f      	bne.n	8002d20 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0210 	bic.w	r2, r2, #16
 8002d0e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8306 	beq.w	8003346 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8088 	beq.w	8002e58 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a7a      	ldr	r2, [pc, #488]	; (8002f40 <HAL_DMA_IRQHandler+0xa08>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d04a      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a79      	ldr	r2, [pc, #484]	; (8002f44 <HAL_DMA_IRQHandler+0xa0c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d045      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a77      	ldr	r2, [pc, #476]	; (8002f48 <HAL_DMA_IRQHandler+0xa10>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d040      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a76      	ldr	r2, [pc, #472]	; (8002f4c <HAL_DMA_IRQHandler+0xa14>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d03b      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a74      	ldr	r2, [pc, #464]	; (8002f50 <HAL_DMA_IRQHandler+0xa18>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d036      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a73      	ldr	r2, [pc, #460]	; (8002f54 <HAL_DMA_IRQHandler+0xa1c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d031      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a71      	ldr	r2, [pc, #452]	; (8002f58 <HAL_DMA_IRQHandler+0xa20>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d02c      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a70      	ldr	r2, [pc, #448]	; (8002f5c <HAL_DMA_IRQHandler+0xa24>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d027      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a6e      	ldr	r2, [pc, #440]	; (8002f60 <HAL_DMA_IRQHandler+0xa28>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d022      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6d      	ldr	r2, [pc, #436]	; (8002f64 <HAL_DMA_IRQHandler+0xa2c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d01d      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a6b      	ldr	r2, [pc, #428]	; (8002f68 <HAL_DMA_IRQHandler+0xa30>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d018      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a6a      	ldr	r2, [pc, #424]	; (8002f6c <HAL_DMA_IRQHandler+0xa34>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d013      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a68      	ldr	r2, [pc, #416]	; (8002f70 <HAL_DMA_IRQHandler+0xa38>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00e      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a67      	ldr	r2, [pc, #412]	; (8002f74 <HAL_DMA_IRQHandler+0xa3c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d009      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a65      	ldr	r2, [pc, #404]	; (8002f78 <HAL_DMA_IRQHandler+0xa40>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a64      	ldr	r2, [pc, #400]	; (8002f7c <HAL_DMA_IRQHandler+0xa44>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d108      	bne.n	8002e02 <HAL_DMA_IRQHandler+0x8ca>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0201 	bic.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	e007      	b.n	8002e12 <HAL_DMA_IRQHandler+0x8da>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3301      	adds	r3, #1
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d307      	bcc.n	8002e2e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f2      	bne.n	8002e12 <HAL_DMA_IRQHandler+0x8da>
 8002e2c:	e000      	b.n	8002e30 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002e2e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d004      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2203      	movs	r2, #3
 8002e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002e4e:	e003      	b.n	8002e58 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8272 	beq.w	8003346 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	4798      	blx	r3
 8002e6a:	e26c      	b.n	8003346 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a43      	ldr	r2, [pc, #268]	; (8002f80 <HAL_DMA_IRQHandler+0xa48>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d022      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x984>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a42      	ldr	r2, [pc, #264]	; (8002f84 <HAL_DMA_IRQHandler+0xa4c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d01d      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x984>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a40      	ldr	r2, [pc, #256]	; (8002f88 <HAL_DMA_IRQHandler+0xa50>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d018      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x984>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a3f      	ldr	r2, [pc, #252]	; (8002f8c <HAL_DMA_IRQHandler+0xa54>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d013      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x984>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a3d      	ldr	r2, [pc, #244]	; (8002f90 <HAL_DMA_IRQHandler+0xa58>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00e      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x984>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a3c      	ldr	r2, [pc, #240]	; (8002f94 <HAL_DMA_IRQHandler+0xa5c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d009      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x984>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a3a      	ldr	r2, [pc, #232]	; (8002f98 <HAL_DMA_IRQHandler+0xa60>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d004      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x984>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a39      	ldr	r2, [pc, #228]	; (8002f9c <HAL_DMA_IRQHandler+0xa64>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d101      	bne.n	8002ec0 <HAL_DMA_IRQHandler+0x988>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <HAL_DMA_IRQHandler+0x98a>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 823f 	beq.w	8003346 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	2204      	movs	r2, #4
 8002eda:	409a      	lsls	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80cd 	beq.w	8003080 <HAL_DMA_IRQHandler+0xb48>
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80c7 	beq.w	8003080 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	2204      	movs	r2, #4
 8002efc:	409a      	lsls	r2, r3
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d049      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8210 	beq.w	8003340 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f28:	e20a      	b.n	8003340 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8206 	beq.w	8003340 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f3c:	e200      	b.n	8003340 <HAL_DMA_IRQHandler+0xe08>
 8002f3e:	bf00      	nop
 8002f40:	40020010 	.word	0x40020010
 8002f44:	40020028 	.word	0x40020028
 8002f48:	40020040 	.word	0x40020040
 8002f4c:	40020058 	.word	0x40020058
 8002f50:	40020070 	.word	0x40020070
 8002f54:	40020088 	.word	0x40020088
 8002f58:	400200a0 	.word	0x400200a0
 8002f5c:	400200b8 	.word	0x400200b8
 8002f60:	40020410 	.word	0x40020410
 8002f64:	40020428 	.word	0x40020428
 8002f68:	40020440 	.word	0x40020440
 8002f6c:	40020458 	.word	0x40020458
 8002f70:	40020470 	.word	0x40020470
 8002f74:	40020488 	.word	0x40020488
 8002f78:	400204a0 	.word	0x400204a0
 8002f7c:	400204b8 	.word	0x400204b8
 8002f80:	58025408 	.word	0x58025408
 8002f84:	5802541c 	.word	0x5802541c
 8002f88:	58025430 	.word	0x58025430
 8002f8c:	58025444 	.word	0x58025444
 8002f90:	58025458 	.word	0x58025458
 8002f94:	5802546c 	.word	0x5802546c
 8002f98:	58025480 	.word	0x58025480
 8002f9c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d160      	bne.n	800306c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a8c      	ldr	r2, [pc, #560]	; (80031e0 <HAL_DMA_IRQHandler+0xca8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d04a      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a8a      	ldr	r2, [pc, #552]	; (80031e4 <HAL_DMA_IRQHandler+0xcac>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d045      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a89      	ldr	r2, [pc, #548]	; (80031e8 <HAL_DMA_IRQHandler+0xcb0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d040      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a87      	ldr	r2, [pc, #540]	; (80031ec <HAL_DMA_IRQHandler+0xcb4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d03b      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a86      	ldr	r2, [pc, #536]	; (80031f0 <HAL_DMA_IRQHandler+0xcb8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d036      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a84      	ldr	r2, [pc, #528]	; (80031f4 <HAL_DMA_IRQHandler+0xcbc>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d031      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a83      	ldr	r2, [pc, #524]	; (80031f8 <HAL_DMA_IRQHandler+0xcc0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d02c      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a81      	ldr	r2, [pc, #516]	; (80031fc <HAL_DMA_IRQHandler+0xcc4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d027      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a80      	ldr	r2, [pc, #512]	; (8003200 <HAL_DMA_IRQHandler+0xcc8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d022      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a7e      	ldr	r2, [pc, #504]	; (8003204 <HAL_DMA_IRQHandler+0xccc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01d      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a7d      	ldr	r2, [pc, #500]	; (8003208 <HAL_DMA_IRQHandler+0xcd0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d018      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a7b      	ldr	r2, [pc, #492]	; (800320c <HAL_DMA_IRQHandler+0xcd4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a7a      	ldr	r2, [pc, #488]	; (8003210 <HAL_DMA_IRQHandler+0xcd8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00e      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a78      	ldr	r2, [pc, #480]	; (8003214 <HAL_DMA_IRQHandler+0xcdc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d009      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a77      	ldr	r2, [pc, #476]	; (8003218 <HAL_DMA_IRQHandler+0xce0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a75      	ldr	r2, [pc, #468]	; (800321c <HAL_DMA_IRQHandler+0xce4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d108      	bne.n	800305c <HAL_DMA_IRQHandler+0xb24>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0208 	bic.w	r2, r2, #8
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e007      	b.n	800306c <HAL_DMA_IRQHandler+0xb34>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0204 	bic.w	r2, r2, #4
 800306a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8165 	beq.w	8003340 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800307e:	e15f      	b.n	8003340 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	2202      	movs	r2, #2
 800308a:	409a      	lsls	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80c5 	beq.w	8003220 <HAL_DMA_IRQHandler+0xce8>
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80bf 	beq.w	8003220 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	2202      	movs	r2, #2
 80030ac:	409a      	lsls	r2, r3
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d018      	beq.n	80030ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 813a 	beq.w	8003344 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030d8:	e134      	b.n	8003344 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 8130 	beq.w	8003344 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030ec:	e12a      	b.n	8003344 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d168      	bne.n	80031ca <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a38      	ldr	r2, [pc, #224]	; (80031e0 <HAL_DMA_IRQHandler+0xca8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d04a      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a37      	ldr	r2, [pc, #220]	; (80031e4 <HAL_DMA_IRQHandler+0xcac>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d045      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a35      	ldr	r2, [pc, #212]	; (80031e8 <HAL_DMA_IRQHandler+0xcb0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d040      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a34      	ldr	r2, [pc, #208]	; (80031ec <HAL_DMA_IRQHandler+0xcb4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d03b      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a32      	ldr	r2, [pc, #200]	; (80031f0 <HAL_DMA_IRQHandler+0xcb8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d036      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a31      	ldr	r2, [pc, #196]	; (80031f4 <HAL_DMA_IRQHandler+0xcbc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d031      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a2f      	ldr	r2, [pc, #188]	; (80031f8 <HAL_DMA_IRQHandler+0xcc0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d02c      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a2e      	ldr	r2, [pc, #184]	; (80031fc <HAL_DMA_IRQHandler+0xcc4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d027      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a2c      	ldr	r2, [pc, #176]	; (8003200 <HAL_DMA_IRQHandler+0xcc8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d022      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a2b      	ldr	r2, [pc, #172]	; (8003204 <HAL_DMA_IRQHandler+0xccc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d01d      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a29      	ldr	r2, [pc, #164]	; (8003208 <HAL_DMA_IRQHandler+0xcd0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d018      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a28      	ldr	r2, [pc, #160]	; (800320c <HAL_DMA_IRQHandler+0xcd4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d013      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a26      	ldr	r2, [pc, #152]	; (8003210 <HAL_DMA_IRQHandler+0xcd8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00e      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a25      	ldr	r2, [pc, #148]	; (8003214 <HAL_DMA_IRQHandler+0xcdc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d009      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a23      	ldr	r2, [pc, #140]	; (8003218 <HAL_DMA_IRQHandler+0xce0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d004      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a22      	ldr	r2, [pc, #136]	; (800321c <HAL_DMA_IRQHandler+0xce4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d108      	bne.n	80031aa <HAL_DMA_IRQHandler+0xc72>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0214 	bic.w	r2, r2, #20
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	e007      	b.n	80031ba <HAL_DMA_IRQHandler+0xc82>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 020a 	bic.w	r2, r2, #10
 80031b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80b8 	beq.w	8003344 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031dc:	e0b2      	b.n	8003344 <HAL_DMA_IRQHandler+0xe0c>
 80031de:	bf00      	nop
 80031e0:	40020010 	.word	0x40020010
 80031e4:	40020028 	.word	0x40020028
 80031e8:	40020040 	.word	0x40020040
 80031ec:	40020058 	.word	0x40020058
 80031f0:	40020070 	.word	0x40020070
 80031f4:	40020088 	.word	0x40020088
 80031f8:	400200a0 	.word	0x400200a0
 80031fc:	400200b8 	.word	0x400200b8
 8003200:	40020410 	.word	0x40020410
 8003204:	40020428 	.word	0x40020428
 8003208:	40020440 	.word	0x40020440
 800320c:	40020458 	.word	0x40020458
 8003210:	40020470 	.word	0x40020470
 8003214:	40020488 	.word	0x40020488
 8003218:	400204a0 	.word	0x400204a0
 800321c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	2208      	movs	r2, #8
 800322a:	409a      	lsls	r2, r3
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8088 	beq.w	8003346 <HAL_DMA_IRQHandler+0xe0e>
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8082 	beq.w	8003346 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a41      	ldr	r2, [pc, #260]	; (800334c <HAL_DMA_IRQHandler+0xe14>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d04a      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a3f      	ldr	r2, [pc, #252]	; (8003350 <HAL_DMA_IRQHandler+0xe18>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d045      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a3e      	ldr	r2, [pc, #248]	; (8003354 <HAL_DMA_IRQHandler+0xe1c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d040      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a3c      	ldr	r2, [pc, #240]	; (8003358 <HAL_DMA_IRQHandler+0xe20>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d03b      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a3b      	ldr	r2, [pc, #236]	; (800335c <HAL_DMA_IRQHandler+0xe24>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d036      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a39      	ldr	r2, [pc, #228]	; (8003360 <HAL_DMA_IRQHandler+0xe28>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d031      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a38      	ldr	r2, [pc, #224]	; (8003364 <HAL_DMA_IRQHandler+0xe2c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d02c      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a36      	ldr	r2, [pc, #216]	; (8003368 <HAL_DMA_IRQHandler+0xe30>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d027      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a35      	ldr	r2, [pc, #212]	; (800336c <HAL_DMA_IRQHandler+0xe34>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d022      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a33      	ldr	r2, [pc, #204]	; (8003370 <HAL_DMA_IRQHandler+0xe38>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d01d      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a32      	ldr	r2, [pc, #200]	; (8003374 <HAL_DMA_IRQHandler+0xe3c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d018      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a30      	ldr	r2, [pc, #192]	; (8003378 <HAL_DMA_IRQHandler+0xe40>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a2f      	ldr	r2, [pc, #188]	; (800337c <HAL_DMA_IRQHandler+0xe44>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00e      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a2d      	ldr	r2, [pc, #180]	; (8003380 <HAL_DMA_IRQHandler+0xe48>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a2c      	ldr	r2, [pc, #176]	; (8003384 <HAL_DMA_IRQHandler+0xe4c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d004      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a2a      	ldr	r2, [pc, #168]	; (8003388 <HAL_DMA_IRQHandler+0xe50>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d108      	bne.n	80032f4 <HAL_DMA_IRQHandler+0xdbc>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 021c 	bic.w	r2, r2, #28
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	e007      	b.n	8003304 <HAL_DMA_IRQHandler+0xdcc>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 020e 	bic.w	r2, r2, #14
 8003302:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	2201      	movs	r2, #1
 800330e:	409a      	lsls	r2, r3
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
 800333a:	e004      	b.n	8003346 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800333c:	bf00      	nop
 800333e:	e002      	b.n	8003346 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003340:	bf00      	nop
 8003342:	e000      	b.n	8003346 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003344:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003346:	3728      	adds	r7, #40	; 0x28
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40020010 	.word	0x40020010
 8003350:	40020028 	.word	0x40020028
 8003354:	40020040 	.word	0x40020040
 8003358:	40020058 	.word	0x40020058
 800335c:	40020070 	.word	0x40020070
 8003360:	40020088 	.word	0x40020088
 8003364:	400200a0 	.word	0x400200a0
 8003368:	400200b8 	.word	0x400200b8
 800336c:	40020410 	.word	0x40020410
 8003370:	40020428 	.word	0x40020428
 8003374:	40020440 	.word	0x40020440
 8003378:	40020458 	.word	0x40020458
 800337c:	40020470 	.word	0x40020470
 8003380:	40020488 	.word	0x40020488
 8003384:	400204a0 	.word	0x400204a0
 8003388:	400204b8 	.word	0x400204b8

0800338c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a42      	ldr	r2, [pc, #264]	; (80034a4 <DMA_CalcBaseAndBitshift+0x118>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d04a      	beq.n	8003434 <DMA_CalcBaseAndBitshift+0xa8>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a41      	ldr	r2, [pc, #260]	; (80034a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d045      	beq.n	8003434 <DMA_CalcBaseAndBitshift+0xa8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a3f      	ldr	r2, [pc, #252]	; (80034ac <DMA_CalcBaseAndBitshift+0x120>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d040      	beq.n	8003434 <DMA_CalcBaseAndBitshift+0xa8>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a3e      	ldr	r2, [pc, #248]	; (80034b0 <DMA_CalcBaseAndBitshift+0x124>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d03b      	beq.n	8003434 <DMA_CalcBaseAndBitshift+0xa8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a3c      	ldr	r2, [pc, #240]	; (80034b4 <DMA_CalcBaseAndBitshift+0x128>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d036      	beq.n	8003434 <DMA_CalcBaseAndBitshift+0xa8>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a3b      	ldr	r2, [pc, #236]	; (80034b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d031      	beq.n	8003434 <DMA_CalcBaseAndBitshift+0xa8>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a39      	ldr	r2, [pc, #228]	; (80034bc <DMA_CalcBaseAndBitshift+0x130>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d02c      	beq.n	8003434 <DMA_CalcBaseAndBitshift+0xa8>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a38      	ldr	r2, [pc, #224]	; (80034c0 <DMA_CalcBaseAndBitshift+0x134>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d027      	beq.n	8003434 <DMA_CalcBaseAndBitshift+0xa8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a36      	ldr	r2, [pc, #216]	; (80034c4 <DMA_CalcBaseAndBitshift+0x138>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d022      	beq.n	8003434 <DMA_CalcBaseAndBitshift+0xa8>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a35      	ldr	r2, [pc, #212]	; (80034c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d01d      	beq.n	8003434 <DMA_CalcBaseAndBitshift+0xa8>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a33      	ldr	r2, [pc, #204]	; (80034cc <DMA_CalcBaseAndBitshift+0x140>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d018      	beq.n	8003434 <DMA_CalcBaseAndBitshift+0xa8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a32      	ldr	r2, [pc, #200]	; (80034d0 <DMA_CalcBaseAndBitshift+0x144>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d013      	beq.n	8003434 <DMA_CalcBaseAndBitshift+0xa8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a30      	ldr	r2, [pc, #192]	; (80034d4 <DMA_CalcBaseAndBitshift+0x148>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00e      	beq.n	8003434 <DMA_CalcBaseAndBitshift+0xa8>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a2f      	ldr	r2, [pc, #188]	; (80034d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d009      	beq.n	8003434 <DMA_CalcBaseAndBitshift+0xa8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a2d      	ldr	r2, [pc, #180]	; (80034dc <DMA_CalcBaseAndBitshift+0x150>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d004      	beq.n	8003434 <DMA_CalcBaseAndBitshift+0xa8>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a2c      	ldr	r2, [pc, #176]	; (80034e0 <DMA_CalcBaseAndBitshift+0x154>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d101      	bne.n	8003438 <DMA_CalcBaseAndBitshift+0xac>
 8003434:	2301      	movs	r3, #1
 8003436:	e000      	b.n	800343a <DMA_CalcBaseAndBitshift+0xae>
 8003438:	2300      	movs	r3, #0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d024      	beq.n	8003488 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	b2db      	uxtb	r3, r3
 8003444:	3b10      	subs	r3, #16
 8003446:	4a27      	ldr	r2, [pc, #156]	; (80034e4 <DMA_CalcBaseAndBitshift+0x158>)
 8003448:	fba2 2303 	umull	r2, r3, r2, r3
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	4a24      	ldr	r2, [pc, #144]	; (80034e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003458:	5cd3      	ldrb	r3, [r2, r3]
 800345a:	461a      	mov	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b03      	cmp	r3, #3
 8003464:	d908      	bls.n	8003478 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	4b1f      	ldr	r3, [pc, #124]	; (80034ec <DMA_CalcBaseAndBitshift+0x160>)
 800346e:	4013      	ands	r3, r2
 8003470:	1d1a      	adds	r2, r3, #4
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	659a      	str	r2, [r3, #88]	; 0x58
 8003476:	e00d      	b.n	8003494 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <DMA_CalcBaseAndBitshift+0x160>)
 8003480:	4013      	ands	r3, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6593      	str	r3, [r2, #88]	; 0x58
 8003486:	e005      	b.n	8003494 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	40020010 	.word	0x40020010
 80034a8:	40020028 	.word	0x40020028
 80034ac:	40020040 	.word	0x40020040
 80034b0:	40020058 	.word	0x40020058
 80034b4:	40020070 	.word	0x40020070
 80034b8:	40020088 	.word	0x40020088
 80034bc:	400200a0 	.word	0x400200a0
 80034c0:	400200b8 	.word	0x400200b8
 80034c4:	40020410 	.word	0x40020410
 80034c8:	40020428 	.word	0x40020428
 80034cc:	40020440 	.word	0x40020440
 80034d0:	40020458 	.word	0x40020458
 80034d4:	40020470 	.word	0x40020470
 80034d8:	40020488 	.word	0x40020488
 80034dc:	400204a0 	.word	0x400204a0
 80034e0:	400204b8 	.word	0x400204b8
 80034e4:	aaaaaaab 	.word	0xaaaaaaab
 80034e8:	0800dbf4 	.word	0x0800dbf4
 80034ec:	fffffc00 	.word	0xfffffc00

080034f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d120      	bne.n	8003546 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003508:	2b03      	cmp	r3, #3
 800350a:	d858      	bhi.n	80035be <DMA_CheckFifoParam+0xce>
 800350c:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <DMA_CheckFifoParam+0x24>)
 800350e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003512:	bf00      	nop
 8003514:	08003525 	.word	0x08003525
 8003518:	08003537 	.word	0x08003537
 800351c:	08003525 	.word	0x08003525
 8003520:	080035bf 	.word	0x080035bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d048      	beq.n	80035c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003534:	e045      	b.n	80035c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800353e:	d142      	bne.n	80035c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003544:	e03f      	b.n	80035c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800354e:	d123      	bne.n	8003598 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	2b03      	cmp	r3, #3
 8003556:	d838      	bhi.n	80035ca <DMA_CheckFifoParam+0xda>
 8003558:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <DMA_CheckFifoParam+0x70>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003571 	.word	0x08003571
 8003564:	08003577 	.word	0x08003577
 8003568:	08003571 	.word	0x08003571
 800356c:	08003589 	.word	0x08003589
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
        break;
 8003574:	e030      	b.n	80035d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d025      	beq.n	80035ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003586:	e022      	b.n	80035ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003590:	d11f      	bne.n	80035d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003596:	e01c      	b.n	80035d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	2b02      	cmp	r3, #2
 800359e:	d902      	bls.n	80035a6 <DMA_CheckFifoParam+0xb6>
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d003      	beq.n	80035ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80035a4:	e018      	b.n	80035d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
        break;
 80035aa:	e015      	b.n	80035d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00e      	beq.n	80035d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
    break;
 80035bc:	e00b      	b.n	80035d6 <DMA_CheckFifoParam+0xe6>
        break;
 80035be:	bf00      	nop
 80035c0:	e00a      	b.n	80035d8 <DMA_CheckFifoParam+0xe8>
        break;
 80035c2:	bf00      	nop
 80035c4:	e008      	b.n	80035d8 <DMA_CheckFifoParam+0xe8>
        break;
 80035c6:	bf00      	nop
 80035c8:	e006      	b.n	80035d8 <DMA_CheckFifoParam+0xe8>
        break;
 80035ca:	bf00      	nop
 80035cc:	e004      	b.n	80035d8 <DMA_CheckFifoParam+0xe8>
        break;
 80035ce:	bf00      	nop
 80035d0:	e002      	b.n	80035d8 <DMA_CheckFifoParam+0xe8>
        break;
 80035d2:	bf00      	nop
 80035d4:	e000      	b.n	80035d8 <DMA_CheckFifoParam+0xe8>
    break;
 80035d6:	bf00      	nop
    }
  }

  return status;
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop

080035e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a38      	ldr	r2, [pc, #224]	; (80036dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d022      	beq.n	8003646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a36      	ldr	r2, [pc, #216]	; (80036e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d01d      	beq.n	8003646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a35      	ldr	r2, [pc, #212]	; (80036e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d018      	beq.n	8003646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a33      	ldr	r2, [pc, #204]	; (80036e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d013      	beq.n	8003646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a32      	ldr	r2, [pc, #200]	; (80036ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d00e      	beq.n	8003646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a30      	ldr	r2, [pc, #192]	; (80036f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d009      	beq.n	8003646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a2f      	ldr	r2, [pc, #188]	; (80036f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d004      	beq.n	8003646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a2d      	ldr	r2, [pc, #180]	; (80036f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800364a:	2300      	movs	r3, #0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01a      	beq.n	8003686 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	3b08      	subs	r3, #8
 8003658:	4a28      	ldr	r2, [pc, #160]	; (80036fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	091b      	lsrs	r3, r3, #4
 8003660:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4b26      	ldr	r3, [pc, #152]	; (8003700 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	461a      	mov	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a24      	ldr	r2, [pc, #144]	; (8003704 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003674:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	2201      	movs	r2, #1
 800367e:	409a      	lsls	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003684:	e024      	b.n	80036d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	3b10      	subs	r3, #16
 800368e:	4a1e      	ldr	r2, [pc, #120]	; (8003708 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4a1c      	ldr	r2, [pc, #112]	; (800370c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d806      	bhi.n	80036ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4a1b      	ldr	r2, [pc, #108]	; (8003710 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d902      	bls.n	80036ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3308      	adds	r3, #8
 80036ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4b18      	ldr	r3, [pc, #96]	; (8003714 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	461a      	mov	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a16      	ldr	r2, [pc, #88]	; (8003718 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80036c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	2201      	movs	r2, #1
 80036ca:	409a      	lsls	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	58025408 	.word	0x58025408
 80036e0:	5802541c 	.word	0x5802541c
 80036e4:	58025430 	.word	0x58025430
 80036e8:	58025444 	.word	0x58025444
 80036ec:	58025458 	.word	0x58025458
 80036f0:	5802546c 	.word	0x5802546c
 80036f4:	58025480 	.word	0x58025480
 80036f8:	58025494 	.word	0x58025494
 80036fc:	cccccccd 	.word	0xcccccccd
 8003700:	16009600 	.word	0x16009600
 8003704:	58025880 	.word	0x58025880
 8003708:	aaaaaaab 	.word	0xaaaaaaab
 800370c:	400204b8 	.word	0x400204b8
 8003710:	4002040f 	.word	0x4002040f
 8003714:	10008200 	.word	0x10008200
 8003718:	40020880 	.word	0x40020880

0800371c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d04a      	beq.n	80037c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b08      	cmp	r3, #8
 8003736:	d847      	bhi.n	80037c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a25      	ldr	r2, [pc, #148]	; (80037d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a24      	ldr	r2, [pc, #144]	; (80037d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01d      	beq.n	8003788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a22      	ldr	r2, [pc, #136]	; (80037dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a21      	ldr	r2, [pc, #132]	; (80037e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1f      	ldr	r2, [pc, #124]	; (80037e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1e      	ldr	r2, [pc, #120]	; (80037e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a1c      	ldr	r2, [pc, #112]	; (80037ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1b      	ldr	r2, [pc, #108]	; (80037f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800378c:	2300      	movs	r3, #0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4b17      	ldr	r3, [pc, #92]	; (80037f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	461a      	mov	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a15      	ldr	r2, [pc, #84]	; (80037f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80037a4:	671a      	str	r2, [r3, #112]	; 0x70
 80037a6:	e009      	b.n	80037bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4b14      	ldr	r3, [pc, #80]	; (80037fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	461a      	mov	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a11      	ldr	r2, [pc, #68]	; (8003800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80037ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	3b01      	subs	r3, #1
 80037c0:	2201      	movs	r2, #1
 80037c2:	409a      	lsls	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	58025408 	.word	0x58025408
 80037d8:	5802541c 	.word	0x5802541c
 80037dc:	58025430 	.word	0x58025430
 80037e0:	58025444 	.word	0x58025444
 80037e4:	58025458 	.word	0x58025458
 80037e8:	5802546c 	.word	0x5802546c
 80037ec:	58025480 	.word	0x58025480
 80037f0:	58025494 	.word	0x58025494
 80037f4:	1600963f 	.word	0x1600963f
 80037f8:	58025940 	.word	0x58025940
 80037fc:	1000823f 	.word	0x1000823f
 8003800:	40020940 	.word	0x40020940

08003804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003812:	4b89      	ldr	r3, [pc, #548]	; (8003a38 <HAL_GPIO_Init+0x234>)
 8003814:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003816:	e194      	b.n	8003b42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	2101      	movs	r1, #1
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	fa01 f303 	lsl.w	r3, r1, r3
 8003824:	4013      	ands	r3, r2
 8003826:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8186 	beq.w	8003b3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d00b      	beq.n	8003850 <HAL_GPIO_Init+0x4c>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b02      	cmp	r3, #2
 800383e:	d007      	beq.n	8003850 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003844:	2b11      	cmp	r3, #17
 8003846:	d003      	beq.n	8003850 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b12      	cmp	r3, #18
 800384e:	d130      	bne.n	80038b2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	2203      	movs	r2, #3
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003886:	2201      	movs	r2, #1
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	f003 0201 	and.w	r2, r3, #1
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	2203      	movs	r2, #3
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_Init+0xee>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b12      	cmp	r3, #18
 80038f0:	d123      	bne.n	800393a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	08da      	lsrs	r2, r3, #3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3208      	adds	r2, #8
 80038fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	220f      	movs	r2, #15
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	08da      	lsrs	r2, r3, #3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3208      	adds	r2, #8
 8003934:	69b9      	ldr	r1, [r7, #24]
 8003936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	2203      	movs	r2, #3
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4013      	ands	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 0203 	and.w	r2, r3, #3
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 80e0 	beq.w	8003b3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800397c:	4b2f      	ldr	r3, [pc, #188]	; (8003a3c <HAL_GPIO_Init+0x238>)
 800397e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003982:	4a2e      	ldr	r2, [pc, #184]	; (8003a3c <HAL_GPIO_Init+0x238>)
 8003984:	f043 0302 	orr.w	r3, r3, #2
 8003988:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800398c:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <HAL_GPIO_Init+0x238>)
 800398e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800399a:	4a29      	ldr	r2, [pc, #164]	; (8003a40 <HAL_GPIO_Init+0x23c>)
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	089b      	lsrs	r3, r3, #2
 80039a0:	3302      	adds	r3, #2
 80039a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	220f      	movs	r2, #15
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43db      	mvns	r3, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4013      	ands	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a20      	ldr	r2, [pc, #128]	; (8003a44 <HAL_GPIO_Init+0x240>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d052      	beq.n	8003a6c <HAL_GPIO_Init+0x268>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a1f      	ldr	r2, [pc, #124]	; (8003a48 <HAL_GPIO_Init+0x244>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d031      	beq.n	8003a32 <HAL_GPIO_Init+0x22e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a1e      	ldr	r2, [pc, #120]	; (8003a4c <HAL_GPIO_Init+0x248>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d02b      	beq.n	8003a2e <HAL_GPIO_Init+0x22a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <HAL_GPIO_Init+0x24c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d025      	beq.n	8003a2a <HAL_GPIO_Init+0x226>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a1c      	ldr	r2, [pc, #112]	; (8003a54 <HAL_GPIO_Init+0x250>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d01f      	beq.n	8003a26 <HAL_GPIO_Init+0x222>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a1b      	ldr	r2, [pc, #108]	; (8003a58 <HAL_GPIO_Init+0x254>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d019      	beq.n	8003a22 <HAL_GPIO_Init+0x21e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a1a      	ldr	r2, [pc, #104]	; (8003a5c <HAL_GPIO_Init+0x258>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_GPIO_Init+0x21a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a19      	ldr	r2, [pc, #100]	; (8003a60 <HAL_GPIO_Init+0x25c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00d      	beq.n	8003a1a <HAL_GPIO_Init+0x216>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <HAL_GPIO_Init+0x260>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <HAL_GPIO_Init+0x212>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a17      	ldr	r2, [pc, #92]	; (8003a68 <HAL_GPIO_Init+0x264>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_GPIO_Init+0x20e>
 8003a0e:	2309      	movs	r3, #9
 8003a10:	e02d      	b.n	8003a6e <HAL_GPIO_Init+0x26a>
 8003a12:	230a      	movs	r3, #10
 8003a14:	e02b      	b.n	8003a6e <HAL_GPIO_Init+0x26a>
 8003a16:	2308      	movs	r3, #8
 8003a18:	e029      	b.n	8003a6e <HAL_GPIO_Init+0x26a>
 8003a1a:	2307      	movs	r3, #7
 8003a1c:	e027      	b.n	8003a6e <HAL_GPIO_Init+0x26a>
 8003a1e:	2306      	movs	r3, #6
 8003a20:	e025      	b.n	8003a6e <HAL_GPIO_Init+0x26a>
 8003a22:	2305      	movs	r3, #5
 8003a24:	e023      	b.n	8003a6e <HAL_GPIO_Init+0x26a>
 8003a26:	2304      	movs	r3, #4
 8003a28:	e021      	b.n	8003a6e <HAL_GPIO_Init+0x26a>
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e01f      	b.n	8003a6e <HAL_GPIO_Init+0x26a>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e01d      	b.n	8003a6e <HAL_GPIO_Init+0x26a>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e01b      	b.n	8003a6e <HAL_GPIO_Init+0x26a>
 8003a36:	bf00      	nop
 8003a38:	58000080 	.word	0x58000080
 8003a3c:	58024400 	.word	0x58024400
 8003a40:	58000400 	.word	0x58000400
 8003a44:	58020000 	.word	0x58020000
 8003a48:	58020400 	.word	0x58020400
 8003a4c:	58020800 	.word	0x58020800
 8003a50:	58020c00 	.word	0x58020c00
 8003a54:	58021000 	.word	0x58021000
 8003a58:	58021400 	.word	0x58021400
 8003a5c:	58021800 	.word	0x58021800
 8003a60:	58021c00 	.word	0x58021c00
 8003a64:	58022000 	.word	0x58022000
 8003a68:	58022400 	.word	0x58022400
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	69fa      	ldr	r2, [r7, #28]
 8003a70:	f002 0203 	and.w	r2, r2, #3
 8003a74:	0092      	lsls	r2, r2, #2
 8003a76:	4093      	lsls	r3, r2
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a7e:	4938      	ldr	r1, [pc, #224]	; (8003b60 <HAL_GPIO_Init+0x35c>)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	089b      	lsrs	r3, r3, #2
 8003a84:	3302      	adds	r3, #2
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	43db      	mvns	r3, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4013      	ands	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f47f ae63 	bne.w	8003818 <HAL_GPIO_Init+0x14>
  }
}
 8003b52:	bf00      	nop
 8003b54:	3724      	adds	r7, #36	; 0x24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	58000400 	.word	0x58000400

08003b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	807b      	strh	r3, [r7, #2]
 8003b70:	4613      	mov	r3, r2
 8003b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b74:	787b      	ldrb	r3, [r7, #1]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003b80:	e003      	b.n	8003b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b82:	887b      	ldrh	r3, [r7, #2]
 8003b84:	041a      	lsls	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	619a      	str	r2, [r3, #24]
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	887b      	ldrh	r3, [r7, #2]
 8003ba8:	401a      	ands	r2, r3
 8003baa:	887b      	ldrh	r3, [r7, #2]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d104      	bne.n	8003bba <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003bb0:	887b      	ldrh	r3, [r7, #2]
 8003bb2:	041a      	lsls	r2, r3, #16
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003bb8:	e002      	b.n	8003bc0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003bba:	887a      	ldrh	r2, [r7, #2]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	619a      	str	r2, [r3, #24]
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e07f      	b.n	8003cde <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fd fcbc 	bl	8001570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2224      	movs	r2, #36	; 0x24
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0201 	bic.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d107      	bne.n	8003c46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c42:	609a      	str	r2, [r3, #8]
 8003c44:	e006      	b.n	8003c54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d104      	bne.n	8003c66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <HAL_I2C_Init+0x11c>)
 8003c72:	430b      	orrs	r3, r1
 8003c74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	ea42 0103 	orr.w	r1, r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	021a      	lsls	r2, r3, #8
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69d9      	ldr	r1, [r3, #28]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1a      	ldr	r2, [r3, #32]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	02008000 	.word	0x02008000

08003cec <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	f040 80f5 	bne.w	8003ef4 <HAL_I2C_Slave_Transmit+0x208>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_I2C_Slave_Transmit+0x2a>
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d105      	bne.n	8003d22 <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e0e9      	b.n	8003ef6 <HAL_I2C_Slave_Transmit+0x20a>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_I2C_Slave_Transmit+0x44>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e0e2      	b.n	8003ef6 <HAL_I2C_Slave_Transmit+0x20a>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d38:	f7fd ff88 	bl	8001c4c <HAL_GetTick>
 8003d3c:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2221      	movs	r2, #33	; 0x21
 8003d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	88fa      	ldrh	r2, [r7, #6]
 8003d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d74:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2108      	movs	r1, #8
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f9df 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d009      	beq.n	8003da0 <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d9a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e0aa      	b.n	8003ef6 <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2208      	movs	r2, #8
 8003da6:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d118      	bne.n	8003de2 <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	2108      	movs	r1, #8
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f9c2 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d009      	beq.n	8003dda <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dd4:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e08d      	b.n	8003ef6 <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2208      	movs	r2, #8
 8003de0:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 f9a8 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d02d      	beq.n	8003e56 <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e08:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e073      	b.n	8003ef6 <HAL_I2C_Slave_Transmit+0x20a>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	6839      	ldr	r1, [r7, #0]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f9d6 	bl	80041c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e2c:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e061      	b.n	8003ef6 <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	781a      	ldrb	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1d6      	bne.n	8003e0e <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	6839      	ldr	r1, [r7, #0]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f9ed 	bl	8004244 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d011      	beq.n	8003e94 <HAL_I2C_Slave_Transmit+0x1a8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e7e:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d103      	bne.n	8003e90 <HAL_I2C_Slave_Transmit+0x1a4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	645a      	str	r2, [r3, #68]	; 0x44
 8003e8e:	e001      	b.n	8003e94 <HAL_I2C_Slave_Transmit+0x1a8>
      }
      else
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e030      	b.n	8003ef6 <HAL_I2C_Slave_Transmit+0x20a>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 f94b 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <HAL_I2C_Slave_Transmit+0x1dc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ec2:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e016      	b.n	8003ef6 <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ed6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e000      	b.n	8003ef6 <HAL_I2C_Slave_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b088      	sub	sp, #32
 8003f02:	af02      	add	r7, sp, #8
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	603b      	str	r3, [r7, #0]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	f040 80eb 	bne.w	80040f2 <HAL_I2C_Slave_Receive+0x1f4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_I2C_Slave_Receive+0x2a>
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d105      	bne.n	8003f34 <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0df      	b.n	80040f4 <HAL_I2C_Slave_Receive+0x1f6>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_I2C_Slave_Receive+0x44>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e0d8      	b.n	80040f4 <HAL_I2C_Slave_Receive+0x1f6>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f4a:	f7fd fe7f 	bl	8001c4c <HAL_GetTick>
 8003f4e:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2222      	movs	r2, #34	; 0x22
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	88fa      	ldrh	r2, [r7, #6]
 8003f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f86:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2108      	movs	r1, #8
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f8d6 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <HAL_I2C_Slave_Receive+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fac:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e0a0      	b.n	80040f4 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2208      	movs	r2, #8
 8003fb8:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 f8bc 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d048      	beq.n	8004064 <HAL_I2C_Slave_Receive+0x166>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fe0:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e086      	b.n	80040f4 <HAL_I2C_Slave_Receive+0x1f6>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	6839      	ldr	r1, [r7, #0]
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 f966 	bl	80042bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d023      	beq.n	800403e <HAL_I2C_Slave_Receive+0x140>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004004:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b04      	cmp	r3, #4
 8004012:	d112      	bne.n	800403a <HAL_I2C_Slave_Receive+0x13c>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	855a      	strh	r2, [r3, #42]	; 0x2a
        }

        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e05a      	b.n	80040f4 <HAL_I2C_Slave_Receive+0x1f6>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1bb      	bne.n	8003fe6 <HAL_I2C_Slave_Receive+0xe8>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	6839      	ldr	r1, [r7, #0]
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f8e6 	bl	8004244 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <HAL_I2C_Slave_Receive+0x194>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800408c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e030      	b.n	80040f4 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2220      	movs	r2, #32
 8004098:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f84c 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d009      	beq.n	80040c6 <HAL_I2C_Slave_Receive+0x1c8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040c0:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e016      	b.n	80040f4 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040d4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2220      	movs	r2, #32
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e000      	b.n	80040f4 <HAL_I2C_Slave_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 80040f2:	2302      	movs	r3, #2
  }
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b02      	cmp	r3, #2
 8004110:	d103      	bne.n	800411a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2200      	movs	r2, #0
 8004118:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	d007      	beq.n	8004138 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699a      	ldr	r2, [r3, #24]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0201 	orr.w	r2, r2, #1
 8004136:	619a      	str	r2, [r3, #24]
  }
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	4613      	mov	r3, r2
 8004152:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004154:	e022      	b.n	800419c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d01e      	beq.n	800419c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415e:	f7fd fd75 	bl	8001c4c <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d302      	bcc.n	8004174 <I2C_WaitOnFlagUntilTimeout+0x30>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d113      	bne.n	800419c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004178:	f043 0220 	orr.w	r2, r3, #32
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e00f      	b.n	80041bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4013      	ands	r3, r2
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d0cd      	beq.n	8004156 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041d0:	e02c      	b.n	800422c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f8dc 	bl	8004394 <I2C_IsAcknowledgeFailed>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e02a      	b.n	800423c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d01e      	beq.n	800422c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ee:	f7fd fd2d 	bl	8001c4c <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d302      	bcc.n	8004204 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d113      	bne.n	800422c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004208:	f043 0220 	orr.w	r2, r3, #32
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e007      	b.n	800423c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b02      	cmp	r3, #2
 8004238:	d1cb      	bne.n	80041d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004250:	e028      	b.n	80042a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f89c 	bl	8004394 <I2C_IsAcknowledgeFailed>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e026      	b.n	80042b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004266:	f7fd fcf1 	bl	8001c4c <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	429a      	cmp	r2, r3
 8004274:	d302      	bcc.n	800427c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d113      	bne.n	80042a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004280:	f043 0220 	orr.w	r2, r3, #32
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e007      	b.n	80042b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d1cf      	bne.n	8004252 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042c8:	e055      	b.n	8004376 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 f860 	bl	8004394 <I2C_IsAcknowledgeFailed>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e053      	b.n	8004386 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d129      	bne.n	8004340 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d105      	bne.n	8004306 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	e03f      	b.n	8004386 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2220      	movs	r2, #32
 800430c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6859      	ldr	r1, [r3, #4]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800431a:	400b      	ands	r3, r1
 800431c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e022      	b.n	8004386 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004340:	f7fd fc84 	bl	8001c4c <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	429a      	cmp	r2, r3
 800434e:	d302      	bcc.n	8004356 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10f      	bne.n	8004376 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	f043 0220 	orr.w	r2, r3, #32
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e007      	b.n	8004386 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b04      	cmp	r3, #4
 8004382:	d1a2      	bne.n	80042ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	fe00e800 	.word	0xfe00e800

08004394 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	2b10      	cmp	r3, #16
 80043ac:	d151      	bne.n	8004452 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043ae:	e022      	b.n	80043f6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d01e      	beq.n	80043f6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b8:	f7fd fc48 	bl	8001c4c <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d302      	bcc.n	80043ce <I2C_IsAcknowledgeFailed+0x3a>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d113      	bne.n	80043f6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	f043 0220 	orr.w	r2, r3, #32
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e02e      	b.n	8004454 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b20      	cmp	r3, #32
 8004402:	d1d5      	bne.n	80043b0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2210      	movs	r2, #16
 800440a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2220      	movs	r2, #32
 8004412:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7ff fe71 	bl	80040fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6859      	ldr	r1, [r3, #4]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b0d      	ldr	r3, [pc, #52]	; (800445c <I2C_IsAcknowledgeFailed+0xc8>)
 8004426:	400b      	ands	r3, r1
 8004428:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442e:	f043 0204 	orr.w	r2, r3, #4
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e000      	b.n	8004454 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	fe00e800 	.word	0xfe00e800

08004460 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b20      	cmp	r3, #32
 8004474:	d138      	bne.n	80044e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004480:	2302      	movs	r3, #2
 8004482:	e032      	b.n	80044ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2224      	movs	r2, #36	; 0x24
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0201 	bic.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6819      	ldr	r1, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	e000      	b.n	80044ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
  }
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b20      	cmp	r3, #32
 800450a:	d139      	bne.n	8004580 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004516:	2302      	movs	r3, #2
 8004518:	e033      	b.n	8004582 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2224      	movs	r2, #36	; 0x24
 8004526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004548:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	e000      	b.n	8004582 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004580:	2302      	movs	r3, #2
  }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800458e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004590:	b08f      	sub	sp, #60	; 0x3c
 8004592:	af0a      	add	r7, sp, #40	; 0x28
 8004594:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e116      	b.n	80047ce <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fd f960 	bl	8001880 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2203      	movs	r2, #3
 80045c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d102      	bne.n	80045da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f005 f95e 	bl	80098a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	603b      	str	r3, [r7, #0]
 80045ea:	687e      	ldr	r6, [r7, #4]
 80045ec:	466d      	mov	r5, sp
 80045ee:	f106 0410 	add.w	r4, r6, #16
 80045f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004602:	1d33      	adds	r3, r6, #4
 8004604:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004606:	6838      	ldr	r0, [r7, #0]
 8004608:	f005 f8e8 	bl	80097dc <USB_CoreInit>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2202      	movs	r2, #2
 8004616:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e0d7      	b.n	80047ce <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2100      	movs	r1, #0
 8004624:	4618      	mov	r0, r3
 8004626:	f005 f94c 	bl	80098c2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800462a:	2300      	movs	r3, #0
 800462c:	73fb      	strb	r3, [r7, #15]
 800462e:	e04a      	b.n	80046c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004630:	7bfa      	ldrb	r2, [r7, #15]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	333d      	adds	r3, #61	; 0x3d
 8004640:	2201      	movs	r2, #1
 8004642:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004644:	7bfa      	ldrb	r2, [r7, #15]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	333c      	adds	r3, #60	; 0x3c
 8004654:	7bfa      	ldrb	r2, [r7, #15]
 8004656:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004658:	7bfa      	ldrb	r2, [r7, #15]
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	b298      	uxth	r0, r3
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	3342      	adds	r3, #66	; 0x42
 800466c:	4602      	mov	r2, r0
 800466e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004670:	7bfa      	ldrb	r2, [r7, #15]
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	333f      	adds	r3, #63	; 0x3f
 8004680:	2200      	movs	r2, #0
 8004682:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004684:	7bfa      	ldrb	r2, [r7, #15]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	3344      	adds	r3, #68	; 0x44
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004698:	7bfa      	ldrb	r2, [r7, #15]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	3348      	adds	r3, #72	; 0x48
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046ac:	7bfa      	ldrb	r2, [r7, #15]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	3350      	adds	r3, #80	; 0x50
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	3301      	adds	r3, #1
 80046c4:	73fb      	strb	r3, [r7, #15]
 80046c6:	7bfa      	ldrb	r2, [r7, #15]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d3af      	bcc.n	8004630 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046d0:	2300      	movs	r3, #0
 80046d2:	73fb      	strb	r3, [r7, #15]
 80046d4:	e044      	b.n	8004760 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046d6:	7bfa      	ldrb	r2, [r7, #15]
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80046e8:	2200      	movs	r2, #0
 80046ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046ec:	7bfa      	ldrb	r2, [r7, #15]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80046fe:	7bfa      	ldrb	r2, [r7, #15]
 8004700:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004702:	7bfa      	ldrb	r2, [r7, #15]
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	4613      	mov	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	1a9b      	subs	r3, r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	440b      	add	r3, r1
 8004710:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004714:	2200      	movs	r2, #0
 8004716:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004718:	7bfa      	ldrb	r2, [r7, #15]
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	4613      	mov	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	1a9b      	subs	r3, r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800472e:	7bfa      	ldrb	r2, [r7, #15]
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	1a9b      	subs	r3, r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	440b      	add	r3, r1
 800473c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004744:	7bfa      	ldrb	r2, [r7, #15]
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	4613      	mov	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	1a9b      	subs	r3, r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	3301      	adds	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
 8004760:	7bfa      	ldrb	r2, [r7, #15]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	429a      	cmp	r2, r3
 8004768:	d3b5      	bcc.n	80046d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	687e      	ldr	r6, [r7, #4]
 8004772:	466d      	mov	r5, sp
 8004774:	f106 0410 	add.w	r4, r6, #16
 8004778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800477a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800477c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800477e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004780:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004784:	e885 0003 	stmia.w	r5, {r0, r1}
 8004788:	1d33      	adds	r3, r6, #4
 800478a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800478c:	6838      	ldr	r0, [r7, #0]
 800478e:	f005 f8c3 	bl	8009918 <USB_DevInit>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e014      	b.n	80047ce <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d102      	bne.n	80047c2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f80b 	bl	80047d8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f005 fa65 	bl	8009c96 <USB_DevDisconnect>

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080047d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004806:	4b05      	ldr	r3, [pc, #20]	; (800481c <HAL_PCDEx_ActivateLPM+0x44>)
 8004808:	4313      	orrs	r3, r2
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	10000003 	.word	0x10000003

08004820 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004828:	4b19      	ldr	r3, [pc, #100]	; (8004890 <HAL_PWREx_ConfigSupply+0x70>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b04      	cmp	r3, #4
 8004832:	d00a      	beq.n	800484a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004834:	4b16      	ldr	r3, [pc, #88]	; (8004890 <HAL_PWREx_ConfigSupply+0x70>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	429a      	cmp	r2, r3
 8004840:	d001      	beq.n	8004846 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e01f      	b.n	8004886 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	e01d      	b.n	8004886 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800484a:	4b11      	ldr	r3, [pc, #68]	; (8004890 <HAL_PWREx_ConfigSupply+0x70>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f023 0207 	bic.w	r2, r3, #7
 8004852:	490f      	ldr	r1, [pc, #60]	; (8004890 <HAL_PWREx_ConfigSupply+0x70>)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4313      	orrs	r3, r2
 8004858:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800485a:	f7fd f9f7 	bl	8001c4c <HAL_GetTick>
 800485e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004860:	e009      	b.n	8004876 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004862:	f7fd f9f3 	bl	8001c4c <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004870:	d901      	bls.n	8004876 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e007      	b.n	8004886 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <HAL_PWREx_ConfigSupply+0x70>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800487e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004882:	d1ee      	bne.n	8004862 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	58024800 	.word	0x58024800

08004894 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4a04      	ldr	r2, [pc, #16]	; (80048b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800489e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048a2:	60d3      	str	r3, [r2, #12]
}
 80048a4:	bf00      	nop
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	58024800 	.word	0x58024800

080048b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08c      	sub	sp, #48	; 0x30
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e3ff      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8087 	beq.w	80049e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d4:	4b99      	ldr	r3, [pc, #612]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048de:	4b97      	ldr	r3, [pc, #604]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80048e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e6:	2b10      	cmp	r3, #16
 80048e8:	d007      	beq.n	80048fa <HAL_RCC_OscConfig+0x46>
 80048ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ec:	2b18      	cmp	r3, #24
 80048ee:	d110      	bne.n	8004912 <HAL_RCC_OscConfig+0x5e>
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d10b      	bne.n	8004912 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048fa:	4b90      	ldr	r3, [pc, #576]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d06c      	beq.n	80049e0 <HAL_RCC_OscConfig+0x12c>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d168      	bne.n	80049e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e3d9      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800491a:	d106      	bne.n	800492a <HAL_RCC_OscConfig+0x76>
 800491c:	4b87      	ldr	r3, [pc, #540]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a86      	ldr	r2, [pc, #536]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	e02e      	b.n	8004988 <HAL_RCC_OscConfig+0xd4>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10c      	bne.n	800494c <HAL_RCC_OscConfig+0x98>
 8004932:	4b82      	ldr	r3, [pc, #520]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a81      	ldr	r2, [pc, #516]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	4b7f      	ldr	r3, [pc, #508]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a7e      	ldr	r2, [pc, #504]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e01d      	b.n	8004988 <HAL_RCC_OscConfig+0xd4>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004954:	d10c      	bne.n	8004970 <HAL_RCC_OscConfig+0xbc>
 8004956:	4b79      	ldr	r3, [pc, #484]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a78      	ldr	r2, [pc, #480]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 800495c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	4b76      	ldr	r3, [pc, #472]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a75      	ldr	r2, [pc, #468]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	e00b      	b.n	8004988 <HAL_RCC_OscConfig+0xd4>
 8004970:	4b72      	ldr	r3, [pc, #456]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a71      	ldr	r2, [pc, #452]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	4b6f      	ldr	r3, [pc, #444]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a6e      	ldr	r2, [pc, #440]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d013      	beq.n	80049b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004990:	f7fd f95c 	bl	8001c4c <HAL_GetTick>
 8004994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004998:	f7fd f958 	bl	8001c4c <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b64      	cmp	r3, #100	; 0x64
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e38d      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049aa:	4b64      	ldr	r3, [pc, #400]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0f0      	beq.n	8004998 <HAL_RCC_OscConfig+0xe4>
 80049b6:	e014      	b.n	80049e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b8:	f7fd f948 	bl	8001c4c <HAL_GetTick>
 80049bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049c0:	f7fd f944 	bl	8001c4c <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b64      	cmp	r3, #100	; 0x64
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e379      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049d2:	4b5a      	ldr	r3, [pc, #360]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f0      	bne.n	80049c0 <HAL_RCC_OscConfig+0x10c>
 80049de:	e000      	b.n	80049e2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 80ae 	beq.w	8004b4c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049f0:	4b52      	ldr	r3, [pc, #328]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049fa:	4b50      	ldr	r3, [pc, #320]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <HAL_RCC_OscConfig+0x162>
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	2b18      	cmp	r3, #24
 8004a0a:	d13a      	bne.n	8004a82 <HAL_RCC_OscConfig+0x1ce>
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d135      	bne.n	8004a82 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a16:	4b49      	ldr	r3, [pc, #292]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0304 	and.w	r3, r3, #4
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <HAL_RCC_OscConfig+0x17a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e34b      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a2e:	f7fd f93b 	bl	8001ca8 <HAL_GetREVID>
 8004a32:	4602      	mov	r2, r0
 8004a34:	f241 0303 	movw	r3, #4099	; 0x1003
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d817      	bhi.n	8004a6c <HAL_RCC_OscConfig+0x1b8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	2b40      	cmp	r3, #64	; 0x40
 8004a42:	d108      	bne.n	8004a56 <HAL_RCC_OscConfig+0x1a2>
 8004a44:	4b3d      	ldr	r3, [pc, #244]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a4c:	4a3b      	ldr	r2, [pc, #236]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a52:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a54:	e07a      	b.n	8004b4c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a56:	4b39      	ldr	r3, [pc, #228]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	031b      	lsls	r3, r3, #12
 8004a64:	4935      	ldr	r1, [pc, #212]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a6a:	e06f      	b.n	8004b4c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6c:	4b33      	ldr	r3, [pc, #204]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	061b      	lsls	r3, r3, #24
 8004a7a:	4930      	ldr	r1, [pc, #192]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a80:	e064      	b.n	8004b4c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d045      	beq.n	8004b16 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a8a:	4b2c      	ldr	r3, [pc, #176]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f023 0219 	bic.w	r2, r3, #25
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	4929      	ldr	r1, [pc, #164]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fd f8d6 	bl	8001c4c <HAL_GetTick>
 8004aa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aa4:	f7fd f8d2 	bl	8001c4c <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e307      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ab6:	4b21      	ldr	r3, [pc, #132]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0f0      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac2:	f7fd f8f1 	bl	8001ca8 <HAL_GetREVID>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	f241 0303 	movw	r3, #4099	; 0x1003
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d817      	bhi.n	8004b00 <HAL_RCC_OscConfig+0x24c>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	2b40      	cmp	r3, #64	; 0x40
 8004ad6:	d108      	bne.n	8004aea <HAL_RCC_OscConfig+0x236>
 8004ad8:	4b18      	ldr	r3, [pc, #96]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004ae0:	4a16      	ldr	r2, [pc, #88]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae6:	6053      	str	r3, [r2, #4]
 8004ae8:	e030      	b.n	8004b4c <HAL_RCC_OscConfig+0x298>
 8004aea:	4b14      	ldr	r3, [pc, #80]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	031b      	lsls	r3, r3, #12
 8004af8:	4910      	ldr	r1, [pc, #64]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	604b      	str	r3, [r1, #4]
 8004afe:	e025      	b.n	8004b4c <HAL_RCC_OscConfig+0x298>
 8004b00:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	061b      	lsls	r3, r3, #24
 8004b0e:	490b      	ldr	r1, [pc, #44]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	604b      	str	r3, [r1, #4]
 8004b14:	e01a      	b.n	8004b4c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b16:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a08      	ldr	r2, [pc, #32]	; (8004b3c <HAL_RCC_OscConfig+0x288>)
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b22:	f7fd f893 	bl	8001c4c <HAL_GetTick>
 8004b26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b28:	e00a      	b.n	8004b40 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b2a:	f7fd f88f 	bl	8001c4c <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d903      	bls.n	8004b40 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e2c4      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
 8004b3c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b40:	4ba4      	ldr	r3, [pc, #656]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1ee      	bne.n	8004b2a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 80a9 	beq.w	8004cac <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b5a:	4b9e      	ldr	r3, [pc, #632]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b64:	4b9b      	ldr	r3, [pc, #620]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b68:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d007      	beq.n	8004b80 <HAL_RCC_OscConfig+0x2cc>
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b18      	cmp	r3, #24
 8004b74:	d13a      	bne.n	8004bec <HAL_RCC_OscConfig+0x338>
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f003 0303 	and.w	r3, r3, #3
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d135      	bne.n	8004bec <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b80:	4b94      	ldr	r3, [pc, #592]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <HAL_RCC_OscConfig+0x2e4>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	2b80      	cmp	r3, #128	; 0x80
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e296      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b98:	f7fd f886 	bl	8001ca8 <HAL_GetREVID>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d817      	bhi.n	8004bd6 <HAL_RCC_OscConfig+0x322>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	d108      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x30c>
 8004bae:	4b89      	ldr	r3, [pc, #548]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004bb6:	4a87      	ldr	r2, [pc, #540]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004bb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bbc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bbe:	e075      	b.n	8004cac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bc0:	4b84      	ldr	r3, [pc, #528]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	069b      	lsls	r3, r3, #26
 8004bce:	4981      	ldr	r1, [pc, #516]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bd4:	e06a      	b.n	8004cac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bd6:	4b7f      	ldr	r3, [pc, #508]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	061b      	lsls	r3, r3, #24
 8004be4:	497b      	ldr	r1, [pc, #492]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bea:	e05f      	b.n	8004cac <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d042      	beq.n	8004c7a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004bf4:	4b77      	ldr	r3, [pc, #476]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a76      	ldr	r2, [pc, #472]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c00:	f7fd f824 	bl	8001c4c <HAL_GetTick>
 8004c04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c08:	f7fd f820 	bl	8001c4c <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e255      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c1a:	4b6e      	ldr	r3, [pc, #440]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c26:	f7fd f83f 	bl	8001ca8 <HAL_GetREVID>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	f241 0303 	movw	r3, #4099	; 0x1003
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d817      	bhi.n	8004c64 <HAL_RCC_OscConfig+0x3b0>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d108      	bne.n	8004c4e <HAL_RCC_OscConfig+0x39a>
 8004c3c:	4b65      	ldr	r3, [pc, #404]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c44:	4a63      	ldr	r2, [pc, #396]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004c46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c4a:	6053      	str	r3, [r2, #4]
 8004c4c:	e02e      	b.n	8004cac <HAL_RCC_OscConfig+0x3f8>
 8004c4e:	4b61      	ldr	r3, [pc, #388]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	069b      	lsls	r3, r3, #26
 8004c5c:	495d      	ldr	r1, [pc, #372]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	604b      	str	r3, [r1, #4]
 8004c62:	e023      	b.n	8004cac <HAL_RCC_OscConfig+0x3f8>
 8004c64:	4b5b      	ldr	r3, [pc, #364]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	061b      	lsls	r3, r3, #24
 8004c72:	4958      	ldr	r1, [pc, #352]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60cb      	str	r3, [r1, #12]
 8004c78:	e018      	b.n	8004cac <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004c7a:	4b56      	ldr	r3, [pc, #344]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a55      	ldr	r2, [pc, #340]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c86:	f7fc ffe1 	bl	8001c4c <HAL_GetTick>
 8004c8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c8e:	f7fc ffdd 	bl	8001c4c <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e212      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ca0:	4b4c      	ldr	r3, [pc, #304]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1f0      	bne.n	8004c8e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d036      	beq.n	8004d26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d019      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc0:	4b44      	ldr	r3, [pc, #272]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc4:	4a43      	ldr	r2, [pc, #268]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ccc:	f7fc ffbe 	bl	8001c4c <HAL_GetTick>
 8004cd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cd4:	f7fc ffba 	bl	8001c4c <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e1ef      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ce6:	4b3b      	ldr	r3, [pc, #236]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0f0      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x420>
 8004cf2:	e018      	b.n	8004d26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf4:	4b37      	ldr	r3, [pc, #220]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf8:	4a36      	ldr	r2, [pc, #216]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004cfa:	f023 0301 	bic.w	r3, r3, #1
 8004cfe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d00:	f7fc ffa4 	bl	8001c4c <HAL_GetTick>
 8004d04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d08:	f7fc ffa0 	bl	8001c4c <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e1d5      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d1a:	4b2e      	ldr	r3, [pc, #184]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f0      	bne.n	8004d08 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d036      	beq.n	8004da0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d019      	beq.n	8004d6e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d3a:	4b26      	ldr	r3, [pc, #152]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a25      	ldr	r2, [pc, #148]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004d40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d46:	f7fc ff81 	bl	8001c4c <HAL_GetTick>
 8004d4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004d4e:	f7fc ff7d 	bl	8001c4c <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e1b2      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d60:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f0      	beq.n	8004d4e <HAL_RCC_OscConfig+0x49a>
 8004d6c:	e018      	b.n	8004da0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d6e:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a18      	ldr	r2, [pc, #96]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004d74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d7a:	f7fc ff67 	bl	8001c4c <HAL_GetTick>
 8004d7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004d82:	f7fc ff63 	bl	8001c4c <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e198      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d94:	4b0f      	ldr	r3, [pc, #60]	; (8004dd4 <HAL_RCC_OscConfig+0x520>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1f0      	bne.n	8004d82 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 8085 	beq.w	8004eb8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004dae:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <HAL_RCC_OscConfig+0x524>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a09      	ldr	r2, [pc, #36]	; (8004dd8 <HAL_RCC_OscConfig+0x524>)
 8004db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dba:	f7fc ff47 	bl	8001c4c <HAL_GetTick>
 8004dbe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dc0:	e00c      	b.n	8004ddc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004dc2:	f7fc ff43 	bl	8001c4c <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b64      	cmp	r3, #100	; 0x64
 8004dce:	d905      	bls.n	8004ddc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e178      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
 8004dd4:	58024400 	.word	0x58024400
 8004dd8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ddc:	4b96      	ldr	r3, [pc, #600]	; (8005038 <HAL_RCC_OscConfig+0x784>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0ec      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d106      	bne.n	8004dfe <HAL_RCC_OscConfig+0x54a>
 8004df0:	4b92      	ldr	r3, [pc, #584]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	4a91      	ldr	r2, [pc, #580]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfc:	e02d      	b.n	8004e5a <HAL_RCC_OscConfig+0x5a6>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10c      	bne.n	8004e20 <HAL_RCC_OscConfig+0x56c>
 8004e06:	4b8d      	ldr	r3, [pc, #564]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0a:	4a8c      	ldr	r2, [pc, #560]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004e0c:	f023 0301 	bic.w	r3, r3, #1
 8004e10:	6713      	str	r3, [r2, #112]	; 0x70
 8004e12:	4b8a      	ldr	r3, [pc, #552]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e16:	4a89      	ldr	r2, [pc, #548]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004e18:	f023 0304 	bic.w	r3, r3, #4
 8004e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e1e:	e01c      	b.n	8004e5a <HAL_RCC_OscConfig+0x5a6>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	2b05      	cmp	r3, #5
 8004e26:	d10c      	bne.n	8004e42 <HAL_RCC_OscConfig+0x58e>
 8004e28:	4b84      	ldr	r3, [pc, #528]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2c:	4a83      	ldr	r2, [pc, #524]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004e2e:	f043 0304 	orr.w	r3, r3, #4
 8004e32:	6713      	str	r3, [r2, #112]	; 0x70
 8004e34:	4b81      	ldr	r3, [pc, #516]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e38:	4a80      	ldr	r2, [pc, #512]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e40:	e00b      	b.n	8004e5a <HAL_RCC_OscConfig+0x5a6>
 8004e42:	4b7e      	ldr	r3, [pc, #504]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	4a7d      	ldr	r2, [pc, #500]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004e48:	f023 0301 	bic.w	r3, r3, #1
 8004e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e4e:	4b7b      	ldr	r3, [pc, #492]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e52:	4a7a      	ldr	r2, [pc, #488]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004e54:	f023 0304 	bic.w	r3, r3, #4
 8004e58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d015      	beq.n	8004e8e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e62:	f7fc fef3 	bl	8001c4c <HAL_GetTick>
 8004e66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e68:	e00a      	b.n	8004e80 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e6a:	f7fc feef 	bl	8001c4c <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e122      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e80:	4b6e      	ldr	r3, [pc, #440]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0ee      	beq.n	8004e6a <HAL_RCC_OscConfig+0x5b6>
 8004e8c:	e014      	b.n	8004eb8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8e:	f7fc fedd 	bl	8001c4c <HAL_GetTick>
 8004e92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e94:	e00a      	b.n	8004eac <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e96:	f7fc fed9 	bl	8001c4c <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e10c      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004eac:	4b63      	ldr	r3, [pc, #396]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1ee      	bne.n	8004e96 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 8101 	beq.w	80050c4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004ec2:	4b5e      	ldr	r3, [pc, #376]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eca:	2b18      	cmp	r3, #24
 8004ecc:	f000 80bc 	beq.w	8005048 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	f040 8095 	bne.w	8005004 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eda:	4b58      	ldr	r3, [pc, #352]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a57      	ldr	r2, [pc, #348]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004ee0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee6:	f7fc feb1 	bl	8001c4c <HAL_GetTick>
 8004eea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eec:	e008      	b.n	8004f00 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eee:	f7fc fead 	bl	8001c4c <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e0e2      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f00:	4b4e      	ldr	r3, [pc, #312]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1f0      	bne.n	8004eee <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f0c:	4b4b      	ldr	r3, [pc, #300]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004f0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f10:	4b4b      	ldr	r3, [pc, #300]	; (8005040 <HAL_RCC_OscConfig+0x78c>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f1c:	0112      	lsls	r2, r2, #4
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	4946      	ldr	r1, [pc, #280]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	628b      	str	r3, [r1, #40]	; 0x28
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f34:	3b01      	subs	r3, #1
 8004f36:	025b      	lsls	r3, r3, #9
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	3b01      	subs	r3, #1
 8004f42:	041b      	lsls	r3, r3, #16
 8004f44:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	061b      	lsls	r3, r3, #24
 8004f52:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f56:	4939      	ldr	r1, [pc, #228]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004f5c:	4b37      	ldr	r3, [pc, #220]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	4a36      	ldr	r2, [pc, #216]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004f62:	f023 0301 	bic.w	r3, r3, #1
 8004f66:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f68:	4b34      	ldr	r3, [pc, #208]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f6c:	4b35      	ldr	r3, [pc, #212]	; (8005044 <HAL_RCC_OscConfig+0x790>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f74:	00d2      	lsls	r2, r2, #3
 8004f76:	4931      	ldr	r1, [pc, #196]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f7c:	4b2f      	ldr	r3, [pc, #188]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	f023 020c 	bic.w	r2, r3, #12
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	492c      	ldr	r1, [pc, #176]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f8e:	4b2b      	ldr	r3, [pc, #172]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	f023 0202 	bic.w	r2, r3, #2
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9a:	4928      	ldr	r1, [pc, #160]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fa0:	4b26      	ldr	r3, [pc, #152]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	4a25      	ldr	r2, [pc, #148]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004faa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fac:	4b23      	ldr	r3, [pc, #140]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	4a22      	ldr	r2, [pc, #136]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004fb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004fb8:	4b20      	ldr	r3, [pc, #128]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	4a1f      	ldr	r2, [pc, #124]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004fbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004fc4:	4b1d      	ldr	r3, [pc, #116]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	4a1c      	ldr	r2, [pc, #112]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fd0:	4b1a      	ldr	r3, [pc, #104]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a19      	ldr	r2, [pc, #100]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fc fe36 	bl	8001c4c <HAL_GetTick>
 8004fe0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe4:	f7fc fe32 	bl	8001c4c <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e067      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ff6:	4b11      	ldr	r3, [pc, #68]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x730>
 8005002:	e05f      	b.n	80050c4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005004:	4b0d      	ldr	r3, [pc, #52]	; (800503c <HAL_RCC_OscConfig+0x788>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a0c      	ldr	r2, [pc, #48]	; (800503c <HAL_RCC_OscConfig+0x788>)
 800500a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800500e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005010:	f7fc fe1c 	bl	8001c4c <HAL_GetTick>
 8005014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005018:	f7fc fe18 	bl	8001c4c <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e04d      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800502a:	4b04      	ldr	r3, [pc, #16]	; (800503c <HAL_RCC_OscConfig+0x788>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0x764>
 8005036:	e045      	b.n	80050c4 <HAL_RCC_OscConfig+0x810>
 8005038:	58024800 	.word	0x58024800
 800503c:	58024400 	.word	0x58024400
 8005040:	fffffc0c 	.word	0xfffffc0c
 8005044:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005048:	4b21      	ldr	r3, [pc, #132]	; (80050d0 <HAL_RCC_OscConfig+0x81c>)
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800504e:	4b20      	ldr	r3, [pc, #128]	; (80050d0 <HAL_RCC_OscConfig+0x81c>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	2b01      	cmp	r3, #1
 800505a:	d031      	beq.n	80050c0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f003 0203 	and.w	r2, r3, #3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005066:	429a      	cmp	r2, r3
 8005068:	d12a      	bne.n	80050c0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	091b      	lsrs	r3, r3, #4
 800506e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005076:	429a      	cmp	r2, r3
 8005078:	d122      	bne.n	80050c0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005086:	429a      	cmp	r2, r3
 8005088:	d11a      	bne.n	80050c0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	0a5b      	lsrs	r3, r3, #9
 800508e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005096:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005098:	429a      	cmp	r2, r3
 800509a:	d111      	bne.n	80050c0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	0c1b      	lsrs	r3, r3, #16
 80050a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d108      	bne.n	80050c0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	0e1b      	lsrs	r3, r3, #24
 80050b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050bc:	429a      	cmp	r2, r3
 80050be:	d001      	beq.n	80050c4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e000      	b.n	80050c6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3730      	adds	r7, #48	; 0x30
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	58024400 	.word	0x58024400

080050d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e19c      	b.n	8005422 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050e8:	4b8a      	ldr	r3, [pc, #552]	; (8005314 <HAL_RCC_ClockConfig+0x240>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d910      	bls.n	8005118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f6:	4b87      	ldr	r3, [pc, #540]	; (8005314 <HAL_RCC_ClockConfig+0x240>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f023 020f 	bic.w	r2, r3, #15
 80050fe:	4985      	ldr	r1, [pc, #532]	; (8005314 <HAL_RCC_ClockConfig+0x240>)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	4313      	orrs	r3, r2
 8005104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005106:	4b83      	ldr	r3, [pc, #524]	; (8005314 <HAL_RCC_ClockConfig+0x240>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d001      	beq.n	8005118 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e184      	b.n	8005422 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	d010      	beq.n	8005146 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	4b7b      	ldr	r3, [pc, #492]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005130:	429a      	cmp	r2, r3
 8005132:	d908      	bls.n	8005146 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005134:	4b78      	ldr	r3, [pc, #480]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	4975      	ldr	r1, [pc, #468]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005142:	4313      	orrs	r3, r2
 8005144:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d010      	beq.n	8005174 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695a      	ldr	r2, [r3, #20]
 8005156:	4b70      	ldr	r3, [pc, #448]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800515e:	429a      	cmp	r2, r3
 8005160:	d908      	bls.n	8005174 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005162:	4b6d      	ldr	r3, [pc, #436]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	496a      	ldr	r1, [pc, #424]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005170:	4313      	orrs	r3, r2
 8005172:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0310 	and.w	r3, r3, #16
 800517c:	2b00      	cmp	r3, #0
 800517e:	d010      	beq.n	80051a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699a      	ldr	r2, [r3, #24]
 8005184:	4b64      	ldr	r3, [pc, #400]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800518c:	429a      	cmp	r2, r3
 800518e:	d908      	bls.n	80051a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005190:	4b61      	ldr	r3, [pc, #388]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	495e      	ldr	r1, [pc, #376]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d010      	beq.n	80051d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69da      	ldr	r2, [r3, #28]
 80051b2:	4b59      	ldr	r3, [pc, #356]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d908      	bls.n	80051d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80051be:	4b56      	ldr	r3, [pc, #344]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	4953      	ldr	r1, [pc, #332]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d010      	beq.n	80051fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	4b4d      	ldr	r3, [pc, #308]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d908      	bls.n	80051fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051ec:	4b4a      	ldr	r3, [pc, #296]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f023 020f 	bic.w	r2, r3, #15
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	4947      	ldr	r1, [pc, #284]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d055      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800520a:	4b43      	ldr	r3, [pc, #268]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	4940      	ldr	r1, [pc, #256]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005218:	4313      	orrs	r3, r2
 800521a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d107      	bne.n	8005234 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005224:	4b3c      	ldr	r3, [pc, #240]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d121      	bne.n	8005274 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0f6      	b.n	8005422 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b03      	cmp	r3, #3
 800523a:	d107      	bne.n	800524c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800523c:	4b36      	ldr	r3, [pc, #216]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d115      	bne.n	8005274 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0ea      	b.n	8005422 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d107      	bne.n	8005264 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005254:	4b30      	ldr	r3, [pc, #192]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525c:	2b00      	cmp	r3, #0
 800525e:	d109      	bne.n	8005274 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e0de      	b.n	8005422 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005264:	4b2c      	ldr	r3, [pc, #176]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e0d6      	b.n	8005422 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005274:	4b28      	ldr	r3, [pc, #160]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f023 0207 	bic.w	r2, r3, #7
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	4925      	ldr	r1, [pc, #148]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005282:	4313      	orrs	r3, r2
 8005284:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005286:	f7fc fce1 	bl	8001c4c <HAL_GetTick>
 800528a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528c:	e00a      	b.n	80052a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800528e:	f7fc fcdd 	bl	8001c4c <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	f241 3288 	movw	r2, #5000	; 0x1388
 800529c:	4293      	cmp	r3, r2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e0be      	b.n	8005422 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a4:	4b1c      	ldr	r3, [pc, #112]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d1eb      	bne.n	800528e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d010      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	4b14      	ldr	r3, [pc, #80]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d208      	bcs.n	80052e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d2:	4b11      	ldr	r3, [pc, #68]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	f023 020f 	bic.w	r2, r3, #15
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	490e      	ldr	r1, [pc, #56]	; (8005318 <HAL_RCC_ClockConfig+0x244>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052e4:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <HAL_RCC_ClockConfig+0x240>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 030f 	and.w	r3, r3, #15
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d214      	bcs.n	800531c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f2:	4b08      	ldr	r3, [pc, #32]	; (8005314 <HAL_RCC_ClockConfig+0x240>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f023 020f 	bic.w	r2, r3, #15
 80052fa:	4906      	ldr	r1, [pc, #24]	; (8005314 <HAL_RCC_ClockConfig+0x240>)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	4313      	orrs	r3, r2
 8005300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005302:	4b04      	ldr	r3, [pc, #16]	; (8005314 <HAL_RCC_ClockConfig+0x240>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d005      	beq.n	800531c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e086      	b.n	8005422 <HAL_RCC_ClockConfig+0x34e>
 8005314:	52002000 	.word	0x52002000
 8005318:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d010      	beq.n	800534a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	4b3f      	ldr	r3, [pc, #252]	; (800542c <HAL_RCC_ClockConfig+0x358>)
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005334:	429a      	cmp	r2, r3
 8005336:	d208      	bcs.n	800534a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005338:	4b3c      	ldr	r3, [pc, #240]	; (800542c <HAL_RCC_ClockConfig+0x358>)
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	4939      	ldr	r1, [pc, #228]	; (800542c <HAL_RCC_ClockConfig+0x358>)
 8005346:	4313      	orrs	r3, r2
 8005348:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b00      	cmp	r3, #0
 8005354:	d010      	beq.n	8005378 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695a      	ldr	r2, [r3, #20]
 800535a:	4b34      	ldr	r3, [pc, #208]	; (800542c <HAL_RCC_ClockConfig+0x358>)
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005362:	429a      	cmp	r2, r3
 8005364:	d208      	bcs.n	8005378 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005366:	4b31      	ldr	r3, [pc, #196]	; (800542c <HAL_RCC_ClockConfig+0x358>)
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	492e      	ldr	r1, [pc, #184]	; (800542c <HAL_RCC_ClockConfig+0x358>)
 8005374:	4313      	orrs	r3, r2
 8005376:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b00      	cmp	r3, #0
 8005382:	d010      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699a      	ldr	r2, [r3, #24]
 8005388:	4b28      	ldr	r3, [pc, #160]	; (800542c <HAL_RCC_ClockConfig+0x358>)
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005390:	429a      	cmp	r2, r3
 8005392:	d208      	bcs.n	80053a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005394:	4b25      	ldr	r3, [pc, #148]	; (800542c <HAL_RCC_ClockConfig+0x358>)
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	4922      	ldr	r1, [pc, #136]	; (800542c <HAL_RCC_ClockConfig+0x358>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d010      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69da      	ldr	r2, [r3, #28]
 80053b6:	4b1d      	ldr	r3, [pc, #116]	; (800542c <HAL_RCC_ClockConfig+0x358>)
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053be:	429a      	cmp	r2, r3
 80053c0:	d208      	bcs.n	80053d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80053c2:	4b1a      	ldr	r3, [pc, #104]	; (800542c <HAL_RCC_ClockConfig+0x358>)
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	4917      	ldr	r1, [pc, #92]	; (800542c <HAL_RCC_ClockConfig+0x358>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80053d4:	f000 f834 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 80053d8:	4601      	mov	r1, r0
 80053da:	4b14      	ldr	r3, [pc, #80]	; (800542c <HAL_RCC_ClockConfig+0x358>)
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	0a1b      	lsrs	r3, r3, #8
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	4a12      	ldr	r2, [pc, #72]	; (8005430 <HAL_RCC_ClockConfig+0x35c>)
 80053e6:	5cd3      	ldrb	r3, [r2, r3]
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	fa21 f303 	lsr.w	r3, r1, r3
 80053f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053f2:	4b0e      	ldr	r3, [pc, #56]	; (800542c <HAL_RCC_ClockConfig+0x358>)
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	4a0d      	ldr	r2, [pc, #52]	; (8005430 <HAL_RCC_ClockConfig+0x35c>)
 80053fc:	5cd3      	ldrb	r3, [r2, r3]
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
 8005408:	4a0a      	ldr	r2, [pc, #40]	; (8005434 <HAL_RCC_ClockConfig+0x360>)
 800540a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800540c:	4a0a      	ldr	r2, [pc, #40]	; (8005438 <HAL_RCC_ClockConfig+0x364>)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005412:	4b0a      	ldr	r3, [pc, #40]	; (800543c <HAL_RCC_ClockConfig+0x368>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f7fc fa8a 	bl	8001930 <HAL_InitTick>
 800541c:	4603      	mov	r3, r0
 800541e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005420:	7bfb      	ldrb	r3, [r7, #15]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	58024400 	.word	0x58024400
 8005430:	0800dbe4 	.word	0x0800dbe4
 8005434:	24000004 	.word	0x24000004
 8005438:	24000000 	.word	0x24000000
 800543c:	24000008 	.word	0x24000008

08005440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005440:	b480      	push	{r7}
 8005442:	b089      	sub	sp, #36	; 0x24
 8005444:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005446:	4baf      	ldr	r3, [pc, #700]	; (8005704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800544e:	2b18      	cmp	r3, #24
 8005450:	f200 814e 	bhi.w	80056f0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005454:	a201      	add	r2, pc, #4	; (adr r2, 800545c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	080054c1 	.word	0x080054c1
 8005460:	080056f1 	.word	0x080056f1
 8005464:	080056f1 	.word	0x080056f1
 8005468:	080056f1 	.word	0x080056f1
 800546c:	080056f1 	.word	0x080056f1
 8005470:	080056f1 	.word	0x080056f1
 8005474:	080056f1 	.word	0x080056f1
 8005478:	080056f1 	.word	0x080056f1
 800547c:	080054e7 	.word	0x080054e7
 8005480:	080056f1 	.word	0x080056f1
 8005484:	080056f1 	.word	0x080056f1
 8005488:	080056f1 	.word	0x080056f1
 800548c:	080056f1 	.word	0x080056f1
 8005490:	080056f1 	.word	0x080056f1
 8005494:	080056f1 	.word	0x080056f1
 8005498:	080056f1 	.word	0x080056f1
 800549c:	080054ed 	.word	0x080054ed
 80054a0:	080056f1 	.word	0x080056f1
 80054a4:	080056f1 	.word	0x080056f1
 80054a8:	080056f1 	.word	0x080056f1
 80054ac:	080056f1 	.word	0x080056f1
 80054b0:	080056f1 	.word	0x080056f1
 80054b4:	080056f1 	.word	0x080056f1
 80054b8:	080056f1 	.word	0x080056f1
 80054bc:	080054f3 	.word	0x080054f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054c0:	4b90      	ldr	r3, [pc, #576]	; (8005704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d009      	beq.n	80054e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054cc:	4b8d      	ldr	r3, [pc, #564]	; (8005704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	08db      	lsrs	r3, r3, #3
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	4a8c      	ldr	r2, [pc, #560]	; (8005708 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80054d8:	fa22 f303 	lsr.w	r3, r2, r3
 80054dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80054de:	e10a      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80054e0:	4b89      	ldr	r3, [pc, #548]	; (8005708 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80054e2:	61bb      	str	r3, [r7, #24]
    break;
 80054e4:	e107      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80054e6:	4b89      	ldr	r3, [pc, #548]	; (800570c <HAL_RCC_GetSysClockFreq+0x2cc>)
 80054e8:	61bb      	str	r3, [r7, #24]
    break;
 80054ea:	e104      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80054ec:	4b88      	ldr	r3, [pc, #544]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80054ee:	61bb      	str	r3, [r7, #24]
    break;
 80054f0:	e101      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054f2:	4b84      	ldr	r3, [pc, #528]	; (8005704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80054fc:	4b81      	ldr	r3, [pc, #516]	; (8005704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	091b      	lsrs	r3, r3, #4
 8005502:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005506:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005508:	4b7e      	ldr	r3, [pc, #504]	; (8005704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005512:	4b7c      	ldr	r3, [pc, #496]	; (8005704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005516:	08db      	lsrs	r3, r3, #3
 8005518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	fb02 f303 	mul.w	r3, r2, r3
 8005522:	ee07 3a90 	vmov	s15, r3
 8005526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 80da 	beq.w	80056ea <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d05a      	beq.n	80055f2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800553c:	2b01      	cmp	r3, #1
 800553e:	d302      	bcc.n	8005546 <HAL_RCC_GetSysClockFreq+0x106>
 8005540:	2b02      	cmp	r3, #2
 8005542:	d078      	beq.n	8005636 <HAL_RCC_GetSysClockFreq+0x1f6>
 8005544:	e099      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005546:	4b6f      	ldr	r3, [pc, #444]	; (8005704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d02d      	beq.n	80055ae <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005552:	4b6c      	ldr	r3, [pc, #432]	; (8005704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	08db      	lsrs	r3, r3, #3
 8005558:	f003 0303 	and.w	r3, r3, #3
 800555c:	4a6a      	ldr	r2, [pc, #424]	; (8005708 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800555e:	fa22 f303 	lsr.w	r3, r2, r3
 8005562:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	ee07 3a90 	vmov	s15, r3
 8005574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800557c:	4b61      	ldr	r3, [pc, #388]	; (8005704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005584:	ee07 3a90 	vmov	s15, r3
 8005588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800558c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005590:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005714 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005594:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005598:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800559c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80055ac:	e087      	b.n	80056be <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	ee07 3a90 	vmov	s15, r3
 80055b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005718 <HAL_RCC_GetSysClockFreq+0x2d8>
 80055bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055c0:	4b50      	ldr	r3, [pc, #320]	; (8005704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80055c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c8:	ee07 3a90 	vmov	s15, r3
 80055cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80055d4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005714 <HAL_RCC_GetSysClockFreq+0x2d4>
 80055d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055f0:	e065      	b.n	80056be <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	ee07 3a90 	vmov	s15, r3
 80055f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055fc:	eddf 6a47 	vldr	s13, [pc, #284]	; 800571c <HAL_RCC_GetSysClockFreq+0x2dc>
 8005600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005604:	4b3f      	ldr	r3, [pc, #252]	; (8005704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800560c:	ee07 3a90 	vmov	s15, r3
 8005610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005614:	ed97 6a02 	vldr	s12, [r7, #8]
 8005618:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005714 <HAL_RCC_GetSysClockFreq+0x2d4>
 800561c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800562c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005630:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005634:	e043      	b.n	80056be <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	ee07 3a90 	vmov	s15, r3
 800563c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005640:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005720 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005648:	4b2e      	ldr	r3, [pc, #184]	; (8005704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005650:	ee07 3a90 	vmov	s15, r3
 8005654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005658:	ed97 6a02 	vldr	s12, [r7, #8]
 800565c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005714 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005660:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005664:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005668:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800566c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005674:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005678:	e021      	b.n	80056be <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005684:	eddf 6a25 	vldr	s13, [pc, #148]	; 800571c <HAL_RCC_GetSysClockFreq+0x2dc>
 8005688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800568c:	4b1d      	ldr	r3, [pc, #116]	; (8005704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800569c:	ed97 6a02 	vldr	s12, [r7, #8]
 80056a0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005714 <HAL_RCC_GetSysClockFreq+0x2d4>
 80056a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056bc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80056be:	4b11      	ldr	r3, [pc, #68]	; (8005704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	0a5b      	lsrs	r3, r3, #9
 80056c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056c8:	3301      	adds	r3, #1
 80056ca:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	ee07 3a90 	vmov	s15, r3
 80056d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80056da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056e2:	ee17 3a90 	vmov	r3, s15
 80056e6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80056e8:	e005      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61bb      	str	r3, [r7, #24]
    break;
 80056ee:	e002      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80056f0:	4b06      	ldr	r3, [pc, #24]	; (800570c <HAL_RCC_GetSysClockFreq+0x2cc>)
 80056f2:	61bb      	str	r3, [r7, #24]
    break;
 80056f4:	bf00      	nop
  }

  return sysclockfreq;
 80056f6:	69bb      	ldr	r3, [r7, #24]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3724      	adds	r7, #36	; 0x24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	58024400 	.word	0x58024400
 8005708:	03d09000 	.word	0x03d09000
 800570c:	003d0900 	.word	0x003d0900
 8005710:	007a1200 	.word	0x007a1200
 8005714:	46000000 	.word	0x46000000
 8005718:	4c742400 	.word	0x4c742400
 800571c:	4a742400 	.word	0x4a742400
 8005720:	4af42400 	.word	0x4af42400

08005724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800572a:	f7ff fe89 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 800572e:	4601      	mov	r1, r0
 8005730:	4b10      	ldr	r3, [pc, #64]	; (8005774 <HAL_RCC_GetHCLKFreq+0x50>)
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	0a1b      	lsrs	r3, r3, #8
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	4a0f      	ldr	r2, [pc, #60]	; (8005778 <HAL_RCC_GetHCLKFreq+0x54>)
 800573c:	5cd3      	ldrb	r3, [r2, r3]
 800573e:	f003 031f 	and.w	r3, r3, #31
 8005742:	fa21 f303 	lsr.w	r3, r1, r3
 8005746:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005748:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <HAL_RCC_GetHCLKFreq+0x50>)
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	4a09      	ldr	r2, [pc, #36]	; (8005778 <HAL_RCC_GetHCLKFreq+0x54>)
 8005752:	5cd3      	ldrb	r3, [r2, r3]
 8005754:	f003 031f 	and.w	r3, r3, #31
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	fa22 f303 	lsr.w	r3, r2, r3
 800575e:	4a07      	ldr	r2, [pc, #28]	; (800577c <HAL_RCC_GetHCLKFreq+0x58>)
 8005760:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005762:	4a07      	ldr	r2, [pc, #28]	; (8005780 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005768:	4b04      	ldr	r3, [pc, #16]	; (800577c <HAL_RCC_GetHCLKFreq+0x58>)
 800576a:	681b      	ldr	r3, [r3, #0]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	58024400 	.word	0x58024400
 8005778:	0800dbe4 	.word	0x0800dbe4
 800577c:	24000004 	.word	0x24000004
 8005780:	24000000 	.word	0x24000000

08005784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005788:	f7ff ffcc 	bl	8005724 <HAL_RCC_GetHCLKFreq>
 800578c:	4601      	mov	r1, r0
 800578e:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	091b      	lsrs	r3, r3, #4
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	4a04      	ldr	r2, [pc, #16]	; (80057ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800579a:	5cd3      	ldrb	r3, [r2, r3]
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	58024400 	.word	0x58024400
 80057ac:	0800dbe4 	.word	0x0800dbe4

080057b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80057b4:	f7ff ffb6 	bl	8005724 <HAL_RCC_GetHCLKFreq>
 80057b8:	4601      	mov	r1, r0
 80057ba:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	0a1b      	lsrs	r3, r3, #8
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	4a04      	ldr	r2, [pc, #16]	; (80057d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057c6:	5cd3      	ldrb	r3, [r2, r3]
 80057c8:	f003 031f 	and.w	r3, r3, #31
 80057cc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	58024400 	.word	0x58024400
 80057d8:	0800dbe4 	.word	0x0800dbe4

080057dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	223f      	movs	r2, #63	; 0x3f
 80057ea:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80057ec:	4b1a      	ldr	r3, [pc, #104]	; (8005858 <HAL_RCC_GetClockConfig+0x7c>)
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	f003 0207 	and.w	r2, r3, #7
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80057f8:	4b17      	ldr	r3, [pc, #92]	; (8005858 <HAL_RCC_GetClockConfig+0x7c>)
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005804:	4b14      	ldr	r3, [pc, #80]	; (8005858 <HAL_RCC_GetClockConfig+0x7c>)
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	f003 020f 	and.w	r2, r3, #15
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005810:	4b11      	ldr	r3, [pc, #68]	; (8005858 <HAL_RCC_GetClockConfig+0x7c>)
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800581c:	4b0e      	ldr	r3, [pc, #56]	; (8005858 <HAL_RCC_GetClockConfig+0x7c>)
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005828:	4b0b      	ldr	r3, [pc, #44]	; (8005858 <HAL_RCC_GetClockConfig+0x7c>)
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005834:	4b08      	ldr	r3, [pc, #32]	; (8005858 <HAL_RCC_GetClockConfig+0x7c>)
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005840:	4b06      	ldr	r3, [pc, #24]	; (800585c <HAL_RCC_GetClockConfig+0x80>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 020f 	and.w	r2, r3, #15
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	601a      	str	r2, [r3, #0]
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	58024400 	.word	0x58024400
 800585c:	52002000 	.word	0x52002000

08005860 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005868:	2300      	movs	r3, #0
 800586a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800586c:	2300      	movs	r3, #0
 800586e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d03d      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005880:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005884:	d013      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800588a:	d802      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005890:	e01f      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005896:	d013      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005898:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800589c:	d01c      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800589e:	e018      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a0:	4baf      	ldr	r3, [pc, #700]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	4aae      	ldr	r2, [pc, #696]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80058ac:	e015      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3304      	adds	r3, #4
 80058b2:	2102      	movs	r1, #2
 80058b4:	4618      	mov	r0, r3
 80058b6:	f001 f96f 	bl	8006b98 <RCCEx_PLL2_Config>
 80058ba:	4603      	mov	r3, r0
 80058bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80058be:	e00c      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3324      	adds	r3, #36	; 0x24
 80058c4:	2102      	movs	r1, #2
 80058c6:	4618      	mov	r0, r3
 80058c8:	f001 fa18 	bl	8006cfc <RCCEx_PLL3_Config>
 80058cc:	4603      	mov	r3, r0
 80058ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80058d0:	e003      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	75fb      	strb	r3, [r7, #23]
      break;
 80058d6:	e000      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80058d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058da:	7dfb      	ldrb	r3, [r7, #23]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d109      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80058e0:	4b9f      	ldr	r3, [pc, #636]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ec:	499c      	ldr	r1, [pc, #624]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	650b      	str	r3, [r1, #80]	; 0x50
 80058f2:	e001      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
 80058f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d03d      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005908:	2b04      	cmp	r3, #4
 800590a:	d826      	bhi.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800590c:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005912:	bf00      	nop
 8005914:	08005929 	.word	0x08005929
 8005918:	08005937 	.word	0x08005937
 800591c:	08005949 	.word	0x08005949
 8005920:	08005961 	.word	0x08005961
 8005924:	08005961 	.word	0x08005961
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005928:	4b8d      	ldr	r3, [pc, #564]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	4a8c      	ldr	r2, [pc, #560]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800592e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005932:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005934:	e015      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	3304      	adds	r3, #4
 800593a:	2100      	movs	r1, #0
 800593c:	4618      	mov	r0, r3
 800593e:	f001 f92b 	bl	8006b98 <RCCEx_PLL2_Config>
 8005942:	4603      	mov	r3, r0
 8005944:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005946:	e00c      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3324      	adds	r3, #36	; 0x24
 800594c:	2100      	movs	r1, #0
 800594e:	4618      	mov	r0, r3
 8005950:	f001 f9d4 	bl	8006cfc <RCCEx_PLL3_Config>
 8005954:	4603      	mov	r3, r0
 8005956:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005958:	e003      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	75fb      	strb	r3, [r7, #23]
      break;
 800595e:	e000      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8005960:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005962:	7dfb      	ldrb	r3, [r7, #23]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d109      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005968:	4b7d      	ldr	r3, [pc, #500]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800596a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800596c:	f023 0207 	bic.w	r2, r3, #7
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005974:	497a      	ldr	r1, [pc, #488]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005976:	4313      	orrs	r3, r2
 8005978:	650b      	str	r3, [r1, #80]	; 0x50
 800597a:	e001      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597c:	7dfb      	ldrb	r3, [r7, #23]
 800597e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005988:	2b00      	cmp	r3, #0
 800598a:	d03e      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005990:	2b80      	cmp	r3, #128	; 0x80
 8005992:	d01c      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005994:	2b80      	cmp	r3, #128	; 0x80
 8005996:	d804      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005998:	2b00      	cmp	r3, #0
 800599a:	d008      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800599c:	2b40      	cmp	r3, #64	; 0x40
 800599e:	d00d      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80059a0:	e01e      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80059a2:	2bc0      	cmp	r3, #192	; 0xc0
 80059a4:	d01f      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80059a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059aa:	d01e      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80059ac:	e018      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ae:	4b6c      	ldr	r3, [pc, #432]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b2:	4a6b      	ldr	r2, [pc, #428]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80059ba:	e017      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3304      	adds	r3, #4
 80059c0:	2100      	movs	r1, #0
 80059c2:	4618      	mov	r0, r3
 80059c4:	f001 f8e8 	bl	8006b98 <RCCEx_PLL2_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80059cc:	e00e      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3324      	adds	r3, #36	; 0x24
 80059d2:	2100      	movs	r1, #0
 80059d4:	4618      	mov	r0, r3
 80059d6:	f001 f991 	bl	8006cfc <RCCEx_PLL3_Config>
 80059da:	4603      	mov	r3, r0
 80059dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80059de:	e005      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	75fb      	strb	r3, [r7, #23]
      break;
 80059e4:	e002      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80059e6:	bf00      	nop
 80059e8:	e000      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80059ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d109      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80059f2:	4b5b      	ldr	r3, [pc, #364]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fe:	4958      	ldr	r1, [pc, #352]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	650b      	str	r3, [r1, #80]	; 0x50
 8005a04:	e001      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
 8005a08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d044      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a20:	d01f      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a26:	d805      	bhi.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a30:	d00e      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005a32:	e01f      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005a34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a38:	d01f      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005a3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a3e:	d01e      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005a40:	e018      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a42:	4b47      	ldr	r3, [pc, #284]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	4a46      	ldr	r2, [pc, #280]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a4e:	e017      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3304      	adds	r3, #4
 8005a54:	2100      	movs	r1, #0
 8005a56:	4618      	mov	r0, r3
 8005a58:	f001 f89e 	bl	8006b98 <RCCEx_PLL2_Config>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a60:	e00e      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	3324      	adds	r3, #36	; 0x24
 8005a66:	2100      	movs	r1, #0
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f001 f947 	bl	8006cfc <RCCEx_PLL3_Config>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a72:	e005      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	75fb      	strb	r3, [r7, #23]
      break;
 8005a78:	e002      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005a7a:	bf00      	nop
 8005a7c:	e000      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a80:	7dfb      	ldrb	r3, [r7, #23]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005a86:	4b36      	ldr	r3, [pc, #216]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a94:	4932      	ldr	r1, [pc, #200]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	658b      	str	r3, [r1, #88]	; 0x58
 8005a9a:	e001      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a9c:	7dfb      	ldrb	r3, [r7, #23]
 8005a9e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d044      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ab2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ab6:	d01f      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005ab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005abc:	d805      	bhi.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005ac2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ac6:	d00e      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005ac8:	e01f      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005aca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ace:	d01f      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005ad0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ad4:	d01e      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005ad6:	e018      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ad8:	4b21      	ldr	r3, [pc, #132]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	4a20      	ldr	r2, [pc, #128]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ae4:	e017      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	2100      	movs	r1, #0
 8005aec:	4618      	mov	r0, r3
 8005aee:	f001 f853 	bl	8006b98 <RCCEx_PLL2_Config>
 8005af2:	4603      	mov	r3, r0
 8005af4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005af6:	e00e      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	3324      	adds	r3, #36	; 0x24
 8005afc:	2100      	movs	r1, #0
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 f8fc 	bl	8006cfc <RCCEx_PLL3_Config>
 8005b04:	4603      	mov	r3, r0
 8005b06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b08:	e005      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b0e:	e002      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005b10:	bf00      	nop
 8005b12:	e000      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b16:	7dfb      	ldrb	r3, [r7, #23]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10a      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b1c:	4b10      	ldr	r3, [pc, #64]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b20:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b2a:	490d      	ldr	r1, [pc, #52]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	658b      	str	r3, [r1, #88]	; 0x58
 8005b30:	e001      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
 8005b34:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d035      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b46:	2b10      	cmp	r3, #16
 8005b48:	d00c      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005b4a:	2b10      	cmp	r3, #16
 8005b4c:	d802      	bhi.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d01b      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005b52:	e017      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d00c      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005b58:	2b30      	cmp	r3, #48	; 0x30
 8005b5a:	d018      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005b5c:	e012      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005b5e:	bf00      	nop
 8005b60:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b64:	4baf      	ldr	r3, [pc, #700]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	4aae      	ldr	r2, [pc, #696]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005b70:	e00e      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	3304      	adds	r3, #4
 8005b76:	2102      	movs	r1, #2
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f001 f80d 	bl	8006b98 <RCCEx_PLL2_Config>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005b82:	e005      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	75fb      	strb	r3, [r7, #23]
      break;
 8005b88:	e002      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005b8a:	bf00      	nop
 8005b8c:	e000      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b90:	7dfb      	ldrb	r3, [r7, #23]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d109      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b96:	4ba3      	ldr	r3, [pc, #652]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba2:	49a0      	ldr	r1, [pc, #640]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ba8:	e001      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
 8005bac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d042      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc2:	d01f      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc8:	d805      	bhi.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd2:	d00e      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005bd4:	e01f      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005bd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bda:	d01f      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005be0:	d01e      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005be2:	e018      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be4:	4b8f      	ldr	r3, [pc, #572]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	4a8e      	ldr	r2, [pc, #568]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005bf0:	e017      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 ffcd 	bl	8006b98 <RCCEx_PLL2_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c02:	e00e      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3324      	adds	r3, #36	; 0x24
 8005c08:	2100      	movs	r1, #0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f001 f876 	bl	8006cfc <RCCEx_PLL3_Config>
 8005c10:	4603      	mov	r3, r0
 8005c12:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c14:	e005      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	75fb      	strb	r3, [r7, #23]
      break;
 8005c1a:	e002      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005c1c:	bf00      	nop
 8005c1e:	e000      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d109      	bne.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c28:	4b7e      	ldr	r3, [pc, #504]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c2c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c34:	497b      	ldr	r1, [pc, #492]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	650b      	str	r3, [r1, #80]	; 0x50
 8005c3a:	e001      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
 8005c3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d042      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c54:	d01b      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005c56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c5a:	d805      	bhi.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d022      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c64:	d00a      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005c66:	e01b      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005c68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c6c:	d01d      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005c6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c72:	d01c      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005c74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c78:	d01b      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005c7a:	e011      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	2101      	movs	r1, #1
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 ff88 	bl	8006b98 <RCCEx_PLL2_Config>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c8c:	e012      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	3324      	adds	r3, #36	; 0x24
 8005c92:	2101      	movs	r1, #1
 8005c94:	4618      	mov	r0, r3
 8005c96:	f001 f831 	bl	8006cfc <RCCEx_PLL3_Config>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c9e:	e009      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca4:	e006      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005ca6:	bf00      	nop
 8005ca8:	e004      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005caa:	bf00      	nop
 8005cac:	e002      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005cae:	bf00      	nop
 8005cb0:	e000      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cb4:	7dfb      	ldrb	r3, [r7, #23]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d109      	bne.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005cba:	4b5a      	ldr	r3, [pc, #360]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cbe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc6:	4957      	ldr	r1, [pc, #348]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	650b      	str	r3, [r1, #80]	; 0x50
 8005ccc:	e001      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
 8005cd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d044      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ce8:	d01b      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cee:	d805      	bhi.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d022      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005cf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cf8:	d00a      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005cfa:	e01b      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d00:	d01d      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d06:	d01c      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005d08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d0c:	d01b      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005d0e:	e011      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3304      	adds	r3, #4
 8005d14:	2101      	movs	r1, #1
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 ff3e 	bl	8006b98 <RCCEx_PLL2_Config>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d20:	e012      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3324      	adds	r3, #36	; 0x24
 8005d26:	2101      	movs	r1, #1
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 ffe7 	bl	8006cfc <RCCEx_PLL3_Config>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d32:	e009      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	75fb      	strb	r3, [r7, #23]
      break;
 8005d38:	e006      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005d3a:	bf00      	nop
 8005d3c:	e004      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005d3e:	bf00      	nop
 8005d40:	e002      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005d42:	bf00      	nop
 8005d44:	e000      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10a      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005d4e:	4b35      	ldr	r3, [pc, #212]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d52:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d5c:	4931      	ldr	r1, [pc, #196]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	658b      	str	r3, [r1, #88]	; 0x58
 8005d62:	e001      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
 8005d66:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d02d      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d7c:	d005      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d82:	d009      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d013      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005d88:	e00f      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d8a:	4b26      	ldr	r3, [pc, #152]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	4a25      	ldr	r2, [pc, #148]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d96:	e00c      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fefa 	bl	8006b98 <RCCEx_PLL2_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005da8:	e003      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	75fb      	strb	r3, [r7, #23]
      break;
 8005dae:	e000      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005db2:	7dfb      	ldrb	r3, [r7, #23]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d109      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005db8:	4b1a      	ldr	r3, [pc, #104]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dbc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dc4:	4917      	ldr	r1, [pc, #92]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	650b      	str	r3, [r1, #80]	; 0x50
 8005dca:	e001      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
 8005dce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d035      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	d81b      	bhi.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005de4:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dea:	bf00      	nop
 8005dec:	08005e29 	.word	0x08005e29
 8005df0:	08005dfd 	.word	0x08005dfd
 8005df4:	08005e0b 	.word	0x08005e0b
 8005df8:	08005e29 	.word	0x08005e29
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dfc:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	4a08      	ldr	r2, [pc, #32]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e08:	e00f      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	2102      	movs	r1, #2
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 fec1 	bl	8006b98 <RCCEx_PLL2_Config>
 8005e16:	4603      	mov	r3, r0
 8005e18:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e1a:	e006      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e20:	e003      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005e22:	bf00      	nop
 8005e24:	58024400 	.word	0x58024400
      break;
 8005e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d109      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005e30:	4bba      	ldr	r3, [pc, #744]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e34:	f023 0203 	bic.w	r2, r3, #3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3c:	49b7      	ldr	r1, [pc, #732]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e42:	e001      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
 8005e46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 8086 	beq.w	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e56:	4bb2      	ldr	r3, [pc, #712]	; (8006120 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4ab1      	ldr	r2, [pc, #708]	; (8006120 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e62:	f7fb fef3 	bl	8001c4c <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e68:	e009      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e6a:	f7fb feef 	bl	8001c4c <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b64      	cmp	r3, #100	; 0x64
 8005e76:	d902      	bls.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	75fb      	strb	r3, [r7, #23]
        break;
 8005e7c:	e005      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e7e:	4ba8      	ldr	r3, [pc, #672]	; (8006120 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0ef      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d166      	bne.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e90:	4ba2      	ldr	r3, [pc, #648]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e9a:	4053      	eors	r3, r2
 8005e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d013      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ea4:	4b9d      	ldr	r3, [pc, #628]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eac:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005eae:	4b9b      	ldr	r3, [pc, #620]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb2:	4a9a      	ldr	r2, [pc, #616]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eb8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005eba:	4b98      	ldr	r3, [pc, #608]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebe:	4a97      	ldr	r2, [pc, #604]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ec4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005ec6:	4a95      	ldr	r2, [pc, #596]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ed6:	d115      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed8:	f7fb feb8 	bl	8001c4c <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ede:	e00b      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ee0:	f7fb feb4 	bl	8001c4c <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d902      	bls.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	75fb      	strb	r3, [r7, #23]
            break;
 8005ef6:	e005      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ef8:	4b88      	ldr	r3, [pc, #544]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0ed      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d126      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f18:	d10d      	bne.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005f1a:	4b80      	ldr	r3, [pc, #512]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f28:	0919      	lsrs	r1, r3, #4
 8005f2a:	4b7e      	ldr	r3, [pc, #504]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005f2c:	400b      	ands	r3, r1
 8005f2e:	497b      	ldr	r1, [pc, #492]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	610b      	str	r3, [r1, #16]
 8005f34:	e005      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005f36:	4b79      	ldr	r3, [pc, #484]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	4a78      	ldr	r2, [pc, #480]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005f40:	6113      	str	r3, [r2, #16]
 8005f42:	4b76      	ldr	r3, [pc, #472]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f50:	4972      	ldr	r1, [pc, #456]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	670b      	str	r3, [r1, #112]	; 0x70
 8005f56:	e004      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f58:	7dfb      	ldrb	r3, [r7, #23]
 8005f5a:	75bb      	strb	r3, [r7, #22]
 8005f5c:	e001      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
 8005f60:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d07d      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f72:	2b28      	cmp	r3, #40	; 0x28
 8005f74:	d866      	bhi.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005f76:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7c:	0800604b 	.word	0x0800604b
 8005f80:	08006045 	.word	0x08006045
 8005f84:	08006045 	.word	0x08006045
 8005f88:	08006045 	.word	0x08006045
 8005f8c:	08006045 	.word	0x08006045
 8005f90:	08006045 	.word	0x08006045
 8005f94:	08006045 	.word	0x08006045
 8005f98:	08006045 	.word	0x08006045
 8005f9c:	08006021 	.word	0x08006021
 8005fa0:	08006045 	.word	0x08006045
 8005fa4:	08006045 	.word	0x08006045
 8005fa8:	08006045 	.word	0x08006045
 8005fac:	08006045 	.word	0x08006045
 8005fb0:	08006045 	.word	0x08006045
 8005fb4:	08006045 	.word	0x08006045
 8005fb8:	08006045 	.word	0x08006045
 8005fbc:	08006033 	.word	0x08006033
 8005fc0:	08006045 	.word	0x08006045
 8005fc4:	08006045 	.word	0x08006045
 8005fc8:	08006045 	.word	0x08006045
 8005fcc:	08006045 	.word	0x08006045
 8005fd0:	08006045 	.word	0x08006045
 8005fd4:	08006045 	.word	0x08006045
 8005fd8:	08006045 	.word	0x08006045
 8005fdc:	0800604b 	.word	0x0800604b
 8005fe0:	08006045 	.word	0x08006045
 8005fe4:	08006045 	.word	0x08006045
 8005fe8:	08006045 	.word	0x08006045
 8005fec:	08006045 	.word	0x08006045
 8005ff0:	08006045 	.word	0x08006045
 8005ff4:	08006045 	.word	0x08006045
 8005ff8:	08006045 	.word	0x08006045
 8005ffc:	0800604b 	.word	0x0800604b
 8006000:	08006045 	.word	0x08006045
 8006004:	08006045 	.word	0x08006045
 8006008:	08006045 	.word	0x08006045
 800600c:	08006045 	.word	0x08006045
 8006010:	08006045 	.word	0x08006045
 8006014:	08006045 	.word	0x08006045
 8006018:	08006045 	.word	0x08006045
 800601c:	0800604b 	.word	0x0800604b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3304      	adds	r3, #4
 8006024:	2101      	movs	r1, #1
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fdb6 	bl	8006b98 <RCCEx_PLL2_Config>
 800602c:	4603      	mov	r3, r0
 800602e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006030:	e00c      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	3324      	adds	r3, #36	; 0x24
 8006036:	2101      	movs	r1, #1
 8006038:	4618      	mov	r0, r3
 800603a:	f000 fe5f 	bl	8006cfc <RCCEx_PLL3_Config>
 800603e:	4603      	mov	r3, r0
 8006040:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006042:	e003      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	75fb      	strb	r3, [r7, #23]
      break;
 8006048:	e000      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800604a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800604c:	7dfb      	ldrb	r3, [r7, #23]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d109      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006052:	4b32      	ldr	r3, [pc, #200]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006056:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800605e:	492f      	ldr	r1, [pc, #188]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006060:	4313      	orrs	r3, r2
 8006062:	654b      	str	r3, [r1, #84]	; 0x54
 8006064:	e001      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006066:	7dfb      	ldrb	r3, [r7, #23]
 8006068:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d037      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800607a:	2b05      	cmp	r3, #5
 800607c:	d820      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800607e:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006084:	080060c7 	.word	0x080060c7
 8006088:	0800609d 	.word	0x0800609d
 800608c:	080060af 	.word	0x080060af
 8006090:	080060c7 	.word	0x080060c7
 8006094:	080060c7 	.word	0x080060c7
 8006098:	080060c7 	.word	0x080060c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3304      	adds	r3, #4
 80060a0:	2101      	movs	r1, #1
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fd78 	bl	8006b98 <RCCEx_PLL2_Config>
 80060a8:	4603      	mov	r3, r0
 80060aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80060ac:	e00c      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3324      	adds	r3, #36	; 0x24
 80060b2:	2101      	movs	r1, #1
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 fe21 	bl	8006cfc <RCCEx_PLL3_Config>
 80060ba:	4603      	mov	r3, r0
 80060bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80060be:	e003      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	75fb      	strb	r3, [r7, #23]
      break;
 80060c4:	e000      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80060c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060c8:	7dfb      	ldrb	r3, [r7, #23]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d109      	bne.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80060ce:	4b13      	ldr	r3, [pc, #76]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80060d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d2:	f023 0207 	bic.w	r2, r3, #7
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060da:	4910      	ldr	r1, [pc, #64]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	654b      	str	r3, [r1, #84]	; 0x54
 80060e0:	e001      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e2:	7dfb      	ldrb	r3, [r7, #23]
 80060e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0304 	and.w	r3, r3, #4
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d040      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f8:	2b05      	cmp	r3, #5
 80060fa:	d827      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80060fc:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80060fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006102:	bf00      	nop
 8006104:	08006153 	.word	0x08006153
 8006108:	08006129 	.word	0x08006129
 800610c:	0800613b 	.word	0x0800613b
 8006110:	08006153 	.word	0x08006153
 8006114:	08006153 	.word	0x08006153
 8006118:	08006153 	.word	0x08006153
 800611c:	58024400 	.word	0x58024400
 8006120:	58024800 	.word	0x58024800
 8006124:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3304      	adds	r3, #4
 800612c:	2101      	movs	r1, #1
 800612e:	4618      	mov	r0, r3
 8006130:	f000 fd32 	bl	8006b98 <RCCEx_PLL2_Config>
 8006134:	4603      	mov	r3, r0
 8006136:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006138:	e00c      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3324      	adds	r3, #36	; 0x24
 800613e:	2101      	movs	r1, #1
 8006140:	4618      	mov	r0, r3
 8006142:	f000 fddb 	bl	8006cfc <RCCEx_PLL3_Config>
 8006146:	4603      	mov	r3, r0
 8006148:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800614a:	e003      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	75fb      	strb	r3, [r7, #23]
      break;
 8006150:	e000      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10a      	bne.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800615a:	4bb2      	ldr	r3, [pc, #712]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800615c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615e:	f023 0207 	bic.w	r2, r3, #7
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006168:	49ae      	ldr	r1, [pc, #696]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800616a:	4313      	orrs	r3, r2
 800616c:	658b      	str	r3, [r1, #88]	; 0x58
 800616e:	e001      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006170:	7dfb      	ldrb	r3, [r7, #23]
 8006172:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	2b00      	cmp	r3, #0
 800617e:	d044      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800618a:	d01b      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800618c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006190:	d805      	bhi.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006192:	2b00      	cmp	r3, #0
 8006194:	d022      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800619a:	d00a      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800619c:	e01b      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800619e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a2:	d01d      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80061a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061a8:	d01c      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80061aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061ae:	d01b      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80061b0:	e011      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	3304      	adds	r3, #4
 80061b6:	2100      	movs	r1, #0
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fced 	bl	8006b98 <RCCEx_PLL2_Config>
 80061be:	4603      	mov	r3, r0
 80061c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80061c2:	e012      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3324      	adds	r3, #36	; 0x24
 80061c8:	2102      	movs	r1, #2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fd96 	bl	8006cfc <RCCEx_PLL3_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80061d4:	e009      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	75fb      	strb	r3, [r7, #23]
      break;
 80061da:	e006      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80061dc:	bf00      	nop
 80061de:	e004      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80061e0:	bf00      	nop
 80061e2:	e002      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80061e4:	bf00      	nop
 80061e6:	e000      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80061e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10a      	bne.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061f0:	4b8c      	ldr	r3, [pc, #560]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80061f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061fe:	4989      	ldr	r1, [pc, #548]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006200:	4313      	orrs	r3, r2
 8006202:	654b      	str	r3, [r1, #84]	; 0x54
 8006204:	e001      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006206:	7dfb      	ldrb	r3, [r7, #23]
 8006208:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006212:	2b00      	cmp	r3, #0
 8006214:	d044      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800621c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006220:	d01b      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006226:	d805      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006228:	2b00      	cmp	r3, #0
 800622a:	d022      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800622c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006230:	d00a      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006232:	e01b      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006238:	d01d      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800623a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800623e:	d01c      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006240:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006244:	d01b      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006246:	e011      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3304      	adds	r3, #4
 800624c:	2100      	movs	r1, #0
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fca2 	bl	8006b98 <RCCEx_PLL2_Config>
 8006254:	4603      	mov	r3, r0
 8006256:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006258:	e012      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	3324      	adds	r3, #36	; 0x24
 800625e:	2102      	movs	r1, #2
 8006260:	4618      	mov	r0, r3
 8006262:	f000 fd4b 	bl	8006cfc <RCCEx_PLL3_Config>
 8006266:	4603      	mov	r3, r0
 8006268:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800626a:	e009      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	75fb      	strb	r3, [r7, #23]
      break;
 8006270:	e006      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006272:	bf00      	nop
 8006274:	e004      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006276:	bf00      	nop
 8006278:	e002      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800627a:	bf00      	nop
 800627c:	e000      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800627e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006280:	7dfb      	ldrb	r3, [r7, #23]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10a      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006286:	4b67      	ldr	r3, [pc, #412]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006294:	4963      	ldr	r1, [pc, #396]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006296:	4313      	orrs	r3, r2
 8006298:	658b      	str	r3, [r1, #88]	; 0x58
 800629a:	e001      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d044      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062b6:	d01b      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80062b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062bc:	d805      	bhi.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d022      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80062c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c6:	d00a      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80062c8:	e01b      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80062ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ce:	d01d      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80062d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80062d4:	d01c      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80062d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80062da:	d01b      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80062dc:	e011      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	3304      	adds	r3, #4
 80062e2:	2100      	movs	r1, #0
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fc57 	bl	8006b98 <RCCEx_PLL2_Config>
 80062ea:	4603      	mov	r3, r0
 80062ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80062ee:	e012      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3324      	adds	r3, #36	; 0x24
 80062f4:	2102      	movs	r1, #2
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fd00 	bl	8006cfc <RCCEx_PLL3_Config>
 80062fc:	4603      	mov	r3, r0
 80062fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006300:	e009      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	75fb      	strb	r3, [r7, #23]
      break;
 8006306:	e006      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006308:	bf00      	nop
 800630a:	e004      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800630c:	bf00      	nop
 800630e:	e002      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006310:	bf00      	nop
 8006312:	e000      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006316:	7dfb      	ldrb	r3, [r7, #23]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10a      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800631c:	4b41      	ldr	r3, [pc, #260]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800631e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006320:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800632a:	493e      	ldr	r1, [pc, #248]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800632c:	4313      	orrs	r3, r2
 800632e:	658b      	str	r3, [r1, #88]	; 0x58
 8006330:	e001      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006332:	7dfb      	ldrb	r3, [r7, #23]
 8006334:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0308 	and.w	r3, r3, #8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d01a      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634c:	d10a      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3324      	adds	r3, #36	; 0x24
 8006352:	2102      	movs	r1, #2
 8006354:	4618      	mov	r0, r3
 8006356:	f000 fcd1 	bl	8006cfc <RCCEx_PLL3_Config>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006364:	4b2f      	ldr	r3, [pc, #188]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006368:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006372:	492c      	ldr	r1, [pc, #176]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006374:	4313      	orrs	r3, r2
 8006376:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0310 	and.w	r3, r3, #16
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01a      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800638a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800638e:	d10a      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3324      	adds	r3, #36	; 0x24
 8006394:	2102      	movs	r1, #2
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fcb0 	bl	8006cfc <RCCEx_PLL3_Config>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063a6:	4b1f      	ldr	r3, [pc, #124]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80063a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063b4:	491b      	ldr	r1, [pc, #108]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d032      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d0:	d00d      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80063d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063d6:	d016      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d111      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3304      	adds	r3, #4
 80063e0:	2100      	movs	r1, #0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fbd8 	bl	8006b98 <RCCEx_PLL2_Config>
 80063e8:	4603      	mov	r3, r0
 80063ea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80063ec:	e00c      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3324      	adds	r3, #36	; 0x24
 80063f2:	2102      	movs	r1, #2
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 fc81 	bl	8006cfc <RCCEx_PLL3_Config>
 80063fa:	4603      	mov	r3, r0
 80063fc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80063fe:	e003      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	75fb      	strb	r3, [r7, #23]
      break;
 8006404:	e000      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006408:	7dfb      	ldrb	r3, [r7, #23]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10c      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800640e:	4b05      	ldr	r3, [pc, #20]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006412:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800641c:	4901      	ldr	r1, [pc, #4]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800641e:	4313      	orrs	r3, r2
 8006420:	658b      	str	r3, [r1, #88]	; 0x58
 8006422:	e003      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006424:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006428:	7dfb      	ldrb	r3, [r7, #23]
 800642a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d02f      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800643e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006442:	d00c      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006444:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006448:	d015      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800644a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800644e:	d10f      	bne.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006450:	4b79      	ldr	r3, [pc, #484]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	4a78      	ldr	r2, [pc, #480]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800645a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800645c:	e00c      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3324      	adds	r3, #36	; 0x24
 8006462:	2101      	movs	r1, #1
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fc49 	bl	8006cfc <RCCEx_PLL3_Config>
 800646a:	4603      	mov	r3, r0
 800646c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800646e:	e003      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	75fb      	strb	r3, [r7, #23]
      break;
 8006474:	e000      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006478:	7dfb      	ldrb	r3, [r7, #23]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10a      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800647e:	4b6e      	ldr	r3, [pc, #440]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800648c:	496a      	ldr	r1, [pc, #424]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800648e:	4313      	orrs	r3, r2
 8006490:	654b      	str	r3, [r1, #84]	; 0x54
 8006492:	e001      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006494:	7dfb      	ldrb	r3, [r7, #23]
 8006496:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d029      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80064ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b0:	d007      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80064b2:	e00f      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064b4:	4b60      	ldr	r3, [pc, #384]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	4a5f      	ldr	r2, [pc, #380]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80064ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80064c0:	e00b      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3304      	adds	r3, #4
 80064c6:	2102      	movs	r1, #2
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 fb65 	bl	8006b98 <RCCEx_PLL2_Config>
 80064ce:	4603      	mov	r3, r0
 80064d0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80064d2:	e002      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	75fb      	strb	r3, [r7, #23]
      break;
 80064d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064da:	7dfb      	ldrb	r3, [r7, #23]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d109      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80064e0:	4b55      	ldr	r3, [pc, #340]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80064e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ec:	4952      	ldr	r1, [pc, #328]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80064f2:	e001      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f4:	7dfb      	ldrb	r3, [r7, #23]
 80064f6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3324      	adds	r3, #36	; 0x24
 8006508:	2102      	movs	r1, #2
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fbf6 	bl	8006cfc <RCCEx_PLL3_Config>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d02f      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800652a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800652e:	d00c      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006534:	d802      	bhi.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006536:	2b00      	cmp	r3, #0
 8006538:	d011      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800653a:	e00d      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800653c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006540:	d00f      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006546:	d00e      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006548:	e006      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800654a:	4b3b      	ldr	r3, [pc, #236]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800654c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654e:	4a3a      	ldr	r2, [pc, #232]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006554:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006556:	e007      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	75fb      	strb	r3, [r7, #23]
      break;
 800655c:	e004      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800655e:	bf00      	nop
 8006560:	e002      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006562:	bf00      	nop
 8006564:	e000      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006566:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006568:	7dfb      	ldrb	r3, [r7, #23]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d109      	bne.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800656e:	4b32      	ldr	r3, [pc, #200]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006572:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800657a:	492f      	ldr	r1, [pc, #188]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800657c:	4313      	orrs	r3, r2
 800657e:	654b      	str	r3, [r1, #84]	; 0x54
 8006580:	e001      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006582:	7dfb      	ldrb	r3, [r7, #23]
 8006584:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d008      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006592:	4b29      	ldr	r3, [pc, #164]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006596:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659e:	4926      	ldr	r1, [pc, #152]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d009      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80065b0:	4b21      	ldr	r3, [pc, #132]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80065be:	491e      	ldr	r1, [pc, #120]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d008      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065d0:	4b19      	ldr	r3, [pc, #100]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80065d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065dc:	4916      	ldr	r1, [pc, #88]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00d      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065ee:	4b12      	ldr	r3, [pc, #72]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	4a11      	ldr	r2, [pc, #68]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80065f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065f8:	6113      	str	r3, [r2, #16]
 80065fa:	4b0f      	ldr	r3, [pc, #60]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80065fc:	691a      	ldr	r2, [r3, #16]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006604:	490c      	ldr	r1, [pc, #48]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006606:	4313      	orrs	r3, r2
 8006608:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	da08      	bge.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006612:	4b09      	ldr	r3, [pc, #36]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006616:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661e:	4906      	ldr	r1, [pc, #24]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006620:	4313      	orrs	r3, r2
 8006622:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006624:	7dbb      	ldrb	r3, [r7, #22]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	e000      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
}
 8006630:	4618      	mov	r0, r3
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	58024400 	.word	0x58024400

0800663c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006640:	f7ff f870 	bl	8005724 <HAL_RCC_GetHCLKFreq>
 8006644:	4601      	mov	r1, r0
 8006646:	4b06      	ldr	r3, [pc, #24]	; (8006660 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	091b      	lsrs	r3, r3, #4
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	4a04      	ldr	r2, [pc, #16]	; (8006664 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006652:	5cd3      	ldrb	r3, [r2, r3]
 8006654:	f003 031f 	and.w	r3, r3, #31
 8006658:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800665c:	4618      	mov	r0, r3
 800665e:	bd80      	pop	{r7, pc}
 8006660:	58024400 	.word	0x58024400
 8006664:	0800dbe4 	.word	0x0800dbe4

08006668 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006668:	b480      	push	{r7}
 800666a:	b089      	sub	sp, #36	; 0x24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006670:	4b9d      	ldr	r3, [pc, #628]	; (80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	f003 0303 	and.w	r3, r3, #3
 8006678:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800667a:	4b9b      	ldr	r3, [pc, #620]	; (80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800667c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667e:	0b1b      	lsrs	r3, r3, #12
 8006680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006684:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006686:	4b98      	ldr	r3, [pc, #608]	; (80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668a:	091b      	lsrs	r3, r3, #4
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006692:	4b95      	ldr	r3, [pc, #596]	; (80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006696:	08db      	lsrs	r3, r3, #3
 8006698:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	fb02 f303 	mul.w	r3, r2, r3
 80066a2:	ee07 3a90 	vmov	s15, r3
 80066a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 810a 	beq.w	80068ca <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d05a      	beq.n	8006772 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d302      	bcc.n	80066c6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d078      	beq.n	80067b6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80066c4:	e099      	b.n	80067fa <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066c6:	4b88      	ldr	r3, [pc, #544]	; (80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d02d      	beq.n	800672e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066d2:	4b85      	ldr	r3, [pc, #532]	; (80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	08db      	lsrs	r3, r3, #3
 80066d8:	f003 0303 	and.w	r3, r3, #3
 80066dc:	4a83      	ldr	r2, [pc, #524]	; (80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80066de:	fa22 f303 	lsr.w	r3, r2, r3
 80066e2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	ee07 3a90 	vmov	s15, r3
 80066ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	ee07 3a90 	vmov	s15, r3
 80066f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066fc:	4b7a      	ldr	r3, [pc, #488]	; (80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006704:	ee07 3a90 	vmov	s15, r3
 8006708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800670c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006710:	eddf 5a77 	vldr	s11, [pc, #476]	; 80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006714:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006718:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800671c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006720:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006728:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800672c:	e087      	b.n	800683e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	ee07 3a90 	vmov	s15, r3
 8006734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006738:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800673c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006740:	4b69      	ldr	r3, [pc, #420]	; (80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006748:	ee07 3a90 	vmov	s15, r3
 800674c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006750:	ed97 6a03 	vldr	s12, [r7, #12]
 8006754:	eddf 5a66 	vldr	s11, [pc, #408]	; 80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006758:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800675c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006764:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800676c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006770:	e065      	b.n	800683e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	ee07 3a90 	vmov	s15, r3
 8006778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006784:	4b58      	ldr	r3, [pc, #352]	; (80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678c:	ee07 3a90 	vmov	s15, r3
 8006790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006794:	ed97 6a03 	vldr	s12, [r7, #12]
 8006798:	eddf 5a55 	vldr	s11, [pc, #340]	; 80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800679c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067b4:	e043      	b.n	800683e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	ee07 3a90 	vmov	s15, r3
 80067bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80067c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067c8:	4b47      	ldr	r3, [pc, #284]	; (80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80067dc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80067e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067f8:	e021      	b.n	800683e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	ee07 3a90 	vmov	s15, r3
 8006800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006804:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006808:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800680c:	4b36      	ldr	r3, [pc, #216]	; (80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800680e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006814:	ee07 3a90 	vmov	s15, r3
 8006818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800681c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006820:	eddf 5a33 	vldr	s11, [pc, #204]	; 80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006824:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006828:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800682c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006830:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006838:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800683c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800683e:	4b2a      	ldr	r3, [pc, #168]	; (80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006842:	0a5b      	lsrs	r3, r3, #9
 8006844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006848:	ee07 3a90 	vmov	s15, r3
 800684c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006850:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006854:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006858:	edd7 6a07 	vldr	s13, [r7, #28]
 800685c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006864:	ee17 2a90 	vmov	r2, s15
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800686c:	4b1e      	ldr	r3, [pc, #120]	; (80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800686e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006870:	0c1b      	lsrs	r3, r3, #16
 8006872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006876:	ee07 3a90 	vmov	s15, r3
 800687a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006882:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006886:	edd7 6a07 	vldr	s13, [r7, #28]
 800688a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800688e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006892:	ee17 2a90 	vmov	r2, s15
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800689a:	4b13      	ldr	r3, [pc, #76]	; (80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	0e1b      	lsrs	r3, r3, #24
 80068a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068a4:	ee07 3a90 	vmov	s15, r3
 80068a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80068b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068c0:	ee17 2a90 	vmov	r2, s15
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80068c8:	e008      	b.n	80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	609a      	str	r2, [r3, #8]
}
 80068dc:	bf00      	nop
 80068de:	3724      	adds	r7, #36	; 0x24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	58024400 	.word	0x58024400
 80068ec:	03d09000 	.word	0x03d09000
 80068f0:	46000000 	.word	0x46000000
 80068f4:	4c742400 	.word	0x4c742400
 80068f8:	4a742400 	.word	0x4a742400
 80068fc:	4af42400 	.word	0x4af42400

08006900 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006900:	b480      	push	{r7}
 8006902:	b089      	sub	sp, #36	; 0x24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006908:	4b9d      	ldr	r3, [pc, #628]	; (8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800690a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690c:	f003 0303 	and.w	r3, r3, #3
 8006910:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006912:	4b9b      	ldr	r3, [pc, #620]	; (8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006916:	0d1b      	lsrs	r3, r3, #20
 8006918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800691c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800691e:	4b98      	ldr	r3, [pc, #608]	; (8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006922:	0a1b      	lsrs	r3, r3, #8
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800692a:	4b95      	ldr	r3, [pc, #596]	; (8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800692c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692e:	08db      	lsrs	r3, r3, #3
 8006930:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	fb02 f303 	mul.w	r3, r2, r3
 800693a:	ee07 3a90 	vmov	s15, r3
 800693e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006942:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 810a 	beq.w	8006b62 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d05a      	beq.n	8006a0a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006954:	2b01      	cmp	r3, #1
 8006956:	d302      	bcc.n	800695e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006958:	2b02      	cmp	r3, #2
 800695a:	d078      	beq.n	8006a4e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800695c:	e099      	b.n	8006a92 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800695e:	4b88      	ldr	r3, [pc, #544]	; (8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b00      	cmp	r3, #0
 8006968:	d02d      	beq.n	80069c6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800696a:	4b85      	ldr	r3, [pc, #532]	; (8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	08db      	lsrs	r3, r3, #3
 8006970:	f003 0303 	and.w	r3, r3, #3
 8006974:	4a83      	ldr	r2, [pc, #524]	; (8006b84 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006976:	fa22 f303 	lsr.w	r3, r2, r3
 800697a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	ee07 3a90 	vmov	s15, r3
 8006982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	ee07 3a90 	vmov	s15, r3
 800698c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006990:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006994:	4b7a      	ldr	r3, [pc, #488]	; (8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699c:	ee07 3a90 	vmov	s15, r3
 80069a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80069a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006b88 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80069ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80069c4:	e087      	b.n	8006ad6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	ee07 3a90 	vmov	s15, r3
 80069cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006b8c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80069d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069d8:	4b69      	ldr	r3, [pc, #420]	; (8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80069da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e0:	ee07 3a90 	vmov	s15, r3
 80069e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006b88 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80069f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a08:	e065      	b.n	8006ad6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	ee07 3a90 	vmov	s15, r3
 8006a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a14:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a1c:	4b58      	ldr	r3, [pc, #352]	; (8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a24:	ee07 3a90 	vmov	s15, r3
 8006a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a30:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006b88 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006a34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a4c:	e043      	b.n	8006ad6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	ee07 3a90 	vmov	s15, r3
 8006a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a58:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006a5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a60:	4b47      	ldr	r3, [pc, #284]	; (8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a68:	ee07 3a90 	vmov	s15, r3
 8006a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a70:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a74:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006b88 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006a78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a90:	e021      	b.n	8006ad6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	ee07 3a90 	vmov	s15, r3
 8006a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006aa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aa4:	4b36      	ldr	r3, [pc, #216]	; (8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aac:	ee07 3a90 	vmov	s15, r3
 8006ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ab8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006b88 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006abc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ac4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ad4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006ad6:	4b2a      	ldr	r3, [pc, #168]	; (8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	0a5b      	lsrs	r3, r3, #9
 8006adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae0:	ee07 3a90 	vmov	s15, r3
 8006ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006aec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006af0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006af4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006afc:	ee17 2a90 	vmov	r2, s15
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006b04:	4b1e      	ldr	r3, [pc, #120]	; (8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	0c1b      	lsrs	r3, r3, #16
 8006b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b2a:	ee17 2a90 	vmov	r2, s15
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006b32:	4b13      	ldr	r3, [pc, #76]	; (8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	0e1b      	lsrs	r3, r3, #24
 8006b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b3c:	ee07 3a90 	vmov	s15, r3
 8006b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b58:	ee17 2a90 	vmov	r2, s15
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006b60:	e008      	b.n	8006b74 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	609a      	str	r2, [r3, #8]
}
 8006b74:	bf00      	nop
 8006b76:	3724      	adds	r7, #36	; 0x24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	58024400 	.word	0x58024400
 8006b84:	03d09000 	.word	0x03d09000
 8006b88:	46000000 	.word	0x46000000
 8006b8c:	4c742400 	.word	0x4c742400
 8006b90:	4a742400 	.word	0x4a742400
 8006b94:	4af42400 	.word	0x4af42400

08006b98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ba6:	4b53      	ldr	r3, [pc, #332]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	d101      	bne.n	8006bb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e099      	b.n	8006cea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006bb6:	4b4f      	ldr	r3, [pc, #316]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a4e      	ldr	r2, [pc, #312]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006bbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc2:	f7fb f843 	bl	8001c4c <HAL_GetTick>
 8006bc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bc8:	e008      	b.n	8006bdc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006bca:	f7fb f83f 	bl	8001c4c <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d901      	bls.n	8006bdc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e086      	b.n	8006cea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bdc:	4b45      	ldr	r3, [pc, #276]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1f0      	bne.n	8006bca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006be8:	4b42      	ldr	r3, [pc, #264]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	031b      	lsls	r3, r3, #12
 8006bf6:	493f      	ldr	r1, [pc, #252]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	628b      	str	r3, [r1, #40]	; 0x28
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	025b      	lsls	r3, r3, #9
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	431a      	orrs	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	041b      	lsls	r3, r3, #16
 8006c1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	061b      	lsls	r3, r3, #24
 8006c28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c2c:	4931      	ldr	r1, [pc, #196]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c32:	4b30      	ldr	r3, [pc, #192]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	492d      	ldr	r1, [pc, #180]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006c44:	4b2b      	ldr	r3, [pc, #172]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	f023 0220 	bic.w	r2, r3, #32
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	4928      	ldr	r1, [pc, #160]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006c56:	4b27      	ldr	r3, [pc, #156]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5a:	4a26      	ldr	r2, [pc, #152]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006c5c:	f023 0310 	bic.w	r3, r3, #16
 8006c60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c62:	4b24      	ldr	r3, [pc, #144]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006c64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c66:	4b24      	ldr	r3, [pc, #144]	; (8006cf8 <RCCEx_PLL2_Config+0x160>)
 8006c68:	4013      	ands	r3, r2
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	69d2      	ldr	r2, [r2, #28]
 8006c6e:	00d2      	lsls	r2, r2, #3
 8006c70:	4920      	ldr	r1, [pc, #128]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006c76:	4b1f      	ldr	r3, [pc, #124]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7a:	4a1e      	ldr	r2, [pc, #120]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006c7c:	f043 0310 	orr.w	r3, r3, #16
 8006c80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d106      	bne.n	8006c96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006c88:	4b1a      	ldr	r3, [pc, #104]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8c:	4a19      	ldr	r2, [pc, #100]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006c8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c94:	e00f      	b.n	8006cb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d106      	bne.n	8006caa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006c9c:	4b15      	ldr	r3, [pc, #84]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca0:	4a14      	ldr	r2, [pc, #80]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ca6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ca8:	e005      	b.n	8006cb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006caa:	4b12      	ldr	r3, [pc, #72]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	4a11      	ldr	r2, [pc, #68]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006cb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006cb6:	4b0f      	ldr	r3, [pc, #60]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a0e      	ldr	r2, [pc, #56]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006cbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cc2:	f7fa ffc3 	bl	8001c4c <HAL_GetTick>
 8006cc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cc8:	e008      	b.n	8006cdc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006cca:	f7fa ffbf 	bl	8001c4c <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d901      	bls.n	8006cdc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e006      	b.n	8006cea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cdc:	4b05      	ldr	r3, [pc, #20]	; (8006cf4 <RCCEx_PLL2_Config+0x15c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0f0      	beq.n	8006cca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	58024400 	.word	0x58024400
 8006cf8:	ffff0007 	.word	0xffff0007

08006cfc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d0a:	4b53      	ldr	r3, [pc, #332]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0e:	f003 0303 	and.w	r3, r3, #3
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d101      	bne.n	8006d1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e099      	b.n	8006e4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006d1a:	4b4f      	ldr	r3, [pc, #316]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a4e      	ldr	r2, [pc, #312]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d26:	f7fa ff91 	bl	8001c4c <HAL_GetTick>
 8006d2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d2c:	e008      	b.n	8006d40 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006d2e:	f7fa ff8d 	bl	8001c4c <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d901      	bls.n	8006d40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e086      	b.n	8006e4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d40:	4b45      	ldr	r3, [pc, #276]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1f0      	bne.n	8006d2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d4c:	4b42      	ldr	r3, [pc, #264]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	051b      	lsls	r3, r3, #20
 8006d5a:	493f      	ldr	r1, [pc, #252]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	628b      	str	r3, [r1, #40]	; 0x28
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	025b      	lsls	r3, r3, #9
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	431a      	orrs	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	041b      	lsls	r3, r3, #16
 8006d7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	061b      	lsls	r3, r3, #24
 8006d8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d90:	4931      	ldr	r1, [pc, #196]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006d96:	4b30      	ldr	r3, [pc, #192]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	492d      	ldr	r1, [pc, #180]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006da8:	4b2b      	ldr	r3, [pc, #172]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	4928      	ldr	r1, [pc, #160]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006dba:	4b27      	ldr	r3, [pc, #156]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbe:	4a26      	ldr	r2, [pc, #152]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006dc6:	4b24      	ldr	r3, [pc, #144]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dca:	4b24      	ldr	r3, [pc, #144]	; (8006e5c <RCCEx_PLL3_Config+0x160>)
 8006dcc:	4013      	ands	r3, r2
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	69d2      	ldr	r2, [r2, #28]
 8006dd2:	00d2      	lsls	r2, r2, #3
 8006dd4:	4920      	ldr	r1, [pc, #128]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006dda:	4b1f      	ldr	r3, [pc, #124]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dde:	4a1e      	ldr	r2, [pc, #120]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006de4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d106      	bne.n	8006dfa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006dec:	4b1a      	ldr	r3, [pc, #104]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	4a19      	ldr	r2, [pc, #100]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006df2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006df6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006df8:	e00f      	b.n	8006e1a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d106      	bne.n	8006e0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e00:	4b15      	ldr	r3, [pc, #84]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	4a14      	ldr	r2, [pc, #80]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006e06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e0c:	e005      	b.n	8006e1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006e0e:	4b12      	ldr	r3, [pc, #72]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e12:	4a11      	ldr	r2, [pc, #68]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006e14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006e1a:	4b0f      	ldr	r3, [pc, #60]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a0e      	ldr	r2, [pc, #56]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e26:	f7fa ff11 	bl	8001c4c <HAL_GetTick>
 8006e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e2c:	e008      	b.n	8006e40 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006e2e:	f7fa ff0d 	bl	8001c4c <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d901      	bls.n	8006e40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e006      	b.n	8006e4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e40:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <RCCEx_PLL3_Config+0x15c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d0f0      	beq.n	8006e2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	58024400 	.word	0x58024400
 8006e5c:	ffff0007 	.word	0xffff0007

08006e60 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e0e2      	b.n	800703c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a70      	ldr	r2, [pc, #448]	; (8007044 <HAL_SPI_Init+0x1e4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00f      	beq.n	8006ea6 <HAL_SPI_Init+0x46>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a6f      	ldr	r2, [pc, #444]	; (8007048 <HAL_SPI_Init+0x1e8>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d00a      	beq.n	8006ea6 <HAL_SPI_Init+0x46>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a6d      	ldr	r2, [pc, #436]	; (800704c <HAL_SPI_Init+0x1ec>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d005      	beq.n	8006ea6 <HAL_SPI_Init+0x46>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	2b0f      	cmp	r3, #15
 8006ea0:	d901      	bls.n	8006ea6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e0ca      	b.n	800703c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f001 f870 	bl	8007f8c <SPI_GetPacketSize>
 8006eac:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a64      	ldr	r2, [pc, #400]	; (8007044 <HAL_SPI_Init+0x1e4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00c      	beq.n	8006ed2 <HAL_SPI_Init+0x72>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a62      	ldr	r2, [pc, #392]	; (8007048 <HAL_SPI_Init+0x1e8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d007      	beq.n	8006ed2 <HAL_SPI_Init+0x72>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a61      	ldr	r2, [pc, #388]	; (800704c <HAL_SPI_Init+0x1ec>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d002      	beq.n	8006ed2 <HAL_SPI_Init+0x72>
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b08      	cmp	r3, #8
 8006ed0:	d811      	bhi.n	8006ef6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006ed6:	4a5b      	ldr	r2, [pc, #364]	; (8007044 <HAL_SPI_Init+0x1e4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d009      	beq.n	8006ef0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a59      	ldr	r2, [pc, #356]	; (8007048 <HAL_SPI_Init+0x1e8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d004      	beq.n	8006ef0 <HAL_SPI_Init+0x90>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a58      	ldr	r2, [pc, #352]	; (800704c <HAL_SPI_Init+0x1ec>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d104      	bne.n	8006efa <HAL_SPI_Init+0x9a>
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b10      	cmp	r3, #16
 8006ef4:	d901      	bls.n	8006efa <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e0a0      	b.n	800703c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d106      	bne.n	8006f14 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7fa fbb4 	bl	800167c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 0201 	bic.w	r2, r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f34:	d110      	bne.n	8006f58 <HAL_SPI_Init+0xf8>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f3e:	d10b      	bne.n	8006f58 <HAL_SPI_Init+0xf8>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d107      	bne.n	8006f58 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f56:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	69da      	ldr	r2, [r3, #28]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f60:	431a      	orrs	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	431a      	orrs	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6a:	ea42 0103 	orr.w	r1, r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	431a      	orrs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fac:	431a      	orrs	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fb8:	ea42 0103 	orr.w	r1, r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d113      	bne.n	8006ff8 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fe2:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ff6:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 0201 	bic.w	r2, r2, #1
 8007006:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00a      	beq.n	800702a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	40013000 	.word	0x40013000
 8007048:	40003800 	.word	0x40003800
 800704c:	40003c00 	.word	0x40003c00

08007050 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b08a      	sub	sp, #40	; 0x28
 8007054:	af02      	add	r7, sp, #8
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	603b      	str	r3, [r7, #0]
 800705c:	4613      	mov	r3, r2
 800705e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3320      	adds	r3, #32
 8007066:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007072:	2b01      	cmp	r3, #1
 8007074:	d101      	bne.n	800707a <HAL_SPI_Transmit+0x2a>
 8007076:	2302      	movs	r3, #2
 8007078:	e1d7      	b.n	800742a <HAL_SPI_Transmit+0x3da>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007082:	f7fa fde3 	bl	8001c4c <HAL_GetTick>
 8007086:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b01      	cmp	r3, #1
 8007092:	d007      	beq.n	80070a4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007094:	2302      	movs	r3, #2
 8007096:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80070a0:	7efb      	ldrb	r3, [r7, #27]
 80070a2:	e1c2      	b.n	800742a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <HAL_SPI_Transmit+0x60>
 80070aa:	88fb      	ldrh	r3, [r7, #6]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d107      	bne.n	80070c0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80070bc:	7efb      	ldrb	r3, [r7, #27]
 80070be:	e1b4      	b.n	800742a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2203      	movs	r2, #3
 80070c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	88fa      	ldrh	r2, [r7, #6]
 80070da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	88fa      	ldrh	r2, [r7, #6]
 80070e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007110:	d107      	bne.n	8007122 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007120:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	4b96      	ldr	r3, [pc, #600]	; (8007384 <HAL_SPI_Transmit+0x334>)
 800712a:	4013      	ands	r3, r2
 800712c:	88f9      	ldrh	r1, [r7, #6]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	6812      	ldr	r2, [r2, #0]
 8007132:	430b      	orrs	r3, r1
 8007134:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f042 0201 	orr.w	r2, r2, #1
 8007144:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800714e:	d107      	bne.n	8007160 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800715e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	2b0f      	cmp	r3, #15
 8007166:	d947      	bls.n	80071f8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007168:	e03f      	b.n	80071ea <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	f003 0302 	and.w	r3, r3, #2
 8007174:	2b02      	cmp	r3, #2
 8007176:	d114      	bne.n	80071a2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6812      	ldr	r2, [r2, #0]
 8007182:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007188:	1d1a      	adds	r2, r3, #4
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007194:	b29b      	uxth	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	b29a      	uxth	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80071a0:	e023      	b.n	80071ea <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071a2:	f7fa fd53 	bl	8001c4c <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d803      	bhi.n	80071ba <HAL_SPI_Transmit+0x16a>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b8:	d102      	bne.n	80071c0 <HAL_SPI_Transmit+0x170>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d114      	bne.n	80071ea <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 fe15 	bl	8007df0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e11f      	b.n	800742a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1b9      	bne.n	800716a <HAL_SPI_Transmit+0x11a>
 80071f6:	e0f2      	b.n	80073de <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	2b07      	cmp	r3, #7
 80071fe:	f240 80e7 	bls.w	80073d0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007202:	e05d      	b.n	80072c0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b02      	cmp	r3, #2
 8007210:	d132      	bne.n	8007278 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007218:	b29b      	uxth	r3, r3
 800721a:	2b01      	cmp	r3, #1
 800721c:	d918      	bls.n	8007250 <HAL_SPI_Transmit+0x200>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007222:	2b00      	cmp	r3, #0
 8007224:	d014      	beq.n	8007250 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6812      	ldr	r2, [r2, #0]
 8007230:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007236:	1d1a      	adds	r2, r3, #4
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007242:	b29b      	uxth	r3, r3
 8007244:	3b02      	subs	r3, #2
 8007246:	b29a      	uxth	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800724e:	e037      	b.n	80072c0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007254:	881a      	ldrh	r2, [r3, #0]
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800725e:	1c9a      	adds	r2, r3, #2
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800726a:	b29b      	uxth	r3, r3
 800726c:	3b01      	subs	r3, #1
 800726e:	b29a      	uxth	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007276:	e023      	b.n	80072c0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007278:	f7fa fce8 	bl	8001c4c <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	429a      	cmp	r2, r3
 8007286:	d803      	bhi.n	8007290 <HAL_SPI_Transmit+0x240>
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728e:	d102      	bne.n	8007296 <HAL_SPI_Transmit+0x246>
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d114      	bne.n	80072c0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 fdaa 	bl	8007df0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e0b4      	b.n	800742a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d19b      	bne.n	8007204 <HAL_SPI_Transmit+0x1b4>
 80072cc:	e087      	b.n	80073de <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d155      	bne.n	8007388 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	2b03      	cmp	r3, #3
 80072e6:	d918      	bls.n	800731a <HAL_SPI_Transmit+0x2ca>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ec:	2b40      	cmp	r3, #64	; 0x40
 80072ee:	d914      	bls.n	800731a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6812      	ldr	r2, [r2, #0]
 80072fa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007300:	1d1a      	adds	r2, r3, #4
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800730c:	b29b      	uxth	r3, r3
 800730e:	3b04      	subs	r3, #4
 8007310:	b29a      	uxth	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007318:	e05a      	b.n	80073d0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007320:	b29b      	uxth	r3, r3
 8007322:	2b01      	cmp	r3, #1
 8007324:	d917      	bls.n	8007356 <HAL_SPI_Transmit+0x306>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732a:	2b00      	cmp	r3, #0
 800732c:	d013      	beq.n	8007356 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007332:	881a      	ldrh	r2, [r3, #0]
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800733c:	1c9a      	adds	r2, r3, #2
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007348:	b29b      	uxth	r3, r3
 800734a:	3b02      	subs	r3, #2
 800734c:	b29a      	uxth	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007354:	e03c      	b.n	80073d0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3320      	adds	r3, #32
 8007360:	7812      	ldrb	r2, [r2, #0]
 8007362:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007368:	1c5a      	adds	r2, r3, #1
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007374:	b29b      	uxth	r3, r3
 8007376:	3b01      	subs	r3, #1
 8007378:	b29a      	uxth	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007380:	e026      	b.n	80073d0 <HAL_SPI_Transmit+0x380>
 8007382:	bf00      	nop
 8007384:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007388:	f7fa fc60 	bl	8001c4c <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d803      	bhi.n	80073a0 <HAL_SPI_Transmit+0x350>
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739e:	d102      	bne.n	80073a6 <HAL_SPI_Transmit+0x356>
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d114      	bne.n	80073d0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 fd22 	bl	8007df0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e02c      	b.n	800742a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f47f af78 	bne.w	80072ce <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2200      	movs	r2, #0
 80073e6:	2108      	movs	r1, #8
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 fda1 	bl	8007f30 <SPI_WaitOnFlagUntilTimeout>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d007      	beq.n	8007404 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073fa:	f043 0220 	orr.w	r2, r3, #32
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 fcf3 	bl	8007df0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e000      	b.n	800742a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8007428:	7efb      	ldrb	r3, [r7, #27]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3720      	adds	r7, #32
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop

08007434 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08a      	sub	sp, #40	; 0x28
 8007438:	af02      	add	r7, sp, #8
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	603b      	str	r3, [r7, #0]
 8007440:	4613      	mov	r3, r2
 8007442:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3330      	adds	r3, #48	; 0x30
 800744e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007458:	d112      	bne.n	8007480 <HAL_SPI_Receive+0x4c>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10e      	bne.n	8007480 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2204      	movs	r2, #4
 8007466:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800746a:	88fa      	ldrh	r2, [r7, #6]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	4613      	mov	r3, r2
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	68b9      	ldr	r1, [r7, #8]
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 f9ce 	bl	8007818 <HAL_SPI_TransmitReceive>
 800747c:	4603      	mov	r3, r0
 800747e:	e1c7      	b.n	8007810 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_SPI_Receive+0x5a>
 800748a:	2302      	movs	r3, #2
 800748c:	e1c0      	b.n	8007810 <HAL_SPI_Receive+0x3dc>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007496:	f7fa fbd9 	bl	8001c4c <HAL_GetTick>
 800749a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d007      	beq.n	80074b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80074a8:	2302      	movs	r3, #2
 80074aa:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80074b4:	7ffb      	ldrb	r3, [r7, #31]
 80074b6:	e1ab      	b.n	8007810 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <HAL_SPI_Receive+0x90>
 80074be:	88fb      	ldrh	r3, [r7, #6]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d107      	bne.n	80074d4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80074d0:	7ffb      	ldrb	r3, [r7, #31]
 80074d2:	e19d      	b.n	8007810 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2204      	movs	r2, #4
 80074d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	88fa      	ldrh	r2, [r7, #6]
 80074ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	88fa      	ldrh	r2, [r7, #6]
 80074f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007524:	d107      	bne.n	8007536 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007534:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	4b94      	ldr	r3, [pc, #592]	; (8007790 <HAL_SPI_Receive+0x35c>)
 800753e:	4013      	ands	r3, r2
 8007540:	88f9      	ldrh	r1, [r7, #6]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	6812      	ldr	r2, [r2, #0]
 8007546:	430b      	orrs	r3, r1
 8007548:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f042 0201 	orr.w	r2, r2, #1
 8007558:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007562:	d107      	bne.n	8007574 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007572:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	2b0f      	cmp	r3, #15
 800757a:	d948      	bls.n	800760e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800757c:	e040      	b.n	8007600 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	695a      	ldr	r2, [r3, #20]
 8007584:	f248 0308 	movw	r3, #32776	; 0x8008
 8007588:	4013      	ands	r3, r2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d014      	beq.n	80075b8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007596:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007598:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800759e:	1d1a      	adds	r2, r3, #4
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	3b01      	subs	r3, #1
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80075b6:	e023      	b.n	8007600 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075b8:	f7fa fb48 	bl	8001c4c <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d803      	bhi.n	80075d0 <HAL_SPI_Receive+0x19c>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ce:	d102      	bne.n	80075d6 <HAL_SPI_Receive+0x1a2>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d114      	bne.n	8007600 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 fc0a 	bl	8007df0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e107      	b.n	8007810 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007606:	b29b      	uxth	r3, r3
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1b8      	bne.n	800757e <HAL_SPI_Receive+0x14a>
 800760c:	e0ed      	b.n	80077ea <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	2b07      	cmp	r3, #7
 8007614:	f240 80e2 	bls.w	80077dc <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007618:	e05b      	b.n	80076d2 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d030      	beq.n	800768a <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d014      	beq.n	8007660 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800763e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007640:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007646:	1d1a      	adds	r2, r3, #4
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007652:	b29b      	uxth	r3, r3
 8007654:	3b02      	subs	r3, #2
 8007656:	b29a      	uxth	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800765e:	e038      	b.n	80076d2 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	8812      	ldrh	r2, [r2, #0]
 8007668:	b292      	uxth	r2, r2
 800766a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007670:	1c9a      	adds	r2, r3, #2
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800767c:	b29b      	uxth	r3, r3
 800767e:	3b01      	subs	r3, #1
 8007680:	b29a      	uxth	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007688:	e023      	b.n	80076d2 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800768a:	f7fa fadf 	bl	8001c4c <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	429a      	cmp	r2, r3
 8007698:	d803      	bhi.n	80076a2 <HAL_SPI_Receive+0x26e>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a0:	d102      	bne.n	80076a8 <HAL_SPI_Receive+0x274>
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d114      	bne.n	80076d2 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 fba1 	bl	8007df0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e09e      	b.n	8007810 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d19d      	bne.n	800761a <HAL_SPI_Receive+0x1e6>
 80076de:	e084      	b.n	80077ea <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d052      	beq.n	8007794 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d014      	beq.n	8007726 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007704:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007706:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800770c:	1d1a      	adds	r2, r3, #4
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007718:	b29b      	uxth	r3, r3
 800771a:	3b04      	subs	r3, #4
 800771c:	b29a      	uxth	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007724:	e05a      	b.n	80077dc <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8007730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007734:	d914      	bls.n	8007760 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800773a:	69ba      	ldr	r2, [r7, #24]
 800773c:	8812      	ldrh	r2, [r2, #0]
 800773e:	b292      	uxth	r2, r2
 8007740:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007746:	1c9a      	adds	r2, r3, #2
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007752:	b29b      	uxth	r3, r3
 8007754:	3b02      	subs	r3, #2
 8007756:	b29a      	uxth	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800775e:	e03d      	b.n	80077dc <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800776c:	7812      	ldrb	r2, [r2, #0]
 800776e:	b2d2      	uxtb	r2, r2
 8007770:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007782:	b29b      	uxth	r3, r3
 8007784:	3b01      	subs	r3, #1
 8007786:	b29a      	uxth	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800778e:	e025      	b.n	80077dc <HAL_SPI_Receive+0x3a8>
 8007790:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007794:	f7fa fa5a 	bl	8001c4c <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d803      	bhi.n	80077ac <HAL_SPI_Receive+0x378>
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077aa:	d102      	bne.n	80077b2 <HAL_SPI_Receive+0x37e>
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d114      	bne.n	80077dc <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 fb1c 	bl	8007df0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e019      	b.n	8007810 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f47f af7b 	bne.w	80076e0 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 fb00 	bl	8007df0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e000      	b.n	8007810 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800780e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3720      	adds	r7, #32
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08e      	sub	sp, #56	; 0x38
 800781c:	af02      	add	r7, sp, #8
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3320      	adds	r3, #32
 8007832:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3330      	adds	r3, #48	; 0x30
 800783a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007842:	2b01      	cmp	r3, #1
 8007844:	d101      	bne.n	800784a <HAL_SPI_TransmitReceive+0x32>
 8007846:	2302      	movs	r3, #2
 8007848:	e2ce      	b.n	8007de8 <HAL_SPI_TransmitReceive+0x5d0>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007852:	f7fa f9fb 	bl	8001c4c <HAL_GetTick>
 8007856:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8007858:	887b      	ldrh	r3, [r7, #2]
 800785a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800785c:	887b      	ldrh	r3, [r7, #2]
 800785e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007866:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800786e:	7efb      	ldrb	r3, [r7, #27]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d014      	beq.n	800789e <HAL_SPI_TransmitReceive+0x86>
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800787a:	d106      	bne.n	800788a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <HAL_SPI_TransmitReceive+0x72>
 8007884:	7efb      	ldrb	r3, [r7, #27]
 8007886:	2b04      	cmp	r3, #4
 8007888:	d009      	beq.n	800789e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800788a:	2302      	movs	r3, #2
 800788c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007898:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800789c:	e2a4      	b.n	8007de8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d005      	beq.n	80078b0 <HAL_SPI_TransmitReceive+0x98>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d002      	beq.n	80078b0 <HAL_SPI_TransmitReceive+0x98>
 80078aa:	887b      	ldrh	r3, [r7, #2]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d109      	bne.n	80078c4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80078be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078c2:	e291      	b.n	8007de8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b04      	cmp	r3, #4
 80078ce:	d003      	beq.n	80078d8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2205      	movs	r2, #5
 80078d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	887a      	ldrh	r2, [r7, #2]
 80078ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	887a      	ldrh	r2, [r7, #2]
 80078f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	887a      	ldrh	r2, [r7, #2]
 8007900:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	887a      	ldrh	r2, [r7, #2]
 8007908:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	4b9f      	ldr	r3, [pc, #636]	; (8007b9c <HAL_SPI_TransmitReceive+0x384>)
 8007920:	4013      	ands	r3, r2
 8007922:	8879      	ldrh	r1, [r7, #2]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	6812      	ldr	r2, [r2, #0]
 8007928:	430b      	orrs	r3, r1
 800792a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0201 	orr.w	r2, r2, #1
 800793a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007944:	d107      	bne.n	8007956 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007954:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	2b0f      	cmp	r3, #15
 800795c:	d970      	bls.n	8007a40 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800795e:	e068      	b.n	8007a32 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b02      	cmp	r3, #2
 800796c:	d11a      	bne.n	80079a4 <HAL_SPI_TransmitReceive+0x18c>
 800796e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007970:	2b00      	cmp	r3, #0
 8007972:	d017      	beq.n	80079a4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6812      	ldr	r2, [r2, #0]
 800797e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007984:	1d1a      	adds	r2, r3, #4
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007990:	b29b      	uxth	r3, r3
 8007992:	3b01      	subs	r3, #1
 8007994:	b29a      	uxth	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80079a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	695a      	ldr	r2, [r3, #20]
 80079aa:	f248 0308 	movw	r3, #32776	; 0x8008
 80079ae:	4013      	ands	r3, r2
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d01a      	beq.n	80079ea <HAL_SPI_TransmitReceive+0x1d2>
 80079b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d017      	beq.n	80079ea <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80079c4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079ca:	1d1a      	adds	r2, r3, #4
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	3b01      	subs	r3, #1
 80079da:	b29a      	uxth	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80079e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079ea:	f7fa f92f 	bl	8001c4c <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d803      	bhi.n	8007a02 <HAL_SPI_TransmitReceive+0x1ea>
 80079fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a00:	d102      	bne.n	8007a08 <HAL_SPI_TransmitReceive+0x1f0>
 8007a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d114      	bne.n	8007a32 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 f9f1 	bl	8007df0 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e1da      	b.n	8007de8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007a32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d193      	bne.n	8007960 <HAL_SPI_TransmitReceive+0x148>
 8007a38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d190      	bne.n	8007960 <HAL_SPI_TransmitReceive+0x148>
 8007a3e:	e1ac      	b.n	8007d9a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	2b07      	cmp	r3, #7
 8007a46:	f240 81a0 	bls.w	8007d8a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007a4a:	e0a9      	b.n	8007ba0 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d139      	bne.n	8007ace <HAL_SPI_TransmitReceive+0x2b6>
 8007a5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d036      	beq.n	8007ace <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007a60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d91c      	bls.n	8007aa0 <HAL_SPI_TransmitReceive+0x288>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d018      	beq.n	8007aa0 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6812      	ldr	r2, [r2, #0]
 8007a78:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a7e:	1d1a      	adds	r2, r3, #4
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	3b02      	subs	r3, #2
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007a9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007a9e:	e016      	b.n	8007ace <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa4:	881a      	ldrh	r2, [r3, #0]
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aae:	1c9a      	adds	r2, r3, #2
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	3b01      	subs	r3, #1
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007acc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d03a      	beq.n	8007b52 <HAL_SPI_TransmitReceive+0x33a>
 8007adc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d037      	beq.n	8007b52 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d018      	beq.n	8007b22 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007af8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007afa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b00:	1d1a      	adds	r2, r3, #4
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	3b02      	subs	r3, #2
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007b20:	e017      	b.n	8007b52 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b26:	6a3a      	ldr	r2, [r7, #32]
 8007b28:	8812      	ldrh	r2, [r2, #0]
 8007b2a:	b292      	uxth	r2, r2
 8007b2c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b32:	1c9a      	adds	r2, r3, #2
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	3b01      	subs	r3, #1
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b50:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b52:	f7fa f87b 	bl	8001c4c <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d803      	bhi.n	8007b6a <HAL_SPI_TransmitReceive+0x352>
 8007b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b68:	d102      	bne.n	8007b70 <HAL_SPI_TransmitReceive+0x358>
 8007b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d117      	bne.n	8007ba0 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 f93d 	bl	8007df0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e126      	b.n	8007de8 <HAL_SPI_TransmitReceive+0x5d0>
 8007b9a:	bf00      	nop
 8007b9c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007ba0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f47f af52 	bne.w	8007a4c <HAL_SPI_TransmitReceive+0x234>
 8007ba8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f47f af4e 	bne.w	8007a4c <HAL_SPI_TransmitReceive+0x234>
 8007bb0:	e0f3      	b.n	8007d9a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d15a      	bne.n	8007c76 <HAL_SPI_TransmitReceive+0x45e>
 8007bc0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d057      	beq.n	8007c76 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007bc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d91c      	bls.n	8007c06 <HAL_SPI_TransmitReceive+0x3ee>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd0:	2b40      	cmp	r3, #64	; 0x40
 8007bd2:	d918      	bls.n	8007c06 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6812      	ldr	r2, [r2, #0]
 8007bde:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be4:	1d1a      	adds	r2, r3, #4
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	3b04      	subs	r3, #4
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c02:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007c04:	e037      	b.n	8007c76 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007c06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d91b      	bls.n	8007c44 <HAL_SPI_TransmitReceive+0x42c>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d017      	beq.n	8007c44 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c18:	881a      	ldrh	r2, [r3, #0]
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c22:	1c9a      	adds	r2, r3, #2
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	3b02      	subs	r3, #2
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c40:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007c42:	e018      	b.n	8007c76 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3320      	adds	r3, #32
 8007c4e:	7812      	ldrb	r2, [r2, #0]
 8007c50:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	3b01      	subs	r3, #1
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c74:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d05e      	beq.n	8007d42 <HAL_SPI_TransmitReceive+0x52a>
 8007c84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d05b      	beq.n	8007d42 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d018      	beq.n	8007cca <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ca0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007ca2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ca8:	1d1a      	adds	r2, r3, #4
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	3b04      	subs	r3, #4
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007cc6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007cc8:	e03b      	b.n	8007d42 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8007cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd8:	d918      	bls.n	8007d0c <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cde:	6a3a      	ldr	r2, [r7, #32]
 8007ce0:	8812      	ldrh	r2, [r2, #0]
 8007ce2:	b292      	uxth	r2, r2
 8007ce4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cea:	1c9a      	adds	r2, r3, #2
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	3b02      	subs	r3, #2
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d08:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007d0a:	e01a      	b.n	8007d42 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d18:	7812      	ldrb	r2, [r2, #0]
 8007d1a:	b2d2      	uxtb	r2, r2
 8007d1c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d22:	1c5a      	adds	r2, r3, #1
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	3b01      	subs	r3, #1
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d40:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d42:	f7f9 ff83 	bl	8001c4c <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d803      	bhi.n	8007d5a <HAL_SPI_TransmitReceive+0x542>
 8007d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d58:	d102      	bne.n	8007d60 <HAL_SPI_TransmitReceive+0x548>
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d114      	bne.n	8007d8a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 f845 	bl	8007df0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e02e      	b.n	8007de8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007d8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f47f af10 	bne.w	8007bb2 <HAL_SPI_TransmitReceive+0x39a>
 8007d92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f47f af0c 	bne.w	8007bb2 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	2200      	movs	r2, #0
 8007da2:	2108      	movs	r1, #8
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 f8c3 	bl	8007f30 <SPI_WaitOnFlagUntilTimeout>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d007      	beq.n	8007dc0 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007db6:	f043 0220 	orr.w	r2, r3, #32
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 f815 	bl	8007df0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e001      	b.n	8007de8 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8007de4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3730      	adds	r7, #48	; 0x30
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	699a      	ldr	r2, [r3, #24]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f042 0208 	orr.w	r2, r2, #8
 8007e0e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699a      	ldr	r2, [r3, #24]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f042 0210 	orr.w	r2, r2, #16
 8007e1e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0201 	bic.w	r2, r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6919      	ldr	r1, [r3, #16]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	4b3c      	ldr	r3, [pc, #240]	; (8007f2c <SPI_CloseTransfer+0x13c>)
 8007e3c:	400b      	ands	r3, r1
 8007e3e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	689a      	ldr	r2, [r3, #8]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007e4e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	d014      	beq.n	8007e86 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f003 0320 	and.w	r3, r3, #32
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00f      	beq.n	8007e86 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	699a      	ldr	r2, [r3, #24]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f042 0220 	orr.w	r2, r2, #32
 8007e84:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d014      	beq.n	8007ebc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00f      	beq.n	8007ebc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ea2:	f043 0204 	orr.w	r2, r3, #4
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00f      	beq.n	8007ee6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ecc:	f043 0201 	orr.w	r2, r3, #1
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	699a      	ldr	r2, [r3, #24]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ee4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00f      	beq.n	8007f10 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ef6:	f043 0208 	orr.w	r2, r3, #8
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	699a      	ldr	r2, [r3, #24]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f0e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007f20:	bf00      	nop
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	fffffc90 	.word	0xfffffc90

08007f30 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	603b      	str	r3, [r7, #0]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007f40:	e010      	b.n	8007f64 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f42:	f7f9 fe83 	bl	8001c4c <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	69ba      	ldr	r2, [r7, #24]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d803      	bhi.n	8007f5a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f58:	d102      	bne.n	8007f60 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e00f      	b.n	8007f84 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	695a      	ldr	r2, [r3, #20]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	bf0c      	ite	eq
 8007f74:	2301      	moveq	r3, #1
 8007f76:	2300      	movne	r3, #0
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	79fb      	ldrb	r3, [r7, #7]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d0df      	beq.n	8007f42 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f98:	095b      	lsrs	r3, r3, #5
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	3307      	adds	r3, #7
 8007faa:	08db      	lsrs	r3, r3, #3
 8007fac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	fb02 f303 	mul.w	r3, r2, r3
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e049      	b.n	8008068 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d106      	bne.n	8007fee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f841 	bl	8008070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	4619      	mov	r1, r3
 8008000:	4610      	mov	r0, r2
 8008002:	f000 f9bd 	bl	8008380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b01      	cmp	r3, #1
 8008096:	d001      	beq.n	800809c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e021      	b.n	80080e0 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2202      	movs	r2, #2
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68da      	ldr	r2, [r3, #12]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f042 0201 	orr.w	r2, r2, #1
 80080b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689a      	ldr	r2, [r3, #8]
 80080ba:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <HAL_TIM_Base_Start_IT+0x68>)
 80080bc:	4013      	ands	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2b06      	cmp	r3, #6
 80080c4:	d00b      	beq.n	80080de <HAL_TIM_Base_Start_IT+0x5a>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080cc:	d007      	beq.n	80080de <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f042 0201 	orr.w	r2, r2, #1
 80080dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	00010007 	.word	0x00010007

080080f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f003 0302 	and.w	r3, r3, #2
 8008102:	2b02      	cmp	r3, #2
 8008104:	d122      	bne.n	800814c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f003 0302 	and.w	r3, r3, #2
 8008110:	2b02      	cmp	r3, #2
 8008112:	d11b      	bne.n	800814c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f06f 0202 	mvn.w	r2, #2
 800811c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	f003 0303 	and.w	r3, r3, #3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f905 	bl	8008342 <HAL_TIM_IC_CaptureCallback>
 8008138:	e005      	b.n	8008146 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f8f7 	bl	800832e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f908 	bl	8008356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	f003 0304 	and.w	r3, r3, #4
 8008156:	2b04      	cmp	r3, #4
 8008158:	d122      	bne.n	80081a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f003 0304 	and.w	r3, r3, #4
 8008164:	2b04      	cmp	r3, #4
 8008166:	d11b      	bne.n	80081a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f06f 0204 	mvn.w	r2, #4
 8008170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2202      	movs	r2, #2
 8008176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008182:	2b00      	cmp	r3, #0
 8008184:	d003      	beq.n	800818e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f8db 	bl	8008342 <HAL_TIM_IC_CaptureCallback>
 800818c:	e005      	b.n	800819a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f8cd 	bl	800832e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f8de 	bl	8008356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	f003 0308 	and.w	r3, r3, #8
 80081aa:	2b08      	cmp	r3, #8
 80081ac:	d122      	bne.n	80081f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	f003 0308 	and.w	r3, r3, #8
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	d11b      	bne.n	80081f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f06f 0208 	mvn.w	r2, #8
 80081c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2204      	movs	r2, #4
 80081ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	f003 0303 	and.w	r3, r3, #3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f8b1 	bl	8008342 <HAL_TIM_IC_CaptureCallback>
 80081e0:	e005      	b.n	80081ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f8a3 	bl	800832e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f8b4 	bl	8008356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	f003 0310 	and.w	r3, r3, #16
 80081fe:	2b10      	cmp	r3, #16
 8008200:	d122      	bne.n	8008248 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f003 0310 	and.w	r3, r3, #16
 800820c:	2b10      	cmp	r3, #16
 800820e:	d11b      	bne.n	8008248 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f06f 0210 	mvn.w	r2, #16
 8008218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2208      	movs	r2, #8
 800821e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f887 	bl	8008342 <HAL_TIM_IC_CaptureCallback>
 8008234:	e005      	b.n	8008242 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f879 	bl	800832e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f88a 	bl	8008356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b01      	cmp	r3, #1
 8008254:	d10e      	bne.n	8008274 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b01      	cmp	r3, #1
 8008262:	d107      	bne.n	8008274 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f06f 0201 	mvn.w	r2, #1
 800826c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7f9 f94a 	bl	8001508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800827e:	2b80      	cmp	r3, #128	; 0x80
 8008280:	d10e      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800828c:	2b80      	cmp	r3, #128	; 0x80
 800828e:	d107      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f914 	bl	80084c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ae:	d10e      	bne.n	80082ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ba:	2b80      	cmp	r3, #128	; 0x80
 80082bc:	d107      	bne.n	80082ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80082c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f907 	bl	80084dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d8:	2b40      	cmp	r3, #64	; 0x40
 80082da:	d10e      	bne.n	80082fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e6:	2b40      	cmp	r3, #64	; 0x40
 80082e8:	d107      	bne.n	80082fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f838 	bl	800836a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	f003 0320 	and.w	r3, r3, #32
 8008304:	2b20      	cmp	r3, #32
 8008306:	d10e      	bne.n	8008326 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	f003 0320 	and.w	r3, r3, #32
 8008312:	2b20      	cmp	r3, #32
 8008314:	d107      	bne.n	8008326 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f06f 0220 	mvn.w	r2, #32
 800831e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f8c7 	bl	80084b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008326:	bf00      	nop
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008336:	bf00      	nop
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800834a:	bf00      	nop
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008356:	b480      	push	{r7}
 8008358:	b083      	sub	sp, #12
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800835e:	bf00      	nop
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008372:	bf00      	nop
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
	...

08008380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a40      	ldr	r2, [pc, #256]	; (8008494 <TIM_Base_SetConfig+0x114>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d013      	beq.n	80083c0 <TIM_Base_SetConfig+0x40>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800839e:	d00f      	beq.n	80083c0 <TIM_Base_SetConfig+0x40>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a3d      	ldr	r2, [pc, #244]	; (8008498 <TIM_Base_SetConfig+0x118>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00b      	beq.n	80083c0 <TIM_Base_SetConfig+0x40>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a3c      	ldr	r2, [pc, #240]	; (800849c <TIM_Base_SetConfig+0x11c>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d007      	beq.n	80083c0 <TIM_Base_SetConfig+0x40>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a3b      	ldr	r2, [pc, #236]	; (80084a0 <TIM_Base_SetConfig+0x120>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d003      	beq.n	80083c0 <TIM_Base_SetConfig+0x40>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a3a      	ldr	r2, [pc, #232]	; (80084a4 <TIM_Base_SetConfig+0x124>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d108      	bne.n	80083d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a2f      	ldr	r2, [pc, #188]	; (8008494 <TIM_Base_SetConfig+0x114>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d01f      	beq.n	800841a <TIM_Base_SetConfig+0x9a>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e0:	d01b      	beq.n	800841a <TIM_Base_SetConfig+0x9a>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a2c      	ldr	r2, [pc, #176]	; (8008498 <TIM_Base_SetConfig+0x118>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d017      	beq.n	800841a <TIM_Base_SetConfig+0x9a>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a2b      	ldr	r2, [pc, #172]	; (800849c <TIM_Base_SetConfig+0x11c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d013      	beq.n	800841a <TIM_Base_SetConfig+0x9a>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a2a      	ldr	r2, [pc, #168]	; (80084a0 <TIM_Base_SetConfig+0x120>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00f      	beq.n	800841a <TIM_Base_SetConfig+0x9a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a29      	ldr	r2, [pc, #164]	; (80084a4 <TIM_Base_SetConfig+0x124>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d00b      	beq.n	800841a <TIM_Base_SetConfig+0x9a>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a28      	ldr	r2, [pc, #160]	; (80084a8 <TIM_Base_SetConfig+0x128>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d007      	beq.n	800841a <TIM_Base_SetConfig+0x9a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a27      	ldr	r2, [pc, #156]	; (80084ac <TIM_Base_SetConfig+0x12c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d003      	beq.n	800841a <TIM_Base_SetConfig+0x9a>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a26      	ldr	r2, [pc, #152]	; (80084b0 <TIM_Base_SetConfig+0x130>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d108      	bne.n	800842c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	4313      	orrs	r3, r2
 800842a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	4313      	orrs	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a10      	ldr	r2, [pc, #64]	; (8008494 <TIM_Base_SetConfig+0x114>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d00f      	beq.n	8008478 <TIM_Base_SetConfig+0xf8>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a12      	ldr	r2, [pc, #72]	; (80084a4 <TIM_Base_SetConfig+0x124>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00b      	beq.n	8008478 <TIM_Base_SetConfig+0xf8>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a11      	ldr	r2, [pc, #68]	; (80084a8 <TIM_Base_SetConfig+0x128>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d007      	beq.n	8008478 <TIM_Base_SetConfig+0xf8>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a10      	ldr	r2, [pc, #64]	; (80084ac <TIM_Base_SetConfig+0x12c>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d003      	beq.n	8008478 <TIM_Base_SetConfig+0xf8>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a0f      	ldr	r2, [pc, #60]	; (80084b0 <TIM_Base_SetConfig+0x130>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d103      	bne.n	8008480 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	691a      	ldr	r2, [r3, #16]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	615a      	str	r2, [r3, #20]
}
 8008486:	bf00      	nop
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	40010000 	.word	0x40010000
 8008498:	40000400 	.word	0x40000400
 800849c:	40000800 	.word	0x40000800
 80084a0:	40000c00 	.word	0x40000c00
 80084a4:	40010400 	.word	0x40010400
 80084a8:	40014000 	.word	0x40014000
 80084ac:	40014400 	.word	0x40014400
 80084b0:	40014800 	.word	0x40014800

080084b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e042      	b.n	8008588 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008508:	2b00      	cmp	r3, #0
 800850a:	d106      	bne.n	800851a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7f9 f8fb 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2224      	movs	r2, #36	; 0x24
 800851e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f022 0201 	bic.w	r2, r2, #1
 8008530:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f91a 	bl	800876c <UART_SetConfig>
 8008538:	4603      	mov	r3, r0
 800853a:	2b01      	cmp	r3, #1
 800853c:	d101      	bne.n	8008542 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e022      	b.n	8008588 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 febe 	bl	80092cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800855e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689a      	ldr	r2, [r3, #8]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800856e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f042 0201 	orr.w	r2, r2, #1
 800857e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 ff45 	bl	8009410 <UART_CheckIdleState>
 8008586:	4603      	mov	r3, r0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e04a      	b.n	8008638 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d106      	bne.n	80085ba <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7f9 f8ab 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2224      	movs	r2, #36	; 0x24
 80085be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 0201 	bic.w	r2, r2, #1
 80085d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f8ca 	bl	800876c <UART_SetConfig>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d101      	bne.n	80085e2 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e02a      	b.n	8008638 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d002      	beq.n	80085f0 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fe6e 	bl	80092cc <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	689a      	ldr	r2, [r3, #8]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800860e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689a      	ldr	r2, [r3, #8]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f042 0208 	orr.w	r2, r2, #8
 800861e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f042 0201 	orr.w	r2, r2, #1
 800862e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 feed 	bl	8009410 <UART_CheckIdleState>
 8008636:	4603      	mov	r3, r0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b08a      	sub	sp, #40	; 0x28
 8008644:	af02      	add	r7, sp, #8
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	603b      	str	r3, [r7, #0]
 800864c:	4613      	mov	r3, r2
 800864e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008656:	2b20      	cmp	r3, #32
 8008658:	f040 8083 	bne.w	8008762 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d002      	beq.n	8008668 <HAL_UART_Transmit+0x28>
 8008662:	88fb      	ldrh	r3, [r7, #6]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d101      	bne.n	800866c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e07b      	b.n	8008764 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008672:	2b01      	cmp	r3, #1
 8008674:	d101      	bne.n	800867a <HAL_UART_Transmit+0x3a>
 8008676:	2302      	movs	r3, #2
 8008678:	e074      	b.n	8008764 <HAL_UART_Transmit+0x124>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2221      	movs	r2, #33	; 0x21
 800868e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008692:	f7f9 fadb 	bl	8001c4c <HAL_GetTick>
 8008696:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	88fa      	ldrh	r2, [r7, #6]
 800869c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	88fa      	ldrh	r2, [r7, #6]
 80086a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b0:	d108      	bne.n	80086c4 <HAL_UART_Transmit+0x84>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d104      	bne.n	80086c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80086ba:	2300      	movs	r3, #0
 80086bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	61bb      	str	r3, [r7, #24]
 80086c2:	e003      	b.n	80086cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086c8:	2300      	movs	r3, #0
 80086ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80086d4:	e02c      	b.n	8008730 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2200      	movs	r2, #0
 80086de:	2180      	movs	r1, #128	; 0x80
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 fedd 	bl	80094a0 <UART_WaitOnFlagUntilTimeout>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e039      	b.n	8008764 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10b      	bne.n	800870e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008704:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	3302      	adds	r3, #2
 800870a:	61bb      	str	r3, [r7, #24]
 800870c:	e007      	b.n	800871e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	781a      	ldrb	r2, [r3, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	3301      	adds	r3, #1
 800871c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008724:	b29b      	uxth	r3, r3
 8008726:	3b01      	subs	r3, #1
 8008728:	b29a      	uxth	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008736:	b29b      	uxth	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1cc      	bne.n	80086d6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	2200      	movs	r2, #0
 8008744:	2140      	movs	r1, #64	; 0x40
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f000 feaa 	bl	80094a0 <UART_WaitOnFlagUntilTimeout>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e006      	b.n	8008764 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2220      	movs	r2, #32
 800875a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	e000      	b.n	8008764 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008762:	2302      	movs	r3, #2
  }
}
 8008764:	4618      	mov	r0, r3
 8008766:	3720      	adds	r7, #32
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800876c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008770:	b08e      	sub	sp, #56	; 0x38
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	689a      	ldr	r2, [r3, #8]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	431a      	orrs	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	431a      	orrs	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	69db      	ldr	r3, [r3, #28]
 8008790:	4313      	orrs	r3, r2
 8008792:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800879a:	4313      	orrs	r3, r2
 800879c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	4bc1      	ldr	r3, [pc, #772]	; (8008aac <UART_SetConfig+0x340>)
 80087a6:	4013      	ands	r3, r2
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	6812      	ldr	r2, [r2, #0]
 80087ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80087ae:	430b      	orrs	r3, r1
 80087b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	68da      	ldr	r2, [r3, #12]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	430a      	orrs	r2, r1
 80087c6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4ab7      	ldr	r2, [pc, #732]	; (8008ab0 <UART_SetConfig+0x344>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d004      	beq.n	80087e2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a1b      	ldr	r3, [r3, #32]
 80087dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087de:	4313      	orrs	r3, r2
 80087e0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689a      	ldr	r2, [r3, #8]
 80087e8:	4bb2      	ldr	r3, [pc, #712]	; (8008ab4 <UART_SetConfig+0x348>)
 80087ea:	4013      	ands	r3, r2
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	6812      	ldr	r2, [r2, #0]
 80087f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80087f2:	430b      	orrs	r3, r1
 80087f4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fc:	f023 010f 	bic.w	r1, r3, #15
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4aa9      	ldr	r2, [pc, #676]	; (8008ab8 <UART_SetConfig+0x34c>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d177      	bne.n	8008906 <UART_SetConfig+0x19a>
 8008816:	4ba9      	ldr	r3, [pc, #676]	; (8008abc <UART_SetConfig+0x350>)
 8008818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800881a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800881e:	2b28      	cmp	r3, #40	; 0x28
 8008820:	d86c      	bhi.n	80088fc <UART_SetConfig+0x190>
 8008822:	a201      	add	r2, pc, #4	; (adr r2, 8008828 <UART_SetConfig+0xbc>)
 8008824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008828:	080088cd 	.word	0x080088cd
 800882c:	080088fd 	.word	0x080088fd
 8008830:	080088fd 	.word	0x080088fd
 8008834:	080088fd 	.word	0x080088fd
 8008838:	080088fd 	.word	0x080088fd
 800883c:	080088fd 	.word	0x080088fd
 8008840:	080088fd 	.word	0x080088fd
 8008844:	080088fd 	.word	0x080088fd
 8008848:	080088d5 	.word	0x080088d5
 800884c:	080088fd 	.word	0x080088fd
 8008850:	080088fd 	.word	0x080088fd
 8008854:	080088fd 	.word	0x080088fd
 8008858:	080088fd 	.word	0x080088fd
 800885c:	080088fd 	.word	0x080088fd
 8008860:	080088fd 	.word	0x080088fd
 8008864:	080088fd 	.word	0x080088fd
 8008868:	080088dd 	.word	0x080088dd
 800886c:	080088fd 	.word	0x080088fd
 8008870:	080088fd 	.word	0x080088fd
 8008874:	080088fd 	.word	0x080088fd
 8008878:	080088fd 	.word	0x080088fd
 800887c:	080088fd 	.word	0x080088fd
 8008880:	080088fd 	.word	0x080088fd
 8008884:	080088fd 	.word	0x080088fd
 8008888:	080088e5 	.word	0x080088e5
 800888c:	080088fd 	.word	0x080088fd
 8008890:	080088fd 	.word	0x080088fd
 8008894:	080088fd 	.word	0x080088fd
 8008898:	080088fd 	.word	0x080088fd
 800889c:	080088fd 	.word	0x080088fd
 80088a0:	080088fd 	.word	0x080088fd
 80088a4:	080088fd 	.word	0x080088fd
 80088a8:	080088ed 	.word	0x080088ed
 80088ac:	080088fd 	.word	0x080088fd
 80088b0:	080088fd 	.word	0x080088fd
 80088b4:	080088fd 	.word	0x080088fd
 80088b8:	080088fd 	.word	0x080088fd
 80088bc:	080088fd 	.word	0x080088fd
 80088c0:	080088fd 	.word	0x080088fd
 80088c4:	080088fd 	.word	0x080088fd
 80088c8:	080088f5 	.word	0x080088f5
 80088cc:	2301      	movs	r3, #1
 80088ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088d2:	e233      	b.n	8008d3c <UART_SetConfig+0x5d0>
 80088d4:	2304      	movs	r3, #4
 80088d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088da:	e22f      	b.n	8008d3c <UART_SetConfig+0x5d0>
 80088dc:	2308      	movs	r3, #8
 80088de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088e2:	e22b      	b.n	8008d3c <UART_SetConfig+0x5d0>
 80088e4:	2310      	movs	r3, #16
 80088e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ea:	e227      	b.n	8008d3c <UART_SetConfig+0x5d0>
 80088ec:	2320      	movs	r3, #32
 80088ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088f2:	e223      	b.n	8008d3c <UART_SetConfig+0x5d0>
 80088f4:	2340      	movs	r3, #64	; 0x40
 80088f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088fa:	e21f      	b.n	8008d3c <UART_SetConfig+0x5d0>
 80088fc:	2380      	movs	r3, #128	; 0x80
 80088fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008902:	bf00      	nop
 8008904:	e21a      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a6d      	ldr	r2, [pc, #436]	; (8008ac0 <UART_SetConfig+0x354>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d132      	bne.n	8008976 <UART_SetConfig+0x20a>
 8008910:	4b6a      	ldr	r3, [pc, #424]	; (8008abc <UART_SetConfig+0x350>)
 8008912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008914:	f003 0307 	and.w	r3, r3, #7
 8008918:	2b05      	cmp	r3, #5
 800891a:	d827      	bhi.n	800896c <UART_SetConfig+0x200>
 800891c:	a201      	add	r2, pc, #4	; (adr r2, 8008924 <UART_SetConfig+0x1b8>)
 800891e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008922:	bf00      	nop
 8008924:	0800893d 	.word	0x0800893d
 8008928:	08008945 	.word	0x08008945
 800892c:	0800894d 	.word	0x0800894d
 8008930:	08008955 	.word	0x08008955
 8008934:	0800895d 	.word	0x0800895d
 8008938:	08008965 	.word	0x08008965
 800893c:	2300      	movs	r3, #0
 800893e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008942:	e1fb      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008944:	2304      	movs	r3, #4
 8008946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800894a:	e1f7      	b.n	8008d3c <UART_SetConfig+0x5d0>
 800894c:	2308      	movs	r3, #8
 800894e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008952:	e1f3      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008954:	2310      	movs	r3, #16
 8008956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800895a:	e1ef      	b.n	8008d3c <UART_SetConfig+0x5d0>
 800895c:	2320      	movs	r3, #32
 800895e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008962:	e1eb      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008964:	2340      	movs	r3, #64	; 0x40
 8008966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800896a:	e1e7      	b.n	8008d3c <UART_SetConfig+0x5d0>
 800896c:	2380      	movs	r3, #128	; 0x80
 800896e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008972:	bf00      	nop
 8008974:	e1e2      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a52      	ldr	r2, [pc, #328]	; (8008ac4 <UART_SetConfig+0x358>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d132      	bne.n	80089e6 <UART_SetConfig+0x27a>
 8008980:	4b4e      	ldr	r3, [pc, #312]	; (8008abc <UART_SetConfig+0x350>)
 8008982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008984:	f003 0307 	and.w	r3, r3, #7
 8008988:	2b05      	cmp	r3, #5
 800898a:	d827      	bhi.n	80089dc <UART_SetConfig+0x270>
 800898c:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <UART_SetConfig+0x228>)
 800898e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008992:	bf00      	nop
 8008994:	080089ad 	.word	0x080089ad
 8008998:	080089b5 	.word	0x080089b5
 800899c:	080089bd 	.word	0x080089bd
 80089a0:	080089c5 	.word	0x080089c5
 80089a4:	080089cd 	.word	0x080089cd
 80089a8:	080089d5 	.word	0x080089d5
 80089ac:	2300      	movs	r3, #0
 80089ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089b2:	e1c3      	b.n	8008d3c <UART_SetConfig+0x5d0>
 80089b4:	2304      	movs	r3, #4
 80089b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ba:	e1bf      	b.n	8008d3c <UART_SetConfig+0x5d0>
 80089bc:	2308      	movs	r3, #8
 80089be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089c2:	e1bb      	b.n	8008d3c <UART_SetConfig+0x5d0>
 80089c4:	2310      	movs	r3, #16
 80089c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ca:	e1b7      	b.n	8008d3c <UART_SetConfig+0x5d0>
 80089cc:	2320      	movs	r3, #32
 80089ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089d2:	e1b3      	b.n	8008d3c <UART_SetConfig+0x5d0>
 80089d4:	2340      	movs	r3, #64	; 0x40
 80089d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089da:	e1af      	b.n	8008d3c <UART_SetConfig+0x5d0>
 80089dc:	2380      	movs	r3, #128	; 0x80
 80089de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089e2:	bf00      	nop
 80089e4:	e1aa      	b.n	8008d3c <UART_SetConfig+0x5d0>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a37      	ldr	r2, [pc, #220]	; (8008ac8 <UART_SetConfig+0x35c>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d132      	bne.n	8008a56 <UART_SetConfig+0x2ea>
 80089f0:	4b32      	ldr	r3, [pc, #200]	; (8008abc <UART_SetConfig+0x350>)
 80089f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f4:	f003 0307 	and.w	r3, r3, #7
 80089f8:	2b05      	cmp	r3, #5
 80089fa:	d827      	bhi.n	8008a4c <UART_SetConfig+0x2e0>
 80089fc:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <UART_SetConfig+0x298>)
 80089fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a02:	bf00      	nop
 8008a04:	08008a1d 	.word	0x08008a1d
 8008a08:	08008a25 	.word	0x08008a25
 8008a0c:	08008a2d 	.word	0x08008a2d
 8008a10:	08008a35 	.word	0x08008a35
 8008a14:	08008a3d 	.word	0x08008a3d
 8008a18:	08008a45 	.word	0x08008a45
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a22:	e18b      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008a24:	2304      	movs	r3, #4
 8008a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a2a:	e187      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008a2c:	2308      	movs	r3, #8
 8008a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a32:	e183      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008a34:	2310      	movs	r3, #16
 8008a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a3a:	e17f      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008a3c:	2320      	movs	r3, #32
 8008a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a42:	e17b      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008a44:	2340      	movs	r3, #64	; 0x40
 8008a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a4a:	e177      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008a4c:	2380      	movs	r3, #128	; 0x80
 8008a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a52:	bf00      	nop
 8008a54:	e172      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a1c      	ldr	r2, [pc, #112]	; (8008acc <UART_SetConfig+0x360>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d144      	bne.n	8008aea <UART_SetConfig+0x37e>
 8008a60:	4b16      	ldr	r3, [pc, #88]	; (8008abc <UART_SetConfig+0x350>)
 8008a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a64:	f003 0307 	and.w	r3, r3, #7
 8008a68:	2b05      	cmp	r3, #5
 8008a6a:	d839      	bhi.n	8008ae0 <UART_SetConfig+0x374>
 8008a6c:	a201      	add	r2, pc, #4	; (adr r2, 8008a74 <UART_SetConfig+0x308>)
 8008a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a72:	bf00      	nop
 8008a74:	08008a8d 	.word	0x08008a8d
 8008a78:	08008a95 	.word	0x08008a95
 8008a7c:	08008a9d 	.word	0x08008a9d
 8008a80:	08008aa5 	.word	0x08008aa5
 8008a84:	08008ad1 	.word	0x08008ad1
 8008a88:	08008ad9 	.word	0x08008ad9
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a92:	e153      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008a94:	2304      	movs	r3, #4
 8008a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a9a:	e14f      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008a9c:	2308      	movs	r3, #8
 8008a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aa2:	e14b      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008aa4:	2310      	movs	r3, #16
 8008aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aaa:	e147      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008aac:	cfff69f3 	.word	0xcfff69f3
 8008ab0:	58000c00 	.word	0x58000c00
 8008ab4:	11fff4ff 	.word	0x11fff4ff
 8008ab8:	40011000 	.word	0x40011000
 8008abc:	58024400 	.word	0x58024400
 8008ac0:	40004400 	.word	0x40004400
 8008ac4:	40004800 	.word	0x40004800
 8008ac8:	40004c00 	.word	0x40004c00
 8008acc:	40005000 	.word	0x40005000
 8008ad0:	2320      	movs	r3, #32
 8008ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ad6:	e131      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008ad8:	2340      	movs	r3, #64	; 0x40
 8008ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ade:	e12d      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008ae0:	2380      	movs	r3, #128	; 0x80
 8008ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ae6:	bf00      	nop
 8008ae8:	e128      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4ab6      	ldr	r2, [pc, #728]	; (8008dc8 <UART_SetConfig+0x65c>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d178      	bne.n	8008be6 <UART_SetConfig+0x47a>
 8008af4:	4bb5      	ldr	r3, [pc, #724]	; (8008dcc <UART_SetConfig+0x660>)
 8008af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008afc:	2b28      	cmp	r3, #40	; 0x28
 8008afe:	d86d      	bhi.n	8008bdc <UART_SetConfig+0x470>
 8008b00:	a201      	add	r2, pc, #4	; (adr r2, 8008b08 <UART_SetConfig+0x39c>)
 8008b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b06:	bf00      	nop
 8008b08:	08008bad 	.word	0x08008bad
 8008b0c:	08008bdd 	.word	0x08008bdd
 8008b10:	08008bdd 	.word	0x08008bdd
 8008b14:	08008bdd 	.word	0x08008bdd
 8008b18:	08008bdd 	.word	0x08008bdd
 8008b1c:	08008bdd 	.word	0x08008bdd
 8008b20:	08008bdd 	.word	0x08008bdd
 8008b24:	08008bdd 	.word	0x08008bdd
 8008b28:	08008bb5 	.word	0x08008bb5
 8008b2c:	08008bdd 	.word	0x08008bdd
 8008b30:	08008bdd 	.word	0x08008bdd
 8008b34:	08008bdd 	.word	0x08008bdd
 8008b38:	08008bdd 	.word	0x08008bdd
 8008b3c:	08008bdd 	.word	0x08008bdd
 8008b40:	08008bdd 	.word	0x08008bdd
 8008b44:	08008bdd 	.word	0x08008bdd
 8008b48:	08008bbd 	.word	0x08008bbd
 8008b4c:	08008bdd 	.word	0x08008bdd
 8008b50:	08008bdd 	.word	0x08008bdd
 8008b54:	08008bdd 	.word	0x08008bdd
 8008b58:	08008bdd 	.word	0x08008bdd
 8008b5c:	08008bdd 	.word	0x08008bdd
 8008b60:	08008bdd 	.word	0x08008bdd
 8008b64:	08008bdd 	.word	0x08008bdd
 8008b68:	08008bc5 	.word	0x08008bc5
 8008b6c:	08008bdd 	.word	0x08008bdd
 8008b70:	08008bdd 	.word	0x08008bdd
 8008b74:	08008bdd 	.word	0x08008bdd
 8008b78:	08008bdd 	.word	0x08008bdd
 8008b7c:	08008bdd 	.word	0x08008bdd
 8008b80:	08008bdd 	.word	0x08008bdd
 8008b84:	08008bdd 	.word	0x08008bdd
 8008b88:	08008bcd 	.word	0x08008bcd
 8008b8c:	08008bdd 	.word	0x08008bdd
 8008b90:	08008bdd 	.word	0x08008bdd
 8008b94:	08008bdd 	.word	0x08008bdd
 8008b98:	08008bdd 	.word	0x08008bdd
 8008b9c:	08008bdd 	.word	0x08008bdd
 8008ba0:	08008bdd 	.word	0x08008bdd
 8008ba4:	08008bdd 	.word	0x08008bdd
 8008ba8:	08008bd5 	.word	0x08008bd5
 8008bac:	2301      	movs	r3, #1
 8008bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bb2:	e0c3      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008bb4:	2304      	movs	r3, #4
 8008bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bba:	e0bf      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008bbc:	2308      	movs	r3, #8
 8008bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bc2:	e0bb      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008bc4:	2310      	movs	r3, #16
 8008bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bca:	e0b7      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008bcc:	2320      	movs	r3, #32
 8008bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bd2:	e0b3      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008bd4:	2340      	movs	r3, #64	; 0x40
 8008bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bda:	e0af      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008bdc:	2380      	movs	r3, #128	; 0x80
 8008bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008be2:	bf00      	nop
 8008be4:	e0aa      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a79      	ldr	r2, [pc, #484]	; (8008dd0 <UART_SetConfig+0x664>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d132      	bne.n	8008c56 <UART_SetConfig+0x4ea>
 8008bf0:	4b76      	ldr	r3, [pc, #472]	; (8008dcc <UART_SetConfig+0x660>)
 8008bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf4:	f003 0307 	and.w	r3, r3, #7
 8008bf8:	2b05      	cmp	r3, #5
 8008bfa:	d827      	bhi.n	8008c4c <UART_SetConfig+0x4e0>
 8008bfc:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <UART_SetConfig+0x498>)
 8008bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c02:	bf00      	nop
 8008c04:	08008c1d 	.word	0x08008c1d
 8008c08:	08008c25 	.word	0x08008c25
 8008c0c:	08008c2d 	.word	0x08008c2d
 8008c10:	08008c35 	.word	0x08008c35
 8008c14:	08008c3d 	.word	0x08008c3d
 8008c18:	08008c45 	.word	0x08008c45
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c22:	e08b      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008c24:	2304      	movs	r3, #4
 8008c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c2a:	e087      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008c2c:	2308      	movs	r3, #8
 8008c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c32:	e083      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008c34:	2310      	movs	r3, #16
 8008c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c3a:	e07f      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008c3c:	2320      	movs	r3, #32
 8008c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c42:	e07b      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008c44:	2340      	movs	r3, #64	; 0x40
 8008c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c4a:	e077      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008c4c:	2380      	movs	r3, #128	; 0x80
 8008c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c52:	bf00      	nop
 8008c54:	e072      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a5e      	ldr	r2, [pc, #376]	; (8008dd4 <UART_SetConfig+0x668>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d132      	bne.n	8008cc6 <UART_SetConfig+0x55a>
 8008c60:	4b5a      	ldr	r3, [pc, #360]	; (8008dcc <UART_SetConfig+0x660>)
 8008c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c64:	f003 0307 	and.w	r3, r3, #7
 8008c68:	2b05      	cmp	r3, #5
 8008c6a:	d827      	bhi.n	8008cbc <UART_SetConfig+0x550>
 8008c6c:	a201      	add	r2, pc, #4	; (adr r2, 8008c74 <UART_SetConfig+0x508>)
 8008c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c72:	bf00      	nop
 8008c74:	08008c8d 	.word	0x08008c8d
 8008c78:	08008c95 	.word	0x08008c95
 8008c7c:	08008c9d 	.word	0x08008c9d
 8008c80:	08008ca5 	.word	0x08008ca5
 8008c84:	08008cad 	.word	0x08008cad
 8008c88:	08008cb5 	.word	0x08008cb5
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c92:	e053      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008c94:	2304      	movs	r3, #4
 8008c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c9a:	e04f      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008c9c:	2308      	movs	r3, #8
 8008c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ca2:	e04b      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008ca4:	2310      	movs	r3, #16
 8008ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008caa:	e047      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008cac:	2320      	movs	r3, #32
 8008cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cb2:	e043      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008cb4:	2340      	movs	r3, #64	; 0x40
 8008cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cba:	e03f      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008cbc:	2380      	movs	r3, #128	; 0x80
 8008cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cc2:	bf00      	nop
 8008cc4:	e03a      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a43      	ldr	r2, [pc, #268]	; (8008dd8 <UART_SetConfig+0x66c>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d132      	bne.n	8008d36 <UART_SetConfig+0x5ca>
 8008cd0:	4b3e      	ldr	r3, [pc, #248]	; (8008dcc <UART_SetConfig+0x660>)
 8008cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd4:	f003 0307 	and.w	r3, r3, #7
 8008cd8:	2b05      	cmp	r3, #5
 8008cda:	d827      	bhi.n	8008d2c <UART_SetConfig+0x5c0>
 8008cdc:	a201      	add	r2, pc, #4	; (adr r2, 8008ce4 <UART_SetConfig+0x578>)
 8008cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce2:	bf00      	nop
 8008ce4:	08008cfd 	.word	0x08008cfd
 8008ce8:	08008d05 	.word	0x08008d05
 8008cec:	08008d0d 	.word	0x08008d0d
 8008cf0:	08008d15 	.word	0x08008d15
 8008cf4:	08008d1d 	.word	0x08008d1d
 8008cf8:	08008d25 	.word	0x08008d25
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d02:	e01b      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008d04:	2304      	movs	r3, #4
 8008d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d0a:	e017      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008d0c:	2308      	movs	r3, #8
 8008d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d12:	e013      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008d14:	2310      	movs	r3, #16
 8008d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d1a:	e00f      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008d1c:	2320      	movs	r3, #32
 8008d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d22:	e00b      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008d24:	2340      	movs	r3, #64	; 0x40
 8008d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d2a:	e007      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008d2c:	2380      	movs	r3, #128	; 0x80
 8008d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d32:	bf00      	nop
 8008d34:	e002      	b.n	8008d3c <UART_SetConfig+0x5d0>
 8008d36:	2380      	movs	r3, #128	; 0x80
 8008d38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a25      	ldr	r2, [pc, #148]	; (8008dd8 <UART_SetConfig+0x66c>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	f040 80b8 	bne.w	8008eb8 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008d4c:	2b08      	cmp	r3, #8
 8008d4e:	d019      	beq.n	8008d84 <UART_SetConfig+0x618>
 8008d50:	2b08      	cmp	r3, #8
 8008d52:	dc04      	bgt.n	8008d5e <UART_SetConfig+0x5f2>
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d009      	beq.n	8008d6c <UART_SetConfig+0x600>
 8008d58:	2b04      	cmp	r3, #4
 8008d5a:	d00b      	beq.n	8008d74 <UART_SetConfig+0x608>
 8008d5c:	e042      	b.n	8008de4 <UART_SetConfig+0x678>
 8008d5e:	2b20      	cmp	r3, #32
 8008d60:	d02b      	beq.n	8008dba <UART_SetConfig+0x64e>
 8008d62:	2b40      	cmp	r3, #64	; 0x40
 8008d64:	d02c      	beq.n	8008dc0 <UART_SetConfig+0x654>
 8008d66:	2b10      	cmp	r3, #16
 8008d68:	d014      	beq.n	8008d94 <UART_SetConfig+0x628>
 8008d6a:	e03b      	b.n	8008de4 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008d6c:	f7fd fc66 	bl	800663c <HAL_RCCEx_GetD3PCLK1Freq>
 8008d70:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008d72:	e03d      	b.n	8008df0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d74:	f107 0314 	add.w	r3, r7, #20
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7fd fc75 	bl	8006668 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d82:	e035      	b.n	8008df0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d84:	f107 0308 	add.w	r3, r7, #8
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7fd fdb9 	bl	8006900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d92:	e02d      	b.n	8008df0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d94:	4b0d      	ldr	r3, [pc, #52]	; (8008dcc <UART_SetConfig+0x660>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0320 	and.w	r3, r3, #32
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d009      	beq.n	8008db4 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008da0:	4b0a      	ldr	r3, [pc, #40]	; (8008dcc <UART_SetConfig+0x660>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	08db      	lsrs	r3, r3, #3
 8008da6:	f003 0303 	and.w	r3, r3, #3
 8008daa:	4a0c      	ldr	r2, [pc, #48]	; (8008ddc <UART_SetConfig+0x670>)
 8008dac:	fa22 f303 	lsr.w	r3, r2, r3
 8008db0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008db2:	e01d      	b.n	8008df0 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8008db4:	4b09      	ldr	r3, [pc, #36]	; (8008ddc <UART_SetConfig+0x670>)
 8008db6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008db8:	e01a      	b.n	8008df0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008dba:	4b09      	ldr	r3, [pc, #36]	; (8008de0 <UART_SetConfig+0x674>)
 8008dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dbe:	e017      	b.n	8008df0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dc6:	e013      	b.n	8008df0 <UART_SetConfig+0x684>
 8008dc8:	40011400 	.word	0x40011400
 8008dcc:	58024400 	.word	0x58024400
 8008dd0:	40007800 	.word	0x40007800
 8008dd4:	40007c00 	.word	0x40007c00
 8008dd8:	58000c00 	.word	0x58000c00
 8008ddc:	03d09000 	.word	0x03d09000
 8008de0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008dee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f000 824d 	beq.w	8009292 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfc:	4aad      	ldr	r2, [pc, #692]	; (80090b4 <UART_SetConfig+0x948>)
 8008dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e02:	461a      	mov	r2, r3
 8008e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e06:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e0a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685a      	ldr	r2, [r3, #4]
 8008e10:	4613      	mov	r3, r2
 8008e12:	005b      	lsls	r3, r3, #1
 8008e14:	4413      	add	r3, r2
 8008e16:	6a3a      	ldr	r2, [r7, #32]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d305      	bcc.n	8008e28 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e22:	6a3a      	ldr	r2, [r7, #32]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d903      	bls.n	8008e30 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008e2e:	e230      	b.n	8009292 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e32:	4618      	mov	r0, r3
 8008e34:	f04f 0100 	mov.w	r1, #0
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	4a9d      	ldr	r2, [pc, #628]	; (80090b4 <UART_SetConfig+0x948>)
 8008e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	f04f 0400 	mov.w	r4, #0
 8008e48:	461a      	mov	r2, r3
 8008e4a:	4623      	mov	r3, r4
 8008e4c:	f7f7 fa48 	bl	80002e0 <__aeabi_uldivmod>
 8008e50:	4603      	mov	r3, r0
 8008e52:	460c      	mov	r4, r1
 8008e54:	4619      	mov	r1, r3
 8008e56:	4622      	mov	r2, r4
 8008e58:	f04f 0300 	mov.w	r3, #0
 8008e5c:	f04f 0400 	mov.w	r4, #0
 8008e60:	0214      	lsls	r4, r2, #8
 8008e62:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008e66:	020b      	lsls	r3, r1, #8
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	6852      	ldr	r2, [r2, #4]
 8008e6c:	0852      	lsrs	r2, r2, #1
 8008e6e:	4611      	mov	r1, r2
 8008e70:	f04f 0200 	mov.w	r2, #0
 8008e74:	eb13 0b01 	adds.w	fp, r3, r1
 8008e78:	eb44 0c02 	adc.w	ip, r4, r2
 8008e7c:	4658      	mov	r0, fp
 8008e7e:	4661      	mov	r1, ip
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	f04f 0400 	mov.w	r4, #0
 8008e88:	461a      	mov	r2, r3
 8008e8a:	4623      	mov	r3, r4
 8008e8c:	f7f7 fa28 	bl	80002e0 <__aeabi_uldivmod>
 8008e90:	4603      	mov	r3, r0
 8008e92:	460c      	mov	r4, r1
 8008e94:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e9c:	d308      	bcc.n	8008eb0 <UART_SetConfig+0x744>
 8008e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ea4:	d204      	bcs.n	8008eb0 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eac:	60da      	str	r2, [r3, #12]
 8008eae:	e1f0      	b.n	8009292 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008eb6:	e1ec      	b.n	8009292 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	69db      	ldr	r3, [r3, #28]
 8008ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ec0:	f040 8100 	bne.w	80090c4 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8008ec4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ec8:	2b40      	cmp	r3, #64	; 0x40
 8008eca:	f200 80b7 	bhi.w	800903c <UART_SetConfig+0x8d0>
 8008ece:	a201      	add	r2, pc, #4	; (adr r2, 8008ed4 <UART_SetConfig+0x768>)
 8008ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed4:	08008fd9 	.word	0x08008fd9
 8008ed8:	08008fe1 	.word	0x08008fe1
 8008edc:	0800903d 	.word	0x0800903d
 8008ee0:	0800903d 	.word	0x0800903d
 8008ee4:	08008fe9 	.word	0x08008fe9
 8008ee8:	0800903d 	.word	0x0800903d
 8008eec:	0800903d 	.word	0x0800903d
 8008ef0:	0800903d 	.word	0x0800903d
 8008ef4:	08008ff9 	.word	0x08008ff9
 8008ef8:	0800903d 	.word	0x0800903d
 8008efc:	0800903d 	.word	0x0800903d
 8008f00:	0800903d 	.word	0x0800903d
 8008f04:	0800903d 	.word	0x0800903d
 8008f08:	0800903d 	.word	0x0800903d
 8008f0c:	0800903d 	.word	0x0800903d
 8008f10:	0800903d 	.word	0x0800903d
 8008f14:	08009009 	.word	0x08009009
 8008f18:	0800903d 	.word	0x0800903d
 8008f1c:	0800903d 	.word	0x0800903d
 8008f20:	0800903d 	.word	0x0800903d
 8008f24:	0800903d 	.word	0x0800903d
 8008f28:	0800903d 	.word	0x0800903d
 8008f2c:	0800903d 	.word	0x0800903d
 8008f30:	0800903d 	.word	0x0800903d
 8008f34:	0800903d 	.word	0x0800903d
 8008f38:	0800903d 	.word	0x0800903d
 8008f3c:	0800903d 	.word	0x0800903d
 8008f40:	0800903d 	.word	0x0800903d
 8008f44:	0800903d 	.word	0x0800903d
 8008f48:	0800903d 	.word	0x0800903d
 8008f4c:	0800903d 	.word	0x0800903d
 8008f50:	0800903d 	.word	0x0800903d
 8008f54:	0800902f 	.word	0x0800902f
 8008f58:	0800903d 	.word	0x0800903d
 8008f5c:	0800903d 	.word	0x0800903d
 8008f60:	0800903d 	.word	0x0800903d
 8008f64:	0800903d 	.word	0x0800903d
 8008f68:	0800903d 	.word	0x0800903d
 8008f6c:	0800903d 	.word	0x0800903d
 8008f70:	0800903d 	.word	0x0800903d
 8008f74:	0800903d 	.word	0x0800903d
 8008f78:	0800903d 	.word	0x0800903d
 8008f7c:	0800903d 	.word	0x0800903d
 8008f80:	0800903d 	.word	0x0800903d
 8008f84:	0800903d 	.word	0x0800903d
 8008f88:	0800903d 	.word	0x0800903d
 8008f8c:	0800903d 	.word	0x0800903d
 8008f90:	0800903d 	.word	0x0800903d
 8008f94:	0800903d 	.word	0x0800903d
 8008f98:	0800903d 	.word	0x0800903d
 8008f9c:	0800903d 	.word	0x0800903d
 8008fa0:	0800903d 	.word	0x0800903d
 8008fa4:	0800903d 	.word	0x0800903d
 8008fa8:	0800903d 	.word	0x0800903d
 8008fac:	0800903d 	.word	0x0800903d
 8008fb0:	0800903d 	.word	0x0800903d
 8008fb4:	0800903d 	.word	0x0800903d
 8008fb8:	0800903d 	.word	0x0800903d
 8008fbc:	0800903d 	.word	0x0800903d
 8008fc0:	0800903d 	.word	0x0800903d
 8008fc4:	0800903d 	.word	0x0800903d
 8008fc8:	0800903d 	.word	0x0800903d
 8008fcc:	0800903d 	.word	0x0800903d
 8008fd0:	0800903d 	.word	0x0800903d
 8008fd4:	08009035 	.word	0x08009035
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fd8:	f7fc fbd4 	bl	8005784 <HAL_RCC_GetPCLK1Freq>
 8008fdc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008fde:	e033      	b.n	8009048 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fe0:	f7fc fbe6 	bl	80057b0 <HAL_RCC_GetPCLK2Freq>
 8008fe4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008fe6:	e02f      	b.n	8009048 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fe8:	f107 0314 	add.w	r3, r7, #20
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fd fb3b 	bl	8006668 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ff6:	e027      	b.n	8009048 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ff8:	f107 0308 	add.w	r3, r7, #8
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7fd fc7f 	bl	8006900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009006:	e01f      	b.n	8009048 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009008:	4b2b      	ldr	r3, [pc, #172]	; (80090b8 <UART_SetConfig+0x94c>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 0320 	and.w	r3, r3, #32
 8009010:	2b00      	cmp	r3, #0
 8009012:	d009      	beq.n	8009028 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009014:	4b28      	ldr	r3, [pc, #160]	; (80090b8 <UART_SetConfig+0x94c>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	08db      	lsrs	r3, r3, #3
 800901a:	f003 0303 	and.w	r3, r3, #3
 800901e:	4a27      	ldr	r2, [pc, #156]	; (80090bc <UART_SetConfig+0x950>)
 8009020:	fa22 f303 	lsr.w	r3, r2, r3
 8009024:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009026:	e00f      	b.n	8009048 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8009028:	4b24      	ldr	r3, [pc, #144]	; (80090bc <UART_SetConfig+0x950>)
 800902a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800902c:	e00c      	b.n	8009048 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800902e:	4b24      	ldr	r3, [pc, #144]	; (80090c0 <UART_SetConfig+0x954>)
 8009030:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009032:	e009      	b.n	8009048 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009034:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009038:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800903a:	e005      	b.n	8009048 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800903c:	2300      	movs	r3, #0
 800903e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009046:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 8121 	beq.w	8009292 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009054:	4a17      	ldr	r2, [pc, #92]	; (80090b4 <UART_SetConfig+0x948>)
 8009056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800905a:	461a      	mov	r2, r3
 800905c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009062:	005a      	lsls	r2, r3, #1
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	085b      	lsrs	r3, r3, #1
 800906a:	441a      	add	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	fbb2 f3f3 	udiv	r3, r2, r3
 8009074:	b29b      	uxth	r3, r3
 8009076:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	2b0f      	cmp	r3, #15
 800907c:	d916      	bls.n	80090ac <UART_SetConfig+0x940>
 800907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009084:	d212      	bcs.n	80090ac <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	b29b      	uxth	r3, r3
 800908a:	f023 030f 	bic.w	r3, r3, #15
 800908e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009092:	085b      	lsrs	r3, r3, #1
 8009094:	b29b      	uxth	r3, r3
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	b29a      	uxth	r2, r3
 800909c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800909e:	4313      	orrs	r3, r2
 80090a0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80090a8:	60da      	str	r2, [r3, #12]
 80090aa:	e0f2      	b.n	8009292 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80090b2:	e0ee      	b.n	8009292 <UART_SetConfig+0xb26>
 80090b4:	0800dbfc 	.word	0x0800dbfc
 80090b8:	58024400 	.word	0x58024400
 80090bc:	03d09000 	.word	0x03d09000
 80090c0:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80090c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80090c8:	2b40      	cmp	r3, #64	; 0x40
 80090ca:	f200 80b7 	bhi.w	800923c <UART_SetConfig+0xad0>
 80090ce:	a201      	add	r2, pc, #4	; (adr r2, 80090d4 <UART_SetConfig+0x968>)
 80090d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d4:	080091d9 	.word	0x080091d9
 80090d8:	080091e1 	.word	0x080091e1
 80090dc:	0800923d 	.word	0x0800923d
 80090e0:	0800923d 	.word	0x0800923d
 80090e4:	080091e9 	.word	0x080091e9
 80090e8:	0800923d 	.word	0x0800923d
 80090ec:	0800923d 	.word	0x0800923d
 80090f0:	0800923d 	.word	0x0800923d
 80090f4:	080091f9 	.word	0x080091f9
 80090f8:	0800923d 	.word	0x0800923d
 80090fc:	0800923d 	.word	0x0800923d
 8009100:	0800923d 	.word	0x0800923d
 8009104:	0800923d 	.word	0x0800923d
 8009108:	0800923d 	.word	0x0800923d
 800910c:	0800923d 	.word	0x0800923d
 8009110:	0800923d 	.word	0x0800923d
 8009114:	08009209 	.word	0x08009209
 8009118:	0800923d 	.word	0x0800923d
 800911c:	0800923d 	.word	0x0800923d
 8009120:	0800923d 	.word	0x0800923d
 8009124:	0800923d 	.word	0x0800923d
 8009128:	0800923d 	.word	0x0800923d
 800912c:	0800923d 	.word	0x0800923d
 8009130:	0800923d 	.word	0x0800923d
 8009134:	0800923d 	.word	0x0800923d
 8009138:	0800923d 	.word	0x0800923d
 800913c:	0800923d 	.word	0x0800923d
 8009140:	0800923d 	.word	0x0800923d
 8009144:	0800923d 	.word	0x0800923d
 8009148:	0800923d 	.word	0x0800923d
 800914c:	0800923d 	.word	0x0800923d
 8009150:	0800923d 	.word	0x0800923d
 8009154:	0800922f 	.word	0x0800922f
 8009158:	0800923d 	.word	0x0800923d
 800915c:	0800923d 	.word	0x0800923d
 8009160:	0800923d 	.word	0x0800923d
 8009164:	0800923d 	.word	0x0800923d
 8009168:	0800923d 	.word	0x0800923d
 800916c:	0800923d 	.word	0x0800923d
 8009170:	0800923d 	.word	0x0800923d
 8009174:	0800923d 	.word	0x0800923d
 8009178:	0800923d 	.word	0x0800923d
 800917c:	0800923d 	.word	0x0800923d
 8009180:	0800923d 	.word	0x0800923d
 8009184:	0800923d 	.word	0x0800923d
 8009188:	0800923d 	.word	0x0800923d
 800918c:	0800923d 	.word	0x0800923d
 8009190:	0800923d 	.word	0x0800923d
 8009194:	0800923d 	.word	0x0800923d
 8009198:	0800923d 	.word	0x0800923d
 800919c:	0800923d 	.word	0x0800923d
 80091a0:	0800923d 	.word	0x0800923d
 80091a4:	0800923d 	.word	0x0800923d
 80091a8:	0800923d 	.word	0x0800923d
 80091ac:	0800923d 	.word	0x0800923d
 80091b0:	0800923d 	.word	0x0800923d
 80091b4:	0800923d 	.word	0x0800923d
 80091b8:	0800923d 	.word	0x0800923d
 80091bc:	0800923d 	.word	0x0800923d
 80091c0:	0800923d 	.word	0x0800923d
 80091c4:	0800923d 	.word	0x0800923d
 80091c8:	0800923d 	.word	0x0800923d
 80091cc:	0800923d 	.word	0x0800923d
 80091d0:	0800923d 	.word	0x0800923d
 80091d4:	08009235 	.word	0x08009235
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091d8:	f7fc fad4 	bl	8005784 <HAL_RCC_GetPCLK1Freq>
 80091dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80091de:	e033      	b.n	8009248 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091e0:	f7fc fae6 	bl	80057b0 <HAL_RCC_GetPCLK2Freq>
 80091e4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80091e6:	e02f      	b.n	8009248 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091e8:	f107 0314 	add.w	r3, r7, #20
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fd fa3b 	bl	8006668 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091f6:	e027      	b.n	8009248 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091f8:	f107 0308 	add.w	r3, r7, #8
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7fd fb7f 	bl	8006900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009206:	e01f      	b.n	8009248 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009208:	4b2c      	ldr	r3, [pc, #176]	; (80092bc <UART_SetConfig+0xb50>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 0320 	and.w	r3, r3, #32
 8009210:	2b00      	cmp	r3, #0
 8009212:	d009      	beq.n	8009228 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009214:	4b29      	ldr	r3, [pc, #164]	; (80092bc <UART_SetConfig+0xb50>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	08db      	lsrs	r3, r3, #3
 800921a:	f003 0303 	and.w	r3, r3, #3
 800921e:	4a28      	ldr	r2, [pc, #160]	; (80092c0 <UART_SetConfig+0xb54>)
 8009220:	fa22 f303 	lsr.w	r3, r2, r3
 8009224:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009226:	e00f      	b.n	8009248 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8009228:	4b25      	ldr	r3, [pc, #148]	; (80092c0 <UART_SetConfig+0xb54>)
 800922a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800922c:	e00c      	b.n	8009248 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800922e:	4b25      	ldr	r3, [pc, #148]	; (80092c4 <UART_SetConfig+0xb58>)
 8009230:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009232:	e009      	b.n	8009248 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009238:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800923a:	e005      	b.n	8009248 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800923c:	2300      	movs	r3, #0
 800923e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009246:	bf00      	nop
    }

    if (pclk != 0U)
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	2b00      	cmp	r3, #0
 800924c:	d021      	beq.n	8009292 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009252:	4a1d      	ldr	r2, [pc, #116]	; (80092c8 <UART_SetConfig+0xb5c>)
 8009254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009258:	461a      	mov	r2, r3
 800925a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	085b      	lsrs	r3, r3, #1
 8009266:	441a      	add	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009270:	b29b      	uxth	r3, r3
 8009272:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009276:	2b0f      	cmp	r3, #15
 8009278:	d908      	bls.n	800928c <UART_SetConfig+0xb20>
 800927a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009280:	d204      	bcs.n	800928c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009288:	60da      	str	r2, [r3, #12]
 800928a:	e002      	b.n	8009292 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80092ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3738      	adds	r7, #56	; 0x38
 80092b6:	46bd      	mov	sp, r7
 80092b8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80092bc:	58024400 	.word	0x58024400
 80092c0:	03d09000 	.word	0x03d09000
 80092c4:	003d0900 	.word	0x003d0900
 80092c8:	0800dbfc 	.word	0x0800dbfc

080092cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00a      	beq.n	80092f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092fa:	f003 0302 	and.w	r3, r3, #2
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00a      	beq.n	8009318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	430a      	orrs	r2, r1
 8009316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931c:	f003 0304 	and.w	r3, r3, #4
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00a      	beq.n	800933a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	430a      	orrs	r2, r1
 8009338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933e:	f003 0308 	and.w	r3, r3, #8
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00a      	beq.n	800935c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	430a      	orrs	r2, r1
 800935a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009360:	f003 0310 	and.w	r3, r3, #16
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00a      	beq.n	800937e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009382:	f003 0320 	and.w	r3, r3, #32
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00a      	beq.n	80093a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	430a      	orrs	r2, r1
 800939e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d01a      	beq.n	80093e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	430a      	orrs	r2, r1
 80093c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093ca:	d10a      	bne.n	80093e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	430a      	orrs	r2, r1
 80093e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00a      	beq.n	8009404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	430a      	orrs	r2, r1
 8009402:	605a      	str	r2, [r3, #4]
  }
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af02      	add	r7, sp, #8
 8009416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009420:	f7f8 fc14 	bl	8001c4c <HAL_GetTick>
 8009424:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0308 	and.w	r3, r3, #8
 8009430:	2b08      	cmp	r3, #8
 8009432:	d10e      	bne.n	8009452 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f82c 	bl	80094a0 <UART_WaitOnFlagUntilTimeout>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	e022      	b.n	8009498 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 0304 	and.w	r3, r3, #4
 800945c:	2b04      	cmp	r3, #4
 800945e:	d10e      	bne.n	800947e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f816 	bl	80094a0 <UART_WaitOnFlagUntilTimeout>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800947a:	2303      	movs	r3, #3
 800947c:	e00c      	b.n	8009498 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2220      	movs	r2, #32
 8009482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2220      	movs	r2, #32
 800948a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	4613      	mov	r3, r2
 80094ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094b0:	e062      	b.n	8009578 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b8:	d05e      	beq.n	8009578 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094ba:	f7f8 fbc7 	bl	8001c4c <HAL_GetTick>
 80094be:	4602      	mov	r2, r0
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	1ad3      	subs	r3, r2, r3
 80094c4:	69ba      	ldr	r2, [r7, #24]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d302      	bcc.n	80094d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d11d      	bne.n	800950c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80094de:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	689a      	ldr	r2, [r3, #8]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f022 0201 	bic.w	r2, r2, #1
 80094ee:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2220      	movs	r2, #32
 80094f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2220      	movs	r2, #32
 80094fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2200      	movs	r2, #0
 8009504:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009508:	2303      	movs	r3, #3
 800950a:	e045      	b.n	8009598 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 0304 	and.w	r3, r3, #4
 8009516:	2b00      	cmp	r3, #0
 8009518:	d02e      	beq.n	8009578 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	69db      	ldr	r3, [r3, #28]
 8009520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009528:	d126      	bne.n	8009578 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009532:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009542:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	689a      	ldr	r2, [r3, #8]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f022 0201 	bic.w	r2, r2, #1
 8009552:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2220      	movs	r2, #32
 8009558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2220      	movs	r2, #32
 8009560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2220      	movs	r2, #32
 8009568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009574:	2303      	movs	r3, #3
 8009576:	e00f      	b.n	8009598 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	69da      	ldr	r2, [r3, #28]
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	4013      	ands	r3, r2
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	429a      	cmp	r2, r3
 8009586:	bf0c      	ite	eq
 8009588:	2301      	moveq	r3, #1
 800958a:	2300      	movne	r3, #0
 800958c:	b2db      	uxtb	r3, r3
 800958e:	461a      	mov	r2, r3
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	429a      	cmp	r2, r3
 8009594:	d08d      	beq.n	80094b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d101      	bne.n	80095b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80095b2:	2302      	movs	r3, #2
 80095b4:	e027      	b.n	8009606 <HAL_UARTEx_DisableFifoMode+0x66>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2224      	movs	r2, #36	; 0x24
 80095c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 0201 	bic.w	r2, r2, #1
 80095dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80095e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr

08009612 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009622:	2b01      	cmp	r3, #1
 8009624:	d101      	bne.n	800962a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009626:	2302      	movs	r3, #2
 8009628:	e02d      	b.n	8009686 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2224      	movs	r2, #36	; 0x24
 8009636:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f022 0201 	bic.w	r2, r2, #1
 8009650:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	430a      	orrs	r2, r1
 8009664:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f850 	bl	800970c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2220      	movs	r2, #32
 8009678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b084      	sub	sp, #16
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d101      	bne.n	80096a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096a2:	2302      	movs	r3, #2
 80096a4:	e02d      	b.n	8009702 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2224      	movs	r2, #36	; 0x24
 80096b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f022 0201 	bic.w	r2, r2, #1
 80096cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	430a      	orrs	r2, r1
 80096e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f812 	bl	800970c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2220      	movs	r2, #32
 80096f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
	...

0800970c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800970c:	b480      	push	{r7}
 800970e:	b089      	sub	sp, #36	; 0x24
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009714:	4a2f      	ldr	r2, [pc, #188]	; (80097d4 <UARTEx_SetNbDataToProcess+0xc8>)
 8009716:	f107 0314 	add.w	r3, r7, #20
 800971a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800971e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009722:	4a2d      	ldr	r2, [pc, #180]	; (80097d8 <UARTEx_SetNbDataToProcess+0xcc>)
 8009724:	f107 030c 	add.w	r3, r7, #12
 8009728:	e892 0003 	ldmia.w	r2, {r0, r1}
 800972c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009734:	2b00      	cmp	r3, #0
 8009736:	d108      	bne.n	800974a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009748:	e03d      	b.n	80097c6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800974a:	2310      	movs	r3, #16
 800974c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800974e:	2310      	movs	r3, #16
 8009750:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	0e5b      	lsrs	r3, r3, #25
 800975a:	b2db      	uxtb	r3, r3
 800975c:	f003 0307 	and.w	r3, r3, #7
 8009760:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	0f5b      	lsrs	r3, r3, #29
 800976a:	b2db      	uxtb	r3, r3
 800976c:	f003 0307 	and.w	r3, r3, #7
 8009770:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009772:	7fbb      	ldrb	r3, [r7, #30]
 8009774:	7f3a      	ldrb	r2, [r7, #28]
 8009776:	f107 0120 	add.w	r1, r7, #32
 800977a:	440a      	add	r2, r1
 800977c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009780:	fb02 f303 	mul.w	r3, r2, r3
 8009784:	7f3a      	ldrb	r2, [r7, #28]
 8009786:	f107 0120 	add.w	r1, r7, #32
 800978a:	440a      	add	r2, r1
 800978c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009790:	fb93 f3f2 	sdiv	r3, r3, r2
 8009794:	b29a      	uxth	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800979c:	7ffb      	ldrb	r3, [r7, #31]
 800979e:	7f7a      	ldrb	r2, [r7, #29]
 80097a0:	f107 0120 	add.w	r1, r7, #32
 80097a4:	440a      	add	r2, r1
 80097a6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80097aa:	fb02 f303 	mul.w	r3, r2, r3
 80097ae:	7f7a      	ldrb	r2, [r7, #29]
 80097b0:	f107 0120 	add.w	r1, r7, #32
 80097b4:	440a      	add	r2, r1
 80097b6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80097ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80097be:	b29a      	uxth	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80097c6:	bf00      	nop
 80097c8:	3724      	adds	r7, #36	; 0x24
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	0800cb2c 	.word	0x0800cb2c
 80097d8:	0800cb34 	.word	0x0800cb34

080097dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097dc:	b084      	sub	sp, #16
 80097de:	b580      	push	{r7, lr}
 80097e0:	b084      	sub	sp, #16
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
 80097e6:	f107 001c 	add.w	r0, r7, #28
 80097ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d120      	bne.n	8009836 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	68da      	ldr	r2, [r3, #12]
 8009804:	4b25      	ldr	r3, [pc, #148]	; (800989c <USB_CoreInit+0xc0>)
 8009806:	4013      	ands	r3, r2
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800981a:	2b01      	cmp	r3, #1
 800981c:	d105      	bne.n	800982a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fa4c 	bl	8009cc8 <USB_CoreReset>
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]
 8009834:	e01a      	b.n	800986c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fa40 	bl	8009cc8 <USB_CoreReset>
 8009848:	4603      	mov	r3, r0
 800984a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800984c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800984e:	2b00      	cmp	r3, #0
 8009850:	d106      	bne.n	8009860 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009856:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	639a      	str	r2, [r3, #56]	; 0x38
 800985e:	e005      	b.n	800986c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009864:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800986c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986e:	2b01      	cmp	r3, #1
 8009870:	d10b      	bne.n	800988a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	f043 0206 	orr.w	r2, r3, #6
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	f043 0220 	orr.w	r2, r3, #32
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800988a:	7bfb      	ldrb	r3, [r7, #15]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009896:	b004      	add	sp, #16
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	ffbdffbf 	.word	0xffbdffbf

080098a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	f023 0201 	bic.w	r2, r3, #1
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr

080098c2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b082      	sub	sp, #8
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	460b      	mov	r3, r1
 80098cc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80098da:	78fb      	ldrb	r3, [r7, #3]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d106      	bne.n	80098ee <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	60da      	str	r2, [r3, #12]
 80098ec:	e00b      	b.n	8009906 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80098ee:	78fb      	ldrb	r3, [r7, #3]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d106      	bne.n	8009902 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	60da      	str	r2, [r3, #12]
 8009900:	e001      	b.n	8009906 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e003      	b.n	800990e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009906:	2032      	movs	r0, #50	; 0x32
 8009908:	f7f8 f9ac 	bl	8001c64 <HAL_Delay>

  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
	...

08009918 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009918:	b084      	sub	sp, #16
 800991a:	b580      	push	{r7, lr}
 800991c:	b086      	sub	sp, #24
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009926:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009932:	2300      	movs	r3, #0
 8009934:	613b      	str	r3, [r7, #16]
 8009936:	e009      	b.n	800994c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	3340      	adds	r3, #64	; 0x40
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	2200      	movs	r2, #0
 8009944:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	3301      	adds	r3, #1
 800994a:	613b      	str	r3, [r7, #16]
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	2b0e      	cmp	r3, #14
 8009950:	d9f2      	bls.n	8009938 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009954:	2b00      	cmp	r3, #0
 8009956:	d11c      	bne.n	8009992 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009966:	f043 0302 	orr.w	r3, r3, #2
 800996a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009970:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	601a      	str	r2, [r3, #0]
 8009990:	e005      	b.n	800999e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009996:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099a4:	461a      	mov	r2, r3
 80099a6:	2300      	movs	r3, #0
 80099a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b0:	4619      	mov	r1, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b8:	461a      	mov	r2, r3
 80099ba:	680b      	ldr	r3, [r1, #0]
 80099bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d10c      	bne.n	80099de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80099c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d104      	bne.n	80099d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80099ca:	2100      	movs	r1, #0
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f949 	bl	8009c64 <USB_SetDevSpeed>
 80099d2:	e008      	b.n	80099e6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80099d4:	2101      	movs	r1, #1
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f944 	bl	8009c64 <USB_SetDevSpeed>
 80099dc:	e003      	b.n	80099e6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80099de:	2103      	movs	r1, #3
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f93f 	bl	8009c64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80099e6:	2110      	movs	r1, #16
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f8f3 	bl	8009bd4 <USB_FlushTxFifo>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d001      	beq.n	80099f8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f911 	bl	8009c20 <USB_FlushRxFifo>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d001      	beq.n	8009a08 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a0e:	461a      	mov	r2, r3
 8009a10:	2300      	movs	r3, #0
 8009a12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a26:	461a      	mov	r2, r3
 8009a28:	2300      	movs	r3, #0
 8009a2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	613b      	str	r3, [r7, #16]
 8009a30:	e043      	b.n	8009aba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	015a      	lsls	r2, r3, #5
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	4413      	add	r3, r2
 8009a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a48:	d118      	bne.n	8009a7c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10a      	bne.n	8009a66 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a62:	6013      	str	r3, [r2, #0]
 8009a64:	e013      	b.n	8009a8e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a72:	461a      	mov	r2, r3
 8009a74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a78:	6013      	str	r3, [r2, #0]
 8009a7a:	e008      	b.n	8009a8e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	015a      	lsls	r2, r3, #5
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	4413      	add	r3, r2
 8009a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a88:	461a      	mov	r2, r3
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aac:	461a      	mov	r2, r3
 8009aae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ab2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	613b      	str	r3, [r7, #16]
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d3b7      	bcc.n	8009a32 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	613b      	str	r3, [r7, #16]
 8009ac6:	e043      	b.n	8009b50 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ada:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ade:	d118      	bne.n	8009b12 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10a      	bne.n	8009afc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	015a      	lsls	r2, r3, #5
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	4413      	add	r3, r2
 8009aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af2:	461a      	mov	r2, r3
 8009af4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009af8:	6013      	str	r3, [r2, #0]
 8009afa:	e013      	b.n	8009b24 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	015a      	lsls	r2, r3, #5
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	4413      	add	r3, r2
 8009b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b08:	461a      	mov	r2, r3
 8009b0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b0e:	6013      	str	r3, [r2, #0]
 8009b10:	e008      	b.n	8009b24 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	015a      	lsls	r2, r3, #5
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	4413      	add	r3, r2
 8009b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b1e:	461a      	mov	r2, r3
 8009b20:	2300      	movs	r3, #0
 8009b22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	015a      	lsls	r2, r3, #5
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b30:	461a      	mov	r2, r3
 8009b32:	2300      	movs	r3, #0
 8009b34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	015a      	lsls	r2, r3, #5
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b42:	461a      	mov	r2, r3
 8009b44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	613b      	str	r3, [r7, #16]
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d3b7      	bcc.n	8009ac8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009b78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d105      	bne.n	8009b8c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	f043 0210 	orr.w	r2, r3, #16
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	699a      	ldr	r2, [r3, #24]
 8009b90:	4b0e      	ldr	r3, [pc, #56]	; (8009bcc <USB_DevInit+0x2b4>)
 8009b92:	4313      	orrs	r3, r2
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d005      	beq.n	8009baa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	f043 0208 	orr.w	r2, r3, #8
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d105      	bne.n	8009bbc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	699a      	ldr	r2, [r3, #24]
 8009bb4:	4b06      	ldr	r3, [pc, #24]	; (8009bd0 <USB_DevInit+0x2b8>)
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3718      	adds	r7, #24
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009bc8:	b004      	add	sp, #16
 8009bca:	4770      	bx	lr
 8009bcc:	803c3800 	.word	0x803c3800
 8009bd0:	40000004 	.word	0x40000004

08009bd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009bde:	2300      	movs	r3, #0
 8009be0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	019b      	lsls	r3, r3, #6
 8009be6:	f043 0220 	orr.w	r2, r3, #32
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	60fb      	str	r3, [r7, #12]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	4a09      	ldr	r2, [pc, #36]	; (8009c1c <USB_FlushTxFifo+0x48>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d901      	bls.n	8009c00 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e006      	b.n	8009c0e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	f003 0320 	and.w	r3, r3, #32
 8009c08:	2b20      	cmp	r3, #32
 8009c0a:	d0f0      	beq.n	8009bee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	00030d40 	.word	0x00030d40

08009c20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2210      	movs	r2, #16
 8009c30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	3301      	adds	r3, #1
 8009c36:	60fb      	str	r3, [r7, #12]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	4a09      	ldr	r2, [pc, #36]	; (8009c60 <USB_FlushRxFifo+0x40>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d901      	bls.n	8009c44 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e006      	b.n	8009c52 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	f003 0310 	and.w	r3, r3, #16
 8009c4c:	2b10      	cmp	r3, #16
 8009c4e:	d0f0      	beq.n	8009c32 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3714      	adds	r7, #20
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	00030d40 	.word	0x00030d40

08009c64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	78fb      	ldrb	r3, [r7, #3]
 8009c7e:	68f9      	ldr	r1, [r7, #12]
 8009c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c84:	4313      	orrs	r3, r2
 8009c86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cb0:	f043 0302 	orr.w	r3, r3, #2
 8009cb4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009cb6:	2003      	movs	r0, #3
 8009cb8:	f7f7 ffd4 	bl	8001c64 <HAL_Delay>

  return HAL_OK;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
	...

08009cc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	60fb      	str	r3, [r7, #12]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	4a13      	ldr	r2, [pc, #76]	; (8009d2c <USB_CoreReset+0x64>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d901      	bls.n	8009ce6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	e01b      	b.n	8009d1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	daf2      	bge.n	8009cd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	f043 0201 	orr.w	r2, r3, #1
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	3301      	adds	r3, #1
 8009d02:	60fb      	str	r3, [r7, #12]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	4a09      	ldr	r2, [pc, #36]	; (8009d2c <USB_CoreReset+0x64>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d901      	bls.n	8009d10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	e006      	b.n	8009d1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d0f0      	beq.n	8009cfe <USB_CoreReset+0x36>

  return HAL_OK;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3714      	adds	r7, #20
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	00030d40 	.word	0x00030d40

08009d30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009d30:	b480      	push	{r7}
 8009d32:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009d34:	bf00      	nop
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
	...

08009d40 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d46:	f3ef 8305 	mrs	r3, IPSR
 8009d4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10f      	bne.n	8009d72 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d52:	f3ef 8310 	mrs	r3, PRIMASK
 8009d56:	607b      	str	r3, [r7, #4]
  return(result);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d105      	bne.n	8009d6a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d5e:	f3ef 8311 	mrs	r3, BASEPRI
 8009d62:	603b      	str	r3, [r7, #0]
  return(result);
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d007      	beq.n	8009d7a <osKernelInitialize+0x3a>
 8009d6a:	4b0e      	ldr	r3, [pc, #56]	; (8009da4 <osKernelInitialize+0x64>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d103      	bne.n	8009d7a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009d72:	f06f 0305 	mvn.w	r3, #5
 8009d76:	60fb      	str	r3, [r7, #12]
 8009d78:	e00c      	b.n	8009d94 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009d7a:	4b0a      	ldr	r3, [pc, #40]	; (8009da4 <osKernelInitialize+0x64>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d105      	bne.n	8009d8e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009d82:	4b08      	ldr	r3, [pc, #32]	; (8009da4 <osKernelInitialize+0x64>)
 8009d84:	2201      	movs	r2, #1
 8009d86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	60fb      	str	r3, [r7, #12]
 8009d8c:	e002      	b.n	8009d94 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d92:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009d94:	68fb      	ldr	r3, [r7, #12]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	24000030 	.word	0x24000030

08009da8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dae:	f3ef 8305 	mrs	r3, IPSR
 8009db2:	60bb      	str	r3, [r7, #8]
  return(result);
 8009db4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10f      	bne.n	8009dda <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dba:	f3ef 8310 	mrs	r3, PRIMASK
 8009dbe:	607b      	str	r3, [r7, #4]
  return(result);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d105      	bne.n	8009dd2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009dc6:	f3ef 8311 	mrs	r3, BASEPRI
 8009dca:	603b      	str	r3, [r7, #0]
  return(result);
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d007      	beq.n	8009de2 <osKernelStart+0x3a>
 8009dd2:	4b0f      	ldr	r3, [pc, #60]	; (8009e10 <osKernelStart+0x68>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d103      	bne.n	8009de2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8009dda:	f06f 0305 	mvn.w	r3, #5
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	e010      	b.n	8009e04 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009de2:	4b0b      	ldr	r3, [pc, #44]	; (8009e10 <osKernelStart+0x68>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d109      	bne.n	8009dfe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009dea:	f7ff ffa1 	bl	8009d30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009dee:	4b08      	ldr	r3, [pc, #32]	; (8009e10 <osKernelStart+0x68>)
 8009df0:	2202      	movs	r2, #2
 8009df2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009df4:	f001 f914 	bl	800b020 <vTaskStartScheduler>
      stat = osOK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	e002      	b.n	8009e04 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8009e02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009e04:	68fb      	ldr	r3, [r7, #12]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	24000030 	.word	0x24000030

08009e14 <osKernelLock>:

int32_t osKernelLock (void) {
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e1a:	f3ef 8305 	mrs	r3, IPSR
 8009e1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e20:	68bb      	ldr	r3, [r7, #8]
  int32_t lock;

  if (IS_IRQ()) {
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d10f      	bne.n	8009e46 <osKernelLock+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e26:	f3ef 8310 	mrs	r3, PRIMASK
 8009e2a:	607b      	str	r3, [r7, #4]
  return(result);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d105      	bne.n	8009e3e <osKernelLock+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e32:	f3ef 8311 	mrs	r3, BASEPRI
 8009e36:	603b      	str	r3, [r7, #0]
  return(result);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d007      	beq.n	8009e4e <osKernelLock+0x3a>
 8009e3e:	4b10      	ldr	r3, [pc, #64]	; (8009e80 <osKernelLock+0x6c>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d103      	bne.n	8009e4e <osKernelLock+0x3a>
    lock = (int32_t)osErrorISR;
 8009e46:	f06f 0305 	mvn.w	r3, #5
 8009e4a:	60fb      	str	r3, [r7, #12]
 8009e4c:	e013      	b.n	8009e76 <osKernelLock+0x62>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8009e4e:	f001 fd2f 	bl	800b8b0 <xTaskGetSchedulerState>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d002      	beq.n	8009e5e <osKernelLock+0x4a>
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d003      	beq.n	8009e64 <osKernelLock+0x50>
 8009e5c:	e007      	b.n	8009e6e <osKernelLock+0x5a>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	60fb      	str	r3, [r7, #12]
        break;
 8009e62:	e008      	b.n	8009e76 <osKernelLock+0x62>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 8009e64:	f001 f940 	bl	800b0e8 <vTaskSuspendAll>
        lock = 0;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60fb      	str	r3, [r7, #12]
        break;
 8009e6c:	e003      	b.n	8009e76 <osKernelLock+0x62>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8009e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e72:	60fb      	str	r3, [r7, #12]
        break;
 8009e74:	bf00      	nop
    }
  }

  return (lock);
 8009e76:	68fb      	ldr	r3, [r7, #12]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	24000030 	.word	0x24000030

08009e84 <osKernelUnlock>:

int32_t osKernelUnlock (void) {
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e8a:	f3ef 8305 	mrs	r3, IPSR
 8009e8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e90:	68bb      	ldr	r3, [r7, #8]
  int32_t lock;

  if (IS_IRQ()) {
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10f      	bne.n	8009eb6 <osKernelUnlock+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e96:	f3ef 8310 	mrs	r3, PRIMASK
 8009e9a:	607b      	str	r3, [r7, #4]
  return(result);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d105      	bne.n	8009eae <osKernelUnlock+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ea2:	f3ef 8311 	mrs	r3, BASEPRI
 8009ea6:	603b      	str	r3, [r7, #0]
  return(result);
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d007      	beq.n	8009ebe <osKernelUnlock+0x3a>
 8009eae:	4b16      	ldr	r3, [pc, #88]	; (8009f08 <osKernelUnlock+0x84>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d103      	bne.n	8009ebe <osKernelUnlock+0x3a>
    lock = (int32_t)osErrorISR;
 8009eb6:	f06f 0305 	mvn.w	r3, #5
 8009eba:	60fb      	str	r3, [r7, #12]
 8009ebc:	e01f      	b.n	8009efe <osKernelUnlock+0x7a>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8009ebe:	f001 fcf7 	bl	800b8b0 <xTaskGetSchedulerState>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d002      	beq.n	8009ece <osKernelUnlock+0x4a>
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d010      	beq.n	8009eee <osKernelUnlock+0x6a>
 8009ecc:	e012      	b.n	8009ef4 <osKernelUnlock+0x70>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	60fb      	str	r3, [r7, #12]

        if (xTaskResumeAll() != pdTRUE) {
 8009ed2:	f001 f917 	bl	800b104 <xTaskResumeAll>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d00f      	beq.n	8009efc <osKernelUnlock+0x78>
          if (xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) {
 8009edc:	f001 fce8 	bl	800b8b0 <xTaskGetSchedulerState>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10a      	bne.n	8009efc <osKernelUnlock+0x78>
            lock = (int32_t)osError;
 8009ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eea:	60fb      	str	r3, [r7, #12]
          }
        }
        break;
 8009eec:	e006      	b.n	8009efc <osKernelUnlock+0x78>

      case taskSCHEDULER_RUNNING:
        lock = 0;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	60fb      	str	r3, [r7, #12]
        break;
 8009ef2:	e004      	b.n	8009efe <osKernelUnlock+0x7a>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8009ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef8:	60fb      	str	r3, [r7, #12]
        break;
 8009efa:	e000      	b.n	8009efe <osKernelUnlock+0x7a>
        break;
 8009efc:	bf00      	nop
    }
  }

  return (lock);
 8009efe:	68fb      	ldr	r3, [r7, #12]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	24000030 	.word	0x24000030

08009f0c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f12:	f3ef 8305 	mrs	r3, IPSR
 8009f16:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f18:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10f      	bne.n	8009f3e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8009f22:	607b      	str	r3, [r7, #4]
  return(result);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d105      	bne.n	8009f36 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f2a:	f3ef 8311 	mrs	r3, BASEPRI
 8009f2e:	603b      	str	r3, [r7, #0]
  return(result);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d007      	beq.n	8009f46 <osKernelGetTickCount+0x3a>
 8009f36:	4b08      	ldr	r3, [pc, #32]	; (8009f58 <osKernelGetTickCount+0x4c>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d103      	bne.n	8009f46 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8009f3e:	f001 f98d 	bl	800b25c <xTaskGetTickCountFromISR>
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	e002      	b.n	8009f4c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8009f46:	f001 f979 	bl	800b23c <xTaskGetTickCount>
 8009f4a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	24000030 	.word	0x24000030

08009f5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b090      	sub	sp, #64	; 0x40
 8009f60:	af04      	add	r7, sp, #16
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f6c:	f3ef 8305 	mrs	r3, IPSR
 8009f70:	61fb      	str	r3, [r7, #28]
  return(result);
 8009f72:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f040 808f 	bne.w	800a098 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8009f7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d105      	bne.n	8009f92 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f86:	f3ef 8311 	mrs	r3, BASEPRI
 8009f8a:	617b      	str	r3, [r7, #20]
  return(result);
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d003      	beq.n	8009f9a <osThreadNew+0x3e>
 8009f92:	4b44      	ldr	r3, [pc, #272]	; (800a0a4 <osThreadNew+0x148>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d07e      	beq.n	800a098 <osThreadNew+0x13c>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d07b      	beq.n	800a098 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009fa0:	2380      	movs	r3, #128	; 0x80
 8009fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009fa4:	2318      	movs	r3, #24
 8009fa6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009fac:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d045      	beq.n	800a044 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d002      	beq.n	8009fc6 <osThreadNew+0x6a>
        name = attr->name;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	699b      	ldr	r3, [r3, #24]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d002      	beq.n	8009fd4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d008      	beq.n	8009fec <osThreadNew+0x90>
 8009fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fdc:	2b38      	cmp	r3, #56	; 0x38
 8009fde:	d805      	bhi.n	8009fec <osThreadNew+0x90>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	f003 0301 	and.w	r3, r3, #1
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <osThreadNew+0x94>
        return (NULL);
 8009fec:	2300      	movs	r3, #0
 8009fee:	e054      	b.n	800a09a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	695b      	ldr	r3, [r3, #20]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d003      	beq.n	800a000 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	695b      	ldr	r3, [r3, #20]
 8009ffc:	089b      	lsrs	r3, r3, #2
 8009ffe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00e      	beq.n	800a026 <osThreadNew+0xca>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	2b5b      	cmp	r3, #91	; 0x5b
 800a00e:	d90a      	bls.n	800a026 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a014:	2b00      	cmp	r3, #0
 800a016:	d006      	beq.n	800a026 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	695b      	ldr	r3, [r3, #20]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d002      	beq.n	800a026 <osThreadNew+0xca>
        mem = 1;
 800a020:	2301      	movs	r3, #1
 800a022:	623b      	str	r3, [r7, #32]
 800a024:	e010      	b.n	800a048 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d10c      	bne.n	800a048 <osThreadNew+0xec>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d108      	bne.n	800a048 <osThreadNew+0xec>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d104      	bne.n	800a048 <osThreadNew+0xec>
          mem = 0;
 800a03e:	2300      	movs	r3, #0
 800a040:	623b      	str	r3, [r7, #32]
 800a042:	e001      	b.n	800a048 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a048:	6a3b      	ldr	r3, [r7, #32]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d110      	bne.n	800a070 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a056:	9202      	str	r2, [sp, #8]
 800a058:	9301      	str	r3, [sp, #4]
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f000 fe09 	bl	800ac7c <xTaskCreateStatic>
 800a06a:	4603      	mov	r3, r0
 800a06c:	613b      	str	r3, [r7, #16]
 800a06e:	e013      	b.n	800a098 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a070:	6a3b      	ldr	r3, [r7, #32]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d110      	bne.n	800a098 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a078:	b29a      	uxth	r2, r3
 800a07a:	f107 0310 	add.w	r3, r7, #16
 800a07e:	9301      	str	r3, [sp, #4]
 800a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 fe51 	bl	800ad30 <xTaskCreate>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b01      	cmp	r3, #1
 800a092:	d001      	beq.n	800a098 <osThreadNew+0x13c>
          hTask = NULL;
 800a094:	2300      	movs	r3, #0
 800a096:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a098:	693b      	ldr	r3, [r7, #16]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3730      	adds	r7, #48	; 0x30
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	24000030 	.word	0x24000030

0800a0a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0b0:	f3ef 8305 	mrs	r3, IPSR
 800a0b4:	613b      	str	r3, [r7, #16]
  return(result);
 800a0b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10f      	bne.n	800a0dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0bc:	f3ef 8310 	mrs	r3, PRIMASK
 800a0c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d105      	bne.n	800a0d4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a0c8:	f3ef 8311 	mrs	r3, BASEPRI
 800a0cc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d007      	beq.n	800a0e4 <osDelay+0x3c>
 800a0d4:	4b0a      	ldr	r3, [pc, #40]	; (800a100 <osDelay+0x58>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d103      	bne.n	800a0e4 <osDelay+0x3c>
    stat = osErrorISR;
 800a0dc:	f06f 0305 	mvn.w	r3, #5
 800a0e0:	617b      	str	r3, [r7, #20]
 800a0e2:	e007      	b.n	800a0f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d002      	beq.n	800a0f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 ff62 	bl	800afb8 <vTaskDelay>
    }
  }

  return (stat);
 800a0f4:	697b      	ldr	r3, [r7, #20]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3718      	adds	r7, #24
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	24000030 	.word	0x24000030

0800a104 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4a07      	ldr	r2, [pc, #28]	; (800a130 <vApplicationGetIdleTaskMemory+0x2c>)
 800a114:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	4a06      	ldr	r2, [pc, #24]	; (800a134 <vApplicationGetIdleTaskMemory+0x30>)
 800a11a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2280      	movs	r2, #128	; 0x80
 800a120:	601a      	str	r2, [r3, #0]
}
 800a122:	bf00      	nop
 800a124:	3714      	adds	r7, #20
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	24000034 	.word	0x24000034
 800a134:	24000090 	.word	0x24000090

0800a138 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	4a07      	ldr	r2, [pc, #28]	; (800a164 <vApplicationGetTimerTaskMemory+0x2c>)
 800a148:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	4a06      	ldr	r2, [pc, #24]	; (800a168 <vApplicationGetTimerTaskMemory+0x30>)
 800a14e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a156:	601a      	str	r2, [r3, #0]
}
 800a158:	bf00      	nop
 800a15a:	3714      	adds	r7, #20
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr
 800a164:	24000290 	.word	0x24000290
 800a168:	240002ec 	.word	0x240002ec

0800a16c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f103 0208 	add.w	r2, r3, #8
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f04f 32ff 	mov.w	r2, #4294967295
 800a184:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f103 0208 	add.w	r2, r3, #8
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f103 0208 	add.w	r2, r3, #8
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a1ba:	bf00      	nop
 800a1bc:	370c      	adds	r7, #12
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1c6:	b480      	push	{r7}
 800a1c8:	b085      	sub	sp, #20
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
 800a1ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	689a      	ldr	r2, [r3, #8]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	1c5a      	adds	r2, r3, #1
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	601a      	str	r2, [r3, #0]
}
 800a202:	bf00      	nop
 800a204:	3714      	adds	r7, #20
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr

0800a20e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a20e:	b480      	push	{r7}
 800a210:	b085      	sub	sp, #20
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a224:	d103      	bne.n	800a22e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	60fb      	str	r3, [r7, #12]
 800a22c:	e00c      	b.n	800a248 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	3308      	adds	r3, #8
 800a232:	60fb      	str	r3, [r7, #12]
 800a234:	e002      	b.n	800a23c <vListInsert+0x2e>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	60fb      	str	r3, [r7, #12]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	429a      	cmp	r2, r3
 800a246:	d2f6      	bcs.n	800a236 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	685a      	ldr	r2, [r3, #4]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	683a      	ldr	r2, [r7, #0]
 800a256:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	683a      	ldr	r2, [r7, #0]
 800a262:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	1c5a      	adds	r2, r3, #1
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	601a      	str	r2, [r3, #0]
}
 800a274:	bf00      	nop
 800a276:	3714      	adds	r7, #20
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	6892      	ldr	r2, [r2, #8]
 800a296:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	6852      	ldr	r2, [r2, #4]
 800a2a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d103      	bne.n	800a2b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	689a      	ldr	r2, [r3, #8]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	1e5a      	subs	r2, r3, #1
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3714      	adds	r7, #20
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d109      	bne.n	800a2fc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ec:	f383 8811 	msr	BASEPRI, r3
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	60bb      	str	r3, [r7, #8]
 800a2fa:	e7fe      	b.n	800a2fa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a2fc:	f002 f826 	bl	800c34c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a308:	68f9      	ldr	r1, [r7, #12]
 800a30a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a30c:	fb01 f303 	mul.w	r3, r1, r3
 800a310:	441a      	add	r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2200      	movs	r2, #0
 800a31a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32c:	3b01      	subs	r3, #1
 800a32e:	68f9      	ldr	r1, [r7, #12]
 800a330:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a332:	fb01 f303 	mul.w	r3, r1, r3
 800a336:	441a      	add	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	22ff      	movs	r2, #255	; 0xff
 800a340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	22ff      	movs	r2, #255	; 0xff
 800a348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d114      	bne.n	800a37c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d01a      	beq.n	800a390 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3310      	adds	r3, #16
 800a35e:	4618      	mov	r0, r3
 800a360:	f001 f8f0 	bl	800b544 <xTaskRemoveFromEventList>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d012      	beq.n	800a390 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a36a:	4b0d      	ldr	r3, [pc, #52]	; (800a3a0 <xQueueGenericReset+0xcc>)
 800a36c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a370:	601a      	str	r2, [r3, #0]
 800a372:	f3bf 8f4f 	dsb	sy
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	e009      	b.n	800a390 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	3310      	adds	r3, #16
 800a380:	4618      	mov	r0, r3
 800a382:	f7ff fef3 	bl	800a16c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	3324      	adds	r3, #36	; 0x24
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7ff feee 	bl	800a16c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a390:	f002 f80a 	bl	800c3a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a394:	2301      	movs	r3, #1
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	e000ed04 	.word	0xe000ed04

0800a3a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b08e      	sub	sp, #56	; 0x38
 800a3a8:	af02      	add	r7, sp, #8
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
 800a3b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d109      	bne.n	800a3cc <xQueueGenericCreateStatic+0x28>
 800a3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3bc:	f383 8811 	msr	BASEPRI, r3
 800a3c0:	f3bf 8f6f 	isb	sy
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3ca:	e7fe      	b.n	800a3ca <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d109      	bne.n	800a3e6 <xQueueGenericCreateStatic+0x42>
 800a3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	627b      	str	r3, [r7, #36]	; 0x24
 800a3e4:	e7fe      	b.n	800a3e4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d002      	beq.n	800a3f2 <xQueueGenericCreateStatic+0x4e>
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d001      	beq.n	800a3f6 <xQueueGenericCreateStatic+0x52>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e000      	b.n	800a3f8 <xQueueGenericCreateStatic+0x54>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d109      	bne.n	800a410 <xQueueGenericCreateStatic+0x6c>
 800a3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a400:	f383 8811 	msr	BASEPRI, r3
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	623b      	str	r3, [r7, #32]
 800a40e:	e7fe      	b.n	800a40e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d102      	bne.n	800a41c <xQueueGenericCreateStatic+0x78>
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d101      	bne.n	800a420 <xQueueGenericCreateStatic+0x7c>
 800a41c:	2301      	movs	r3, #1
 800a41e:	e000      	b.n	800a422 <xQueueGenericCreateStatic+0x7e>
 800a420:	2300      	movs	r3, #0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d109      	bne.n	800a43a <xQueueGenericCreateStatic+0x96>
 800a426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42a:	f383 8811 	msr	BASEPRI, r3
 800a42e:	f3bf 8f6f 	isb	sy
 800a432:	f3bf 8f4f 	dsb	sy
 800a436:	61fb      	str	r3, [r7, #28]
 800a438:	e7fe      	b.n	800a438 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a43a:	2350      	movs	r3, #80	; 0x50
 800a43c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	2b50      	cmp	r3, #80	; 0x50
 800a442:	d009      	beq.n	800a458 <xQueueGenericCreateStatic+0xb4>
 800a444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a448:	f383 8811 	msr	BASEPRI, r3
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	f3bf 8f4f 	dsb	sy
 800a454:	61bb      	str	r3, [r7, #24]
 800a456:	e7fe      	b.n	800a456 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a458:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00d      	beq.n	800a480 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a46c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	4613      	mov	r3, r2
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	68b9      	ldr	r1, [r7, #8]
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f000 f805 	bl	800a48a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a482:	4618      	mov	r0, r3
 800a484:	3730      	adds	r7, #48	; 0x30
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b084      	sub	sp, #16
 800a48e:	af00      	add	r7, sp, #0
 800a490:	60f8      	str	r0, [r7, #12]
 800a492:	60b9      	str	r1, [r7, #8]
 800a494:	607a      	str	r2, [r7, #4]
 800a496:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d103      	bne.n	800a4a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	69ba      	ldr	r2, [r7, #24]
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	e002      	b.n	800a4ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a4b8:	2101      	movs	r1, #1
 800a4ba:	69b8      	ldr	r0, [r7, #24]
 800a4bc:	f7ff ff0a 	bl	800a2d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	78fa      	ldrb	r2, [r7, #3]
 800a4c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a4c8:	bf00      	nop
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08e      	sub	sp, #56	; 0x38
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
 800a4dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d109      	bne.n	800a500 <xQueueGenericSend+0x30>
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4fe:	e7fe      	b.n	800a4fe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d103      	bne.n	800a50e <xQueueGenericSend+0x3e>
 800a506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <xQueueGenericSend+0x42>
 800a50e:	2301      	movs	r3, #1
 800a510:	e000      	b.n	800a514 <xQueueGenericSend+0x44>
 800a512:	2300      	movs	r3, #0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d109      	bne.n	800a52c <xQueueGenericSend+0x5c>
 800a518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51c:	f383 8811 	msr	BASEPRI, r3
 800a520:	f3bf 8f6f 	isb	sy
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	627b      	str	r3, [r7, #36]	; 0x24
 800a52a:	e7fe      	b.n	800a52a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	2b02      	cmp	r3, #2
 800a530:	d103      	bne.n	800a53a <xQueueGenericSend+0x6a>
 800a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a536:	2b01      	cmp	r3, #1
 800a538:	d101      	bne.n	800a53e <xQueueGenericSend+0x6e>
 800a53a:	2301      	movs	r3, #1
 800a53c:	e000      	b.n	800a540 <xQueueGenericSend+0x70>
 800a53e:	2300      	movs	r3, #0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d109      	bne.n	800a558 <xQueueGenericSend+0x88>
 800a544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	623b      	str	r3, [r7, #32]
 800a556:	e7fe      	b.n	800a556 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a558:	f001 f9aa 	bl	800b8b0 <xTaskGetSchedulerState>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d102      	bne.n	800a568 <xQueueGenericSend+0x98>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d101      	bne.n	800a56c <xQueueGenericSend+0x9c>
 800a568:	2301      	movs	r3, #1
 800a56a:	e000      	b.n	800a56e <xQueueGenericSend+0x9e>
 800a56c:	2300      	movs	r3, #0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d109      	bne.n	800a586 <xQueueGenericSend+0xb6>
 800a572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	61fb      	str	r3, [r7, #28]
 800a584:	e7fe      	b.n	800a584 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a586:	f001 fee1 	bl	800c34c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a592:	429a      	cmp	r2, r3
 800a594:	d302      	bcc.n	800a59c <xQueueGenericSend+0xcc>
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d129      	bne.n	800a5f0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a59c:	683a      	ldr	r2, [r7, #0]
 800a59e:	68b9      	ldr	r1, [r7, #8]
 800a5a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5a2:	f000 f9ff 	bl	800a9a4 <prvCopyDataToQueue>
 800a5a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d010      	beq.n	800a5d2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b2:	3324      	adds	r3, #36	; 0x24
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f000 ffc5 	bl	800b544 <xTaskRemoveFromEventList>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d013      	beq.n	800a5e8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a5c0:	4b3f      	ldr	r3, [pc, #252]	; (800a6c0 <xQueueGenericSend+0x1f0>)
 800a5c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5c6:	601a      	str	r2, [r3, #0]
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	e00a      	b.n	800a5e8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d007      	beq.n	800a5e8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a5d8:	4b39      	ldr	r3, [pc, #228]	; (800a6c0 <xQueueGenericSend+0x1f0>)
 800a5da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5de:	601a      	str	r2, [r3, #0]
 800a5e0:	f3bf 8f4f 	dsb	sy
 800a5e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a5e8:	f001 fede 	bl	800c3a8 <vPortExitCritical>
				return pdPASS;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e063      	b.n	800a6b8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d103      	bne.n	800a5fe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5f6:	f001 fed7 	bl	800c3a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	e05c      	b.n	800a6b8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a600:	2b00      	cmp	r3, #0
 800a602:	d106      	bne.n	800a612 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a604:	f107 0314 	add.w	r3, r7, #20
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 fffd 	bl	800b608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a60e:	2301      	movs	r3, #1
 800a610:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a612:	f001 fec9 	bl	800c3a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a616:	f000 fd67 	bl	800b0e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a61a:	f001 fe97 	bl	800c34c <vPortEnterCritical>
 800a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a624:	b25b      	sxtb	r3, r3
 800a626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a62a:	d103      	bne.n	800a634 <xQueueGenericSend+0x164>
 800a62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a63a:	b25b      	sxtb	r3, r3
 800a63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a640:	d103      	bne.n	800a64a <xQueueGenericSend+0x17a>
 800a642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a644:	2200      	movs	r2, #0
 800a646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a64a:	f001 fead 	bl	800c3a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a64e:	1d3a      	adds	r2, r7, #4
 800a650:	f107 0314 	add.w	r3, r7, #20
 800a654:	4611      	mov	r1, r2
 800a656:	4618      	mov	r0, r3
 800a658:	f000 ffec 	bl	800b634 <xTaskCheckForTimeOut>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d124      	bne.n	800a6ac <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a662:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a664:	f000 fa96 	bl	800ab94 <prvIsQueueFull>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d018      	beq.n	800a6a0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	3310      	adds	r3, #16
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	4611      	mov	r1, r2
 800a676:	4618      	mov	r0, r3
 800a678:	f000 ff16 	bl	800b4a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a67c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a67e:	f000 fa21 	bl	800aac4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a682:	f000 fd3f 	bl	800b104 <xTaskResumeAll>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f47f af7c 	bne.w	800a586 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a68e:	4b0c      	ldr	r3, [pc, #48]	; (800a6c0 <xQueueGenericSend+0x1f0>)
 800a690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a694:	601a      	str	r2, [r3, #0]
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	f3bf 8f6f 	isb	sy
 800a69e:	e772      	b.n	800a586 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a6a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6a2:	f000 fa0f 	bl	800aac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6a6:	f000 fd2d 	bl	800b104 <xTaskResumeAll>
 800a6aa:	e76c      	b.n	800a586 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a6ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6ae:	f000 fa09 	bl	800aac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6b2:	f000 fd27 	bl	800b104 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a6b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3738      	adds	r7, #56	; 0x38
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	e000ed04 	.word	0xe000ed04

0800a6c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b08e      	sub	sp, #56	; 0x38
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
 800a6d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d109      	bne.n	800a6f0 <xQueueGenericSendFromISR+0x2c>
 800a6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e0:	f383 8811 	msr	BASEPRI, r3
 800a6e4:	f3bf 8f6f 	isb	sy
 800a6e8:	f3bf 8f4f 	dsb	sy
 800a6ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a6ee:	e7fe      	b.n	800a6ee <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d103      	bne.n	800a6fe <xQueueGenericSendFromISR+0x3a>
 800a6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d101      	bne.n	800a702 <xQueueGenericSendFromISR+0x3e>
 800a6fe:	2301      	movs	r3, #1
 800a700:	e000      	b.n	800a704 <xQueueGenericSendFromISR+0x40>
 800a702:	2300      	movs	r3, #0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d109      	bne.n	800a71c <xQueueGenericSendFromISR+0x58>
 800a708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	623b      	str	r3, [r7, #32]
 800a71a:	e7fe      	b.n	800a71a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d103      	bne.n	800a72a <xQueueGenericSendFromISR+0x66>
 800a722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a726:	2b01      	cmp	r3, #1
 800a728:	d101      	bne.n	800a72e <xQueueGenericSendFromISR+0x6a>
 800a72a:	2301      	movs	r3, #1
 800a72c:	e000      	b.n	800a730 <xQueueGenericSendFromISR+0x6c>
 800a72e:	2300      	movs	r3, #0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d109      	bne.n	800a748 <xQueueGenericSendFromISR+0x84>
 800a734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	61fb      	str	r3, [r7, #28]
 800a746:	e7fe      	b.n	800a746 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a748:	f001 fedc 	bl	800c504 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a74c:	f3ef 8211 	mrs	r2, BASEPRI
 800a750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	61ba      	str	r2, [r7, #24]
 800a762:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a764:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a766:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a770:	429a      	cmp	r2, r3
 800a772:	d302      	bcc.n	800a77a <xQueueGenericSendFromISR+0xb6>
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	2b02      	cmp	r3, #2
 800a778:	d12c      	bne.n	800a7d4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a784:	683a      	ldr	r2, [r7, #0]
 800a786:	68b9      	ldr	r1, [r7, #8]
 800a788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a78a:	f000 f90b 	bl	800a9a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a78e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a792:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a796:	d112      	bne.n	800a7be <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d016      	beq.n	800a7ce <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a2:	3324      	adds	r3, #36	; 0x24
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f000 fecd 	bl	800b544 <xTaskRemoveFromEventList>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00e      	beq.n	800a7ce <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00b      	beq.n	800a7ce <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	601a      	str	r2, [r3, #0]
 800a7bc:	e007      	b.n	800a7ce <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a7be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	b25a      	sxtb	r2, r3
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a7d2:	e001      	b.n	800a7d8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	637b      	str	r3, [r7, #52]	; 0x34
 800a7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3738      	adds	r7, #56	; 0x38
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b08c      	sub	sp, #48	; 0x30
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	2b00      	cmp	r3, #0
 800a804:	d109      	bne.n	800a81a <xQueueReceive+0x2e>
	__asm volatile
 800a806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	623b      	str	r3, [r7, #32]
 800a818:	e7fe      	b.n	800a818 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d103      	bne.n	800a828 <xQueueReceive+0x3c>
 800a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a824:	2b00      	cmp	r3, #0
 800a826:	d101      	bne.n	800a82c <xQueueReceive+0x40>
 800a828:	2301      	movs	r3, #1
 800a82a:	e000      	b.n	800a82e <xQueueReceive+0x42>
 800a82c:	2300      	movs	r3, #0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d109      	bne.n	800a846 <xQueueReceive+0x5a>
 800a832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a836:	f383 8811 	msr	BASEPRI, r3
 800a83a:	f3bf 8f6f 	isb	sy
 800a83e:	f3bf 8f4f 	dsb	sy
 800a842:	61fb      	str	r3, [r7, #28]
 800a844:	e7fe      	b.n	800a844 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a846:	f001 f833 	bl	800b8b0 <xTaskGetSchedulerState>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d102      	bne.n	800a856 <xQueueReceive+0x6a>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d101      	bne.n	800a85a <xQueueReceive+0x6e>
 800a856:	2301      	movs	r3, #1
 800a858:	e000      	b.n	800a85c <xQueueReceive+0x70>
 800a85a:	2300      	movs	r3, #0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d109      	bne.n	800a874 <xQueueReceive+0x88>
 800a860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	61bb      	str	r3, [r7, #24]
 800a872:	e7fe      	b.n	800a872 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a874:	f001 fd6a 	bl	800c34c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a880:	2b00      	cmp	r3, #0
 800a882:	d01f      	beq.n	800a8c4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a884:	68b9      	ldr	r1, [r7, #8]
 800a886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a888:	f000 f8f6 	bl	800aa78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88e:	1e5a      	subs	r2, r3, #1
 800a890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a892:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a896:	691b      	ldr	r3, [r3, #16]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d00f      	beq.n	800a8bc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	3310      	adds	r3, #16
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 fe4f 	bl	800b544 <xTaskRemoveFromEventList>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d007      	beq.n	800a8bc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a8ac:	4b3c      	ldr	r3, [pc, #240]	; (800a9a0 <xQueueReceive+0x1b4>)
 800a8ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8b2:	601a      	str	r2, [r3, #0]
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a8bc:	f001 fd74 	bl	800c3a8 <vPortExitCritical>
				return pdPASS;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e069      	b.n	800a998 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d103      	bne.n	800a8d2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a8ca:	f001 fd6d 	bl	800c3a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	e062      	b.n	800a998 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d106      	bne.n	800a8e6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8d8:	f107 0310 	add.w	r3, r7, #16
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 fe93 	bl	800b608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8e6:	f001 fd5f 	bl	800c3a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8ea:	f000 fbfd 	bl	800b0e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8ee:	f001 fd2d 	bl	800c34c <vPortEnterCritical>
 800a8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8f8:	b25b      	sxtb	r3, r3
 800a8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8fe:	d103      	bne.n	800a908 <xQueueReceive+0x11c>
 800a900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a902:	2200      	movs	r2, #0
 800a904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a90e:	b25b      	sxtb	r3, r3
 800a910:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a914:	d103      	bne.n	800a91e <xQueueReceive+0x132>
 800a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a918:	2200      	movs	r2, #0
 800a91a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a91e:	f001 fd43 	bl	800c3a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a922:	1d3a      	adds	r2, r7, #4
 800a924:	f107 0310 	add.w	r3, r7, #16
 800a928:	4611      	mov	r1, r2
 800a92a:	4618      	mov	r0, r3
 800a92c:	f000 fe82 	bl	800b634 <xTaskCheckForTimeOut>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d123      	bne.n	800a97e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a938:	f000 f916 	bl	800ab68 <prvIsQueueEmpty>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d017      	beq.n	800a972 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a944:	3324      	adds	r3, #36	; 0x24
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	4611      	mov	r1, r2
 800a94a:	4618      	mov	r0, r3
 800a94c:	f000 fdac 	bl	800b4a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a952:	f000 f8b7 	bl	800aac4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a956:	f000 fbd5 	bl	800b104 <xTaskResumeAll>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d189      	bne.n	800a874 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a960:	4b0f      	ldr	r3, [pc, #60]	; (800a9a0 <xQueueReceive+0x1b4>)
 800a962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a966:	601a      	str	r2, [r3, #0]
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	e780      	b.n	800a874 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a974:	f000 f8a6 	bl	800aac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a978:	f000 fbc4 	bl	800b104 <xTaskResumeAll>
 800a97c:	e77a      	b.n	800a874 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a97e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a980:	f000 f8a0 	bl	800aac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a984:	f000 fbbe 	bl	800b104 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a98a:	f000 f8ed 	bl	800ab68 <prvIsQueueEmpty>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	f43f af6f 	beq.w	800a874 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a996:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3730      	adds	r7, #48	; 0x30
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	e000ed04 	.word	0xe000ed04

0800a9a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b086      	sub	sp, #24
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d10d      	bne.n	800a9de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d14d      	bne.n	800aa66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 ff8c 	bl	800b8ec <xTaskPriorityDisinherit>
 800a9d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	609a      	str	r2, [r3, #8]
 800a9dc:	e043      	b.n	800aa66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d119      	bne.n	800aa18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6858      	ldr	r0, [r3, #4]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	68b9      	ldr	r1, [r7, #8]
 800a9f0:	f001 ffc0 	bl	800c974 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	685a      	ldr	r2, [r3, #4]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9fc:	441a      	add	r2, r3
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	685a      	ldr	r2, [r3, #4]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d32b      	bcc.n	800aa66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	605a      	str	r2, [r3, #4]
 800aa16:	e026      	b.n	800aa66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	68d8      	ldr	r0, [r3, #12]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa20:	461a      	mov	r2, r3
 800aa22:	68b9      	ldr	r1, [r7, #8]
 800aa24:	f001 ffa6 	bl	800c974 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	68da      	ldr	r2, [r3, #12]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa30:	425b      	negs	r3, r3
 800aa32:	441a      	add	r2, r3
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	68da      	ldr	r2, [r3, #12]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d207      	bcs.n	800aa54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	689a      	ldr	r2, [r3, #8]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4c:	425b      	negs	r3, r3
 800aa4e:	441a      	add	r2, r3
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d105      	bne.n	800aa66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d002      	beq.n	800aa66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	3b01      	subs	r3, #1
 800aa64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	1c5a      	adds	r2, r3, #1
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aa6e:	697b      	ldr	r3, [r7, #20]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3718      	adds	r7, #24
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d018      	beq.n	800aabc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	68da      	ldr	r2, [r3, #12]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa92:	441a      	add	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	68da      	ldr	r2, [r3, #12]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d303      	bcc.n	800aaac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	68d9      	ldr	r1, [r3, #12]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab4:	461a      	mov	r2, r3
 800aab6:	6838      	ldr	r0, [r7, #0]
 800aab8:	f001 ff5c 	bl	800c974 <memcpy>
	}
}
 800aabc:	bf00      	nop
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aacc:	f001 fc3e 	bl	800c34c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aad6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aad8:	e011      	b.n	800aafe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d012      	beq.n	800ab08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	3324      	adds	r3, #36	; 0x24
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 fd2c 	bl	800b544 <xTaskRemoveFromEventList>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d001      	beq.n	800aaf6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aaf2:	f000 fdff 	bl	800b6f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aaf6:	7bfb      	ldrb	r3, [r7, #15]
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aafe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	dce9      	bgt.n	800aada <prvUnlockQueue+0x16>
 800ab06:	e000      	b.n	800ab0a <prvUnlockQueue+0x46>
					break;
 800ab08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	22ff      	movs	r2, #255	; 0xff
 800ab0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ab12:	f001 fc49 	bl	800c3a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ab16:	f001 fc19 	bl	800c34c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab22:	e011      	b.n	800ab48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d012      	beq.n	800ab52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	3310      	adds	r3, #16
 800ab30:	4618      	mov	r0, r3
 800ab32:	f000 fd07 	bl	800b544 <xTaskRemoveFromEventList>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d001      	beq.n	800ab40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ab3c:	f000 fdda 	bl	800b6f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ab40:	7bbb      	ldrb	r3, [r7, #14]
 800ab42:	3b01      	subs	r3, #1
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	dce9      	bgt.n	800ab24 <prvUnlockQueue+0x60>
 800ab50:	e000      	b.n	800ab54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ab52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	22ff      	movs	r2, #255	; 0xff
 800ab58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ab5c:	f001 fc24 	bl	800c3a8 <vPortExitCritical>
}
 800ab60:	bf00      	nop
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab70:	f001 fbec 	bl	800c34c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d102      	bne.n	800ab82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	60fb      	str	r3, [r7, #12]
 800ab80:	e001      	b.n	800ab86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab82:	2300      	movs	r3, #0
 800ab84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab86:	f001 fc0f 	bl	800c3a8 <vPortExitCritical>

	return xReturn;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3710      	adds	r7, #16
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab9c:	f001 fbd6 	bl	800c34c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d102      	bne.n	800abb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800abac:	2301      	movs	r3, #1
 800abae:	60fb      	str	r3, [r7, #12]
 800abb0:	e001      	b.n	800abb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800abb2:	2300      	movs	r3, #0
 800abb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800abb6:	f001 fbf7 	bl	800c3a8 <vPortExitCritical>

	return xReturn;
 800abba:	68fb      	ldr	r3, [r7, #12]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abce:	2300      	movs	r3, #0
 800abd0:	60fb      	str	r3, [r7, #12]
 800abd2:	e014      	b.n	800abfe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800abd4:	4a0e      	ldr	r2, [pc, #56]	; (800ac10 <vQueueAddToRegistry+0x4c>)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d10b      	bne.n	800abf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800abe0:	490b      	ldr	r1, [pc, #44]	; (800ac10 <vQueueAddToRegistry+0x4c>)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	683a      	ldr	r2, [r7, #0]
 800abe6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800abea:	4a09      	ldr	r2, [pc, #36]	; (800ac10 <vQueueAddToRegistry+0x4c>)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	00db      	lsls	r3, r3, #3
 800abf0:	4413      	add	r3, r2
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800abf6:	e005      	b.n	800ac04 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	3301      	adds	r3, #1
 800abfc:	60fb      	str	r3, [r7, #12]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2b07      	cmp	r3, #7
 800ac02:	d9e7      	bls.n	800abd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ac04:	bf00      	nop
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr
 800ac10:	24005090 	.word	0x24005090

0800ac14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b086      	sub	sp, #24
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ac24:	f001 fb92 	bl	800c34c <vPortEnterCritical>
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac2e:	b25b      	sxtb	r3, r3
 800ac30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac34:	d103      	bne.n	800ac3e <vQueueWaitForMessageRestricted+0x2a>
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac44:	b25b      	sxtb	r3, r3
 800ac46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4a:	d103      	bne.n	800ac54 <vQueueWaitForMessageRestricted+0x40>
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac54:	f001 fba8 	bl	800c3a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d106      	bne.n	800ac6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	3324      	adds	r3, #36	; 0x24
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	68b9      	ldr	r1, [r7, #8]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f000 fc41 	bl	800b4f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ac6e:	6978      	ldr	r0, [r7, #20]
 800ac70:	f7ff ff28 	bl	800aac4 <prvUnlockQueue>
	}
 800ac74:	bf00      	nop
 800ac76:	3718      	adds	r7, #24
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08e      	sub	sp, #56	; 0x38
 800ac80:	af04      	add	r7, sp, #16
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
 800ac88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d109      	bne.n	800aca4 <xTaskCreateStatic+0x28>
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	623b      	str	r3, [r7, #32]
 800aca2:	e7fe      	b.n	800aca2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800aca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d109      	bne.n	800acbe <xTaskCreateStatic+0x42>
 800acaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	61fb      	str	r3, [r7, #28]
 800acbc:	e7fe      	b.n	800acbc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800acbe:	235c      	movs	r3, #92	; 0x5c
 800acc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	2b5c      	cmp	r3, #92	; 0x5c
 800acc6:	d009      	beq.n	800acdc <xTaskCreateStatic+0x60>
 800acc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800accc:	f383 8811 	msr	BASEPRI, r3
 800acd0:	f3bf 8f6f 	isb	sy
 800acd4:	f3bf 8f4f 	dsb	sy
 800acd8:	61bb      	str	r3, [r7, #24]
 800acda:	e7fe      	b.n	800acda <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800acdc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800acde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d01e      	beq.n	800ad22 <xTaskCreateStatic+0xa6>
 800ace4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d01b      	beq.n	800ad22 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800acee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acf2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	2202      	movs	r2, #2
 800acf8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800acfc:	2300      	movs	r3, #0
 800acfe:	9303      	str	r3, [sp, #12]
 800ad00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad02:	9302      	str	r3, [sp, #8]
 800ad04:	f107 0314 	add.w	r3, r7, #20
 800ad08:	9301      	str	r3, [sp, #4]
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	68b9      	ldr	r1, [r7, #8]
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 f850 	bl	800adba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad1c:	f000 f8dc 	bl	800aed8 <prvAddNewTaskToReadyList>
 800ad20:	e001      	b.n	800ad26 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800ad22:	2300      	movs	r3, #0
 800ad24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad26:	697b      	ldr	r3, [r7, #20]
	}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3728      	adds	r7, #40	; 0x28
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b08c      	sub	sp, #48	; 0x30
 800ad34:	af04      	add	r7, sp, #16
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	603b      	str	r3, [r7, #0]
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad40:	88fb      	ldrh	r3, [r7, #6]
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4618      	mov	r0, r3
 800ad46:	f001 fc1b 	bl	800c580 <pvPortMalloc>
 800ad4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00e      	beq.n	800ad70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad52:	205c      	movs	r0, #92	; 0x5c
 800ad54:	f001 fc14 	bl	800c580 <pvPortMalloc>
 800ad58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d003      	beq.n	800ad68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	631a      	str	r2, [r3, #48]	; 0x30
 800ad66:	e005      	b.n	800ad74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad68:	6978      	ldr	r0, [r7, #20]
 800ad6a:	f001 fccb 	bl	800c704 <vPortFree>
 800ad6e:	e001      	b.n	800ad74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad70:	2300      	movs	r3, #0
 800ad72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d017      	beq.n	800adaa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad82:	88fa      	ldrh	r2, [r7, #6]
 800ad84:	2300      	movs	r3, #0
 800ad86:	9303      	str	r3, [sp, #12]
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	9302      	str	r3, [sp, #8]
 800ad8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8e:	9301      	str	r3, [sp, #4]
 800ad90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad92:	9300      	str	r3, [sp, #0]
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	68b9      	ldr	r1, [r7, #8]
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f000 f80e 	bl	800adba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad9e:	69f8      	ldr	r0, [r7, #28]
 800ada0:	f000 f89a 	bl	800aed8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ada4:	2301      	movs	r3, #1
 800ada6:	61bb      	str	r3, [r7, #24]
 800ada8:	e002      	b.n	800adb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800adaa:	f04f 33ff 	mov.w	r3, #4294967295
 800adae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800adb0:	69bb      	ldr	r3, [r7, #24]
	}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3720      	adds	r7, #32
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b088      	sub	sp, #32
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	60f8      	str	r0, [r7, #12]
 800adc2:	60b9      	str	r1, [r7, #8]
 800adc4:	607a      	str	r2, [r7, #4]
 800adc6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800adc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	461a      	mov	r2, r3
 800add2:	21a5      	movs	r1, #165	; 0xa5
 800add4:	f001 fdd9 	bl	800c98a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800add8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800addc:	6879      	ldr	r1, [r7, #4]
 800adde:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ade2:	440b      	add	r3, r1
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4413      	add	r3, r2
 800ade8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	f023 0307 	bic.w	r3, r3, #7
 800adf0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	f003 0307 	and.w	r3, r3, #7
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d009      	beq.n	800ae10 <prvInitialiseNewTask+0x56>
 800adfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae00:	f383 8811 	msr	BASEPRI, r3
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	617b      	str	r3, [r7, #20]
 800ae0e:	e7fe      	b.n	800ae0e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d01f      	beq.n	800ae56 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae16:	2300      	movs	r3, #0
 800ae18:	61fb      	str	r3, [r7, #28]
 800ae1a:	e012      	b.n	800ae42 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	4413      	add	r3, r2
 800ae22:	7819      	ldrb	r1, [r3, #0]
 800ae24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	4413      	add	r3, r2
 800ae2a:	3334      	adds	r3, #52	; 0x34
 800ae2c:	460a      	mov	r2, r1
 800ae2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	4413      	add	r3, r2
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d006      	beq.n	800ae4a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	61fb      	str	r3, [r7, #28]
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	2b0f      	cmp	r3, #15
 800ae46:	d9e9      	bls.n	800ae1c <prvInitialiseNewTask+0x62>
 800ae48:	e000      	b.n	800ae4c <prvInitialiseNewTask+0x92>
			{
				break;
 800ae4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae54:	e003      	b.n	800ae5e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae60:	2b37      	cmp	r3, #55	; 0x37
 800ae62:	d901      	bls.n	800ae68 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae64:	2337      	movs	r3, #55	; 0x37
 800ae66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	2200      	movs	r2, #0
 800ae78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7ff f994 	bl	800a1ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae86:	3318      	adds	r3, #24
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7ff f98f 	bl	800a1ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aea2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea6:	2200      	movs	r2, #0
 800aea8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	68f9      	ldr	r1, [r7, #12]
 800aeb6:	69b8      	ldr	r0, [r7, #24]
 800aeb8:	f001 f91e 	bl	800c0f8 <pxPortInitialiseStack>
 800aebc:	4602      	mov	r2, r0
 800aebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d002      	beq.n	800aece <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aecc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aece:	bf00      	nop
 800aed0:	3720      	adds	r7, #32
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
	...

0800aed8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aee0:	f001 fa34 	bl	800c34c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aee4:	4b2d      	ldr	r3, [pc, #180]	; (800af9c <prvAddNewTaskToReadyList+0xc4>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	3301      	adds	r3, #1
 800aeea:	4a2c      	ldr	r2, [pc, #176]	; (800af9c <prvAddNewTaskToReadyList+0xc4>)
 800aeec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aeee:	4b2c      	ldr	r3, [pc, #176]	; (800afa0 <prvAddNewTaskToReadyList+0xc8>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d109      	bne.n	800af0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aef6:	4a2a      	ldr	r2, [pc, #168]	; (800afa0 <prvAddNewTaskToReadyList+0xc8>)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aefc:	4b27      	ldr	r3, [pc, #156]	; (800af9c <prvAddNewTaskToReadyList+0xc4>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b01      	cmp	r3, #1
 800af02:	d110      	bne.n	800af26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af04:	f000 fc1a 	bl	800b73c <prvInitialiseTaskLists>
 800af08:	e00d      	b.n	800af26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af0a:	4b26      	ldr	r3, [pc, #152]	; (800afa4 <prvAddNewTaskToReadyList+0xcc>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d109      	bne.n	800af26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af12:	4b23      	ldr	r3, [pc, #140]	; (800afa0 <prvAddNewTaskToReadyList+0xc8>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d802      	bhi.n	800af26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af20:	4a1f      	ldr	r2, [pc, #124]	; (800afa0 <prvAddNewTaskToReadyList+0xc8>)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800af26:	4b20      	ldr	r3, [pc, #128]	; (800afa8 <prvAddNewTaskToReadyList+0xd0>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	3301      	adds	r3, #1
 800af2c:	4a1e      	ldr	r2, [pc, #120]	; (800afa8 <prvAddNewTaskToReadyList+0xd0>)
 800af2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800af30:	4b1d      	ldr	r3, [pc, #116]	; (800afa8 <prvAddNewTaskToReadyList+0xd0>)
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af3c:	4b1b      	ldr	r3, [pc, #108]	; (800afac <prvAddNewTaskToReadyList+0xd4>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	429a      	cmp	r2, r3
 800af42:	d903      	bls.n	800af4c <prvAddNewTaskToReadyList+0x74>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af48:	4a18      	ldr	r2, [pc, #96]	; (800afac <prvAddNewTaskToReadyList+0xd4>)
 800af4a:	6013      	str	r3, [r2, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af50:	4613      	mov	r3, r2
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	4413      	add	r3, r2
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	4a15      	ldr	r2, [pc, #84]	; (800afb0 <prvAddNewTaskToReadyList+0xd8>)
 800af5a:	441a      	add	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	3304      	adds	r3, #4
 800af60:	4619      	mov	r1, r3
 800af62:	4610      	mov	r0, r2
 800af64:	f7ff f92f 	bl	800a1c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af68:	f001 fa1e 	bl	800c3a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800af6c:	4b0d      	ldr	r3, [pc, #52]	; (800afa4 <prvAddNewTaskToReadyList+0xcc>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00e      	beq.n	800af92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af74:	4b0a      	ldr	r3, [pc, #40]	; (800afa0 <prvAddNewTaskToReadyList+0xc8>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7e:	429a      	cmp	r2, r3
 800af80:	d207      	bcs.n	800af92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800af82:	4b0c      	ldr	r3, [pc, #48]	; (800afb4 <prvAddNewTaskToReadyList+0xdc>)
 800af84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af88:	601a      	str	r2, [r3, #0]
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af92:	bf00      	nop
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	24000bc0 	.word	0x24000bc0
 800afa0:	240006ec 	.word	0x240006ec
 800afa4:	24000bcc 	.word	0x24000bcc
 800afa8:	24000bdc 	.word	0x24000bdc
 800afac:	24000bc8 	.word	0x24000bc8
 800afb0:	240006f0 	.word	0x240006f0
 800afb4:	e000ed04 	.word	0xe000ed04

0800afb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800afc0:	2300      	movs	r3, #0
 800afc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d016      	beq.n	800aff8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800afca:	4b13      	ldr	r3, [pc, #76]	; (800b018 <vTaskDelay+0x60>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d009      	beq.n	800afe6 <vTaskDelay+0x2e>
 800afd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	60bb      	str	r3, [r7, #8]
 800afe4:	e7fe      	b.n	800afe4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800afe6:	f000 f87f 	bl	800b0e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800afea:	2100      	movs	r1, #0
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 fce9 	bl	800b9c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aff2:	f000 f887 	bl	800b104 <xTaskResumeAll>
 800aff6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d107      	bne.n	800b00e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800affe:	4b07      	ldr	r3, [pc, #28]	; (800b01c <vTaskDelay+0x64>)
 800b000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b004:	601a      	str	r2, [r3, #0]
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b00e:	bf00      	nop
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	24000be8 	.word	0x24000be8
 800b01c:	e000ed04 	.word	0xe000ed04

0800b020 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b08a      	sub	sp, #40	; 0x28
 800b024:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b026:	2300      	movs	r3, #0
 800b028:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b02a:	2300      	movs	r3, #0
 800b02c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b02e:	463a      	mov	r2, r7
 800b030:	1d39      	adds	r1, r7, #4
 800b032:	f107 0308 	add.w	r3, r7, #8
 800b036:	4618      	mov	r0, r3
 800b038:	f7ff f864 	bl	800a104 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	9202      	str	r2, [sp, #8]
 800b044:	9301      	str	r3, [sp, #4]
 800b046:	2300      	movs	r3, #0
 800b048:	9300      	str	r3, [sp, #0]
 800b04a:	2300      	movs	r3, #0
 800b04c:	460a      	mov	r2, r1
 800b04e:	4920      	ldr	r1, [pc, #128]	; (800b0d0 <vTaskStartScheduler+0xb0>)
 800b050:	4820      	ldr	r0, [pc, #128]	; (800b0d4 <vTaskStartScheduler+0xb4>)
 800b052:	f7ff fe13 	bl	800ac7c <xTaskCreateStatic>
 800b056:	4602      	mov	r2, r0
 800b058:	4b1f      	ldr	r3, [pc, #124]	; (800b0d8 <vTaskStartScheduler+0xb8>)
 800b05a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b05c:	4b1e      	ldr	r3, [pc, #120]	; (800b0d8 <vTaskStartScheduler+0xb8>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b064:	2301      	movs	r3, #1
 800b066:	617b      	str	r3, [r7, #20]
 800b068:	e001      	b.n	800b06e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b06a:	2300      	movs	r3, #0
 800b06c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	2b01      	cmp	r3, #1
 800b072:	d102      	bne.n	800b07a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b074:	f000 fcfa 	bl	800ba6c <xTimerCreateTimerTask>
 800b078:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d115      	bne.n	800b0ac <vTaskStartScheduler+0x8c>
 800b080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b084:	f383 8811 	msr	BASEPRI, r3
 800b088:	f3bf 8f6f 	isb	sy
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b092:	4b12      	ldr	r3, [pc, #72]	; (800b0dc <vTaskStartScheduler+0xbc>)
 800b094:	f04f 32ff 	mov.w	r2, #4294967295
 800b098:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b09a:	4b11      	ldr	r3, [pc, #68]	; (800b0e0 <vTaskStartScheduler+0xc0>)
 800b09c:	2201      	movs	r2, #1
 800b09e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b0a0:	4b10      	ldr	r3, [pc, #64]	; (800b0e4 <vTaskStartScheduler+0xc4>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b0a6:	f001 f8b3 	bl	800c210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b0aa:	e00d      	b.n	800b0c8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b2:	d109      	bne.n	800b0c8 <vTaskStartScheduler+0xa8>
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	60fb      	str	r3, [r7, #12]
 800b0c6:	e7fe      	b.n	800b0c6 <vTaskStartScheduler+0xa6>
}
 800b0c8:	bf00      	nop
 800b0ca:	3718      	adds	r7, #24
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	0800cb3c 	.word	0x0800cb3c
 800b0d4:	0800b70d 	.word	0x0800b70d
 800b0d8:	24000be4 	.word	0x24000be4
 800b0dc:	24000be0 	.word	0x24000be0
 800b0e0:	24000bcc 	.word	0x24000bcc
 800b0e4:	24000bc4 	.word	0x24000bc4

0800b0e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b0ec:	4b04      	ldr	r3, [pc, #16]	; (800b100 <vTaskSuspendAll+0x18>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	4a03      	ldr	r2, [pc, #12]	; (800b100 <vTaskSuspendAll+0x18>)
 800b0f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b0f6:	bf00      	nop
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	24000be8 	.word	0x24000be8

0800b104 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b10a:	2300      	movs	r3, #0
 800b10c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b10e:	2300      	movs	r3, #0
 800b110:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b112:	4b41      	ldr	r3, [pc, #260]	; (800b218 <xTaskResumeAll+0x114>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d109      	bne.n	800b12e <xTaskResumeAll+0x2a>
 800b11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11e:	f383 8811 	msr	BASEPRI, r3
 800b122:	f3bf 8f6f 	isb	sy
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	603b      	str	r3, [r7, #0]
 800b12c:	e7fe      	b.n	800b12c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b12e:	f001 f90d 	bl	800c34c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b132:	4b39      	ldr	r3, [pc, #228]	; (800b218 <xTaskResumeAll+0x114>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3b01      	subs	r3, #1
 800b138:	4a37      	ldr	r2, [pc, #220]	; (800b218 <xTaskResumeAll+0x114>)
 800b13a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b13c:	4b36      	ldr	r3, [pc, #216]	; (800b218 <xTaskResumeAll+0x114>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d162      	bne.n	800b20a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b144:	4b35      	ldr	r3, [pc, #212]	; (800b21c <xTaskResumeAll+0x118>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d05e      	beq.n	800b20a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b14c:	e02f      	b.n	800b1ae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b14e:	4b34      	ldr	r3, [pc, #208]	; (800b220 <xTaskResumeAll+0x11c>)
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3318      	adds	r3, #24
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7ff f890 	bl	800a280 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3304      	adds	r3, #4
 800b164:	4618      	mov	r0, r3
 800b166:	f7ff f88b 	bl	800a280 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b16e:	4b2d      	ldr	r3, [pc, #180]	; (800b224 <xTaskResumeAll+0x120>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	429a      	cmp	r2, r3
 800b174:	d903      	bls.n	800b17e <xTaskResumeAll+0x7a>
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17a:	4a2a      	ldr	r2, [pc, #168]	; (800b224 <xTaskResumeAll+0x120>)
 800b17c:	6013      	str	r3, [r2, #0]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b182:	4613      	mov	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4413      	add	r3, r2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	4a27      	ldr	r2, [pc, #156]	; (800b228 <xTaskResumeAll+0x124>)
 800b18c:	441a      	add	r2, r3
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	3304      	adds	r3, #4
 800b192:	4619      	mov	r1, r3
 800b194:	4610      	mov	r0, r2
 800b196:	f7ff f816 	bl	800a1c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b19e:	4b23      	ldr	r3, [pc, #140]	; (800b22c <xTaskResumeAll+0x128>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d302      	bcc.n	800b1ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b1a8:	4b21      	ldr	r3, [pc, #132]	; (800b230 <xTaskResumeAll+0x12c>)
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1ae:	4b1c      	ldr	r3, [pc, #112]	; (800b220 <xTaskResumeAll+0x11c>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1cb      	bne.n	800b14e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d001      	beq.n	800b1c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b1bc:	f000 fb58 	bl	800b870 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b1c0:	4b1c      	ldr	r3, [pc, #112]	; (800b234 <xTaskResumeAll+0x130>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d010      	beq.n	800b1ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b1cc:	f000 f858 	bl	800b280 <xTaskIncrementTick>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d002      	beq.n	800b1dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b1d6:	4b16      	ldr	r3, [pc, #88]	; (800b230 <xTaskResumeAll+0x12c>)
 800b1d8:	2201      	movs	r2, #1
 800b1da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1f1      	bne.n	800b1cc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b1e8:	4b12      	ldr	r3, [pc, #72]	; (800b234 <xTaskResumeAll+0x130>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b1ee:	4b10      	ldr	r3, [pc, #64]	; (800b230 <xTaskResumeAll+0x12c>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d009      	beq.n	800b20a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b1fa:	4b0f      	ldr	r3, [pc, #60]	; (800b238 <xTaskResumeAll+0x134>)
 800b1fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b200:	601a      	str	r2, [r3, #0]
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b20a:	f001 f8cd 	bl	800c3a8 <vPortExitCritical>

	return xAlreadyYielded;
 800b20e:	68bb      	ldr	r3, [r7, #8]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	24000be8 	.word	0x24000be8
 800b21c:	24000bc0 	.word	0x24000bc0
 800b220:	24000b80 	.word	0x24000b80
 800b224:	24000bc8 	.word	0x24000bc8
 800b228:	240006f0 	.word	0x240006f0
 800b22c:	240006ec 	.word	0x240006ec
 800b230:	24000bd4 	.word	0x24000bd4
 800b234:	24000bd0 	.word	0x24000bd0
 800b238:	e000ed04 	.word	0xe000ed04

0800b23c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b242:	4b05      	ldr	r3, [pc, #20]	; (800b258 <xTaskGetTickCount+0x1c>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b248:	687b      	ldr	r3, [r7, #4]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	370c      	adds	r7, #12
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	24000bc4 	.word	0x24000bc4

0800b25c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b262:	f001 f94f 	bl	800c504 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b266:	2300      	movs	r3, #0
 800b268:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b26a:	4b04      	ldr	r3, [pc, #16]	; (800b27c <xTaskGetTickCountFromISR+0x20>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b270:	683b      	ldr	r3, [r7, #0]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3708      	adds	r7, #8
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	24000bc4 	.word	0x24000bc4

0800b280 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b086      	sub	sp, #24
 800b284:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b286:	2300      	movs	r3, #0
 800b288:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b28a:	4b4e      	ldr	r3, [pc, #312]	; (800b3c4 <xTaskIncrementTick+0x144>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	f040 8088 	bne.w	800b3a4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b294:	4b4c      	ldr	r3, [pc, #304]	; (800b3c8 <xTaskIncrementTick+0x148>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	3301      	adds	r3, #1
 800b29a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b29c:	4a4a      	ldr	r2, [pc, #296]	; (800b3c8 <xTaskIncrementTick+0x148>)
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d11f      	bne.n	800b2e8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b2a8:	4b48      	ldr	r3, [pc, #288]	; (800b3cc <xTaskIncrementTick+0x14c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d009      	beq.n	800b2c6 <xTaskIncrementTick+0x46>
 800b2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b6:	f383 8811 	msr	BASEPRI, r3
 800b2ba:	f3bf 8f6f 	isb	sy
 800b2be:	f3bf 8f4f 	dsb	sy
 800b2c2:	603b      	str	r3, [r7, #0]
 800b2c4:	e7fe      	b.n	800b2c4 <xTaskIncrementTick+0x44>
 800b2c6:	4b41      	ldr	r3, [pc, #260]	; (800b3cc <xTaskIncrementTick+0x14c>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	4b40      	ldr	r3, [pc, #256]	; (800b3d0 <xTaskIncrementTick+0x150>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a3e      	ldr	r2, [pc, #248]	; (800b3cc <xTaskIncrementTick+0x14c>)
 800b2d2:	6013      	str	r3, [r2, #0]
 800b2d4:	4a3e      	ldr	r2, [pc, #248]	; (800b3d0 <xTaskIncrementTick+0x150>)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6013      	str	r3, [r2, #0]
 800b2da:	4b3e      	ldr	r3, [pc, #248]	; (800b3d4 <xTaskIncrementTick+0x154>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	4a3c      	ldr	r2, [pc, #240]	; (800b3d4 <xTaskIncrementTick+0x154>)
 800b2e2:	6013      	str	r3, [r2, #0]
 800b2e4:	f000 fac4 	bl	800b870 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b2e8:	4b3b      	ldr	r3, [pc, #236]	; (800b3d8 <xTaskIncrementTick+0x158>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	693a      	ldr	r2, [r7, #16]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d349      	bcc.n	800b386 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2f2:	4b36      	ldr	r3, [pc, #216]	; (800b3cc <xTaskIncrementTick+0x14c>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d104      	bne.n	800b306 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2fc:	4b36      	ldr	r3, [pc, #216]	; (800b3d8 <xTaskIncrementTick+0x158>)
 800b2fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b302:	601a      	str	r2, [r3, #0]
					break;
 800b304:	e03f      	b.n	800b386 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b306:	4b31      	ldr	r3, [pc, #196]	; (800b3cc <xTaskIncrementTick+0x14c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b316:	693a      	ldr	r2, [r7, #16]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d203      	bcs.n	800b326 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b31e:	4a2e      	ldr	r2, [pc, #184]	; (800b3d8 <xTaskIncrementTick+0x158>)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b324:	e02f      	b.n	800b386 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	3304      	adds	r3, #4
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fe ffa8 	bl	800a280 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b334:	2b00      	cmp	r3, #0
 800b336:	d004      	beq.n	800b342 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	3318      	adds	r3, #24
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7fe ff9f 	bl	800a280 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b346:	4b25      	ldr	r3, [pc, #148]	; (800b3dc <xTaskIncrementTick+0x15c>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d903      	bls.n	800b356 <xTaskIncrementTick+0xd6>
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b352:	4a22      	ldr	r2, [pc, #136]	; (800b3dc <xTaskIncrementTick+0x15c>)
 800b354:	6013      	str	r3, [r2, #0]
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b35a:	4613      	mov	r3, r2
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	4413      	add	r3, r2
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	4a1f      	ldr	r2, [pc, #124]	; (800b3e0 <xTaskIncrementTick+0x160>)
 800b364:	441a      	add	r2, r3
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	3304      	adds	r3, #4
 800b36a:	4619      	mov	r1, r3
 800b36c:	4610      	mov	r0, r2
 800b36e:	f7fe ff2a 	bl	800a1c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b376:	4b1b      	ldr	r3, [pc, #108]	; (800b3e4 <xTaskIncrementTick+0x164>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d3b8      	bcc.n	800b2f2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b380:	2301      	movs	r3, #1
 800b382:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b384:	e7b5      	b.n	800b2f2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b386:	4b17      	ldr	r3, [pc, #92]	; (800b3e4 <xTaskIncrementTick+0x164>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b38c:	4914      	ldr	r1, [pc, #80]	; (800b3e0 <xTaskIncrementTick+0x160>)
 800b38e:	4613      	mov	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	440b      	add	r3, r1
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d907      	bls.n	800b3ae <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	617b      	str	r3, [r7, #20]
 800b3a2:	e004      	b.n	800b3ae <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b3a4:	4b10      	ldr	r3, [pc, #64]	; (800b3e8 <xTaskIncrementTick+0x168>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	4a0f      	ldr	r2, [pc, #60]	; (800b3e8 <xTaskIncrementTick+0x168>)
 800b3ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b3ae:	4b0f      	ldr	r3, [pc, #60]	; (800b3ec <xTaskIncrementTick+0x16c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d001      	beq.n	800b3ba <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b3ba:	697b      	ldr	r3, [r7, #20]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3718      	adds	r7, #24
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	24000be8 	.word	0x24000be8
 800b3c8:	24000bc4 	.word	0x24000bc4
 800b3cc:	24000b78 	.word	0x24000b78
 800b3d0:	24000b7c 	.word	0x24000b7c
 800b3d4:	24000bd8 	.word	0x24000bd8
 800b3d8:	24000be0 	.word	0x24000be0
 800b3dc:	24000bc8 	.word	0x24000bc8
 800b3e0:	240006f0 	.word	0x240006f0
 800b3e4:	240006ec 	.word	0x240006ec
 800b3e8:	24000bd0 	.word	0x24000bd0
 800b3ec:	24000bd4 	.word	0x24000bd4

0800b3f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b3f6:	4b27      	ldr	r3, [pc, #156]	; (800b494 <vTaskSwitchContext+0xa4>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d003      	beq.n	800b406 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b3fe:	4b26      	ldr	r3, [pc, #152]	; (800b498 <vTaskSwitchContext+0xa8>)
 800b400:	2201      	movs	r2, #1
 800b402:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b404:	e040      	b.n	800b488 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b406:	4b24      	ldr	r3, [pc, #144]	; (800b498 <vTaskSwitchContext+0xa8>)
 800b408:	2200      	movs	r2, #0
 800b40a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b40c:	4b23      	ldr	r3, [pc, #140]	; (800b49c <vTaskSwitchContext+0xac>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	60fb      	str	r3, [r7, #12]
 800b412:	e00f      	b.n	800b434 <vTaskSwitchContext+0x44>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d109      	bne.n	800b42e <vTaskSwitchContext+0x3e>
 800b41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41e:	f383 8811 	msr	BASEPRI, r3
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	607b      	str	r3, [r7, #4]
 800b42c:	e7fe      	b.n	800b42c <vTaskSwitchContext+0x3c>
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	3b01      	subs	r3, #1
 800b432:	60fb      	str	r3, [r7, #12]
 800b434:	491a      	ldr	r1, [pc, #104]	; (800b4a0 <vTaskSwitchContext+0xb0>)
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	4613      	mov	r3, r2
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	440b      	add	r3, r1
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d0e5      	beq.n	800b414 <vTaskSwitchContext+0x24>
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	4613      	mov	r3, r2
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	4413      	add	r3, r2
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	4a13      	ldr	r2, [pc, #76]	; (800b4a0 <vTaskSwitchContext+0xb0>)
 800b454:	4413      	add	r3, r2
 800b456:	60bb      	str	r3, [r7, #8]
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	685a      	ldr	r2, [r3, #4]
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	605a      	str	r2, [r3, #4]
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	685a      	ldr	r2, [r3, #4]
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	3308      	adds	r3, #8
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d104      	bne.n	800b478 <vTaskSwitchContext+0x88>
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	685a      	ldr	r2, [r3, #4]
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	605a      	str	r2, [r3, #4]
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	4a09      	ldr	r2, [pc, #36]	; (800b4a4 <vTaskSwitchContext+0xb4>)
 800b480:	6013      	str	r3, [r2, #0]
 800b482:	4a06      	ldr	r2, [pc, #24]	; (800b49c <vTaskSwitchContext+0xac>)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6013      	str	r3, [r2, #0]
}
 800b488:	bf00      	nop
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr
 800b494:	24000be8 	.word	0x24000be8
 800b498:	24000bd4 	.word	0x24000bd4
 800b49c:	24000bc8 	.word	0x24000bc8
 800b4a0:	240006f0 	.word	0x240006f0
 800b4a4:	240006ec 	.word	0x240006ec

0800b4a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d109      	bne.n	800b4cc <vTaskPlaceOnEventList+0x24>
 800b4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4bc:	f383 8811 	msr	BASEPRI, r3
 800b4c0:	f3bf 8f6f 	isb	sy
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	60fb      	str	r3, [r7, #12]
 800b4ca:	e7fe      	b.n	800b4ca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4cc:	4b07      	ldr	r3, [pc, #28]	; (800b4ec <vTaskPlaceOnEventList+0x44>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	3318      	adds	r3, #24
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f7fe fe9a 	bl	800a20e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b4da:	2101      	movs	r1, #1
 800b4dc:	6838      	ldr	r0, [r7, #0]
 800b4de:	f000 fa71 	bl	800b9c4 <prvAddCurrentTaskToDelayedList>
}
 800b4e2:	bf00      	nop
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	240006ec 	.word	0x240006ec

0800b4f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b086      	sub	sp, #24
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d109      	bne.n	800b516 <vTaskPlaceOnEventListRestricted+0x26>
 800b502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	617b      	str	r3, [r7, #20]
 800b514:	e7fe      	b.n	800b514 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b516:	4b0a      	ldr	r3, [pc, #40]	; (800b540 <vTaskPlaceOnEventListRestricted+0x50>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	3318      	adds	r3, #24
 800b51c:	4619      	mov	r1, r3
 800b51e:	68f8      	ldr	r0, [r7, #12]
 800b520:	f7fe fe51 	bl	800a1c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d002      	beq.n	800b530 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800b52a:	f04f 33ff 	mov.w	r3, #4294967295
 800b52e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b530:	6879      	ldr	r1, [r7, #4]
 800b532:	68b8      	ldr	r0, [r7, #8]
 800b534:	f000 fa46 	bl	800b9c4 <prvAddCurrentTaskToDelayedList>
	}
 800b538:	bf00      	nop
 800b53a:	3718      	adds	r7, #24
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	240006ec 	.word	0x240006ec

0800b544 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d109      	bne.n	800b56e <xTaskRemoveFromEventList+0x2a>
 800b55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55e:	f383 8811 	msr	BASEPRI, r3
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	f3bf 8f4f 	dsb	sy
 800b56a:	60fb      	str	r3, [r7, #12]
 800b56c:	e7fe      	b.n	800b56c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	3318      	adds	r3, #24
 800b572:	4618      	mov	r0, r3
 800b574:	f7fe fe84 	bl	800a280 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b578:	4b1d      	ldr	r3, [pc, #116]	; (800b5f0 <xTaskRemoveFromEventList+0xac>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d11d      	bne.n	800b5bc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	3304      	adds	r3, #4
 800b584:	4618      	mov	r0, r3
 800b586:	f7fe fe7b 	bl	800a280 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b58e:	4b19      	ldr	r3, [pc, #100]	; (800b5f4 <xTaskRemoveFromEventList+0xb0>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	429a      	cmp	r2, r3
 800b594:	d903      	bls.n	800b59e <xTaskRemoveFromEventList+0x5a>
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59a:	4a16      	ldr	r2, [pc, #88]	; (800b5f4 <xTaskRemoveFromEventList+0xb0>)
 800b59c:	6013      	str	r3, [r2, #0]
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	4413      	add	r3, r2
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	4a13      	ldr	r2, [pc, #76]	; (800b5f8 <xTaskRemoveFromEventList+0xb4>)
 800b5ac:	441a      	add	r2, r3
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	3304      	adds	r3, #4
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	4610      	mov	r0, r2
 800b5b6:	f7fe fe06 	bl	800a1c6 <vListInsertEnd>
 800b5ba:	e005      	b.n	800b5c8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	3318      	adds	r3, #24
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	480e      	ldr	r0, [pc, #56]	; (800b5fc <xTaskRemoveFromEventList+0xb8>)
 800b5c4:	f7fe fdff 	bl	800a1c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5cc:	4b0c      	ldr	r3, [pc, #48]	; (800b600 <xTaskRemoveFromEventList+0xbc>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d905      	bls.n	800b5e2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b5da:	4b0a      	ldr	r3, [pc, #40]	; (800b604 <xTaskRemoveFromEventList+0xc0>)
 800b5dc:	2201      	movs	r2, #1
 800b5de:	601a      	str	r2, [r3, #0]
 800b5e0:	e001      	b.n	800b5e6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b5e6:	697b      	ldr	r3, [r7, #20]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3718      	adds	r7, #24
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	24000be8 	.word	0x24000be8
 800b5f4:	24000bc8 	.word	0x24000bc8
 800b5f8:	240006f0 	.word	0x240006f0
 800b5fc:	24000b80 	.word	0x24000b80
 800b600:	240006ec 	.word	0x240006ec
 800b604:	24000bd4 	.word	0x24000bd4

0800b608 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b610:	4b06      	ldr	r3, [pc, #24]	; (800b62c <vTaskInternalSetTimeOutState+0x24>)
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b618:	4b05      	ldr	r3, [pc, #20]	; (800b630 <vTaskInternalSetTimeOutState+0x28>)
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	605a      	str	r2, [r3, #4]
}
 800b620:	bf00      	nop
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr
 800b62c:	24000bd8 	.word	0x24000bd8
 800b630:	24000bc4 	.word	0x24000bc4

0800b634 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b088      	sub	sp, #32
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d109      	bne.n	800b658 <xTaskCheckForTimeOut+0x24>
 800b644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b648:	f383 8811 	msr	BASEPRI, r3
 800b64c:	f3bf 8f6f 	isb	sy
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	613b      	str	r3, [r7, #16]
 800b656:	e7fe      	b.n	800b656 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d109      	bne.n	800b672 <xTaskCheckForTimeOut+0x3e>
 800b65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	60fb      	str	r3, [r7, #12]
 800b670:	e7fe      	b.n	800b670 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b672:	f000 fe6b 	bl	800c34c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b676:	4b1d      	ldr	r3, [pc, #116]	; (800b6ec <xTaskCheckForTimeOut+0xb8>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	69ba      	ldr	r2, [r7, #24]
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b68e:	d102      	bne.n	800b696 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b690:	2300      	movs	r3, #0
 800b692:	61fb      	str	r3, [r7, #28]
 800b694:	e023      	b.n	800b6de <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	4b15      	ldr	r3, [pc, #84]	; (800b6f0 <xTaskCheckForTimeOut+0xbc>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d007      	beq.n	800b6b2 <xTaskCheckForTimeOut+0x7e>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	69ba      	ldr	r2, [r7, #24]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d302      	bcc.n	800b6b2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	61fb      	str	r3, [r7, #28]
 800b6b0:	e015      	b.n	800b6de <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	697a      	ldr	r2, [r7, #20]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d20b      	bcs.n	800b6d4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	1ad2      	subs	r2, r2, r3
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f7ff ff9d 	bl	800b608 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	61fb      	str	r3, [r7, #28]
 800b6d2:	e004      	b.n	800b6de <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b6de:	f000 fe63 	bl	800c3a8 <vPortExitCritical>

	return xReturn;
 800b6e2:	69fb      	ldr	r3, [r7, #28]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3720      	adds	r7, #32
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	24000bc4 	.word	0x24000bc4
 800b6f0:	24000bd8 	.word	0x24000bd8

0800b6f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b6f8:	4b03      	ldr	r3, [pc, #12]	; (800b708 <vTaskMissedYield+0x14>)
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	601a      	str	r2, [r3, #0]
}
 800b6fe:	bf00      	nop
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr
 800b708:	24000bd4 	.word	0x24000bd4

0800b70c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b714:	f000 f852 	bl	800b7bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b718:	4b06      	ldr	r3, [pc, #24]	; (800b734 <prvIdleTask+0x28>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d9f9      	bls.n	800b714 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b720:	4b05      	ldr	r3, [pc, #20]	; (800b738 <prvIdleTask+0x2c>)
 800b722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b726:	601a      	str	r2, [r3, #0]
 800b728:	f3bf 8f4f 	dsb	sy
 800b72c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b730:	e7f0      	b.n	800b714 <prvIdleTask+0x8>
 800b732:	bf00      	nop
 800b734:	240006f0 	.word	0x240006f0
 800b738:	e000ed04 	.word	0xe000ed04

0800b73c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b742:	2300      	movs	r3, #0
 800b744:	607b      	str	r3, [r7, #4]
 800b746:	e00c      	b.n	800b762 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	4613      	mov	r3, r2
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	4413      	add	r3, r2
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4a12      	ldr	r2, [pc, #72]	; (800b79c <prvInitialiseTaskLists+0x60>)
 800b754:	4413      	add	r3, r2
 800b756:	4618      	mov	r0, r3
 800b758:	f7fe fd08 	bl	800a16c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	3301      	adds	r3, #1
 800b760:	607b      	str	r3, [r7, #4]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2b37      	cmp	r3, #55	; 0x37
 800b766:	d9ef      	bls.n	800b748 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b768:	480d      	ldr	r0, [pc, #52]	; (800b7a0 <prvInitialiseTaskLists+0x64>)
 800b76a:	f7fe fcff 	bl	800a16c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b76e:	480d      	ldr	r0, [pc, #52]	; (800b7a4 <prvInitialiseTaskLists+0x68>)
 800b770:	f7fe fcfc 	bl	800a16c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b774:	480c      	ldr	r0, [pc, #48]	; (800b7a8 <prvInitialiseTaskLists+0x6c>)
 800b776:	f7fe fcf9 	bl	800a16c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b77a:	480c      	ldr	r0, [pc, #48]	; (800b7ac <prvInitialiseTaskLists+0x70>)
 800b77c:	f7fe fcf6 	bl	800a16c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b780:	480b      	ldr	r0, [pc, #44]	; (800b7b0 <prvInitialiseTaskLists+0x74>)
 800b782:	f7fe fcf3 	bl	800a16c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b786:	4b0b      	ldr	r3, [pc, #44]	; (800b7b4 <prvInitialiseTaskLists+0x78>)
 800b788:	4a05      	ldr	r2, [pc, #20]	; (800b7a0 <prvInitialiseTaskLists+0x64>)
 800b78a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b78c:	4b0a      	ldr	r3, [pc, #40]	; (800b7b8 <prvInitialiseTaskLists+0x7c>)
 800b78e:	4a05      	ldr	r2, [pc, #20]	; (800b7a4 <prvInitialiseTaskLists+0x68>)
 800b790:	601a      	str	r2, [r3, #0]
}
 800b792:	bf00      	nop
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	240006f0 	.word	0x240006f0
 800b7a0:	24000b50 	.word	0x24000b50
 800b7a4:	24000b64 	.word	0x24000b64
 800b7a8:	24000b80 	.word	0x24000b80
 800b7ac:	24000b94 	.word	0x24000b94
 800b7b0:	24000bac 	.word	0x24000bac
 800b7b4:	24000b78 	.word	0x24000b78
 800b7b8:	24000b7c 	.word	0x24000b7c

0800b7bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7c2:	e019      	b.n	800b7f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b7c4:	f000 fdc2 	bl	800c34c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7c8:	4b0f      	ldr	r3, [pc, #60]	; (800b808 <prvCheckTasksWaitingTermination+0x4c>)
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7fe fd53 	bl	800a280 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b7da:	4b0c      	ldr	r3, [pc, #48]	; (800b80c <prvCheckTasksWaitingTermination+0x50>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	4a0a      	ldr	r2, [pc, #40]	; (800b80c <prvCheckTasksWaitingTermination+0x50>)
 800b7e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b7e4:	4b0a      	ldr	r3, [pc, #40]	; (800b810 <prvCheckTasksWaitingTermination+0x54>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	4a09      	ldr	r2, [pc, #36]	; (800b810 <prvCheckTasksWaitingTermination+0x54>)
 800b7ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b7ee:	f000 fddb 	bl	800c3a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 f80e 	bl	800b814 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7f8:	4b05      	ldr	r3, [pc, #20]	; (800b810 <prvCheckTasksWaitingTermination+0x54>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1e1      	bne.n	800b7c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b800:	bf00      	nop
 800b802:	3708      	adds	r7, #8
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	24000b94 	.word	0x24000b94
 800b80c:	24000bc0 	.word	0x24000bc0
 800b810:	24000ba8 	.word	0x24000ba8

0800b814 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b822:	2b00      	cmp	r3, #0
 800b824:	d108      	bne.n	800b838 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b82a:	4618      	mov	r0, r3
 800b82c:	f000 ff6a 	bl	800c704 <vPortFree>
				vPortFree( pxTCB );
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 ff67 	bl	800c704 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b836:	e017      	b.n	800b868 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d103      	bne.n	800b84a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 ff5e 	bl	800c704 <vPortFree>
	}
 800b848:	e00e      	b.n	800b868 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b850:	2b02      	cmp	r3, #2
 800b852:	d009      	beq.n	800b868 <prvDeleteTCB+0x54>
 800b854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	60fb      	str	r3, [r7, #12]
 800b866:	e7fe      	b.n	800b866 <prvDeleteTCB+0x52>
	}
 800b868:	bf00      	nop
 800b86a:	3710      	adds	r7, #16
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b876:	4b0c      	ldr	r3, [pc, #48]	; (800b8a8 <prvResetNextTaskUnblockTime+0x38>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d104      	bne.n	800b88a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b880:	4b0a      	ldr	r3, [pc, #40]	; (800b8ac <prvResetNextTaskUnblockTime+0x3c>)
 800b882:	f04f 32ff 	mov.w	r2, #4294967295
 800b886:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b888:	e008      	b.n	800b89c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b88a:	4b07      	ldr	r3, [pc, #28]	; (800b8a8 <prvResetNextTaskUnblockTime+0x38>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	4a04      	ldr	r2, [pc, #16]	; (800b8ac <prvResetNextTaskUnblockTime+0x3c>)
 800b89a:	6013      	str	r3, [r2, #0]
}
 800b89c:	bf00      	nop
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr
 800b8a8:	24000b78 	.word	0x24000b78
 800b8ac:	24000be0 	.word	0x24000be0

0800b8b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b8b6:	4b0b      	ldr	r3, [pc, #44]	; (800b8e4 <xTaskGetSchedulerState+0x34>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d102      	bne.n	800b8c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	607b      	str	r3, [r7, #4]
 800b8c2:	e008      	b.n	800b8d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8c4:	4b08      	ldr	r3, [pc, #32]	; (800b8e8 <xTaskGetSchedulerState+0x38>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d102      	bne.n	800b8d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b8cc:	2302      	movs	r3, #2
 800b8ce:	607b      	str	r3, [r7, #4]
 800b8d0:	e001      	b.n	800b8d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b8d6:	687b      	ldr	r3, [r7, #4]
	}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	24000bcc 	.word	0x24000bcc
 800b8e8:	24000be8 	.word	0x24000be8

0800b8ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b086      	sub	sp, #24
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d054      	beq.n	800b9ac <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b902:	4b2d      	ldr	r3, [pc, #180]	; (800b9b8 <xTaskPriorityDisinherit+0xcc>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	693a      	ldr	r2, [r7, #16]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d009      	beq.n	800b920 <xTaskPriorityDisinherit+0x34>
 800b90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b910:	f383 8811 	msr	BASEPRI, r3
 800b914:	f3bf 8f6f 	isb	sy
 800b918:	f3bf 8f4f 	dsb	sy
 800b91c:	60fb      	str	r3, [r7, #12]
 800b91e:	e7fe      	b.n	800b91e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b924:	2b00      	cmp	r3, #0
 800b926:	d109      	bne.n	800b93c <xTaskPriorityDisinherit+0x50>
 800b928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92c:	f383 8811 	msr	BASEPRI, r3
 800b930:	f3bf 8f6f 	isb	sy
 800b934:	f3bf 8f4f 	dsb	sy
 800b938:	60bb      	str	r3, [r7, #8]
 800b93a:	e7fe      	b.n	800b93a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b940:	1e5a      	subs	r2, r3, #1
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b94e:	429a      	cmp	r2, r3
 800b950:	d02c      	beq.n	800b9ac <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b956:	2b00      	cmp	r3, #0
 800b958:	d128      	bne.n	800b9ac <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	3304      	adds	r3, #4
 800b95e:	4618      	mov	r0, r3
 800b960:	f7fe fc8e 	bl	800a280 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b970:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97c:	4b0f      	ldr	r3, [pc, #60]	; (800b9bc <xTaskPriorityDisinherit+0xd0>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	429a      	cmp	r2, r3
 800b982:	d903      	bls.n	800b98c <xTaskPriorityDisinherit+0xa0>
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b988:	4a0c      	ldr	r2, [pc, #48]	; (800b9bc <xTaskPriorityDisinherit+0xd0>)
 800b98a:	6013      	str	r3, [r2, #0]
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b990:	4613      	mov	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4413      	add	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4a09      	ldr	r2, [pc, #36]	; (800b9c0 <xTaskPriorityDisinherit+0xd4>)
 800b99a:	441a      	add	r2, r3
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	3304      	adds	r3, #4
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	4610      	mov	r0, r2
 800b9a4:	f7fe fc0f 	bl	800a1c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b9ac:	697b      	ldr	r3, [r7, #20]
	}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3718      	adds	r7, #24
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	240006ec 	.word	0x240006ec
 800b9bc:	24000bc8 	.word	0x24000bc8
 800b9c0:	240006f0 	.word	0x240006f0

0800b9c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b9ce:	4b21      	ldr	r3, [pc, #132]	; (800ba54 <prvAddCurrentTaskToDelayedList+0x90>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9d4:	4b20      	ldr	r3, [pc, #128]	; (800ba58 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	3304      	adds	r3, #4
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7fe fc50 	bl	800a280 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e6:	d10a      	bne.n	800b9fe <prvAddCurrentTaskToDelayedList+0x3a>
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d007      	beq.n	800b9fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9ee:	4b1a      	ldr	r3, [pc, #104]	; (800ba58 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	3304      	adds	r3, #4
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	4819      	ldr	r0, [pc, #100]	; (800ba5c <prvAddCurrentTaskToDelayedList+0x98>)
 800b9f8:	f7fe fbe5 	bl	800a1c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b9fc:	e026      	b.n	800ba4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	4413      	add	r3, r2
 800ba04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba06:	4b14      	ldr	r3, [pc, #80]	; (800ba58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d209      	bcs.n	800ba2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba16:	4b12      	ldr	r3, [pc, #72]	; (800ba60 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	4b0f      	ldr	r3, [pc, #60]	; (800ba58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	3304      	adds	r3, #4
 800ba20:	4619      	mov	r1, r3
 800ba22:	4610      	mov	r0, r2
 800ba24:	f7fe fbf3 	bl	800a20e <vListInsert>
}
 800ba28:	e010      	b.n	800ba4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba2a:	4b0e      	ldr	r3, [pc, #56]	; (800ba64 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	4b0a      	ldr	r3, [pc, #40]	; (800ba58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	3304      	adds	r3, #4
 800ba34:	4619      	mov	r1, r3
 800ba36:	4610      	mov	r0, r2
 800ba38:	f7fe fbe9 	bl	800a20e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba3c:	4b0a      	ldr	r3, [pc, #40]	; (800ba68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d202      	bcs.n	800ba4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ba46:	4a08      	ldr	r2, [pc, #32]	; (800ba68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	6013      	str	r3, [r2, #0]
}
 800ba4c:	bf00      	nop
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	24000bc4 	.word	0x24000bc4
 800ba58:	240006ec 	.word	0x240006ec
 800ba5c:	24000bac 	.word	0x24000bac
 800ba60:	24000b7c 	.word	0x24000b7c
 800ba64:	24000b78 	.word	0x24000b78
 800ba68:	24000be0 	.word	0x24000be0

0800ba6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b08a      	sub	sp, #40	; 0x28
 800ba70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ba72:	2300      	movs	r3, #0
 800ba74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ba76:	f000 faff 	bl	800c078 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ba7a:	4b1c      	ldr	r3, [pc, #112]	; (800baec <xTimerCreateTimerTask+0x80>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d021      	beq.n	800bac6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ba82:	2300      	movs	r3, #0
 800ba84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ba86:	2300      	movs	r3, #0
 800ba88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ba8a:	1d3a      	adds	r2, r7, #4
 800ba8c:	f107 0108 	add.w	r1, r7, #8
 800ba90:	f107 030c 	add.w	r3, r7, #12
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fe fb4f 	bl	800a138 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ba9a:	6879      	ldr	r1, [r7, #4]
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	9202      	str	r2, [sp, #8]
 800baa2:	9301      	str	r3, [sp, #4]
 800baa4:	2302      	movs	r3, #2
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	2300      	movs	r3, #0
 800baaa:	460a      	mov	r2, r1
 800baac:	4910      	ldr	r1, [pc, #64]	; (800baf0 <xTimerCreateTimerTask+0x84>)
 800baae:	4811      	ldr	r0, [pc, #68]	; (800baf4 <xTimerCreateTimerTask+0x88>)
 800bab0:	f7ff f8e4 	bl	800ac7c <xTaskCreateStatic>
 800bab4:	4602      	mov	r2, r0
 800bab6:	4b10      	ldr	r3, [pc, #64]	; (800baf8 <xTimerCreateTimerTask+0x8c>)
 800bab8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800baba:	4b0f      	ldr	r3, [pc, #60]	; (800baf8 <xTimerCreateTimerTask+0x8c>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d001      	beq.n	800bac6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bac2:	2301      	movs	r3, #1
 800bac4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d109      	bne.n	800bae0 <xTimerCreateTimerTask+0x74>
 800bacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad0:	f383 8811 	msr	BASEPRI, r3
 800bad4:	f3bf 8f6f 	isb	sy
 800bad8:	f3bf 8f4f 	dsb	sy
 800badc:	613b      	str	r3, [r7, #16]
 800bade:	e7fe      	b.n	800bade <xTimerCreateTimerTask+0x72>
	return xReturn;
 800bae0:	697b      	ldr	r3, [r7, #20]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3718      	adds	r7, #24
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	24000c1c 	.word	0x24000c1c
 800baf0:	0800cb44 	.word	0x0800cb44
 800baf4:	0800bc2d 	.word	0x0800bc2d
 800baf8:	24000c20 	.word	0x24000c20

0800bafc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b08a      	sub	sp, #40	; 0x28
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	60f8      	str	r0, [r7, #12]
 800bb04:	60b9      	str	r1, [r7, #8]
 800bb06:	607a      	str	r2, [r7, #4]
 800bb08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d109      	bne.n	800bb28 <xTimerGenericCommand+0x2c>
 800bb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb18:	f383 8811 	msr	BASEPRI, r3
 800bb1c:	f3bf 8f6f 	isb	sy
 800bb20:	f3bf 8f4f 	dsb	sy
 800bb24:	623b      	str	r3, [r7, #32]
 800bb26:	e7fe      	b.n	800bb26 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bb28:	4b19      	ldr	r3, [pc, #100]	; (800bb90 <xTimerGenericCommand+0x94>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d02a      	beq.n	800bb86 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	2b05      	cmp	r3, #5
 800bb40:	dc18      	bgt.n	800bb74 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bb42:	f7ff feb5 	bl	800b8b0 <xTaskGetSchedulerState>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b02      	cmp	r3, #2
 800bb4a:	d109      	bne.n	800bb60 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bb4c:	4b10      	ldr	r3, [pc, #64]	; (800bb90 <xTimerGenericCommand+0x94>)
 800bb4e:	6818      	ldr	r0, [r3, #0]
 800bb50:	f107 0110 	add.w	r1, r7, #16
 800bb54:	2300      	movs	r3, #0
 800bb56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb58:	f7fe fcba 	bl	800a4d0 <xQueueGenericSend>
 800bb5c:	6278      	str	r0, [r7, #36]	; 0x24
 800bb5e:	e012      	b.n	800bb86 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bb60:	4b0b      	ldr	r3, [pc, #44]	; (800bb90 <xTimerGenericCommand+0x94>)
 800bb62:	6818      	ldr	r0, [r3, #0]
 800bb64:	f107 0110 	add.w	r1, r7, #16
 800bb68:	2300      	movs	r3, #0
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f7fe fcb0 	bl	800a4d0 <xQueueGenericSend>
 800bb70:	6278      	str	r0, [r7, #36]	; 0x24
 800bb72:	e008      	b.n	800bb86 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb74:	4b06      	ldr	r3, [pc, #24]	; (800bb90 <xTimerGenericCommand+0x94>)
 800bb76:	6818      	ldr	r0, [r3, #0]
 800bb78:	f107 0110 	add.w	r1, r7, #16
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	683a      	ldr	r2, [r7, #0]
 800bb80:	f7fe fda0 	bl	800a6c4 <xQueueGenericSendFromISR>
 800bb84:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3728      	adds	r7, #40	; 0x28
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	24000c1c 	.word	0x24000c1c

0800bb94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b088      	sub	sp, #32
 800bb98:	af02      	add	r7, sp, #8
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb9e:	4b22      	ldr	r3, [pc, #136]	; (800bc28 <prvProcessExpiredTimer+0x94>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	3304      	adds	r3, #4
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fe fb67 	bl	800a280 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbb8:	f003 0304 	and.w	r3, r3, #4
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d021      	beq.n	800bc04 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	699a      	ldr	r2, [r3, #24]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	18d1      	adds	r1, r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	683a      	ldr	r2, [r7, #0]
 800bbcc:	6978      	ldr	r0, [r7, #20]
 800bbce:	f000 f8d1 	bl	800bd74 <prvInsertTimerInActiveList>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d01e      	beq.n	800bc16 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bbd8:	2300      	movs	r3, #0
 800bbda:	9300      	str	r3, [sp, #0]
 800bbdc:	2300      	movs	r3, #0
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	6978      	ldr	r0, [r7, #20]
 800bbe4:	f7ff ff8a 	bl	800bafc <xTimerGenericCommand>
 800bbe8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d112      	bne.n	800bc16 <prvProcessExpiredTimer+0x82>
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	60fb      	str	r3, [r7, #12]
 800bc02:	e7fe      	b.n	800bc02 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc0a:	f023 0301 	bic.w	r3, r3, #1
 800bc0e:	b2da      	uxtb	r2, r3
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	6a1b      	ldr	r3, [r3, #32]
 800bc1a:	6978      	ldr	r0, [r7, #20]
 800bc1c:	4798      	blx	r3
}
 800bc1e:	bf00      	nop
 800bc20:	3718      	adds	r7, #24
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	24000c14 	.word	0x24000c14

0800bc2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc34:	f107 0308 	add.w	r3, r7, #8
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f000 f857 	bl	800bcec <prvGetNextExpireTime>
 800bc3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	4619      	mov	r1, r3
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f000 f803 	bl	800bc50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bc4a:	f000 f8d5 	bl	800bdf8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc4e:	e7f1      	b.n	800bc34 <prvTimerTask+0x8>

0800bc50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bc5a:	f7ff fa45 	bl	800b0e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc5e:	f107 0308 	add.w	r3, r7, #8
 800bc62:	4618      	mov	r0, r3
 800bc64:	f000 f866 	bl	800bd34 <prvSampleTimeNow>
 800bc68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d130      	bne.n	800bcd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d10a      	bne.n	800bc8c <prvProcessTimerOrBlockTask+0x3c>
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d806      	bhi.n	800bc8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc7e:	f7ff fa41 	bl	800b104 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc82:	68f9      	ldr	r1, [r7, #12]
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f7ff ff85 	bl	800bb94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc8a:	e024      	b.n	800bcd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d008      	beq.n	800bca4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc92:	4b13      	ldr	r3, [pc, #76]	; (800bce0 <prvProcessTimerOrBlockTask+0x90>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d101      	bne.n	800bca0 <prvProcessTimerOrBlockTask+0x50>
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e000      	b.n	800bca2 <prvProcessTimerOrBlockTask+0x52>
 800bca0:	2300      	movs	r3, #0
 800bca2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bca4:	4b0f      	ldr	r3, [pc, #60]	; (800bce4 <prvProcessTimerOrBlockTask+0x94>)
 800bca6:	6818      	ldr	r0, [r3, #0]
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	f7fe ffaf 	bl	800ac14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bcb6:	f7ff fa25 	bl	800b104 <xTaskResumeAll>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10a      	bne.n	800bcd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bcc0:	4b09      	ldr	r3, [pc, #36]	; (800bce8 <prvProcessTimerOrBlockTask+0x98>)
 800bcc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcc6:	601a      	str	r2, [r3, #0]
 800bcc8:	f3bf 8f4f 	dsb	sy
 800bccc:	f3bf 8f6f 	isb	sy
}
 800bcd0:	e001      	b.n	800bcd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bcd2:	f7ff fa17 	bl	800b104 <xTaskResumeAll>
}
 800bcd6:	bf00      	nop
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	24000c18 	.word	0x24000c18
 800bce4:	24000c1c 	.word	0x24000c1c
 800bce8:	e000ed04 	.word	0xe000ed04

0800bcec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bcf4:	4b0e      	ldr	r3, [pc, #56]	; (800bd30 <prvGetNextExpireTime+0x44>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d101      	bne.n	800bd02 <prvGetNextExpireTime+0x16>
 800bcfe:	2201      	movs	r2, #1
 800bd00:	e000      	b.n	800bd04 <prvGetNextExpireTime+0x18>
 800bd02:	2200      	movs	r2, #0
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d105      	bne.n	800bd1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd10:	4b07      	ldr	r3, [pc, #28]	; (800bd30 <prvGetNextExpireTime+0x44>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	60fb      	str	r3, [r7, #12]
 800bd1a:	e001      	b.n	800bd20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bd20:	68fb      	ldr	r3, [r7, #12]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3714      	adds	r7, #20
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	24000c14 	.word	0x24000c14

0800bd34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bd3c:	f7ff fa7e 	bl	800b23c <xTaskGetTickCount>
 800bd40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bd42:	4b0b      	ldr	r3, [pc, #44]	; (800bd70 <prvSampleTimeNow+0x3c>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d205      	bcs.n	800bd58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bd4c:	f000 f930 	bl	800bfb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2201      	movs	r2, #1
 800bd54:	601a      	str	r2, [r3, #0]
 800bd56:	e002      	b.n	800bd5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bd5e:	4a04      	ldr	r2, [pc, #16]	; (800bd70 <prvSampleTimeNow+0x3c>)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bd64:	68fb      	ldr	r3, [r7, #12]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	24000c24 	.word	0x24000c24

0800bd74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
 800bd80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd82:	2300      	movs	r3, #0
 800bd84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	68ba      	ldr	r2, [r7, #8]
 800bd8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	68fa      	ldr	r2, [r7, #12]
 800bd90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd92:	68ba      	ldr	r2, [r7, #8]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d812      	bhi.n	800bdc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	1ad2      	subs	r2, r2, r3
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	699b      	ldr	r3, [r3, #24]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d302      	bcc.n	800bdae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	617b      	str	r3, [r7, #20]
 800bdac:	e01b      	b.n	800bde6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bdae:	4b10      	ldr	r3, [pc, #64]	; (800bdf0 <prvInsertTimerInActiveList+0x7c>)
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	3304      	adds	r3, #4
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	4610      	mov	r0, r2
 800bdba:	f7fe fa28 	bl	800a20e <vListInsert>
 800bdbe:	e012      	b.n	800bde6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d206      	bcs.n	800bdd6 <prvInsertTimerInActiveList+0x62>
 800bdc8:	68ba      	ldr	r2, [r7, #8]
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d302      	bcc.n	800bdd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	617b      	str	r3, [r7, #20]
 800bdd4:	e007      	b.n	800bde6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bdd6:	4b07      	ldr	r3, [pc, #28]	; (800bdf4 <prvInsertTimerInActiveList+0x80>)
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	3304      	adds	r3, #4
 800bdde:	4619      	mov	r1, r3
 800bde0:	4610      	mov	r0, r2
 800bde2:	f7fe fa14 	bl	800a20e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bde6:	697b      	ldr	r3, [r7, #20]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3718      	adds	r7, #24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	24000c18 	.word	0x24000c18
 800bdf4:	24000c14 	.word	0x24000c14

0800bdf8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b08e      	sub	sp, #56	; 0x38
 800bdfc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bdfe:	e0c6      	b.n	800bf8e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	da17      	bge.n	800be36 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be06:	1d3b      	adds	r3, r7, #4
 800be08:	3304      	adds	r3, #4
 800be0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800be0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d109      	bne.n	800be26 <prvProcessReceivedCommands+0x2e>
 800be12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be16:	f383 8811 	msr	BASEPRI, r3
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	f3bf 8f4f 	dsb	sy
 800be22:	61fb      	str	r3, [r7, #28]
 800be24:	e7fe      	b.n	800be24 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800be26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be2c:	6850      	ldr	r0, [r2, #4]
 800be2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be30:	6892      	ldr	r2, [r2, #8]
 800be32:	4611      	mov	r1, r2
 800be34:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f2c0 80a7 	blt.w	800bf8c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800be42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be44:	695b      	ldr	r3, [r3, #20]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d004      	beq.n	800be54 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4c:	3304      	adds	r3, #4
 800be4e:	4618      	mov	r0, r3
 800be50:	f7fe fa16 	bl	800a280 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be54:	463b      	mov	r3, r7
 800be56:	4618      	mov	r0, r3
 800be58:	f7ff ff6c 	bl	800bd34 <prvSampleTimeNow>
 800be5c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b09      	cmp	r3, #9
 800be62:	f200 8094 	bhi.w	800bf8e <prvProcessReceivedCommands+0x196>
 800be66:	a201      	add	r2, pc, #4	; (adr r2, 800be6c <prvProcessReceivedCommands+0x74>)
 800be68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be6c:	0800be95 	.word	0x0800be95
 800be70:	0800be95 	.word	0x0800be95
 800be74:	0800be95 	.word	0x0800be95
 800be78:	0800bf07 	.word	0x0800bf07
 800be7c:	0800bf1b 	.word	0x0800bf1b
 800be80:	0800bf63 	.word	0x0800bf63
 800be84:	0800be95 	.word	0x0800be95
 800be88:	0800be95 	.word	0x0800be95
 800be8c:	0800bf07 	.word	0x0800bf07
 800be90:	0800bf1b 	.word	0x0800bf1b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be9a:	f043 0301 	orr.w	r3, r3, #1
 800be9e:	b2da      	uxtb	r2, r3
 800bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bea6:	68ba      	ldr	r2, [r7, #8]
 800bea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beaa:	699b      	ldr	r3, [r3, #24]
 800beac:	18d1      	adds	r1, r2, r3
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beb4:	f7ff ff5e 	bl	800bd74 <prvInsertTimerInActiveList>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d067      	beq.n	800bf8e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec0:	6a1b      	ldr	r3, [r3, #32]
 800bec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bec4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800becc:	f003 0304 	and.w	r3, r3, #4
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d05c      	beq.n	800bf8e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed8:	699b      	ldr	r3, [r3, #24]
 800beda:	441a      	add	r2, r3
 800bedc:	2300      	movs	r3, #0
 800bede:	9300      	str	r3, [sp, #0]
 800bee0:	2300      	movs	r3, #0
 800bee2:	2100      	movs	r1, #0
 800bee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bee6:	f7ff fe09 	bl	800bafc <xTimerGenericCommand>
 800beea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800beec:	6a3b      	ldr	r3, [r7, #32]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d14d      	bne.n	800bf8e <prvProcessReceivedCommands+0x196>
 800bef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef6:	f383 8811 	msr	BASEPRI, r3
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	61bb      	str	r3, [r7, #24]
 800bf04:	e7fe      	b.n	800bf04 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf0c:	f023 0301 	bic.w	r3, r3, #1
 800bf10:	b2da      	uxtb	r2, r3
 800bf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bf18:	e039      	b.n	800bf8e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf20:	f043 0301 	orr.w	r3, r3, #1
 800bf24:	b2da      	uxtb	r2, r3
 800bf26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf30:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf34:	699b      	ldr	r3, [r3, #24]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d109      	bne.n	800bf4e <prvProcessReceivedCommands+0x156>
 800bf3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf3e:	f383 8811 	msr	BASEPRI, r3
 800bf42:	f3bf 8f6f 	isb	sy
 800bf46:	f3bf 8f4f 	dsb	sy
 800bf4a:	617b      	str	r3, [r7, #20]
 800bf4c:	e7fe      	b.n	800bf4c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bf4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf50:	699a      	ldr	r2, [r3, #24]
 800bf52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf54:	18d1      	adds	r1, r2, r3
 800bf56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf5c:	f7ff ff0a 	bl	800bd74 <prvInsertTimerInActiveList>
					break;
 800bf60:	e015      	b.n	800bf8e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf68:	f003 0302 	and.w	r3, r3, #2
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d103      	bne.n	800bf78 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800bf70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf72:	f000 fbc7 	bl	800c704 <vPortFree>
 800bf76:	e00a      	b.n	800bf8e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf7e:	f023 0301 	bic.w	r3, r3, #1
 800bf82:	b2da      	uxtb	r2, r3
 800bf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf8a:	e000      	b.n	800bf8e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bf8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf8e:	4b07      	ldr	r3, [pc, #28]	; (800bfac <prvProcessReceivedCommands+0x1b4>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	1d39      	adds	r1, r7, #4
 800bf94:	2200      	movs	r2, #0
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7fe fc28 	bl	800a7ec <xQueueReceive>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	f47f af2e 	bne.w	800be00 <prvProcessReceivedCommands+0x8>
	}
}
 800bfa4:	bf00      	nop
 800bfa6:	3730      	adds	r7, #48	; 0x30
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	24000c1c 	.word	0x24000c1c

0800bfb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b088      	sub	sp, #32
 800bfb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bfb6:	e047      	b.n	800c048 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bfb8:	4b2d      	ldr	r3, [pc, #180]	; (800c070 <prvSwitchTimerLists+0xc0>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfc2:	4b2b      	ldr	r3, [pc, #172]	; (800c070 <prvSwitchTimerLists+0xc0>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	3304      	adds	r3, #4
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7fe f955 	bl	800a280 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6a1b      	ldr	r3, [r3, #32]
 800bfda:	68f8      	ldr	r0, [r7, #12]
 800bfdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfe4:	f003 0304 	and.w	r3, r3, #4
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d02d      	beq.n	800c048 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	699b      	ldr	r3, [r3, #24]
 800bff0:	693a      	ldr	r2, [r7, #16]
 800bff2:	4413      	add	r3, r2
 800bff4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bff6:	68ba      	ldr	r2, [r7, #8]
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d90e      	bls.n	800c01c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c00a:	4b19      	ldr	r3, [pc, #100]	; (800c070 <prvSwitchTimerLists+0xc0>)
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	3304      	adds	r3, #4
 800c012:	4619      	mov	r1, r3
 800c014:	4610      	mov	r0, r2
 800c016:	f7fe f8fa 	bl	800a20e <vListInsert>
 800c01a:	e015      	b.n	800c048 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c01c:	2300      	movs	r3, #0
 800c01e:	9300      	str	r3, [sp, #0]
 800c020:	2300      	movs	r3, #0
 800c022:	693a      	ldr	r2, [r7, #16]
 800c024:	2100      	movs	r1, #0
 800c026:	68f8      	ldr	r0, [r7, #12]
 800c028:	f7ff fd68 	bl	800bafc <xTimerGenericCommand>
 800c02c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d109      	bne.n	800c048 <prvSwitchTimerLists+0x98>
 800c034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	603b      	str	r3, [r7, #0]
 800c046:	e7fe      	b.n	800c046 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c048:	4b09      	ldr	r3, [pc, #36]	; (800c070 <prvSwitchTimerLists+0xc0>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1b2      	bne.n	800bfb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c052:	4b07      	ldr	r3, [pc, #28]	; (800c070 <prvSwitchTimerLists+0xc0>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c058:	4b06      	ldr	r3, [pc, #24]	; (800c074 <prvSwitchTimerLists+0xc4>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a04      	ldr	r2, [pc, #16]	; (800c070 <prvSwitchTimerLists+0xc0>)
 800c05e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c060:	4a04      	ldr	r2, [pc, #16]	; (800c074 <prvSwitchTimerLists+0xc4>)
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	6013      	str	r3, [r2, #0]
}
 800c066:	bf00      	nop
 800c068:	3718      	adds	r7, #24
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	24000c14 	.word	0x24000c14
 800c074:	24000c18 	.word	0x24000c18

0800c078 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c07e:	f000 f965 	bl	800c34c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c082:	4b15      	ldr	r3, [pc, #84]	; (800c0d8 <prvCheckForValidListAndQueue+0x60>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d120      	bne.n	800c0cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c08a:	4814      	ldr	r0, [pc, #80]	; (800c0dc <prvCheckForValidListAndQueue+0x64>)
 800c08c:	f7fe f86e 	bl	800a16c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c090:	4813      	ldr	r0, [pc, #76]	; (800c0e0 <prvCheckForValidListAndQueue+0x68>)
 800c092:	f7fe f86b 	bl	800a16c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c096:	4b13      	ldr	r3, [pc, #76]	; (800c0e4 <prvCheckForValidListAndQueue+0x6c>)
 800c098:	4a10      	ldr	r2, [pc, #64]	; (800c0dc <prvCheckForValidListAndQueue+0x64>)
 800c09a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c09c:	4b12      	ldr	r3, [pc, #72]	; (800c0e8 <prvCheckForValidListAndQueue+0x70>)
 800c09e:	4a10      	ldr	r2, [pc, #64]	; (800c0e0 <prvCheckForValidListAndQueue+0x68>)
 800c0a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	4b11      	ldr	r3, [pc, #68]	; (800c0ec <prvCheckForValidListAndQueue+0x74>)
 800c0a8:	4a11      	ldr	r2, [pc, #68]	; (800c0f0 <prvCheckForValidListAndQueue+0x78>)
 800c0aa:	2110      	movs	r1, #16
 800c0ac:	200a      	movs	r0, #10
 800c0ae:	f7fe f979 	bl	800a3a4 <xQueueGenericCreateStatic>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	4b08      	ldr	r3, [pc, #32]	; (800c0d8 <prvCheckForValidListAndQueue+0x60>)
 800c0b6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c0b8:	4b07      	ldr	r3, [pc, #28]	; (800c0d8 <prvCheckForValidListAndQueue+0x60>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d005      	beq.n	800c0cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c0c0:	4b05      	ldr	r3, [pc, #20]	; (800c0d8 <prvCheckForValidListAndQueue+0x60>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	490b      	ldr	r1, [pc, #44]	; (800c0f4 <prvCheckForValidListAndQueue+0x7c>)
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fe fd7c 	bl	800abc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c0cc:	f000 f96c 	bl	800c3a8 <vPortExitCritical>
}
 800c0d0:	bf00      	nop
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	24000c1c 	.word	0x24000c1c
 800c0dc:	24000bec 	.word	0x24000bec
 800c0e0:	24000c00 	.word	0x24000c00
 800c0e4:	24000c14 	.word	0x24000c14
 800c0e8:	24000c18 	.word	0x24000c18
 800c0ec:	24000cc8 	.word	0x24000cc8
 800c0f0:	24000c28 	.word	0x24000c28
 800c0f4:	0800cb4c 	.word	0x0800cb4c

0800c0f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	3b04      	subs	r3, #4
 800c108:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	3b04      	subs	r3, #4
 800c116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	f023 0201 	bic.w	r2, r3, #1
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	3b04      	subs	r3, #4
 800c126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c128:	4a0c      	ldr	r2, [pc, #48]	; (800c15c <pxPortInitialiseStack+0x64>)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	3b14      	subs	r3, #20
 800c132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	3b04      	subs	r3, #4
 800c13e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f06f 0202 	mvn.w	r2, #2
 800c146:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	3b20      	subs	r3, #32
 800c14c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c14e:	68fb      	ldr	r3, [r7, #12]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3714      	adds	r7, #20
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr
 800c15c:	0800c161 	.word	0x0800c161

0800c160 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c160:	b480      	push	{r7}
 800c162:	b085      	sub	sp, #20
 800c164:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c166:	2300      	movs	r3, #0
 800c168:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c16a:	4b11      	ldr	r3, [pc, #68]	; (800c1b0 <prvTaskExitError+0x50>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c172:	d009      	beq.n	800c188 <prvTaskExitError+0x28>
 800c174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c178:	f383 8811 	msr	BASEPRI, r3
 800c17c:	f3bf 8f6f 	isb	sy
 800c180:	f3bf 8f4f 	dsb	sy
 800c184:	60fb      	str	r3, [r7, #12]
 800c186:	e7fe      	b.n	800c186 <prvTaskExitError+0x26>
 800c188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18c:	f383 8811 	msr	BASEPRI, r3
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c19a:	bf00      	nop
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d0fc      	beq.n	800c19c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c1a2:	bf00      	nop
 800c1a4:	3714      	adds	r7, #20
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	24000010 	.word	0x24000010
	...

0800c1c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c1c0:	4b07      	ldr	r3, [pc, #28]	; (800c1e0 <pxCurrentTCBConst2>)
 800c1c2:	6819      	ldr	r1, [r3, #0]
 800c1c4:	6808      	ldr	r0, [r1, #0]
 800c1c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ca:	f380 8809 	msr	PSP, r0
 800c1ce:	f3bf 8f6f 	isb	sy
 800c1d2:	f04f 0000 	mov.w	r0, #0
 800c1d6:	f380 8811 	msr	BASEPRI, r0
 800c1da:	4770      	bx	lr
 800c1dc:	f3af 8000 	nop.w

0800c1e0 <pxCurrentTCBConst2>:
 800c1e0:	240006ec 	.word	0x240006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c1e4:	bf00      	nop
 800c1e6:	bf00      	nop

0800c1e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c1e8:	4808      	ldr	r0, [pc, #32]	; (800c20c <prvPortStartFirstTask+0x24>)
 800c1ea:	6800      	ldr	r0, [r0, #0]
 800c1ec:	6800      	ldr	r0, [r0, #0]
 800c1ee:	f380 8808 	msr	MSP, r0
 800c1f2:	f04f 0000 	mov.w	r0, #0
 800c1f6:	f380 8814 	msr	CONTROL, r0
 800c1fa:	b662      	cpsie	i
 800c1fc:	b661      	cpsie	f
 800c1fe:	f3bf 8f4f 	dsb	sy
 800c202:	f3bf 8f6f 	isb	sy
 800c206:	df00      	svc	0
 800c208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c20a:	bf00      	nop
 800c20c:	e000ed08 	.word	0xe000ed08

0800c210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b086      	sub	sp, #24
 800c214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c216:	4b44      	ldr	r3, [pc, #272]	; (800c328 <xPortStartScheduler+0x118>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a44      	ldr	r2, [pc, #272]	; (800c32c <xPortStartScheduler+0x11c>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d109      	bne.n	800c234 <xPortStartScheduler+0x24>
 800c220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c224:	f383 8811 	msr	BASEPRI, r3
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	613b      	str	r3, [r7, #16]
 800c232:	e7fe      	b.n	800c232 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c234:	4b3c      	ldr	r3, [pc, #240]	; (800c328 <xPortStartScheduler+0x118>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a3d      	ldr	r2, [pc, #244]	; (800c330 <xPortStartScheduler+0x120>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d109      	bne.n	800c252 <xPortStartScheduler+0x42>
 800c23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c242:	f383 8811 	msr	BASEPRI, r3
 800c246:	f3bf 8f6f 	isb	sy
 800c24a:	f3bf 8f4f 	dsb	sy
 800c24e:	60fb      	str	r3, [r7, #12]
 800c250:	e7fe      	b.n	800c250 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c252:	4b38      	ldr	r3, [pc, #224]	; (800c334 <xPortStartScheduler+0x124>)
 800c254:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	22ff      	movs	r2, #255	; 0xff
 800c262:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c26c:	78fb      	ldrb	r3, [r7, #3]
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c274:	b2da      	uxtb	r2, r3
 800c276:	4b30      	ldr	r3, [pc, #192]	; (800c338 <xPortStartScheduler+0x128>)
 800c278:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c27a:	4b30      	ldr	r3, [pc, #192]	; (800c33c <xPortStartScheduler+0x12c>)
 800c27c:	2207      	movs	r2, #7
 800c27e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c280:	e009      	b.n	800c296 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c282:	4b2e      	ldr	r3, [pc, #184]	; (800c33c <xPortStartScheduler+0x12c>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	3b01      	subs	r3, #1
 800c288:	4a2c      	ldr	r2, [pc, #176]	; (800c33c <xPortStartScheduler+0x12c>)
 800c28a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c28c:	78fb      	ldrb	r3, [r7, #3]
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	005b      	lsls	r3, r3, #1
 800c292:	b2db      	uxtb	r3, r3
 800c294:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c296:	78fb      	ldrb	r3, [r7, #3]
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c29e:	2b80      	cmp	r3, #128	; 0x80
 800c2a0:	d0ef      	beq.n	800c282 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c2a2:	4b26      	ldr	r3, [pc, #152]	; (800c33c <xPortStartScheduler+0x12c>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f1c3 0307 	rsb	r3, r3, #7
 800c2aa:	2b04      	cmp	r3, #4
 800c2ac:	d009      	beq.n	800c2c2 <xPortStartScheduler+0xb2>
 800c2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b2:	f383 8811 	msr	BASEPRI, r3
 800c2b6:	f3bf 8f6f 	isb	sy
 800c2ba:	f3bf 8f4f 	dsb	sy
 800c2be:	60bb      	str	r3, [r7, #8]
 800c2c0:	e7fe      	b.n	800c2c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c2c2:	4b1e      	ldr	r3, [pc, #120]	; (800c33c <xPortStartScheduler+0x12c>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	021b      	lsls	r3, r3, #8
 800c2c8:	4a1c      	ldr	r2, [pc, #112]	; (800c33c <xPortStartScheduler+0x12c>)
 800c2ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c2cc:	4b1b      	ldr	r3, [pc, #108]	; (800c33c <xPortStartScheduler+0x12c>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c2d4:	4a19      	ldr	r2, [pc, #100]	; (800c33c <xPortStartScheduler+0x12c>)
 800c2d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	b2da      	uxtb	r2, r3
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c2e0:	4b17      	ldr	r3, [pc, #92]	; (800c340 <xPortStartScheduler+0x130>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a16      	ldr	r2, [pc, #88]	; (800c340 <xPortStartScheduler+0x130>)
 800c2e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c2ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c2ec:	4b14      	ldr	r3, [pc, #80]	; (800c340 <xPortStartScheduler+0x130>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a13      	ldr	r2, [pc, #76]	; (800c340 <xPortStartScheduler+0x130>)
 800c2f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c2f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c2f8:	f000 f8d6 	bl	800c4a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c2fc:	4b11      	ldr	r3, [pc, #68]	; (800c344 <xPortStartScheduler+0x134>)
 800c2fe:	2200      	movs	r2, #0
 800c300:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c302:	f000 f8f5 	bl	800c4f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c306:	4b10      	ldr	r3, [pc, #64]	; (800c348 <xPortStartScheduler+0x138>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a0f      	ldr	r2, [pc, #60]	; (800c348 <xPortStartScheduler+0x138>)
 800c30c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c310:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c312:	f7ff ff69 	bl	800c1e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c316:	f7ff f86b 	bl	800b3f0 <vTaskSwitchContext>
	prvTaskExitError();
 800c31a:	f7ff ff21 	bl	800c160 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3718      	adds	r7, #24
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	e000ed00 	.word	0xe000ed00
 800c32c:	410fc271 	.word	0x410fc271
 800c330:	410fc270 	.word	0x410fc270
 800c334:	e000e400 	.word	0xe000e400
 800c338:	24000d18 	.word	0x24000d18
 800c33c:	24000d1c 	.word	0x24000d1c
 800c340:	e000ed20 	.word	0xe000ed20
 800c344:	24000010 	.word	0x24000010
 800c348:	e000ef34 	.word	0xe000ef34

0800c34c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
 800c352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c356:	f383 8811 	msr	BASEPRI, r3
 800c35a:	f3bf 8f6f 	isb	sy
 800c35e:	f3bf 8f4f 	dsb	sy
 800c362:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c364:	4b0e      	ldr	r3, [pc, #56]	; (800c3a0 <vPortEnterCritical+0x54>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	3301      	adds	r3, #1
 800c36a:	4a0d      	ldr	r2, [pc, #52]	; (800c3a0 <vPortEnterCritical+0x54>)
 800c36c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c36e:	4b0c      	ldr	r3, [pc, #48]	; (800c3a0 <vPortEnterCritical+0x54>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2b01      	cmp	r3, #1
 800c374:	d10e      	bne.n	800c394 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c376:	4b0b      	ldr	r3, [pc, #44]	; (800c3a4 <vPortEnterCritical+0x58>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d009      	beq.n	800c394 <vPortEnterCritical+0x48>
 800c380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	603b      	str	r3, [r7, #0]
 800c392:	e7fe      	b.n	800c392 <vPortEnterCritical+0x46>
	}
}
 800c394:	bf00      	nop
 800c396:	370c      	adds	r7, #12
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr
 800c3a0:	24000010 	.word	0x24000010
 800c3a4:	e000ed04 	.word	0xe000ed04

0800c3a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c3ae:	4b11      	ldr	r3, [pc, #68]	; (800c3f4 <vPortExitCritical+0x4c>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d109      	bne.n	800c3ca <vPortExitCritical+0x22>
 800c3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ba:	f383 8811 	msr	BASEPRI, r3
 800c3be:	f3bf 8f6f 	isb	sy
 800c3c2:	f3bf 8f4f 	dsb	sy
 800c3c6:	607b      	str	r3, [r7, #4]
 800c3c8:	e7fe      	b.n	800c3c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c3ca:	4b0a      	ldr	r3, [pc, #40]	; (800c3f4 <vPortExitCritical+0x4c>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	4a08      	ldr	r2, [pc, #32]	; (800c3f4 <vPortExitCritical+0x4c>)
 800c3d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c3d4:	4b07      	ldr	r3, [pc, #28]	; (800c3f4 <vPortExitCritical+0x4c>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d104      	bne.n	800c3e6 <vPortExitCritical+0x3e>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c3e6:	bf00      	nop
 800c3e8:	370c      	adds	r7, #12
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	24000010 	.word	0x24000010
	...

0800c400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c400:	f3ef 8009 	mrs	r0, PSP
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	4b15      	ldr	r3, [pc, #84]	; (800c460 <pxCurrentTCBConst>)
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	f01e 0f10 	tst.w	lr, #16
 800c410:	bf08      	it	eq
 800c412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c41a:	6010      	str	r0, [r2, #0]
 800c41c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c420:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c424:	f380 8811 	msr	BASEPRI, r0
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f7fe ffde 	bl	800b3f0 <vTaskSwitchContext>
 800c434:	f04f 0000 	mov.w	r0, #0
 800c438:	f380 8811 	msr	BASEPRI, r0
 800c43c:	bc09      	pop	{r0, r3}
 800c43e:	6819      	ldr	r1, [r3, #0]
 800c440:	6808      	ldr	r0, [r1, #0]
 800c442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c446:	f01e 0f10 	tst.w	lr, #16
 800c44a:	bf08      	it	eq
 800c44c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c450:	f380 8809 	msr	PSP, r0
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	4770      	bx	lr
 800c45a:	bf00      	nop
 800c45c:	f3af 8000 	nop.w

0800c460 <pxCurrentTCBConst>:
 800c460:	240006ec 	.word	0x240006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c464:	bf00      	nop
 800c466:	bf00      	nop

0800c468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c480:	f7fe fefe 	bl	800b280 <xTaskIncrementTick>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d003      	beq.n	800c492 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c48a:	4b06      	ldr	r3, [pc, #24]	; (800c4a4 <SysTick_Handler+0x3c>)
 800c48c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c490:	601a      	str	r2, [r3, #0]
 800c492:	2300      	movs	r3, #0
 800c494:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c49c:	bf00      	nop
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}
 800c4a4:	e000ed04 	.word	0xe000ed04

0800c4a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c4ac:	4b0b      	ldr	r3, [pc, #44]	; (800c4dc <vPortSetupTimerInterrupt+0x34>)
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c4b2:	4b0b      	ldr	r3, [pc, #44]	; (800c4e0 <vPortSetupTimerInterrupt+0x38>)
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c4b8:	4b0a      	ldr	r3, [pc, #40]	; (800c4e4 <vPortSetupTimerInterrupt+0x3c>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a0a      	ldr	r2, [pc, #40]	; (800c4e8 <vPortSetupTimerInterrupt+0x40>)
 800c4be:	fba2 2303 	umull	r2, r3, r2, r3
 800c4c2:	099b      	lsrs	r3, r3, #6
 800c4c4:	4a09      	ldr	r2, [pc, #36]	; (800c4ec <vPortSetupTimerInterrupt+0x44>)
 800c4c6:	3b01      	subs	r3, #1
 800c4c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c4ca:	4b04      	ldr	r3, [pc, #16]	; (800c4dc <vPortSetupTimerInterrupt+0x34>)
 800c4cc:	2207      	movs	r2, #7
 800c4ce:	601a      	str	r2, [r3, #0]
}
 800c4d0:	bf00      	nop
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr
 800c4da:	bf00      	nop
 800c4dc:	e000e010 	.word	0xe000e010
 800c4e0:	e000e018 	.word	0xe000e018
 800c4e4:	24000000 	.word	0x24000000
 800c4e8:	10624dd3 	.word	0x10624dd3
 800c4ec:	e000e014 	.word	0xe000e014

0800c4f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c4f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c500 <vPortEnableVFP+0x10>
 800c4f4:	6801      	ldr	r1, [r0, #0]
 800c4f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c4fa:	6001      	str	r1, [r0, #0]
 800c4fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c4fe:	bf00      	nop
 800c500:	e000ed88 	.word	0xe000ed88

0800c504 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c50a:	f3ef 8305 	mrs	r3, IPSR
 800c50e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2b0f      	cmp	r3, #15
 800c514:	d913      	bls.n	800c53e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c516:	4a16      	ldr	r2, [pc, #88]	; (800c570 <vPortValidateInterruptPriority+0x6c>)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	4413      	add	r3, r2
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c520:	4b14      	ldr	r3, [pc, #80]	; (800c574 <vPortValidateInterruptPriority+0x70>)
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	7afa      	ldrb	r2, [r7, #11]
 800c526:	429a      	cmp	r2, r3
 800c528:	d209      	bcs.n	800c53e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52e:	f383 8811 	msr	BASEPRI, r3
 800c532:	f3bf 8f6f 	isb	sy
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	607b      	str	r3, [r7, #4]
 800c53c:	e7fe      	b.n	800c53c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c53e:	4b0e      	ldr	r3, [pc, #56]	; (800c578 <vPortValidateInterruptPriority+0x74>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c546:	4b0d      	ldr	r3, [pc, #52]	; (800c57c <vPortValidateInterruptPriority+0x78>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d909      	bls.n	800c562 <vPortValidateInterruptPriority+0x5e>
 800c54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	603b      	str	r3, [r7, #0]
 800c560:	e7fe      	b.n	800c560 <vPortValidateInterruptPriority+0x5c>
	}
 800c562:	bf00      	nop
 800c564:	3714      	adds	r7, #20
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	e000e3f0 	.word	0xe000e3f0
 800c574:	24000d18 	.word	0x24000d18
 800c578:	e000ed0c 	.word	0xe000ed0c
 800c57c:	24000d1c 	.word	0x24000d1c

0800c580 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b08a      	sub	sp, #40	; 0x28
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c588:	2300      	movs	r3, #0
 800c58a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c58c:	f7fe fdac 	bl	800b0e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c590:	4b57      	ldr	r3, [pc, #348]	; (800c6f0 <pvPortMalloc+0x170>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d101      	bne.n	800c59c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c598:	f000 f90c 	bl	800c7b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c59c:	4b55      	ldr	r3, [pc, #340]	; (800c6f4 <pvPortMalloc+0x174>)
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4013      	ands	r3, r2
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f040 808c 	bne.w	800c6c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d01c      	beq.n	800c5ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c5b0:	2208      	movs	r2, #8
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f003 0307 	and.w	r3, r3, #7
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d013      	beq.n	800c5ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f023 0307 	bic.w	r3, r3, #7
 800c5c8:	3308      	adds	r3, #8
 800c5ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f003 0307 	and.w	r3, r3, #7
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d009      	beq.n	800c5ea <pvPortMalloc+0x6a>
 800c5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5da:	f383 8811 	msr	BASEPRI, r3
 800c5de:	f3bf 8f6f 	isb	sy
 800c5e2:	f3bf 8f4f 	dsb	sy
 800c5e6:	617b      	str	r3, [r7, #20]
 800c5e8:	e7fe      	b.n	800c5e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d068      	beq.n	800c6c2 <pvPortMalloc+0x142>
 800c5f0:	4b41      	ldr	r3, [pc, #260]	; (800c6f8 <pvPortMalloc+0x178>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d863      	bhi.n	800c6c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5fa:	4b40      	ldr	r3, [pc, #256]	; (800c6fc <pvPortMalloc+0x17c>)
 800c5fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c5fe:	4b3f      	ldr	r3, [pc, #252]	; (800c6fc <pvPortMalloc+0x17c>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c604:	e004      	b.n	800c610 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c608:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	429a      	cmp	r2, r3
 800c618:	d903      	bls.n	800c622 <pvPortMalloc+0xa2>
 800c61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d1f1      	bne.n	800c606 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c622:	4b33      	ldr	r3, [pc, #204]	; (800c6f0 <pvPortMalloc+0x170>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c628:	429a      	cmp	r2, r3
 800c62a:	d04a      	beq.n	800c6c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c62c:	6a3b      	ldr	r3, [r7, #32]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	2208      	movs	r2, #8
 800c632:	4413      	add	r3, r2
 800c634:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	6a3b      	ldr	r3, [r7, #32]
 800c63c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c640:	685a      	ldr	r2, [r3, #4]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	1ad2      	subs	r2, r2, r3
 800c646:	2308      	movs	r3, #8
 800c648:	005b      	lsls	r3, r3, #1
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d91e      	bls.n	800c68c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c64e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4413      	add	r3, r2
 800c654:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c656:	69bb      	ldr	r3, [r7, #24]
 800c658:	f003 0307 	and.w	r3, r3, #7
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d009      	beq.n	800c674 <pvPortMalloc+0xf4>
 800c660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c664:	f383 8811 	msr	BASEPRI, r3
 800c668:	f3bf 8f6f 	isb	sy
 800c66c:	f3bf 8f4f 	dsb	sy
 800c670:	613b      	str	r3, [r7, #16]
 800c672:	e7fe      	b.n	800c672 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c676:	685a      	ldr	r2, [r3, #4]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	1ad2      	subs	r2, r2, r3
 800c67c:	69bb      	ldr	r3, [r7, #24]
 800c67e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c686:	69b8      	ldr	r0, [r7, #24]
 800c688:	f000 f8f6 	bl	800c878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c68c:	4b1a      	ldr	r3, [pc, #104]	; (800c6f8 <pvPortMalloc+0x178>)
 800c68e:	681a      	ldr	r2, [r3, #0]
 800c690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	4a18      	ldr	r2, [pc, #96]	; (800c6f8 <pvPortMalloc+0x178>)
 800c698:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c69a:	4b17      	ldr	r3, [pc, #92]	; (800c6f8 <pvPortMalloc+0x178>)
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	4b18      	ldr	r3, [pc, #96]	; (800c700 <pvPortMalloc+0x180>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d203      	bcs.n	800c6ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c6a6:	4b14      	ldr	r3, [pc, #80]	; (800c6f8 <pvPortMalloc+0x178>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a15      	ldr	r2, [pc, #84]	; (800c700 <pvPortMalloc+0x180>)
 800c6ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b0:	685a      	ldr	r2, [r3, #4]
 800c6b2:	4b10      	ldr	r3, [pc, #64]	; (800c6f4 <pvPortMalloc+0x174>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	431a      	orrs	r2, r3
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6be:	2200      	movs	r2, #0
 800c6c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c6c2:	f7fe fd1f 	bl	800b104 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	f003 0307 	and.w	r3, r3, #7
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d009      	beq.n	800c6e4 <pvPortMalloc+0x164>
 800c6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	60fb      	str	r3, [r7, #12]
 800c6e2:	e7fe      	b.n	800c6e2 <pvPortMalloc+0x162>
	return pvReturn;
 800c6e4:	69fb      	ldr	r3, [r7, #28]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3728      	adds	r7, #40	; 0x28
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	24004928 	.word	0x24004928
 800c6f4:	24004934 	.word	0x24004934
 800c6f8:	2400492c 	.word	0x2400492c
 800c6fc:	24004920 	.word	0x24004920
 800c700:	24004930 	.word	0x24004930

0800c704 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b086      	sub	sp, #24
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d046      	beq.n	800c7a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c716:	2308      	movs	r3, #8
 800c718:	425b      	negs	r3, r3
 800c71a:	697a      	ldr	r2, [r7, #20]
 800c71c:	4413      	add	r3, r2
 800c71e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	685a      	ldr	r2, [r3, #4]
 800c728:	4b20      	ldr	r3, [pc, #128]	; (800c7ac <vPortFree+0xa8>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4013      	ands	r3, r2
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d109      	bne.n	800c746 <vPortFree+0x42>
 800c732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c736:	f383 8811 	msr	BASEPRI, r3
 800c73a:	f3bf 8f6f 	isb	sy
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	60fb      	str	r3, [r7, #12]
 800c744:	e7fe      	b.n	800c744 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d009      	beq.n	800c762 <vPortFree+0x5e>
 800c74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	60bb      	str	r3, [r7, #8]
 800c760:	e7fe      	b.n	800c760 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	685a      	ldr	r2, [r3, #4]
 800c766:	4b11      	ldr	r3, [pc, #68]	; (800c7ac <vPortFree+0xa8>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4013      	ands	r3, r2
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d019      	beq.n	800c7a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d115      	bne.n	800c7a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	4b0b      	ldr	r3, [pc, #44]	; (800c7ac <vPortFree+0xa8>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	43db      	mvns	r3, r3
 800c782:	401a      	ands	r2, r3
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c788:	f7fe fcae 	bl	800b0e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	685a      	ldr	r2, [r3, #4]
 800c790:	4b07      	ldr	r3, [pc, #28]	; (800c7b0 <vPortFree+0xac>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4413      	add	r3, r2
 800c796:	4a06      	ldr	r2, [pc, #24]	; (800c7b0 <vPortFree+0xac>)
 800c798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c79a:	6938      	ldr	r0, [r7, #16]
 800c79c:	f000 f86c 	bl	800c878 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c7a0:	f7fe fcb0 	bl	800b104 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c7a4:	bf00      	nop
 800c7a6:	3718      	adds	r7, #24
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}
 800c7ac:	24004934 	.word	0x24004934
 800c7b0:	2400492c 	.word	0x2400492c

0800c7b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b085      	sub	sp, #20
 800c7b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c7ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c7be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7c0:	4b27      	ldr	r3, [pc, #156]	; (800c860 <prvHeapInit+0xac>)
 800c7c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f003 0307 	and.w	r3, r3, #7
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d00c      	beq.n	800c7e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	3307      	adds	r3, #7
 800c7d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f023 0307 	bic.w	r3, r3, #7
 800c7da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	1ad3      	subs	r3, r2, r3
 800c7e2:	4a1f      	ldr	r2, [pc, #124]	; (800c860 <prvHeapInit+0xac>)
 800c7e4:	4413      	add	r3, r2
 800c7e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7ec:	4a1d      	ldr	r2, [pc, #116]	; (800c864 <prvHeapInit+0xb0>)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c7f2:	4b1c      	ldr	r3, [pc, #112]	; (800c864 <prvHeapInit+0xb0>)
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	68ba      	ldr	r2, [r7, #8]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c800:	2208      	movs	r2, #8
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	1a9b      	subs	r3, r3, r2
 800c806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f023 0307 	bic.w	r3, r3, #7
 800c80e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	4a15      	ldr	r2, [pc, #84]	; (800c868 <prvHeapInit+0xb4>)
 800c814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c816:	4b14      	ldr	r3, [pc, #80]	; (800c868 <prvHeapInit+0xb4>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2200      	movs	r2, #0
 800c81c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c81e:	4b12      	ldr	r3, [pc, #72]	; (800c868 <prvHeapInit+0xb4>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2200      	movs	r2, #0
 800c824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	1ad2      	subs	r2, r2, r3
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c834:	4b0c      	ldr	r3, [pc, #48]	; (800c868 <prvHeapInit+0xb4>)
 800c836:	681a      	ldr	r2, [r3, #0]
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	4a0a      	ldr	r2, [pc, #40]	; (800c86c <prvHeapInit+0xb8>)
 800c842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	4a09      	ldr	r2, [pc, #36]	; (800c870 <prvHeapInit+0xbc>)
 800c84a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c84c:	4b09      	ldr	r3, [pc, #36]	; (800c874 <prvHeapInit+0xc0>)
 800c84e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c852:	601a      	str	r2, [r3, #0]
}
 800c854:	bf00      	nop
 800c856:	3714      	adds	r7, #20
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr
 800c860:	24000d20 	.word	0x24000d20
 800c864:	24004920 	.word	0x24004920
 800c868:	24004928 	.word	0x24004928
 800c86c:	24004930 	.word	0x24004930
 800c870:	2400492c 	.word	0x2400492c
 800c874:	24004934 	.word	0x24004934

0800c878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c878:	b480      	push	{r7}
 800c87a:	b085      	sub	sp, #20
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c880:	4b28      	ldr	r3, [pc, #160]	; (800c924 <prvInsertBlockIntoFreeList+0xac>)
 800c882:	60fb      	str	r3, [r7, #12]
 800c884:	e002      	b.n	800c88c <prvInsertBlockIntoFreeList+0x14>
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	60fb      	str	r3, [r7, #12]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	429a      	cmp	r2, r3
 800c894:	d8f7      	bhi.n	800c886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	68ba      	ldr	r2, [r7, #8]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d108      	bne.n	800c8ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	441a      	add	r2, r3
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	68ba      	ldr	r2, [r7, #8]
 800c8c4:	441a      	add	r2, r3
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d118      	bne.n	800c900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	4b15      	ldr	r3, [pc, #84]	; (800c928 <prvInsertBlockIntoFreeList+0xb0>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d00d      	beq.n	800c8f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	685a      	ldr	r2, [r3, #4]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	441a      	add	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	601a      	str	r2, [r3, #0]
 800c8f4:	e008      	b.n	800c908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c8f6:	4b0c      	ldr	r3, [pc, #48]	; (800c928 <prvInsertBlockIntoFreeList+0xb0>)
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	601a      	str	r2, [r3, #0]
 800c8fe:	e003      	b.n	800c908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d002      	beq.n	800c916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c916:	bf00      	nop
 800c918:	3714      	adds	r7, #20
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	24004920 	.word	0x24004920
 800c928:	24004928 	.word	0x24004928

0800c92c <__libc_init_array>:
 800c92c:	b570      	push	{r4, r5, r6, lr}
 800c92e:	4e0d      	ldr	r6, [pc, #52]	; (800c964 <__libc_init_array+0x38>)
 800c930:	4c0d      	ldr	r4, [pc, #52]	; (800c968 <__libc_init_array+0x3c>)
 800c932:	1ba4      	subs	r4, r4, r6
 800c934:	10a4      	asrs	r4, r4, #2
 800c936:	2500      	movs	r5, #0
 800c938:	42a5      	cmp	r5, r4
 800c93a:	d109      	bne.n	800c950 <__libc_init_array+0x24>
 800c93c:	4e0b      	ldr	r6, [pc, #44]	; (800c96c <__libc_init_array+0x40>)
 800c93e:	4c0c      	ldr	r4, [pc, #48]	; (800c970 <__libc_init_array+0x44>)
 800c940:	f000 f82c 	bl	800c99c <_init>
 800c944:	1ba4      	subs	r4, r4, r6
 800c946:	10a4      	asrs	r4, r4, #2
 800c948:	2500      	movs	r5, #0
 800c94a:	42a5      	cmp	r5, r4
 800c94c:	d105      	bne.n	800c95a <__libc_init_array+0x2e>
 800c94e:	bd70      	pop	{r4, r5, r6, pc}
 800c950:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c954:	4798      	blx	r3
 800c956:	3501      	adds	r5, #1
 800c958:	e7ee      	b.n	800c938 <__libc_init_array+0xc>
 800c95a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c95e:	4798      	blx	r3
 800c960:	3501      	adds	r5, #1
 800c962:	e7f2      	b.n	800c94a <__libc_init_array+0x1e>
 800c964:	0800dc1c 	.word	0x0800dc1c
 800c968:	0800dc1c 	.word	0x0800dc1c
 800c96c:	0800dc1c 	.word	0x0800dc1c
 800c970:	0800dc20 	.word	0x0800dc20

0800c974 <memcpy>:
 800c974:	b510      	push	{r4, lr}
 800c976:	1e43      	subs	r3, r0, #1
 800c978:	440a      	add	r2, r1
 800c97a:	4291      	cmp	r1, r2
 800c97c:	d100      	bne.n	800c980 <memcpy+0xc>
 800c97e:	bd10      	pop	{r4, pc}
 800c980:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c984:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c988:	e7f7      	b.n	800c97a <memcpy+0x6>

0800c98a <memset>:
 800c98a:	4402      	add	r2, r0
 800c98c:	4603      	mov	r3, r0
 800c98e:	4293      	cmp	r3, r2
 800c990:	d100      	bne.n	800c994 <memset+0xa>
 800c992:	4770      	bx	lr
 800c994:	f803 1b01 	strb.w	r1, [r3], #1
 800c998:	e7f9      	b.n	800c98e <memset+0x4>
	...

0800c99c <_init>:
 800c99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c99e:	bf00      	nop
 800c9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9a2:	bc08      	pop	{r3}
 800c9a4:	469e      	mov	lr, r3
 800c9a6:	4770      	bx	lr

0800c9a8 <_fini>:
 800c9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9aa:	bf00      	nop
 800c9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ae:	bc08      	pop	{r3}
 800c9b0:	469e      	mov	lr, r3
 800c9b2:	4770      	bx	lr
