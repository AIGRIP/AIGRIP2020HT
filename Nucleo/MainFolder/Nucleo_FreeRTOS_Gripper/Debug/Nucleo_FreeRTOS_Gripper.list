
Nucleo_FreeRTOS_Gripper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0e4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001270  0800b384  0800b384  0001b384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5f4  0800c5f4  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5f4  0800c5f4  0001c5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5fc  0800c5fc  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5fc  0800c5fc  0001c5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c600  0800c600  0001c600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  0800c604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000014  0800c618  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000074  0800c678  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000050e8  240000d4  0800c6d8  000200d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240051bc  0800c6d8  000251bc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037f84  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00004f69  00000000  00000000  00058086  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000020f0  00000000  00000000  0005cff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001f18  00000000  00000000  0005f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00005cf8  00000000  00000000  00060ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001bae8  00000000  00000000  00066cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00178526  00000000  00000000  000827d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001facfe  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008e94  00000000  00000000  001fad7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000d4 	.word	0x240000d4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b36c 	.word	0x0800b36c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000d8 	.word	0x240000d8
 80002dc:	0800b36c 	.word	0x0800b36c

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f001 fa48 	bl	8001a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f854 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 fb20 	bl	8000c30 <MX_GPIO_Init>
  MX_ETH_Init();
 80005f0:	f000 f91a 	bl	8000828 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 fa9e 	bl	8000b34 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 fae8 	bl	8000bcc <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 80005fc:	f000 f9a6 	bl	800094c <MX_SPI4_Init>
  MX_UART7_Init();
 8000600:	f000 f9fc 	bl	80009fc <MX_UART7_Init>
  MX_USART2_UART_Init();
 8000604:	f000 fa48 	bl	8000a98 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000608:	f000 f960 	bl	80008cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2110      	movs	r1, #16
 8000610:	4813      	ldr	r0, [pc, #76]	; (8000660 <main+0x80>)
 8000612:	f002 f975 	bl	8002900 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000616:	f008 f8f7 	bl	8008808 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ControlTask */
  ControlTaskHandle = osThreadNew(StartControlTask, NULL, &ControlTask_attributes);
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <main+0x84>)
 800061c:	2100      	movs	r1, #0
 800061e:	4812      	ldr	r0, [pc, #72]	; (8000668 <main+0x88>)
 8000620:	f008 f984 	bl	800892c <osThreadNew>
 8000624:	4602      	mov	r2, r0
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <main+0x8c>)
 8000628:	601a      	str	r2, [r3, #0]

  /* creation of CommBoard */
  CommBoardHandle = osThreadNew(StartCommBoard, NULL, &CommBoard_attributes);
 800062a:	4a11      	ldr	r2, [pc, #68]	; (8000670 <main+0x90>)
 800062c:	2100      	movs	r1, #0
 800062e:	4811      	ldr	r0, [pc, #68]	; (8000674 <main+0x94>)
 8000630:	f008 f97c 	bl	800892c <osThreadNew>
 8000634:	4602      	mov	r2, r0
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <main+0x98>)
 8000638:	601a      	str	r2, [r3, #0]

  /* creation of SensorRead */
  SensorReadHandle = osThreadNew(StartSensorRead, NULL, &SensorRead_attributes);
 800063a:	4a10      	ldr	r2, [pc, #64]	; (800067c <main+0x9c>)
 800063c:	2100      	movs	r1, #0
 800063e:	4810      	ldr	r0, [pc, #64]	; (8000680 <main+0xa0>)
 8000640:	f008 f974 	bl	800892c <osThreadNew>
 8000644:	4602      	mov	r2, r0
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <main+0xa4>)
 8000648:	601a      	str	r2, [r3, #0]

  /* creation of Safety */
  SafetyHandle = osThreadNew(StartSafety, NULL, &Safety_attributes);
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <main+0xa8>)
 800064c:	2100      	movs	r1, #0
 800064e:	480f      	ldr	r0, [pc, #60]	; (800068c <main+0xac>)
 8000650:	f008 f96c 	bl	800892c <osThreadNew>
 8000654:	4602      	mov	r2, r0
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <main+0xb0>)
 8000658:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800065a:	f008 f909 	bl	8008870 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	e7fe      	b.n	800065e <main+0x7e>
 8000660:	58021000 	.word	0x58021000
 8000664:	0800b53c 	.word	0x0800b53c
 8000668:	08001139 	.word	0x08001139
 800066c:	24005084 	.word	0x24005084
 8000670:	0800b560 	.word	0x0800b560
 8000674:	08001159 	.word	0x08001159
 8000678:	24004f6c 	.word	0x24004f6c
 800067c:	0800b584 	.word	0x0800b584
 8000680:	08001285 	.word	0x08001285
 8000684:	24004f68 	.word	0x24004f68
 8000688:	0800b5a8 	.word	0x0800b5a8
 800068c:	080012a5 	.word	0x080012a5
 8000690:	24004f64 	.word	0x24004f64

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b0cc      	sub	sp, #304	; 0x130
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800069e:	224c      	movs	r2, #76	; 0x4c
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f00a fe59 	bl	800b35a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006ac:	2220      	movs	r2, #32
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f00a fe52 	bl	800b35a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	4618      	mov	r0, r3
 80006bc:	23bc      	movs	r3, #188	; 0xbc
 80006be:	461a      	mov	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f00a fe4a 	bl	800b35a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006c6:	2002      	movs	r0, #2
 80006c8:	f002 fe0e 	bl	80032e8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	4b52      	ldr	r3, [pc, #328]	; (800081c <SystemClock_Config+0x188>)
 80006d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d6:	4a51      	ldr	r2, [pc, #324]	; (800081c <SystemClock_Config+0x188>)
 80006d8:	f023 0301 	bic.w	r3, r3, #1
 80006dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006de:	4b4f      	ldr	r3, [pc, #316]	; (800081c <SystemClock_Config+0x188>)
 80006e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e2:	f003 0201 	and.w	r2, r3, #1
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	4b4d      	ldr	r3, [pc, #308]	; (8000820 <SystemClock_Config+0x18c>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f2:	4a4b      	ldr	r2, [pc, #300]	; (8000820 <SystemClock_Config+0x18c>)
 80006f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f8:	6193      	str	r3, [r2, #24]
 80006fa:	4b49      	ldr	r3, [pc, #292]	; (8000820 <SystemClock_Config+0x18c>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800070a:	bf00      	nop
 800070c:	4b44      	ldr	r3, [pc, #272]	; (8000820 <SystemClock_Config+0x18c>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000718:	d1f8      	bne.n	800070c <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800071a:	2303      	movs	r3, #3
 800071c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000720:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000724:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000728:	2301      	movs	r3, #1
 800072a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072e:	2340      	movs	r3, #64	; 0x40
 8000730:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073a:	2302      	movs	r3, #2
 800073c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000746:	2318      	movs	r3, #24
 8000748:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000752:	2304      	movs	r3, #4
 8000754:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800075e:	230c      	movs	r3, #12
 8000760:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000764:	2300      	movs	r3, #0
 8000766:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000774:	4618      	mov	r0, r3
 8000776:	f002 fe01 	bl	800337c <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000780:	f000 fdb2 	bl	80012e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	233f      	movs	r3, #63	; 0x3f
 8000786:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800078a:	2300      	movs	r3, #0
 800078c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f003 f9ee 	bl	8003b9c <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x136>
  {
    Error_Handler();
 80007c6:	f000 fd8f 	bl	80012e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	4a15      	ldr	r2, [pc, #84]	; (8000824 <SystemClock_Config+0x190>)
 80007d0:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	2200      	movs	r2, #0
 80007d8:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	2200      	movs	r2, #0
 80007e0:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	2200      	movs	r2, #0
 80007e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	4618      	mov	r0, r3
 80007fe:	f003 fd93 	bl	8004328 <HAL_RCCEx_PeriphCLKConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x178>
  {
    Error_Handler();
 8000808:	f000 fd6e 	bl	80012e8 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800080c:	f002 fda6 	bl	800335c <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000810:	bf00      	nop
 8000812:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	58000400 	.word	0x58000400
 8000820:	58024800 	.word	0x58024800
 8000824:	0004200a 	.word	0x0004200a

08000828 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800082c:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <MX_ETH_Init+0x90>)
 800082e:	4a23      	ldr	r2, [pc, #140]	; (80008bc <MX_ETH_Init+0x94>)
 8000830:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_ETH_Init+0x90>)
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800083a:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_ETH_Init+0x90>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	3301      	adds	r3, #1
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_ETH_Init+0x90>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	3302      	adds	r3, #2
 800084a:	22e1      	movs	r2, #225	; 0xe1
 800084c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_ETH_Init+0x90>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	3303      	adds	r3, #3
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_ETH_Init+0x90>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	3304      	adds	r3, #4
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_ETH_Init+0x90>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	3305      	adds	r3, #5
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_ETH_Init+0x90>)
 800086e:	2201      	movs	r2, #1
 8000870:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_ETH_Init+0x90>)
 8000874:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <MX_ETH_Init+0x98>)
 8000876:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_ETH_Init+0x90>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <MX_ETH_Init+0x9c>)
 800087c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_ETH_Init+0x90>)
 8000880:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000884:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000886:	480c      	ldr	r0, [pc, #48]	; (80008b8 <MX_ETH_Init+0x90>)
 8000888:	f001 fa74 	bl	8001d74 <HAL_ETH_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000892:	f000 fd29 	bl	80012e8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000896:	2234      	movs	r2, #52	; 0x34
 8000898:	2100      	movs	r1, #0
 800089a:	480b      	ldr	r0, [pc, #44]	; (80008c8 <MX_ETH_Init+0xa0>)
 800089c:	f00a fd5d 	bl	800b35a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_ETH_Init+0xa0>)
 80008a2:	2221      	movs	r2, #33	; 0x21
 80008a4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_ETH_Init+0xa0>)
 80008a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008ac:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_ETH_Init+0xa0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	24005088 	.word	0x24005088
 80008bc:	40028000 	.word	0x40028000
 80008c0:	24000074 	.word	0x24000074
 80008c4:	24000014 	.word	0x24000014
 80008c8:	240050f8 	.word	0x240050f8

080008cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_I2C1_Init+0x74>)
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <MX_I2C1_Init+0x78>)
 80008d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_I2C1_Init+0x74>)
 80008d8:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <MX_I2C1_Init+0x7c>)
 80008da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 10;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_I2C1_Init+0x74>)
 80008de:	220a      	movs	r2, #10
 80008e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_I2C1_Init+0x74>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_I2C1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_I2C1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_I2C1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_I2C1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_I2C1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000906:	480e      	ldr	r0, [pc, #56]	; (8000940 <MX_I2C1_Init+0x74>)
 8000908:	f002 f82e 	bl	8002968 <HAL_I2C_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000912:	f000 fce9 	bl	80012e8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4809      	ldr	r0, [pc, #36]	; (8000940 <MX_I2C1_Init+0x74>)
 800091a:	f002 fb05 	bl	8002f28 <HAL_I2CEx_ConfigAnalogFilter>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000924:	f000 fce0 	bl	80012e8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_I2C1_Init+0x74>)
 800092c:	f002 fb47 	bl	8002fbe <HAL_I2CEx_ConfigDigitalFilter>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000936:	f000 fcd7 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	24004b10 	.word	0x24004b10
 8000944:	40005400 	.word	0x40005400
 8000948:	00602173 	.word	0x00602173

0800094c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <MX_SPI4_Init+0xa8>)
 8000952:	4a29      	ldr	r2, [pc, #164]	; (80009f8 <MX_SPI4_Init+0xac>)
 8000954:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000956:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <MX_SPI4_Init+0xa8>)
 8000958:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800095c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800095e:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <MX_SPI4_Init+0xa8>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000964:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <MX_SPI4_Init+0xa8>)
 8000966:	2207      	movs	r2, #7
 8000968:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800096a:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <MX_SPI4_Init+0xa8>)
 800096c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000970:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000972:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <MX_SPI4_Init+0xa8>)
 8000974:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000978:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800097a:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <MX_SPI4_Init+0xa8>)
 800097c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000980:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_SPI4_Init+0xa8>)
 8000984:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000988:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_SPI4_Init+0xa8>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_SPI4_Init+0xa8>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_SPI4_Init+0xa8>)
 8000998:	2200      	movs	r2, #0
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_SPI4_Init+0xa8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009e0:	f004 ffa2 	bl	8005928 <HAL_SPI_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80009ea:	f000 fc7d 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	24004f70 	.word	0x24004f70
 80009f8:	40013400 	.word	0x40013400

080009fc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a02:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <MX_UART7_Init+0x94>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1000000;
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a08:	4a22      	ldr	r2, [pc, #136]	; (8000a94 <MX_UART7_Init+0x98>)
 8000a0a:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000a12:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a20:	220c      	movs	r2, #12
 8000a22:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a24:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart7) != HAL_OK)
 8000a42:	4812      	ldr	r0, [pc, #72]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a44:	f006 fb08 	bl	8007058 <HAL_HalfDuplex_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 8000a4e:	f000 fc4b 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a56:	f007 fb40 	bl	80080da <HAL_UARTEx_SetTxFifoThreshold>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 8000a60:	f000 fc42 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	4809      	ldr	r0, [pc, #36]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a68:	f007 fb75 	bl	8008156 <HAL_UARTEx_SetRxFifoThreshold>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 8000a72:	f000 fc39 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a78:	f007 faf6 	bl	8008068 <HAL_UARTEx_DisableFifoMode>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 8000a82:	f000 fc31 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	240049f8 	.word	0x240049f8
 8000a90:	40007800 	.word	0x40007800
 8000a94:	000f4240 	.word	0x000f4240

08000a98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a9c:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000a9e:	4a23      	ldr	r2, [pc, #140]	; (8000b2c <MX_USART2_UART_Init+0x94>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000aa4:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <MX_USART2_UART_Init+0x98>)
 8000aa6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000abc:	220c      	movs	r2, #12
 8000abe:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000ade:	4812      	ldr	r0, [pc, #72]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ae0:	f006 faba 	bl	8007058 <HAL_HalfDuplex_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000aea:	f000 fbfd 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aee:	2100      	movs	r1, #0
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000af2:	f007 faf2 	bl	80080da <HAL_UARTEx_SetTxFifoThreshold>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8000afc:	f000 fbf4 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	4809      	ldr	r0, [pc, #36]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000b04:	f007 fb27 	bl	8008156 <HAL_UARTEx_SetRxFifoThreshold>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8000b0e:	f000 fbeb 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000b14:	f007 faa8 	bl	8008068 <HAL_UARTEx_DisableFifoMode>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000b1e:	f000 fbe3 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	24004ff8 	.word	0x24004ff8
 8000b2c:	40004400 	.word	0x40004400
 8000b30:	000f4240 	.word	0x000f4240

08000b34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b3a:	4a23      	ldr	r2, [pc, #140]	; (8000bc8 <MX_USART3_UART_Init+0x94>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b7c:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b7e:	f006 fa1b 	bl	8006fb8 <HAL_UART_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b88:	f000 fbae 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b90:	f007 faa3 	bl	80080da <HAL_UARTEx_SetTxFifoThreshold>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b9a:	f000 fba5 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000ba2:	f007 fad8 	bl	8008156 <HAL_UARTEx_SetRxFifoThreshold>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bac:	f000 fb9c 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000bb2:	f007 fa59 	bl	8008068 <HAL_UARTEx_DisableFifoMode>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bbc:	f000 fb94 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	24004a84 	.word	0x24004a84
 8000bc8:	40004800 	.word	0x40004800

08000bcc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd2:	4a16      	ldr	r2, [pc, #88]	; (8000c2c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd8:	2209      	movs	r2, #9
 8000bda:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bde:	2202      	movs	r2, #2
 8000be0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c14:	f002 fa1f 	bl	8003056 <HAL_PCD_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c1e:	f000 fb63 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	24004b5c 	.word	0x24004b5c
 8000c2c:	40080000 	.word	0x40080000

08000c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08e      	sub	sp, #56	; 0x38
 8000c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c46:	4b69      	ldr	r3, [pc, #420]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	4a67      	ldr	r2, [pc, #412]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c56:	4b65      	ldr	r3, [pc, #404]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	f003 0310 	and.w	r3, r3, #16
 8000c60:	623b      	str	r3, [r7, #32]
 8000c62:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c64:	4b61      	ldr	r3, [pc, #388]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6a:	4a60      	ldr	r2, [pc, #384]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c74:	4b5d      	ldr	r3, [pc, #372]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	61fb      	str	r3, [r7, #28]
 8000c80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c82:	4b5a      	ldr	r3, [pc, #360]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	4a58      	ldr	r2, [pc, #352]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c8a:	f043 0320 	orr.w	r3, r3, #32
 8000c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c92:	4b56      	ldr	r3, [pc, #344]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c98:	f003 0320 	and.w	r3, r3, #32
 8000c9c:	61bb      	str	r3, [r7, #24]
 8000c9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca0:	4b52      	ldr	r3, [pc, #328]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca6:	4a51      	ldr	r2, [pc, #324]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb0:	4b4e      	ldr	r3, [pc, #312]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b4b      	ldr	r3, [pc, #300]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc4:	4a49      	ldr	r2, [pc, #292]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cce:	4b47      	ldr	r3, [pc, #284]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b43      	ldr	r3, [pc, #268]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce2:	4a42      	ldr	r2, [pc, #264]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cec:	4b3f      	ldr	r3, [pc, #252]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfa:	4b3c      	ldr	r3, [pc, #240]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d00:	4a3a      	ldr	r2, [pc, #232]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0a:	4b38      	ldr	r3, [pc, #224]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d18:	4b34      	ldr	r3, [pc, #208]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1e:	4a33      	ldr	r2, [pc, #204]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d28:	4b30      	ldr	r3, [pc, #192]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2112      	movs	r1, #18
 8000d3a:	482d      	ldr	r0, [pc, #180]	; (8000df0 <MX_GPIO_Init+0x1c0>)
 8000d3c:	f001 fde0 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d46:	482b      	ldr	r0, [pc, #172]	; (8000df4 <MX_GPIO_Init+0x1c4>)
 8000d48:	f001 fdda 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d52:	4829      	ldr	r0, [pc, #164]	; (8000df8 <MX_GPIO_Init+0x1c8>)
 8000d54:	f001 fdd4 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000d58:	2312      	movs	r3, #18
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4820      	ldr	r0, [pc, #128]	; (8000df0 <MX_GPIO_Init+0x1c0>)
 8000d70:	f001 fc16 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	481c      	ldr	r0, [pc, #112]	; (8000dfc <MX_GPIO_Init+0x1cc>)
 8000d8a:	f001 fc09 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin;
 8000d8e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da4:	4619      	mov	r1, r3
 8000da6:	4813      	ldr	r0, [pc, #76]	; (8000df4 <MX_GPIO_Init+0x1c4>)
 8000da8:	f001 fbfa 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <MX_GPIO_Init+0x1c8>)
 8000dc6:	f001 fbeb 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_GPIO_Init+0x1d0>)
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4809      	ldr	r0, [pc, #36]	; (8000e04 <MX_GPIO_Init+0x1d4>)
 8000dde:	f001 fbdf 	bl	80025a0 <HAL_GPIO_Init>

}
 8000de2:	bf00      	nop
 8000de4:	3738      	adds	r7, #56	; 0x38
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	58024400 	.word	0x58024400
 8000df0:	58021000 	.word	0x58021000
 8000df4:	58020400 	.word	0x58020400
 8000df8:	58020c00 	.word	0x58020c00
 8000dfc:	58020800 	.word	0x58020800
 8000e00:	11110000 	.word	0x11110000
 8000e04:	58021800 	.word	0x58021800

08000e08 <SPI_E_ReadReg>:

/* USER CODE BEGIN 4 */

void SPI_E_ReadReg(uint8_t *REG_ADDR, uint8_t *readByte )
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  char READ_REG_ADDR;
  READ_REG_ADDR = *REG_ADDR & 0x7F;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2110      	movs	r1, #16
 8000e22:	480f      	ldr	r0, [pc, #60]	; (8000e60 <SPI_E_ReadReg+0x58>)
 8000e24:	f001 fd6c 	bl	8002900 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi4,(uint8_t *) &READ_REG_ADDR, 1, 100);
 8000e28:	f107 010f 	add.w	r1, r7, #15
 8000e2c:	2364      	movs	r3, #100	; 0x64
 8000e2e:	2201      	movs	r2, #1
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <SPI_E_ReadReg+0x5c>)
 8000e32:	f004 fe71 	bl	8005b18 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi4,(uint8_t *) readByte, 1, 100);
 8000e36:	2364      	movs	r3, #100	; 0x64
 8000e38:	2201      	movs	r2, #1
 8000e3a:	6839      	ldr	r1, [r7, #0]
 8000e3c:	4809      	ldr	r0, [pc, #36]	; (8000e64 <SPI_E_ReadReg+0x5c>)
 8000e3e:	f005 f85d 	bl	8005efc <HAL_SPI_Receive>

  //HAL_Delay(5);
  osDelay(1);
 8000e42:	2001      	movs	r0, #1
 8000e44:	f007 fe18 	bl	8008a78 <osDelay>

  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <SPI_E_ReadReg+0x58>)
 8000e4e:	f001 fd57 	bl	8002900 <HAL_GPIO_WritePin>

  osDelay(1);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f007 fe10 	bl	8008a78 <osDelay>

}
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58021000 	.word	0x58021000
 8000e64:	24004f70 	.word	0x24004f70

08000e68 <SPI_E_WriteReg>:

void SPI_E_WriteReg(uint8_t *REG_ADDR, uint8_t *sendByte )
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  char READ_REG_ADDR;
  READ_REG_ADDR = *REG_ADDR | 0x80;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2110      	movs	r1, #16
 8000e82:	480f      	ldr	r0, [pc, #60]	; (8000ec0 <SPI_E_WriteReg+0x58>)
 8000e84:	f001 fd3c 	bl	8002900 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi4,(uint8_t *) &READ_REG_ADDR, 1, 100);
 8000e88:	f107 010f 	add.w	r1, r7, #15
 8000e8c:	2364      	movs	r3, #100	; 0x64
 8000e8e:	2201      	movs	r2, #1
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <SPI_E_WriteReg+0x5c>)
 8000e92:	f004 fe41 	bl	8005b18 <HAL_SPI_Transmit>

  HAL_SPI_Transmit(&hspi4,(uint8_t *) sendByte, 1, 100);
 8000e96:	2364      	movs	r3, #100	; 0x64
 8000e98:	2201      	movs	r2, #1
 8000e9a:	6839      	ldr	r1, [r7, #0]
 8000e9c:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <SPI_E_WriteReg+0x5c>)
 8000e9e:	f004 fe3b 	bl	8005b18 <HAL_SPI_Transmit>

  //HAL_Delay(5);
  osDelay(1);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f007 fde8 	bl	8008a78 <osDelay>

  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <SPI_E_WriteReg+0x58>)
 8000eae:	f001 fd27 	bl	8002900 <HAL_GPIO_WritePin>

  osDelay(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f007 fde0 	bl	8008a78 <osDelay>

}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	58021000 	.word	0x58021000
 8000ec4:	24004f70 	.word	0x24004f70

08000ec8 <startUpMouse>:


void startUpMouse()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0

  // Memory registers to read and write.
  uint8_t startUpRegAddr[] = {0x3A,0x02,0x03,0x04,0x05,0x06,0x10,0x13,0x13,0x62,0x2A,0x10};
 8000ece:	4a60      	ldr	r2, [pc, #384]	; (8001050 <startUpMouse+0x188>)
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ed6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t sendByte;
  uint8_t readByte;


  // Ensure reset
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2110      	movs	r1, #16
 8000ede:	485d      	ldr	r0, [pc, #372]	; (8001054 <startUpMouse+0x18c>)
 8000ee0:	f001 fd0e 	bl	8002900 <HAL_GPIO_WritePin>
  osDelay(1);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f007 fdc7 	bl	8008a78 <osDelay>
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2110      	movs	r1, #16
 8000eee:	4859      	ldr	r0, [pc, #356]	; (8001054 <startUpMouse+0x18c>)
 8000ef0:	f001 fd06 	bl	8002900 <HAL_GPIO_WritePin>
  osDelay(1);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f007 fdbf 	bl	8008a78 <osDelay>
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	2110      	movs	r1, #16
 8000efe:	4855      	ldr	r0, [pc, #340]	; (8001054 <startUpMouse+0x18c>)
 8000f00:	f001 fcfe 	bl	8002900 <HAL_GPIO_WritePin>
  osDelay(1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f007 fdb7 	bl	8008a78 <osDelay>

  // Start up register
  sendByte = 0x5A;
 8000f0a:	235a      	movs	r3, #90	; 0x5a
 8000f0c:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[0], &sendByte );
 8000f0e:	1dfa      	adds	r2, r7, #7
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ffa6 	bl	8000e68 <SPI_E_WriteReg>

  // Must wait 50 milliseconds.
  osDelay(50);
 8000f1c:	2032      	movs	r0, #50	; 0x32
 8000f1e:	f007 fdab 	bl	8008a78 <osDelay>
  // Read and discard data.
  SPI_E_ReadReg(&startUpRegAddr[1], &readByte );
 8000f22:	1dba      	adds	r2, r7, #6
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	3301      	adds	r3, #1
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff6b 	bl	8000e08 <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[2], &readByte );
 8000f32:	1dba      	adds	r2, r7, #6
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	3302      	adds	r3, #2
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff63 	bl	8000e08 <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[3], &readByte );
 8000f42:	1dba      	adds	r2, r7, #6
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	3303      	adds	r3, #3
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff5b 	bl	8000e08 <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[4], &readByte );
 8000f52:	1dba      	adds	r2, r7, #6
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	3304      	adds	r3, #4
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff53 	bl	8000e08 <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[5], &readByte );
 8000f62:	1dba      	adds	r2, r7, #6
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	3305      	adds	r3, #5
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff4b 	bl	8000e08 <SPI_E_ReadReg>

  // Upload SROM data to mouse sensor.

  // Write 0 to Rest_En bit of Config2 register to disable Rest mode.
  sendByte = 0x00;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[6], &sendByte );
 8000f76:	1dfa      	adds	r2, r7, #7
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	3306      	adds	r3, #6
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff71 	bl	8000e68 <SPI_E_WriteReg>

  // Write 0x1d to SROM_Enable register for initializing.
  sendByte = 0x1D;
 8000f86:	231d      	movs	r3, #29
 8000f88:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[7], &sendByte );
 8000f8a:	1dfa      	adds	r2, r7, #7
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	3307      	adds	r3, #7
 8000f92:	4611      	mov	r1, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff67 	bl	8000e68 <SPI_E_WriteReg>

  // Wait 10 ms
  osDelay(10);
 8000f9a:	200a      	movs	r0, #10
 8000f9c:	f007 fd6c 	bl	8008a78 <osDelay>

  // Write 0x18 to SROM_Enable register again to start SROM download.
  sendByte = 0x18;
 8000fa0:	2318      	movs	r3, #24
 8000fa2:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[8], &sendByte );
 8000fa4:	1dfa      	adds	r2, r7, #7
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	3308      	adds	r3, #8
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff5a 	bl	8000e68 <SPI_E_WriteReg>


  // Send the SROM data
  // Select Slave during the whole transfer.
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	4826      	ldr	r0, [pc, #152]	; (8001054 <startUpMouse+0x18c>)
 8000fba:	f001 fca1 	bl	8002900 <HAL_GPIO_WritePin>
  // Select SROM_Load_Burst register
  HAL_SPI_Transmit(&hspi4, &startUpRegAddr[9], 1, 100);
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	f103 0109 	add.w	r1, r3, #9
 8000fc6:	2364      	movs	r3, #100	; 0x64
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4823      	ldr	r0, [pc, #140]	; (8001058 <startUpMouse+0x190>)
 8000fcc:	f004 fda4 	bl	8005b18 <HAL_SPI_Transmit>


  for(int i=0;i<firmware_length;i++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	e00d      	b.n	8000ff2 <startUpMouse+0x12a>
  {
	  HAL_SPI_Transmit(&hspi4,(uint8_t *) &firmware_data[i], 1, 100);
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	4a20      	ldr	r2, [pc, #128]	; (800105c <startUpMouse+0x194>)
 8000fda:	1899      	adds	r1, r3, r2
 8000fdc:	2364      	movs	r3, #100	; 0x64
 8000fde:	2201      	movs	r2, #1
 8000fe0:	481d      	ldr	r0, [pc, #116]	; (8001058 <startUpMouse+0x190>)
 8000fe2:	f004 fd99 	bl	8005b18 <HAL_SPI_Transmit>
	  osDelay(1);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f007 fd46 	bl	8008a78 <osDelay>
  for(int i=0;i<firmware_length;i++)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	f640 73fe 	movw	r3, #4094	; 0xffe
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	dbeb      	blt.n	8000fd6 <startUpMouse+0x10e>
  }

  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2110      	movs	r1, #16
 8001002:	4814      	ldr	r0, [pc, #80]	; (8001054 <startUpMouse+0x18c>)
 8001004:	f001 fc7c 	bl	8002900 <HAL_GPIO_WritePin>

  osDelay(1);
 8001008:	2001      	movs	r0, #1
 800100a:	f007 fd35 	bl	8008a78 <osDelay>

  // Read the SROM_ID (0x2A) register to verify the ID before any other register reads or writes.
  SPI_E_ReadReg(&startUpRegAddr[10], &readByte );
 800100e:	1dba      	adds	r2, r7, #6
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	330a      	adds	r3, #10
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fef5 	bl	8000e08 <SPI_E_ReadReg>

  // Write 0x00 to config2 register for wired mouse design.
  sendByte = 0x00;
 800101e:	2300      	movs	r3, #0
 8001020:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[11], &sendByte );
 8001022:	1dfa      	adds	r2, r7, #7
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	330b      	adds	r3, #11
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff1b 	bl	8000e68 <SPI_E_WriteReg>

  // Set Config1
  sendByte = 0x77;
 8001032:	2377      	movs	r3, #119	; 0x77
 8001034:	71fb      	strb	r3, [r7, #7]
  uint8_t conf1Addr = 0x0F;
 8001036:	230f      	movs	r3, #15
 8001038:	717b      	strb	r3, [r7, #5]
  SPI_E_WriteReg(&conf1Addr, &sendByte );
 800103a:	1dfa      	adds	r2, r7, #7
 800103c:	1d7b      	adds	r3, r7, #5
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff11 	bl	8000e68 <SPI_E_WriteReg>


}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	0800b3b0 	.word	0x0800b3b0
 8001054:	58021000 	.word	0x58021000
 8001058:	24004f70 	.word	0x24004f70
 800105c:	0800b5cc 	.word	0x0800b5cc

08001060 <readMouseSensor>:


void readMouseSensor(sensValue *sensorPacket)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

	uint8_t readByte = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	757b      	strb	r3, [r7, #21]
	uint8_t freeze = 0x01;
 800106c:	2301      	movs	r3, #1
 800106e:	753b      	strb	r3, [r7, #20]

	uint8_t motionADR[] = {0x02,0x03,0x04,0x05,0x06};
 8001070:	4a30      	ldr	r2, [pc, #192]	; (8001134 <readMouseSensor+0xd4>)
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	e892 0003 	ldmia.w	r2, {r0, r1}
 800107a:	6018      	str	r0, [r3, #0]
 800107c:	3304      	adds	r3, #4
 800107e:	7019      	strb	r1, [r3, #0]
	uint8_t magnX_L = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	75fb      	strb	r3, [r7, #23]
	uint8_t magnY_L = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	75bb      	strb	r3, [r7, #22]
	// Write the motion address to freeze the current value of delta X and Y.
	SPI_E_WriteReg(&motionADR[0], &freeze );
 8001088:	f107 0214 	add.w	r2, r7, #20
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fee8 	bl	8000e68 <SPI_E_WriteReg>
	// Check if any motion has occurred.
	SPI_E_ReadReg(&motionADR[0], &readByte );
 8001098:	f107 0215 	add.w	r2, r7, #21
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff feb0 	bl	8000e08 <SPI_E_ReadReg>
	// Save the motion bit.
	sensorPacket->mouseMotion = 0 < (0x80 & readByte);
 80010a8:	7d7b      	ldrb	r3, [r7, #21]
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	09db      	lsrs	r3, r3, #7
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	701a      	strb	r2, [r3, #0]


	//Read the delta X registers.
	SPI_E_ReadReg(&motionADR[1], &readByte );
 80010b6:	f107 0215 	add.w	r2, r7, #21
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	3301      	adds	r3, #1
 80010c0:	4611      	mov	r1, r2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fea0 	bl	8000e08 <SPI_E_ReadReg>
	magnX_L = (uint8_t) readByte;
 80010c8:	7d7b      	ldrb	r3, [r7, #21]
 80010ca:	75fb      	strb	r3, [r7, #23]
	SPI_E_ReadReg(&motionADR[2], &readByte );
 80010cc:	f107 0215 	add.w	r2, r7, #21
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	3302      	adds	r3, #2
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fe95 	bl	8000e08 <SPI_E_ReadReg>

	// Merge the lower and higher bit values of the delta X registers.
	sensorPacket->mouse_D_X = magnX_L | (readByte<<8);
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	7d7b      	ldrb	r3, [r7, #21]
 80010e4:	021b      	lsls	r3, r3, #8
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	805a      	strh	r2, [r3, #2]

	//Read the delta X registers.
	SPI_E_ReadReg(&motionADR[3], &readByte );
 80010f0:	f107 0215 	add.w	r2, r7, #21
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	3303      	adds	r3, #3
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fe83 	bl	8000e08 <SPI_E_ReadReg>
	magnY_L = (uint8_t) readByte;
 8001102:	7d7b      	ldrb	r3, [r7, #21]
 8001104:	75bb      	strb	r3, [r7, #22]
	SPI_E_ReadReg(&motionADR[4], &readByte );
 8001106:	f107 0215 	add.w	r2, r7, #21
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	3304      	adds	r3, #4
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fe78 	bl	8000e08 <SPI_E_ReadReg>

	// Merge the lower and higher bit values of the delta Y registers.
	sensorPacket->mouse_D_Y = magnY_L | (readByte<<8);
 8001118:	7dbb      	ldrb	r3, [r7, #22]
 800111a:	b21a      	sxth	r2, r3
 800111c:	7d7b      	ldrb	r3, [r7, #21]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21a      	sxth	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	809a      	strh	r2, [r3, #4]

}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	0800b3bc 	.word	0x0800b3bc

08001138 <StartControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartControlTask */
void StartControlTask(void *argument)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001140:	2101      	movs	r1, #1
 8001142:	4804      	ldr	r0, [pc, #16]	; (8001154 <StartControlTask+0x1c>)
 8001144:	f001 fbf5 	bl	8002932 <HAL_GPIO_TogglePin>
	osDelay(500);
 8001148:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800114c:	f007 fc94 	bl	8008a78 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001150:	e7f6      	b.n	8001140 <StartControlTask+0x8>
 8001152:	bf00      	nop
 8001154:	58020400 	.word	0x58020400

08001158 <StartCommBoard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommBoard */
void StartCommBoard(void *argument)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b0aa      	sub	sp, #168	; 0xa8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

	// Transmit struct for Nucleo.
	messageStructFromNucleo messageFormNucleo;

	// Set up time variables.
	const uint32_t deadlineCommunication = 1000;
 8001160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001164:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint32_t communicationSleepTime = 25;
 8001168:	2319      	movs	r3, #25
 800116a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	uint32_t lastTransmitTime = osKernelGetTickCount();
 800116e:	f007 fbb5 	bl	80088dc <osKernelGetTickCount>
 8001172:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

	// Debug sensor values.
	messageFormNucleo.motorStatus[0] = 1;
 8001176:	2301      	movs	r3, #1
 8001178:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	messageFormNucleo.motorStatus[1] = 3;
 800117c:	2303      	movs	r3, #3
 800117e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	messageFormNucleo.motorStatus[2] = 3;
 8001182:	2303      	movs	r3, #3
 8001184:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	messageFormNucleo.motorStatus[3] = 7;
 8001188:	2307      	movs	r3, #7
 800118a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	messageFormNucleo.motorStatus[4] = 6;
 800118e:	2306      	movs	r3, #6
 8001190:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	messageFormNucleo.motorStatus[5] = 9;
 8001194:	2309      	movs	r3, #9
 8001196:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	messageFormNucleo.motorStatus[6] = 4;
 800119a:	2304      	movs	r3, #4
 800119c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	messageFormNucleo.motorStatus[7] = 2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c


	char str0[] = "Starting I2C Communication.\n\r";
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <StartCommBoard+0x110>)
 80011a8:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80011ac:	461d      	mov	r5, r3
 80011ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011b6:	c407      	stmia	r4!, {r0, r1, r2}
 80011b8:	8023      	strh	r3, [r4, #0]
	char str1[] = "Transmit Success.\n\r";
 80011ba:	4b2c      	ldr	r3, [pc, #176]	; (800126c <StartCommBoard+0x114>)
 80011bc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80011c0:	461d      	mov	r5, r3
 80011c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c6:	682b      	ldr	r3, [r5, #0]
 80011c8:	6023      	str	r3, [r4, #0]
	char str2[] = "Transmit Failure.\n\r";
 80011ca:	4b29      	ldr	r3, [pc, #164]	; (8001270 <StartCommBoard+0x118>)
 80011cc:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80011d0:	461d      	mov	r5, r3
 80011d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d6:	682b      	ldr	r3, [r5, #0]
 80011d8:	6023      	str	r3, [r4, #0]
	char str3[] = "About to transmit.\n\r";
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <StartCommBoard+0x11c>)
 80011dc:	f107 040c 	add.w	r4, r7, #12
 80011e0:	461d      	mov	r5, r3
 80011e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011ea:	6020      	str	r0, [r4, #0]
 80011ec:	3404      	adds	r4, #4
 80011ee:	7021      	strb	r1, [r4, #0]

  for(;;)
  {

	// Check if it is time to do a new transmit. Otherwise it check if any new messages is available.
	if( (lastTransmitTime + deadlineCommunication) <= osKernelGetTickCount() ){
 80011f0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80011f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011f8:	18d4      	adds	r4, r2, r3
 80011fa:	f007 fb6f 	bl	80088dc <osKernelGetTickCount>
 80011fe:	4603      	mov	r3, r0
 8001200:	429c      	cmp	r4, r3
 8001202:	d82b      	bhi.n	800125c <StartCommBoard+0x104>

		// Indicate that a I2C transimtion is about to happen.
		HAL_UART_Transmit(&huart3,(uint8_t *) str3, sizeof(str1), 50);
 8001204:	f107 010c 	add.w	r1, r7, #12
 8001208:	2332      	movs	r3, #50	; 0x32
 800120a:	2214      	movs	r2, #20
 800120c:	481a      	ldr	r0, [pc, #104]	; (8001278 <StartCommBoard+0x120>)
 800120e:	f005 ff7b 	bl	8007108 <HAL_UART_Transmit>

		// Transmit the data from Nucleo.
		transStatus = HAL_I2C_Slave_Transmit(&hi2c1,(uint8_t *) &messageFormNucleo, sizeof(messageStructFromNucleo), 100);
 8001212:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8001216:	2364      	movs	r3, #100	; 0x64
 8001218:	222a      	movs	r2, #42	; 0x2a
 800121a:	4818      	ldr	r0, [pc, #96]	; (800127c <StartCommBoard+0x124>)
 800121c:	f001 fc34 	bl	8002a88 <HAL_I2C_Slave_Transmit>
 8001220:	4603      	mov	r3, r0
 8001222:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		//Print transmit status.
		if(transStatus == 0)
 8001226:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800122a:	2b00      	cmp	r3, #0
 800122c:	d107      	bne.n	800123e <StartCommBoard+0xe6>
		{
			HAL_UART_Transmit(&huart3,(uint8_t *) str1, sizeof(str1), 50);
 800122e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001232:	2332      	movs	r3, #50	; 0x32
 8001234:	2214      	movs	r2, #20
 8001236:	4810      	ldr	r0, [pc, #64]	; (8001278 <StartCommBoard+0x120>)
 8001238:	f005 ff66 	bl	8007108 <HAL_UART_Transmit>
 800123c:	e006      	b.n	800124c <StartCommBoard+0xf4>
		}else{
			HAL_UART_Transmit(&huart3,(uint8_t *) str2, sizeof(str2), 50);
 800123e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001242:	2332      	movs	r3, #50	; 0x32
 8001244:	2214      	movs	r2, #20
 8001246:	480c      	ldr	r0, [pc, #48]	; (8001278 <StartCommBoard+0x120>)
 8001248:	f005 ff5e 	bl	8007108 <HAL_UART_Transmit>
		}

		// Save the transmit time.
		lastTransmitTime = osKernelGetTickCount();
 800124c:	f007 fb46 	bl	80088dc <osKernelGetTickCount>
 8001250:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8001254:	2102      	movs	r1, #2
 8001256:	480a      	ldr	r0, [pc, #40]	; (8001280 <StartCommBoard+0x128>)
 8001258:	f001 fb6b 	bl	8002932 <HAL_GPIO_TogglePin>

		// Handle received I2C data.
		//I2CCommandHandle();
	}

	osDelay(communicationSleepTime);
 800125c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001260:	f007 fc0a 	bl	8008a78 <osDelay>
	if( (lastTransmitTime + deadlineCommunication) <= osKernelGetTickCount() ){
 8001264:	e7c4      	b.n	80011f0 <StartCommBoard+0x98>
 8001266:	bf00      	nop
 8001268:	0800b4b4 	.word	0x0800b4b4
 800126c:	0800b4d4 	.word	0x0800b4d4
 8001270:	0800b4e8 	.word	0x0800b4e8
 8001274:	0800b4fc 	.word	0x0800b4fc
 8001278:	24004a84 	.word	0x24004a84
 800127c:	24004b10 	.word	0x24004b10
 8001280:	58021000 	.word	0x58021000

08001284 <StartSensorRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorRead */
void StartSensorRead(void *argument)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  sensValue sensorPacket;



  startUpMouse();
 800128c:	f7ff fe1c 	bl	8000ec8 <startUpMouse>
  /* Infinite loop */
  for(;;)
  {

    // Read the sensor values.
	readMouseSensor( &sensorPacket );
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fee3 	bl	8001060 <readMouseSensor>

    //UART Send data to console.
    // plotSensorData( &sensorPacket );

    osDelay(1000);
 800129a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800129e:	f007 fbeb 	bl	8008a78 <osDelay>
	readMouseSensor( &sensorPacket );
 80012a2:	e7f5      	b.n	8001290 <StartSensorRead+0xc>

080012a4 <StartSafety>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSafety */
void StartSafety(void *argument)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80012ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <StartSafety+0x1c>)
 80012b2:	f001 fb3e 	bl	8002932 <HAL_GPIO_TogglePin>
	osDelay(1500);
 80012b6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80012ba:	f007 fbdd 	bl	8008a78 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80012be:	e7f5      	b.n	80012ac <StartSafety+0x8>
 80012c0:	58020400 	.word	0x58020400

080012c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d101      	bne.n	80012da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012d6:	f000 fc0b 	bl	8001af0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40001000 	.word	0x40001000

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_MspInit+0x30>)
 8001300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001304:	4a08      	ldr	r2, [pc, #32]	; (8001328 <HAL_MspInit+0x30>)
 8001306:	f043 0302 	orr.w	r3, r3, #2
 800130a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_MspInit+0x30>)
 8001310:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	58024400 	.word	0x58024400

0800132c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	; 0x38
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a59      	ldr	r2, [pc, #356]	; (80014b0 <HAL_ETH_MspInit+0x184>)
 800134a:	4293      	cmp	r3, r2
 800134c:	f040 80ab 	bne.w	80014a6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001350:	4b58      	ldr	r3, [pc, #352]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 8001352:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001356:	4a57      	ldr	r2, [pc, #348]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 8001358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800135c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001360:	4b54      	ldr	r3, [pc, #336]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 8001362:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800136a:	623b      	str	r3, [r7, #32]
 800136c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800136e:	4b51      	ldr	r3, [pc, #324]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 8001370:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001374:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 8001376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800137e:	4b4d      	ldr	r3, [pc, #308]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 8001380:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800138c:	4b49      	ldr	r3, [pc, #292]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 800138e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001392:	4a48      	ldr	r2, [pc, #288]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 8001394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001398:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800139c:	4b45      	ldr	r3, [pc, #276]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 800139e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	4b42      	ldr	r3, [pc, #264]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	4a40      	ldr	r2, [pc, #256]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ba:	4b3e      	ldr	r3, [pc, #248]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ce:	4a39      	ldr	r2, [pc, #228]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ec:	4a31      	ldr	r2, [pc, #196]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f6:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140a:	4a2a      	ldr	r2, [pc, #168]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 800140c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001410:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001414:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <HAL_ETH_MspInit+0x188>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001422:	2332      	movs	r3, #50	; 0x32
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001432:	230b      	movs	r3, #11
 8001434:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143a:	4619      	mov	r1, r3
 800143c:	481e      	ldr	r0, [pc, #120]	; (80014b8 <HAL_ETH_MspInit+0x18c>)
 800143e:	f001 f8af 	bl	80025a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001442:	2386      	movs	r3, #134	; 0x86
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001452:	230b      	movs	r3, #11
 8001454:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	4619      	mov	r1, r3
 800145c:	4817      	ldr	r0, [pc, #92]	; (80014bc <HAL_ETH_MspInit+0x190>)
 800145e:	f001 f89f 	bl	80025a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001474:	230b      	movs	r3, #11
 8001476:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	4810      	ldr	r0, [pc, #64]	; (80014c0 <HAL_ETH_MspInit+0x194>)
 8001480:	f001 f88e 	bl	80025a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001484:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001496:	230b      	movs	r3, #11
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	4808      	ldr	r0, [pc, #32]	; (80014c4 <HAL_ETH_MspInit+0x198>)
 80014a2:	f001 f87d 	bl	80025a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80014a6:	bf00      	nop
 80014a8:	3738      	adds	r7, #56	; 0x38
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40028000 	.word	0x40028000
 80014b4:	58024400 	.word	0x58024400
 80014b8:	58020800 	.word	0x58020800
 80014bc:	58020000 	.word	0x58020000
 80014c0:	58020400 	.word	0x58020400
 80014c4:	58021800 	.word	0x58021800

080014c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <HAL_I2C_MspInit+0x88>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12d      	bne.n	8001546 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_I2C_MspInit+0x8c>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f0:	4a18      	ldr	r2, [pc, #96]	; (8001554 <HAL_I2C_MspInit+0x8c>)
 80014f2:	f043 0302 	orr.w	r3, r3, #2
 80014f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_I2C_MspInit+0x8c>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001508:	23c0      	movs	r3, #192	; 0xc0
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150c:	2312      	movs	r3, #18
 800150e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001518:	2304      	movs	r3, #4
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	480d      	ldr	r0, [pc, #52]	; (8001558 <HAL_I2C_MspInit+0x90>)
 8001524:	f001 f83c 	bl	80025a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_I2C_MspInit+0x8c>)
 800152a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800152e:	4a09      	ldr	r2, [pc, #36]	; (8001554 <HAL_I2C_MspInit+0x8c>)
 8001530:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001534:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_I2C_MspInit+0x8c>)
 800153a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800153e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40005400 	.word	0x40005400
 8001554:	58024400 	.word	0x58024400
 8001558:	58020400 	.word	0x58020400

0800155c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1a      	ldr	r2, [pc, #104]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d12d      	bne.n	80015da <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_SPI_MspInit+0x8c>)
 8001580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001584:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <HAL_SPI_MspInit+0x8c>)
 8001586:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800158a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_SPI_MspInit+0x8c>)
 8001590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001594:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_SPI_MspInit+0x8c>)
 800159e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a2:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <HAL_SPI_MspInit+0x8c>)
 80015a4:	f043 0310 	orr.w	r3, r3, #16
 80015a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_SPI_MspInit+0x8c>)
 80015ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80015ba:	2364      	movs	r3, #100	; 0x64
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80015ca:	2305      	movs	r3, #5
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <HAL_SPI_MspInit+0x90>)
 80015d6:	f000 ffe3 	bl	80025a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	; 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40013400 	.word	0x40013400
 80015e8:	58024400 	.word	0x58024400
 80015ec:	58021000 	.word	0x58021000

080015f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08e      	sub	sp, #56	; 0x38
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a4e      	ldr	r2, [pc, #312]	; (8001748 <HAL_UART_MspInit+0x158>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d12e      	bne.n	8001670 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001612:	4b4e      	ldr	r3, [pc, #312]	; (800174c <HAL_UART_MspInit+0x15c>)
 8001614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001618:	4a4c      	ldr	r2, [pc, #304]	; (800174c <HAL_UART_MspInit+0x15c>)
 800161a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800161e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001622:	4b4a      	ldr	r3, [pc, #296]	; (800174c <HAL_UART_MspInit+0x15c>)
 8001624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001628:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800162c:	623b      	str	r3, [r7, #32]
 800162e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001630:	4b46      	ldr	r3, [pc, #280]	; (800174c <HAL_UART_MspInit+0x15c>)
 8001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001636:	4a45      	ldr	r2, [pc, #276]	; (800174c <HAL_UART_MspInit+0x15c>)
 8001638:	f043 0320 	orr.w	r3, r3, #32
 800163c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001640:	4b42      	ldr	r3, [pc, #264]	; (800174c <HAL_UART_MspInit+0x15c>)
 8001642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001646:	f003 0320 	and.w	r3, r3, #32
 800164a:	61fb      	str	r3, [r7, #28]
 800164c:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001652:	2312      	movs	r3, #18
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800165e:	2307      	movs	r3, #7
 8001660:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001666:	4619      	mov	r1, r3
 8001668:	4839      	ldr	r0, [pc, #228]	; (8001750 <HAL_UART_MspInit+0x160>)
 800166a:	f000 ff99 	bl	80025a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800166e:	e067      	b.n	8001740 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART2)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a37      	ldr	r2, [pc, #220]	; (8001754 <HAL_UART_MspInit+0x164>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d12e      	bne.n	80016d8 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800167a:	4b34      	ldr	r3, [pc, #208]	; (800174c <HAL_UART_MspInit+0x15c>)
 800167c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001680:	4a32      	ldr	r2, [pc, #200]	; (800174c <HAL_UART_MspInit+0x15c>)
 8001682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001686:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800168a:	4b30      	ldr	r3, [pc, #192]	; (800174c <HAL_UART_MspInit+0x15c>)
 800168c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001698:	4b2c      	ldr	r3, [pc, #176]	; (800174c <HAL_UART_MspInit+0x15c>)
 800169a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169e:	4a2b      	ldr	r2, [pc, #172]	; (800174c <HAL_UART_MspInit+0x15c>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a8:	4b28      	ldr	r3, [pc, #160]	; (800174c <HAL_UART_MspInit+0x15c>)
 80016aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016b6:	2320      	movs	r3, #32
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ba:	2312      	movs	r3, #18
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016c6:	2307      	movs	r3, #7
 80016c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	4619      	mov	r1, r3
 80016d0:	4821      	ldr	r0, [pc, #132]	; (8001758 <HAL_UART_MspInit+0x168>)
 80016d2:	f000 ff65 	bl	80025a0 <HAL_GPIO_Init>
}
 80016d6:	e033      	b.n	8001740 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART3)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1f      	ldr	r2, [pc, #124]	; (800175c <HAL_UART_MspInit+0x16c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d12e      	bne.n	8001740 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <HAL_UART_MspInit+0x15c>)
 80016e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016e8:	4a18      	ldr	r2, [pc, #96]	; (800174c <HAL_UART_MspInit+0x15c>)
 80016ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <HAL_UART_MspInit+0x15c>)
 80016f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_UART_MspInit+0x15c>)
 8001702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001706:	4a11      	ldr	r2, [pc, #68]	; (800174c <HAL_UART_MspInit+0x15c>)
 8001708:	f043 0308 	orr.w	r3, r3, #8
 800170c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_UART_MspInit+0x15c>)
 8001712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800171e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001730:	2307      	movs	r3, #7
 8001732:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001738:	4619      	mov	r1, r3
 800173a:	4807      	ldr	r0, [pc, #28]	; (8001758 <HAL_UART_MspInit+0x168>)
 800173c:	f000 ff30 	bl	80025a0 <HAL_GPIO_Init>
}
 8001740:	bf00      	nop
 8001742:	3738      	adds	r7, #56	; 0x38
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40007800 	.word	0x40007800
 800174c:	58024400 	.word	0x58024400
 8001750:	58021400 	.word	0x58021400
 8001754:	40004400 	.word	0x40004400
 8001758:	58020c00 	.word	0x58020c00
 800175c:	40004800 	.word	0x40004800

08001760 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a21      	ldr	r2, [pc, #132]	; (8001804 <HAL_PCD_MspInit+0xa4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d13b      	bne.n	80017fa <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <HAL_PCD_MspInit+0xa8>)
 8001784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001788:	4a1f      	ldr	r2, [pc, #124]	; (8001808 <HAL_PCD_MspInit+0xa8>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001792:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <HAL_PCD_MspInit+0xa8>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80017a0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80017a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80017b2:	230a      	movs	r3, #10
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	4813      	ldr	r0, [pc, #76]	; (800180c <HAL_PCD_MspInit+0xac>)
 80017be:	f000 feef 	bl	80025a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	480d      	ldr	r0, [pc, #52]	; (800180c <HAL_PCD_MspInit+0xac>)
 80017d8:	f000 fee2 	bl	80025a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_PCD_MspInit+0xa8>)
 80017de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <HAL_PCD_MspInit+0xa8>)
 80017e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_PCD_MspInit+0xa8>)
 80017ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40080000 	.word	0x40080000
 8001808:	58024400 	.word	0x58024400
 800180c:	58020000 	.word	0x58020000

08001810 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08e      	sub	sp, #56	; 0x38
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	2036      	movs	r0, #54	; 0x36
 8001826:	f000 fa7d 	bl	8001d24 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800182a:	2036      	movs	r0, #54	; 0x36
 800182c:	f000 fa94 	bl	8001d58 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001830:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <HAL_InitTick+0xa4>)
 8001832:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001836:	4a1f      	ldr	r2, [pc, #124]	; (80018b4 <HAL_InitTick+0xa4>)
 8001838:	f043 0310 	orr.w	r3, r3, #16
 800183c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001840:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <HAL_InitTick+0xa4>)
 8001842:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800184e:	f107 020c 	add.w	r2, r7, #12
 8001852:	f107 0310 	add.w	r3, r7, #16
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f002 fd23 	bl	80042a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800185e:	f002 fcf5 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8001862:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001866:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <HAL_InitTick+0xa8>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	0c9b      	lsrs	r3, r3, #18
 800186e:	3b01      	subs	r3, #1
 8001870:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_InitTick+0xac>)
 8001874:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <HAL_InitTick+0xb0>)
 8001876:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001878:	4b10      	ldr	r3, [pc, #64]	; (80018bc <HAL_InitTick+0xac>)
 800187a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800187e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001880:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <HAL_InitTick+0xac>)
 8001882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001884:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_InitTick+0xac>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_InitTick+0xac>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001892:	480a      	ldr	r0, [pc, #40]	; (80018bc <HAL_InitTick+0xac>)
 8001894:	f005 f8f9 	bl	8006a8a <HAL_TIM_Base_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d104      	bne.n	80018a8 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800189e:	4807      	ldr	r0, [pc, #28]	; (80018bc <HAL_InitTick+0xac>)
 80018a0:	f005 f954 	bl	8006b4c <HAL_TIM_Base_Start_IT>
 80018a4:	4603      	mov	r3, r0
 80018a6:	e000      	b.n	80018aa <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3738      	adds	r7, #56	; 0x38
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	58024400 	.word	0x58024400
 80018b8:	431bde83 	.word	0x431bde83
 80018bc:	2400512c 	.word	0x2400512c
 80018c0:	40001000 	.word	0x40001000

080018c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <HardFault_Handler+0x4>

080018d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <MemManage_Handler+0x4>

080018de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <BusFault_Handler+0x4>

080018e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <UsageFault_Handler+0x4>

080018ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <TIM6_DAC_IRQHandler+0x10>)
 80018fe:	f005 f95b 	bl	8006bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2400512c 	.word	0x2400512c

0800190c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001910:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <SystemInit+0xec>)
 8001912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001916:	4a38      	ldr	r2, [pc, #224]	; (80019f8 <SystemInit+0xec>)
 8001918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800191c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001920:	4b36      	ldr	r3, [pc, #216]	; (80019fc <SystemInit+0xf0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	2b06      	cmp	r3, #6
 800192a:	d807      	bhi.n	800193c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800192c:	4b33      	ldr	r3, [pc, #204]	; (80019fc <SystemInit+0xf0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 030f 	bic.w	r3, r3, #15
 8001934:	4a31      	ldr	r2, [pc, #196]	; (80019fc <SystemInit+0xf0>)
 8001936:	f043 0307 	orr.w	r3, r3, #7
 800193a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800193c:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <SystemInit+0xf4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a2f      	ldr	r2, [pc, #188]	; (8001a00 <SystemInit+0xf4>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001948:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <SystemInit+0xf4>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800194e:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <SystemInit+0xf4>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	492b      	ldr	r1, [pc, #172]	; (8001a00 <SystemInit+0xf4>)
 8001954:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <SystemInit+0xf8>)
 8001956:	4013      	ands	r3, r2
 8001958:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800195a:	4b28      	ldr	r3, [pc, #160]	; (80019fc <SystemInit+0xf0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	2b07      	cmp	r3, #7
 8001964:	d907      	bls.n	8001976 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001966:	4b25      	ldr	r3, [pc, #148]	; (80019fc <SystemInit+0xf0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 030f 	bic.w	r3, r3, #15
 800196e:	4a23      	ldr	r2, [pc, #140]	; (80019fc <SystemInit+0xf0>)
 8001970:	f043 0307 	orr.w	r3, r3, #7
 8001974:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <SystemInit+0xf4>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <SystemInit+0xf4>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001982:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <SystemInit+0xf4>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <SystemInit+0xf4>)
 800198a:	4a1f      	ldr	r2, [pc, #124]	; (8001a08 <SystemInit+0xfc>)
 800198c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <SystemInit+0xf4>)
 8001990:	4a1e      	ldr	r2, [pc, #120]	; (8001a0c <SystemInit+0x100>)
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <SystemInit+0xf4>)
 8001996:	4a1e      	ldr	r2, [pc, #120]	; (8001a10 <SystemInit+0x104>)
 8001998:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <SystemInit+0xf4>)
 800199c:	2200      	movs	r2, #0
 800199e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <SystemInit+0xf4>)
 80019a2:	4a1b      	ldr	r2, [pc, #108]	; (8001a10 <SystemInit+0x104>)
 80019a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019a6:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <SystemInit+0xf4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <SystemInit+0xf4>)
 80019ae:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <SystemInit+0x104>)
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <SystemInit+0xf4>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <SystemInit+0xf4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <SystemInit+0xf4>)
 80019be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019c4:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <SystemInit+0xf4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <SystemInit+0x108>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <SystemInit+0x10c>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019d6:	d202      	bcs.n	80019de <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80019d8:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <SystemInit+0x110>)
 80019da:	2201      	movs	r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <SystemInit+0x114>)
 80019e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80019e4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019e6:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <SystemInit+0xec>)
 80019e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ec:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00
 80019fc:	52002000 	.word	0x52002000
 8001a00:	58024400 	.word	0x58024400
 8001a04:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a08:	02020200 	.word	0x02020200
 8001a0c:	01ff0000 	.word	0x01ff0000
 8001a10:	01010280 	.word	0x01010280
 8001a14:	5c001000 	.word	0x5c001000
 8001a18:	ffff0000 	.word	0xffff0000
 8001a1c:	51008108 	.word	0x51008108
 8001a20:	52004000 	.word	0x52004000

08001a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a5c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a28:	f7ff ff70 	bl	800190c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a2e:	e003      	b.n	8001a38 <LoopCopyDataInit>

08001a30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001a32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a36:	3104      	adds	r1, #4

08001a38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a38:	480a      	ldr	r0, [pc, #40]	; (8001a64 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001a3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a40:	d3f6      	bcc.n	8001a30 <CopyDataInit>
  ldr  r2, =_sbss
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001a44:	e002      	b.n	8001a4c <LoopFillZerobss>

08001a46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a48:	f842 3b04 	str.w	r3, [r2], #4

08001a4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001a4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a50:	d3f9      	bcc.n	8001a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a52:	f009 fc53 	bl	800b2fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a56:	f7fe fdc3 	bl	80005e0 <main>
  bx  lr    
 8001a5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a5c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001a60:	0800c604 	.word	0x0800c604
  ldr  r0, =_sdata
 8001a64:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001a68:	24000014 	.word	0x24000014
  ldr  r2, =_sbss
 8001a6c:	240000d4 	.word	0x240000d4
  ldr  r3, = _ebss
 8001a70:	240051bc 	.word	0x240051bc

08001a74 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a74:	e7fe      	b.n	8001a74 <ADC3_IRQHandler>
	...

08001a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a7e:	2003      	movs	r0, #3
 8001a80:	f000 f945 	bl	8001d0e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a84:	f002 fa40 	bl	8003f08 <HAL_RCC_GetSysClockFreq>
 8001a88:	4601      	mov	r1, r0
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_Init+0x68>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	4a13      	ldr	r2, [pc, #76]	; (8001ae4 <HAL_Init+0x6c>)
 8001a96:	5cd3      	ldrb	r3, [r2, r3]
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	fa21 f303 	lsr.w	r3, r1, r3
 8001aa0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <HAL_Init+0x68>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <HAL_Init+0x6c>)
 8001aac:	5cd3      	ldrb	r3, [r2, r3]
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <HAL_Init+0x70>)
 8001aba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001abc:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <HAL_Init+0x74>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f7ff fea4 	bl	8001810 <HAL_InitTick>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e002      	b.n	8001ad8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad2:	f7ff fc11 	bl	80012f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	58024400 	.word	0x58024400
 8001ae4:	0800c5cc 	.word	0x0800c5cc
 8001ae8:	24000004 	.word	0x24000004
 8001aec:	24000000 	.word	0x24000000

08001af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_IncTick+0x20>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_IncTick+0x24>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <HAL_IncTick+0x24>)
 8001b02:	6013      	str	r3, [r2, #0]
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	2400000c 	.word	0x2400000c
 8001b14:	24005178 	.word	0x24005178

08001b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_GetTick+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	24005178 	.word	0x24005178

08001b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b38:	f7ff ffee 	bl	8001b18 <HAL_GetTick>
 8001b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b48:	d005      	beq.n	8001b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_Delay+0x40>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b56:	bf00      	nop
 8001b58:	f7ff ffde 	bl	8001b18 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d8f7      	bhi.n	8001b58 <HAL_Delay+0x28>
  {
  }
}
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	2400000c 	.word	0x2400000c

08001b74 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_GetREVID+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0c1b      	lsrs	r3, r3, #16
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	5c001000 	.word	0x5c001000

08001b8c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001b9c:	4904      	ldr	r1, [pc, #16]	; (8001bb0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	58000400 	.word	0x58000400

08001bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x40>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x40>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00
 8001bf8:	05fa0000 	.word	0x05fa0000

08001bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <__NVIC_GetPriorityGrouping+0x18>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	f003 0307 	and.w	r3, r3, #7
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db0b      	blt.n	8001c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	4907      	ldr	r1, [pc, #28]	; (8001c50 <__NVIC_EnableIRQ+0x38>)
 8001c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	2001      	movs	r0, #1
 8001c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000e100 	.word	0xe000e100

08001c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	db0a      	blt.n	8001c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	490c      	ldr	r1, [pc, #48]	; (8001ca0 <__NVIC_SetPriority+0x4c>)
 8001c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c7c:	e00a      	b.n	8001c94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4908      	ldr	r1, [pc, #32]	; (8001ca4 <__NVIC_SetPriority+0x50>)
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	3b04      	subs	r3, #4
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	440b      	add	r3, r1
 8001c92:	761a      	strb	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000e100 	.word	0xe000e100
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f1c3 0307 	rsb	r3, r3, #7
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	bf28      	it	cs
 8001cc6:	2304      	movcs	r3, #4
 8001cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d902      	bls.n	8001cd8 <NVIC_EncodePriority+0x30>
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3b03      	subs	r3, #3
 8001cd6:	e000      	b.n	8001cda <NVIC_EncodePriority+0x32>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	401a      	ands	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	4313      	orrs	r3, r2
         );
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ff4c 	bl	8001bb4 <__NVIC_SetPriorityGrouping>
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d32:	f7ff ff63 	bl	8001bfc <__NVIC_GetPriorityGrouping>
 8001d36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	68b9      	ldr	r1, [r7, #8]
 8001d3c:	6978      	ldr	r0, [r7, #20]
 8001d3e:	f7ff ffb3 	bl	8001ca8 <NVIC_EncodePriority>
 8001d42:	4602      	mov	r2, r0
 8001d44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff82 	bl	8001c54 <__NVIC_SetPriority>
}
 8001d50:	bf00      	nop
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff56 	bl	8001c18 <__NVIC_EnableIRQ>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0c6      	b.n	8001f14 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d102      	bne.n	8001d94 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff facc 	bl	800132c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2223      	movs	r2, #35	; 0x23
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9a:	4b60      	ldr	r3, [pc, #384]	; (8001f1c <HAL_ETH_Init+0x1a8>)
 8001d9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001da0:	4a5e      	ldr	r2, [pc, #376]	; (8001f1c <HAL_ETH_Init+0x1a8>)
 8001da2:	f043 0302 	orr.w	r3, r3, #2
 8001da6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001daa:	4b5c      	ldr	r3, [pc, #368]	; (8001f1c <HAL_ETH_Init+0x1a8>)
 8001dac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7a1b      	ldrb	r3, [r3, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d103      	bne.n	8001dc8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7ff fee3 	bl	8001b8c <HAL_SYSCFG_ETHInterfaceSelect>
 8001dc6:	e003      	b.n	8001dd0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001dc8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001dcc:	f7ff fede 	bl	8001b8c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001de8:	f7ff fe96 	bl	8001b18 <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001dee:	e00f      	b.n	8001e10 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001df0:	f7ff fe92 	bl	8001b18 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001dfe:	d907      	bls.n	8001e10 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2204      	movs	r2, #4
 8001e04:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	22e0      	movs	r2, #224	; 0xe0
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e081      	b.n	8001f14 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1e6      	bne.n	8001df0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fac0 	bl	80023a8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001e28:	f002 f9e0 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4b3c      	ldr	r3, [pc, #240]	; (8001f20 <HAL_ETH_Init+0x1ac>)
 8001e30:	fba3 2302 	umull	r2, r3, r3, r2
 8001e34:	0c9a      	lsrs	r2, r3, #18
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3a01      	subs	r2, #1
 8001e3c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 fa13 	bl	800226c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001e5c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e60:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d007      	beq.n	8001e7e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	22e0      	movs	r2, #224	; 0xe0
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e04a      	b.n	8001f14 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e86:	4413      	add	r3, r2
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <HAL_ETH_Init+0x1b0>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6952      	ldr	r2, [r2, #20]
 8001e92:	0052      	lsls	r2, r2, #1
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	6809      	ldr	r1, [r1, #0]
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e9e:	440b      	add	r3, r1
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fad8 	bl	8002458 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fb1c 	bl	80024e6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	3305      	adds	r3, #5
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	021a      	lsls	r2, r3, #8
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	3303      	adds	r3, #3
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	061a      	lsls	r2, r3, #24
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	3302      	adds	r3, #2
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	041b      	lsls	r3, r3, #16
 8001ee0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001eec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001efa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001efc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2210      	movs	r2, #16
 8001f0a:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2210      	movs	r2, #16
 8001f10:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	58024400 	.word	0x58024400
 8001f20:	431bde83 	.word	0x431bde83
 8001f24:	ffff8001 	.word	0xffff8001

08001f28 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001f3a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	791b      	ldrb	r3, [r3, #4]
 8001f40:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001f42:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	7b1b      	ldrb	r3, [r3, #12]
 8001f48:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001f4a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	7b5b      	ldrb	r3, [r3, #13]
 8001f50:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001f52:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	7b9b      	ldrb	r3, [r3, #14]
 8001f58:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001f5a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	7bdb      	ldrb	r3, [r3, #15]
 8001f60:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001f62:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	7c12      	ldrb	r2, [r2, #16]
 8001f68:	2a00      	cmp	r2, #0
 8001f6a:	d102      	bne.n	8001f72 <ETH_SetMACConfig+0x4a>
 8001f6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f70:	e000      	b.n	8001f74 <ETH_SetMACConfig+0x4c>
 8001f72:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001f74:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	7c52      	ldrb	r2, [r2, #17]
 8001f7a:	2a00      	cmp	r2, #0
 8001f7c:	d102      	bne.n	8001f84 <ETH_SetMACConfig+0x5c>
 8001f7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f82:	e000      	b.n	8001f86 <ETH_SetMACConfig+0x5e>
 8001f84:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001f86:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	7c9b      	ldrb	r3, [r3, #18]
 8001f8c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001f8e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001f94:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001f9a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	7f1b      	ldrb	r3, [r3, #28]
 8001fa0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001fa2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	7f5b      	ldrb	r3, [r3, #29]
 8001fa8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001faa:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	7f92      	ldrb	r2, [r2, #30]
 8001fb0:	2a00      	cmp	r2, #0
 8001fb2:	d102      	bne.n	8001fba <ETH_SetMACConfig+0x92>
 8001fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fb8:	e000      	b.n	8001fbc <ETH_SetMACConfig+0x94>
 8001fba:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001fbc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	7fdb      	ldrb	r3, [r3, #31]
 8001fc2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001fc4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001fcc:	2a00      	cmp	r2, #0
 8001fce:	d102      	bne.n	8001fd6 <ETH_SetMACConfig+0xae>
 8001fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fd4:	e000      	b.n	8001fd8 <ETH_SetMACConfig+0xb0>
 8001fd6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001fd8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001fde:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fe6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001fe8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b56      	ldr	r3, [pc, #344]	; (8002154 <ETH_SetMACConfig+0x22c>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	68f9      	ldr	r1, [r7, #12]
 8002002:	430b      	orrs	r3, r1
 8002004:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002012:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002014:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800201c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800201e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002026:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002028:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002030:	2a00      	cmp	r2, #0
 8002032:	d102      	bne.n	800203a <ETH_SetMACConfig+0x112>
 8002034:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002038:	e000      	b.n	800203c <ETH_SetMACConfig+0x114>
 800203a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800203c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002042:	4313      	orrs	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4b42      	ldr	r3, [pc, #264]	; (8002158 <ETH_SetMACConfig+0x230>)
 800204e:	4013      	ands	r3, r2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	68f9      	ldr	r1, [r7, #12]
 8002056:	430b      	orrs	r3, r1
 8002058:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002060:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	4b3a      	ldr	r3, [pc, #232]	; (800215c <ETH_SetMACConfig+0x234>)
 8002072:	4013      	ands	r3, r2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	68f9      	ldr	r1, [r7, #12]
 800207a:	430b      	orrs	r3, r1
 800207c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002084:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800208a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002092:	2a00      	cmp	r2, #0
 8002094:	d101      	bne.n	800209a <ETH_SetMACConfig+0x172>
 8002096:	2280      	movs	r2, #128	; 0x80
 8002098:	e000      	b.n	800209c <ETH_SetMACConfig+0x174>
 800209a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800209c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020ae:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80020b2:	4013      	ands	r3, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	68f9      	ldr	r1, [r7, #12]
 80020ba:	430b      	orrs	r3, r1
 80020bc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80020c4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80020cc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020da:	f023 0103 	bic.w	r1, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80020f2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800210e:	2a00      	cmp	r2, #0
 8002110:	d101      	bne.n	8002116 <ETH_SetMACConfig+0x1ee>
 8002112:	2240      	movs	r2, #64	; 0x40
 8002114:	e000      	b.n	8002118 <ETH_SetMACConfig+0x1f0>
 8002116:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002118:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002120:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002122:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800212a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800212c:	4313      	orrs	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002138:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	430a      	orrs	r2, r1
 8002144:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	00048083 	.word	0x00048083
 8002158:	c0f88000 	.word	0xc0f88000
 800215c:	fffffef0 	.word	0xfffffef0

08002160 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b38      	ldr	r3, [pc, #224]	; (8002258 <ETH_SetDMAConfig+0xf8>)
 8002176:	4013      	ands	r3, r2
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	6809      	ldr	r1, [r1, #0]
 8002180:	431a      	orrs	r2, r3
 8002182:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002186:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	791b      	ldrb	r3, [r3, #4]
 800218c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002192:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	7b1b      	ldrb	r3, [r3, #12]
 8002198:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	f241 0304 	movw	r3, #4100	; 0x1004
 80021a6:	4413      	add	r3, r2
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4b2c      	ldr	r3, [pc, #176]	; (800225c <ETH_SetDMAConfig+0xfc>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6811      	ldr	r1, [r2, #0]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	f241 0304 	movw	r3, #4100	; 0x1004
 80021ba:	440b      	add	r3, r1
 80021bc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	7b5b      	ldrb	r3, [r3, #13]
 80021c2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b22      	ldr	r3, [pc, #136]	; (8002260 <ETH_SetDMAConfig+0x100>)
 80021d8:	4013      	ands	r3, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6811      	ldr	r1, [r2, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80021e6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	7d1b      	ldrb	r3, [r3, #20]
 80021f0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80021f2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	7f5b      	ldrb	r3, [r3, #29]
 80021f8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	f241 1304 	movw	r3, #4356	; 0x1104
 8002206:	4413      	add	r3, r2
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4b16      	ldr	r3, [pc, #88]	; (8002264 <ETH_SetDMAConfig+0x104>)
 800220c:	4013      	ands	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6811      	ldr	r1, [r2, #0]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	431a      	orrs	r2, r3
 8002216:	f241 1304 	movw	r3, #4356	; 0x1104
 800221a:	440b      	add	r3, r1
 800221c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	7f1b      	ldrb	r3, [r3, #28]
 8002222:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002228:	4313      	orrs	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	f241 1308 	movw	r3, #4360	; 0x1108
 8002234:	4413      	add	r3, r2
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <ETH_SetDMAConfig+0x108>)
 800223a:	4013      	ands	r3, r2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6811      	ldr	r1, [r2, #0]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	431a      	orrs	r2, r3
 8002244:	f241 1308 	movw	r3, #4360	; 0x1108
 8002248:	440b      	add	r3, r1
 800224a:	601a      	str	r2, [r3, #0]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	ffff87fd 	.word	0xffff87fd
 800225c:	ffff2ffe 	.word	0xffff2ffe
 8002260:	fffec000 	.word	0xfffec000
 8002264:	ffc0efef 	.word	0xffc0efef
 8002268:	7fc0ffff 	.word	0x7fc0ffff

0800226c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b0a4      	sub	sp, #144	; 0x90
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002274:	2301      	movs	r3, #1
 8002276:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800227a:	2300      	movs	r3, #0
 800227c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800228a:	2301      	movs	r3, #1
 800228c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002290:	2301      	movs	r3, #1
 8002292:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002296:	2301      	movs	r3, #1
 8002298:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80022a2:	2301      	movs	r3, #1
 80022a4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80022a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022ac:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80022be:	2300      	movs	r3, #0
 80022c0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80022c4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80022c8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80022d0:	2300      	movs	r3, #0
 80022d2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80022d4:	2301      	movs	r3, #1
 80022d6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80022e6:	2300      	movs	r3, #0
 80022e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80022ee:	2300      	movs	r3, #0
 80022f0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80022fe:	2301      	movs	r3, #1
 8002300:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002304:	2320      	movs	r3, #32
 8002306:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800230a:	2301      	movs	r3, #1
 800230c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002316:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800231c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002320:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002328:	2302      	movs	r3, #2
 800232a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800232e:	2300      	movs	r3, #0
 8002330:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800233a:	2300      	movs	r3, #0
 800233c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002340:	2301      	movs	r3, #1
 8002342:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002346:	2300      	movs	r3, #0
 8002348:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800234a:	2301      	movs	r3, #1
 800234c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002350:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002354:	4619      	mov	r1, r3
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff fde6 	bl	8001f28 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800235c:	2301      	movs	r3, #1
 800235e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002360:	2301      	movs	r3, #1
 8002362:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002364:	2300      	movs	r3, #0
 8002366:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002368:	2300      	movs	r3, #0
 800236a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002376:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800237a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002380:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002384:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800238c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002392:	f107 0308 	add.w	r3, r7, #8
 8002396:	4619      	mov	r1, r3
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff fee1 	bl	8002160 <ETH_SetDMAConfig>
}
 800239e:	bf00      	nop
 80023a0:	3790      	adds	r7, #144	; 0x90
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80023c2:	f001 ff13 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 80023c6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	4a1e      	ldr	r2, [pc, #120]	; (8002444 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d908      	bls.n	80023e2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4a1d      	ldr	r2, [pc, #116]	; (8002448 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d804      	bhi.n	80023e2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	e027      	b.n	8002432 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	4a18      	ldr	r2, [pc, #96]	; (8002448 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d908      	bls.n	80023fc <ETH_MAC_MDIO_ClkConfig+0x54>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	4a17      	ldr	r2, [pc, #92]	; (800244c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d804      	bhi.n	80023fc <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	e01a      	b.n	8002432 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4a13      	ldr	r2, [pc, #76]	; (800244c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d903      	bls.n	800240c <ETH_MAC_MDIO_ClkConfig+0x64>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4a12      	ldr	r2, [pc, #72]	; (8002450 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d911      	bls.n	8002430 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4a10      	ldr	r2, [pc, #64]	; (8002450 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d908      	bls.n	8002426 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d804      	bhi.n	8002426 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	e005      	b.n	8002432 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	e000      	b.n	8002432 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002430:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	01312cff 	.word	0x01312cff
 8002448:	02160ebf 	.word	0x02160ebf
 800244c:	039386ff 	.word	0x039386ff
 8002450:	05f5e0ff 	.word	0x05f5e0ff
 8002454:	08f0d17f 	.word	0x08f0d17f

08002458 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	e01d      	b.n	80024a2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68d9      	ldr	r1, [r3, #12]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4613      	mov	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	440b      	add	r3, r1
 8002476:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2200      	movs	r2, #0
 8002482:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2200      	movs	r2, #0
 800248e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	3206      	adds	r2, #6
 8002498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	3301      	adds	r3, #1
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d9de      	bls.n	8002466 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	f241 132c 	movw	r3, #4396	; 0x112c
 80024b6:	4413      	add	r3, r2
 80024b8:	2203      	movs	r2, #3
 80024ba:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68d9      	ldr	r1, [r3, #12]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	f241 1314 	movw	r3, #4372	; 0x1114
 80024c8:	4413      	add	r3, r2
 80024ca:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80024d8:	601a      	str	r2, [r3, #0]
}
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	e024      	b.n	800253e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6919      	ldr	r1, [r3, #16]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	440b      	add	r3, r1
 8002504:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2200      	movs	r2, #0
 8002510:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2200      	movs	r2, #0
 8002528:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	330a      	adds	r3, #10
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3301      	adds	r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d9d7      	bls.n	80024f4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	f241 1330 	movw	r3, #4400	; 0x1130
 800256a:	4413      	add	r3, r2
 800256c:	2203      	movs	r2, #3
 800256e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6919      	ldr	r1, [r3, #16]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	f241 131c 	movw	r3, #4380	; 0x111c
 800257c:	4413      	add	r3, r2
 800257e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	f241 1328 	movw	r3, #4392	; 0x1128
 8002590:	4413      	add	r3, r2
 8002592:	6019      	str	r1, [r3, #0]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b089      	sub	sp, #36	; 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80025ae:	4b89      	ldr	r3, [pc, #548]	; (80027d4 <HAL_GPIO_Init+0x234>)
 80025b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025b2:	e194      	b.n	80028de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	2101      	movs	r1, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8186 	beq.w	80028d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d00b      	beq.n	80025ec <HAL_GPIO_Init+0x4c>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d007      	beq.n	80025ec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025e0:	2b11      	cmp	r3, #17
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b12      	cmp	r3, #18
 80025ea:	d130      	bne.n	800264e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	2203      	movs	r2, #3
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002622:	2201      	movs	r2, #1
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	f003 0201 	and.w	r2, r3, #1
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	2203      	movs	r2, #3
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0xee>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b12      	cmp	r3, #18
 800268c:	d123      	bne.n	80026d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	08da      	lsrs	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3208      	adds	r2, #8
 8002696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	220f      	movs	r2, #15
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	08da      	lsrs	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3208      	adds	r2, #8
 80026d0:	69b9      	ldr	r1, [r7, #24]
 80026d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2203      	movs	r2, #3
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0203 	and.w	r2, r3, #3
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80e0 	beq.w	80028d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002718:	4b2f      	ldr	r3, [pc, #188]	; (80027d8 <HAL_GPIO_Init+0x238>)
 800271a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800271e:	4a2e      	ldr	r2, [pc, #184]	; (80027d8 <HAL_GPIO_Init+0x238>)
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002728:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <HAL_GPIO_Init+0x238>)
 800272a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002736:	4a29      	ldr	r2, [pc, #164]	; (80027dc <HAL_GPIO_Init+0x23c>)
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	3302      	adds	r3, #2
 800273e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	220f      	movs	r2, #15
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a20      	ldr	r2, [pc, #128]	; (80027e0 <HAL_GPIO_Init+0x240>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d052      	beq.n	8002808 <HAL_GPIO_Init+0x268>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a1f      	ldr	r2, [pc, #124]	; (80027e4 <HAL_GPIO_Init+0x244>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d031      	beq.n	80027ce <HAL_GPIO_Init+0x22e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a1e      	ldr	r2, [pc, #120]	; (80027e8 <HAL_GPIO_Init+0x248>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d02b      	beq.n	80027ca <HAL_GPIO_Init+0x22a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a1d      	ldr	r2, [pc, #116]	; (80027ec <HAL_GPIO_Init+0x24c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d025      	beq.n	80027c6 <HAL_GPIO_Init+0x226>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a1c      	ldr	r2, [pc, #112]	; (80027f0 <HAL_GPIO_Init+0x250>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d01f      	beq.n	80027c2 <HAL_GPIO_Init+0x222>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a1b      	ldr	r2, [pc, #108]	; (80027f4 <HAL_GPIO_Init+0x254>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d019      	beq.n	80027be <HAL_GPIO_Init+0x21e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a1a      	ldr	r2, [pc, #104]	; (80027f8 <HAL_GPIO_Init+0x258>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d013      	beq.n	80027ba <HAL_GPIO_Init+0x21a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a19      	ldr	r2, [pc, #100]	; (80027fc <HAL_GPIO_Init+0x25c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00d      	beq.n	80027b6 <HAL_GPIO_Init+0x216>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a18      	ldr	r2, [pc, #96]	; (8002800 <HAL_GPIO_Init+0x260>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d007      	beq.n	80027b2 <HAL_GPIO_Init+0x212>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a17      	ldr	r2, [pc, #92]	; (8002804 <HAL_GPIO_Init+0x264>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d101      	bne.n	80027ae <HAL_GPIO_Init+0x20e>
 80027aa:	2309      	movs	r3, #9
 80027ac:	e02d      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027ae:	230a      	movs	r3, #10
 80027b0:	e02b      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027b2:	2308      	movs	r3, #8
 80027b4:	e029      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027b6:	2307      	movs	r3, #7
 80027b8:	e027      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027ba:	2306      	movs	r3, #6
 80027bc:	e025      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027be:	2305      	movs	r3, #5
 80027c0:	e023      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027c2:	2304      	movs	r3, #4
 80027c4:	e021      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027c6:	2303      	movs	r3, #3
 80027c8:	e01f      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e01d      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e01b      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027d2:	bf00      	nop
 80027d4:	58000080 	.word	0x58000080
 80027d8:	58024400 	.word	0x58024400
 80027dc:	58000400 	.word	0x58000400
 80027e0:	58020000 	.word	0x58020000
 80027e4:	58020400 	.word	0x58020400
 80027e8:	58020800 	.word	0x58020800
 80027ec:	58020c00 	.word	0x58020c00
 80027f0:	58021000 	.word	0x58021000
 80027f4:	58021400 	.word	0x58021400
 80027f8:	58021800 	.word	0x58021800
 80027fc:	58021c00 	.word	0x58021c00
 8002800:	58022000 	.word	0x58022000
 8002804:	58022400 	.word	0x58022400
 8002808:	2300      	movs	r3, #0
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	f002 0203 	and.w	r2, r2, #3
 8002810:	0092      	lsls	r2, r2, #2
 8002812:	4093      	lsls	r3, r2
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800281a:	4938      	ldr	r1, [pc, #224]	; (80028fc <HAL_GPIO_Init+0x35c>)
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	3302      	adds	r3, #2
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800287c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80028d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	3301      	adds	r3, #1
 80028dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f47f ae63 	bne.w	80025b4 <HAL_GPIO_Init+0x14>
  }
}
 80028ee:	bf00      	nop
 80028f0:	3724      	adds	r7, #36	; 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	58000400 	.word	0x58000400

08002900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]
 800290c:	4613      	mov	r3, r2
 800290e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002910:	787b      	ldrb	r3, [r7, #1]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800291c:	e003      	b.n	8002926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800291e:	887b      	ldrh	r3, [r7, #2]
 8002920:	041a      	lsls	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	619a      	str	r2, [r3, #24]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	460b      	mov	r3, r1
 800293c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	887b      	ldrh	r3, [r7, #2]
 8002944:	401a      	ands	r2, r3
 8002946:	887b      	ldrh	r3, [r7, #2]
 8002948:	429a      	cmp	r2, r3
 800294a:	d104      	bne.n	8002956 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800294c:	887b      	ldrh	r3, [r7, #2]
 800294e:	041a      	lsls	r2, r3, #16
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002954:	e002      	b.n	800295c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002956:	887a      	ldrh	r2, [r7, #2]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	619a      	str	r2, [r3, #24]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e07f      	b.n	8002a7a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe fd9a 	bl	80014c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2224      	movs	r2, #36	; 0x24
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d107      	bne.n	80029e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	e006      	b.n	80029f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d104      	bne.n	8002a02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_I2C_Init+0x11c>)
 8002a0e:	430b      	orrs	r3, r1
 8002a10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	ea42 0103 	orr.w	r1, r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	021a      	lsls	r2, r3, #8
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69d9      	ldr	r1, [r3, #28]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1a      	ldr	r2, [r3, #32]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	02008000 	.word	0x02008000

08002a88 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	f040 80f5 	bne.w	8002c90 <HAL_I2C_Slave_Transmit+0x208>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_I2C_Slave_Transmit+0x2a>
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0e9      	b.n	8002c92 <HAL_I2C_Slave_Transmit+0x20a>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_I2C_Slave_Transmit+0x44>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e0e2      	b.n	8002c92 <HAL_I2C_Slave_Transmit+0x20a>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ad4:	f7ff f820 	bl	8001b18 <HAL_GetTick>
 8002ad8:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2221      	movs	r2, #33	; 0x21
 8002ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	88fa      	ldrh	r2, [r7, #6]
 8002afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b10:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2108      	movs	r1, #8
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f8e0 	bl	8002ce2 <I2C_WaitOnFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d009      	beq.n	8002b3c <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b36:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0aa      	b.n	8002c92 <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2208      	movs	r2, #8
 8002b42:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d118      	bne.n	8002b7e <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2200      	movs	r2, #0
 8002b54:	2108      	movs	r1, #8
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f8c3 	bl	8002ce2 <I2C_WaitOnFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b70:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e08d      	b.n	8002c92 <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f8a9 	bl	8002ce2 <I2C_WaitOnFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d02d      	beq.n	8002bf2 <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ba4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e073      	b.n	8002c92 <HAL_I2C_Slave_Transmit+0x20a>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	6839      	ldr	r1, [r7, #0]
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 f8d7 	bl	8002d62 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bc8:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e061      	b.n	8002c92 <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	781a      	ldrb	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1d6      	bne.n	8002baa <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	6839      	ldr	r1, [r7, #0]
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 f8ee 	bl	8002de2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d011      	beq.n	8002c30 <HAL_I2C_Slave_Transmit+0x1a8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c1a:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d103      	bne.n	8002c2c <HAL_I2C_Slave_Transmit+0x1a4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
 8002c2a:	e001      	b.n	8002c30 <HAL_I2C_Slave_Transmit+0x1a8>
      }
      else
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e030      	b.n	8002c92 <HAL_I2C_Slave_Transmit+0x20a>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2220      	movs	r2, #32
 8002c36:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 f84c 	bl	8002ce2 <I2C_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d009      	beq.n	8002c64 <HAL_I2C_Slave_Transmit+0x1dc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c5e:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e016      	b.n	8002c92 <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c72:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e000      	b.n	8002c92 <HAL_I2C_Slave_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002c90:	2302      	movs	r3, #2
  }
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d103      	bne.n	8002cb8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d007      	beq.n	8002cd6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699a      	ldr	r2, [r3, #24]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	619a      	str	r2, [r3, #24]
  }
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cf2:	e022      	b.n	8002d3a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfa:	d01e      	beq.n	8002d3a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfc:	f7fe ff0c 	bl	8001b18 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d302      	bcc.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d113      	bne.n	8002d3a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f043 0220 	orr.w	r2, r3, #32
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e00f      	b.n	8002d5a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4013      	ands	r3, r2
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	bf0c      	ite	eq
 8002d4a:	2301      	moveq	r3, #1
 8002d4c:	2300      	movne	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d0cd      	beq.n	8002cf4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d6e:	e02c      	b.n	8002dca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f871 	bl	8002e5c <I2C_IsAcknowledgeFailed>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e02a      	b.n	8002dda <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d01e      	beq.n	8002dca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8c:	f7fe fec4 	bl	8001b18 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d302      	bcc.n	8002da2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d113      	bne.n	8002dca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f043 0220 	orr.w	r2, r3, #32
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e007      	b.n	8002dda <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d1cb      	bne.n	8002d70 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dee:	e028      	b.n	8002e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	68b9      	ldr	r1, [r7, #8]
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f831 	bl	8002e5c <I2C_IsAcknowledgeFailed>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e026      	b.n	8002e52 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e04:	f7fe fe88 	bl	8001b18 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d302      	bcc.n	8002e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d113      	bne.n	8002e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	f043 0220 	orr.w	r2, r3, #32
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e007      	b.n	8002e52 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d1cf      	bne.n	8002df0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b10      	cmp	r3, #16
 8002e74:	d151      	bne.n	8002f1a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e76:	e022      	b.n	8002ebe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7e:	d01e      	beq.n	8002ebe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e80:	f7fe fe4a 	bl	8001b18 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d302      	bcc.n	8002e96 <I2C_IsAcknowledgeFailed+0x3a>
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d113      	bne.n	8002ebe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	f043 0220 	orr.w	r2, r3, #32
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e02e      	b.n	8002f1c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	d1d5      	bne.n	8002e78 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2210      	movs	r2, #16
 8002ed2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f7ff fedc 	bl	8002c9a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <I2C_IsAcknowledgeFailed+0xc8>)
 8002eee:	400b      	ands	r3, r1
 8002ef0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	f043 0204 	orr.w	r2, r3, #4
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	fe00e800 	.word	0xfe00e800

08002f28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	d138      	bne.n	8002fb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e032      	b.n	8002fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2224      	movs	r2, #36	; 0x24
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6819      	ldr	r1, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d139      	bne.n	8003048 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e033      	b.n	800304a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2224      	movs	r2, #36	; 0x24
 8002fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0201 	bic.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003010:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4313      	orrs	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	e000      	b.n	800304a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003048:	2302      	movs	r3, #2
  }
}
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003056:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003058:	b08f      	sub	sp, #60	; 0x3c
 800305a:	af0a      	add	r7, sp, #40	; 0x28
 800305c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e116      	b.n	8003296 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fe fb6c 	bl	8001760 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2203      	movs	r2, #3
 800308c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d102      	bne.n	80030a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f005 f95e 	bl	8008368 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	687e      	ldr	r6, [r7, #4]
 80030b4:	466d      	mov	r5, sp
 80030b6:	f106 0410 	add.w	r4, r6, #16
 80030ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80030ca:	1d33      	adds	r3, r6, #4
 80030cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ce:	6838      	ldr	r0, [r7, #0]
 80030d0:	f005 f8e8 	bl	80082a4 <USB_CoreInit>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d005      	beq.n	80030e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2202      	movs	r2, #2
 80030de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e0d7      	b.n	8003296 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f005 f94c 	bl	800838a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
 80030f6:	e04a      	b.n	800318e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	333d      	adds	r3, #61	; 0x3d
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800310c:	7bfa      	ldrb	r2, [r7, #15]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	333c      	adds	r3, #60	; 0x3c
 800311c:	7bfa      	ldrb	r2, [r7, #15]
 800311e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	b298      	uxth	r0, r3
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	3342      	adds	r3, #66	; 0x42
 8003134:	4602      	mov	r2, r0
 8003136:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	333f      	adds	r3, #63	; 0x3f
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	3344      	adds	r3, #68	; 0x44
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	3348      	adds	r3, #72	; 0x48
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003174:	7bfa      	ldrb	r2, [r7, #15]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	3350      	adds	r3, #80	; 0x50
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	3301      	adds	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	429a      	cmp	r2, r3
 8003196:	d3af      	bcc.n	80030f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003198:	2300      	movs	r3, #0
 800319a:	73fb      	strb	r3, [r7, #15]
 800319c:	e044      	b.n	8003228 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800319e:	7bfa      	ldrb	r2, [r7, #15]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80031c6:	7bfa      	ldrb	r2, [r7, #15]
 80031c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031ca:	7bfa      	ldrb	r2, [r7, #15]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031f6:	7bfa      	ldrb	r2, [r7, #15]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	3301      	adds	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
 8003228:	7bfa      	ldrb	r2, [r7, #15]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	429a      	cmp	r2, r3
 8003230:	d3b5      	bcc.n	800319e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	687e      	ldr	r6, [r7, #4]
 800323a:	466d      	mov	r5, sp
 800323c:	f106 0410 	add.w	r4, r6, #16
 8003240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003248:	e894 0003 	ldmia.w	r4, {r0, r1}
 800324c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003250:	1d33      	adds	r3, r6, #4
 8003252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003254:	6838      	ldr	r0, [r7, #0]
 8003256:	f005 f8c3 	bl	80083e0 <USB_DevInit>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e014      	b.n	8003296 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	2b01      	cmp	r3, #1
 8003282:	d102      	bne.n	800328a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f80b 	bl	80032a0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f005 fa65 	bl	800875e <USB_DevDisconnect>

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080032a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	10000003 	.word	0x10000003

080032e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80032f0:	4b19      	ldr	r3, [pc, #100]	; (8003358 <HAL_PWREx_ConfigSupply+0x70>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d00a      	beq.n	8003312 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80032fc:	4b16      	ldr	r3, [pc, #88]	; (8003358 <HAL_PWREx_ConfigSupply+0x70>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	429a      	cmp	r2, r3
 8003308:	d001      	beq.n	800330e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e01f      	b.n	800334e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	e01d      	b.n	800334e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003312:	4b11      	ldr	r3, [pc, #68]	; (8003358 <HAL_PWREx_ConfigSupply+0x70>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f023 0207 	bic.w	r2, r3, #7
 800331a:	490f      	ldr	r1, [pc, #60]	; (8003358 <HAL_PWREx_ConfigSupply+0x70>)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4313      	orrs	r3, r2
 8003320:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003322:	f7fe fbf9 	bl	8001b18 <HAL_GetTick>
 8003326:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003328:	e009      	b.n	800333e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800332a:	f7fe fbf5 	bl	8001b18 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003338:	d901      	bls.n	800333e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e007      	b.n	800334e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800333e:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_PWREx_ConfigSupply+0x70>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334a:	d1ee      	bne.n	800332a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	58024800 	.word	0x58024800

0800335c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4a04      	ldr	r2, [pc, #16]	; (8003378 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800336a:	60d3      	str	r3, [r2, #12]
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	58024800 	.word	0x58024800

0800337c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08c      	sub	sp, #48	; 0x30
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e3ff      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8087 	beq.w	80034aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339c:	4b99      	ldr	r3, [pc, #612]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033a6:	4b97      	ldr	r3, [pc, #604]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	d007      	beq.n	80033c2 <HAL_RCC_OscConfig+0x46>
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	2b18      	cmp	r3, #24
 80033b6:	d110      	bne.n	80033da <HAL_RCC_OscConfig+0x5e>
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d10b      	bne.n	80033da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c2:	4b90      	ldr	r3, [pc, #576]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d06c      	beq.n	80034a8 <HAL_RCC_OscConfig+0x12c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d168      	bne.n	80034a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e3d9      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e2:	d106      	bne.n	80033f2 <HAL_RCC_OscConfig+0x76>
 80033e4:	4b87      	ldr	r3, [pc, #540]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a86      	ldr	r2, [pc, #536]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 80033ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	e02e      	b.n	8003450 <HAL_RCC_OscConfig+0xd4>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0x98>
 80033fa:	4b82      	ldr	r3, [pc, #520]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a81      	ldr	r2, [pc, #516]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 8003400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4b7f      	ldr	r3, [pc, #508]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a7e      	ldr	r2, [pc, #504]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 800340c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e01d      	b.n	8003450 <HAL_RCC_OscConfig+0xd4>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800341c:	d10c      	bne.n	8003438 <HAL_RCC_OscConfig+0xbc>
 800341e:	4b79      	ldr	r3, [pc, #484]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a78      	ldr	r2, [pc, #480]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 8003424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4b76      	ldr	r3, [pc, #472]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a75      	ldr	r2, [pc, #468]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e00b      	b.n	8003450 <HAL_RCC_OscConfig+0xd4>
 8003438:	4b72      	ldr	r3, [pc, #456]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a71      	ldr	r2, [pc, #452]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 800343e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	4b6f      	ldr	r3, [pc, #444]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a6e      	ldr	r2, [pc, #440]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 800344a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d013      	beq.n	8003480 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fe fb5e 	bl	8001b18 <HAL_GetTick>
 800345c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003460:	f7fe fb5a 	bl	8001b18 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	; 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e38d      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003472:	4b64      	ldr	r3, [pc, #400]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0xe4>
 800347e:	e014      	b.n	80034aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003480:	f7fe fb4a 	bl	8001b18 <HAL_GetTick>
 8003484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003488:	f7fe fb46 	bl	8001b18 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b64      	cmp	r3, #100	; 0x64
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e379      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800349a:	4b5a      	ldr	r3, [pc, #360]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f0      	bne.n	8003488 <HAL_RCC_OscConfig+0x10c>
 80034a6:	e000      	b.n	80034aa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80ae 	beq.w	8003614 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034b8:	4b52      	ldr	r3, [pc, #328]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034c2:	4b50      	ldr	r3, [pc, #320]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <HAL_RCC_OscConfig+0x162>
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	2b18      	cmp	r3, #24
 80034d2:	d13a      	bne.n	800354a <HAL_RCC_OscConfig+0x1ce>
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d135      	bne.n	800354a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034de:	4b49      	ldr	r3, [pc, #292]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d005      	beq.n	80034f6 <HAL_RCC_OscConfig+0x17a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e34b      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f6:	f7fe fb3d 	bl	8001b74 <HAL_GetREVID>
 80034fa:	4602      	mov	r2, r0
 80034fc:	f241 0303 	movw	r3, #4099	; 0x1003
 8003500:	429a      	cmp	r2, r3
 8003502:	d817      	bhi.n	8003534 <HAL_RCC_OscConfig+0x1b8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	2b40      	cmp	r3, #64	; 0x40
 800350a:	d108      	bne.n	800351e <HAL_RCC_OscConfig+0x1a2>
 800350c:	4b3d      	ldr	r3, [pc, #244]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003514:	4a3b      	ldr	r2, [pc, #236]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 8003516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800351c:	e07a      	b.n	8003614 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351e:	4b39      	ldr	r3, [pc, #228]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	031b      	lsls	r3, r3, #12
 800352c:	4935      	ldr	r1, [pc, #212]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 800352e:	4313      	orrs	r3, r2
 8003530:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003532:	e06f      	b.n	8003614 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003534:	4b33      	ldr	r3, [pc, #204]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	061b      	lsls	r3, r3, #24
 8003542:	4930      	ldr	r1, [pc, #192]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003548:	e064      	b.n	8003614 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d045      	beq.n	80035de <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003552:	4b2c      	ldr	r3, [pc, #176]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 0219 	bic.w	r2, r3, #25
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	4929      	ldr	r1, [pc, #164]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 8003560:	4313      	orrs	r3, r2
 8003562:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fe fad8 	bl	8001b18 <HAL_GetTick>
 8003568:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800356c:	f7fe fad4 	bl	8001b18 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e307      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800357e:	4b21      	ldr	r3, [pc, #132]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358a:	f7fe faf3 	bl	8001b74 <HAL_GetREVID>
 800358e:	4602      	mov	r2, r0
 8003590:	f241 0303 	movw	r3, #4099	; 0x1003
 8003594:	429a      	cmp	r2, r3
 8003596:	d817      	bhi.n	80035c8 <HAL_RCC_OscConfig+0x24c>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2b40      	cmp	r3, #64	; 0x40
 800359e:	d108      	bne.n	80035b2 <HAL_RCC_OscConfig+0x236>
 80035a0:	4b18      	ldr	r3, [pc, #96]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80035a8:	4a16      	ldr	r2, [pc, #88]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 80035aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ae:	6053      	str	r3, [r2, #4]
 80035b0:	e030      	b.n	8003614 <HAL_RCC_OscConfig+0x298>
 80035b2:	4b14      	ldr	r3, [pc, #80]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	031b      	lsls	r3, r3, #12
 80035c0:	4910      	ldr	r1, [pc, #64]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	604b      	str	r3, [r1, #4]
 80035c6:	e025      	b.n	8003614 <HAL_RCC_OscConfig+0x298>
 80035c8:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	061b      	lsls	r3, r3, #24
 80035d6:	490b      	ldr	r1, [pc, #44]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]
 80035dc:	e01a      	b.n	8003614 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035de:	4b09      	ldr	r3, [pc, #36]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a08      	ldr	r2, [pc, #32]	; (8003604 <HAL_RCC_OscConfig+0x288>)
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7fe fa95 	bl	8001b18 <HAL_GetTick>
 80035ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035f0:	e00a      	b.n	8003608 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035f2:	f7fe fa91 	bl	8001b18 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d903      	bls.n	8003608 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e2c4      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
 8003604:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003608:	4ba4      	ldr	r3, [pc, #656]	; (800389c <HAL_RCC_OscConfig+0x520>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1ee      	bne.n	80035f2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 80a9 	beq.w	8003774 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003622:	4b9e      	ldr	r3, [pc, #632]	; (800389c <HAL_RCC_OscConfig+0x520>)
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800362a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800362c:	4b9b      	ldr	r3, [pc, #620]	; (800389c <HAL_RCC_OscConfig+0x520>)
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	2b08      	cmp	r3, #8
 8003636:	d007      	beq.n	8003648 <HAL_RCC_OscConfig+0x2cc>
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2b18      	cmp	r3, #24
 800363c:	d13a      	bne.n	80036b4 <HAL_RCC_OscConfig+0x338>
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d135      	bne.n	80036b4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003648:	4b94      	ldr	r3, [pc, #592]	; (800389c <HAL_RCC_OscConfig+0x520>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_RCC_OscConfig+0x2e4>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d001      	beq.n	8003660 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e296      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003660:	f7fe fa88 	bl	8001b74 <HAL_GetREVID>
 8003664:	4602      	mov	r2, r0
 8003666:	f241 0303 	movw	r3, #4099	; 0x1003
 800366a:	429a      	cmp	r2, r3
 800366c:	d817      	bhi.n	800369e <HAL_RCC_OscConfig+0x322>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	2b20      	cmp	r3, #32
 8003674:	d108      	bne.n	8003688 <HAL_RCC_OscConfig+0x30c>
 8003676:	4b89      	ldr	r3, [pc, #548]	; (800389c <HAL_RCC_OscConfig+0x520>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800367e:	4a87      	ldr	r2, [pc, #540]	; (800389c <HAL_RCC_OscConfig+0x520>)
 8003680:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003684:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003686:	e075      	b.n	8003774 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003688:	4b84      	ldr	r3, [pc, #528]	; (800389c <HAL_RCC_OscConfig+0x520>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	069b      	lsls	r3, r3, #26
 8003696:	4981      	ldr	r1, [pc, #516]	; (800389c <HAL_RCC_OscConfig+0x520>)
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800369c:	e06a      	b.n	8003774 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800369e:	4b7f      	ldr	r3, [pc, #508]	; (800389c <HAL_RCC_OscConfig+0x520>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	061b      	lsls	r3, r3, #24
 80036ac:	497b      	ldr	r1, [pc, #492]	; (800389c <HAL_RCC_OscConfig+0x520>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036b2:	e05f      	b.n	8003774 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d042      	beq.n	8003742 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80036bc:	4b77      	ldr	r3, [pc, #476]	; (800389c <HAL_RCC_OscConfig+0x520>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a76      	ldr	r2, [pc, #472]	; (800389c <HAL_RCC_OscConfig+0x520>)
 80036c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fe fa26 	bl	8001b18 <HAL_GetTick>
 80036cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80036d0:	f7fe fa22 	bl	8001b18 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e255      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036e2:	4b6e      	ldr	r3, [pc, #440]	; (800389c <HAL_RCC_OscConfig+0x520>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036ee:	f7fe fa41 	bl	8001b74 <HAL_GetREVID>
 80036f2:	4602      	mov	r2, r0
 80036f4:	f241 0303 	movw	r3, #4099	; 0x1003
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d817      	bhi.n	800372c <HAL_RCC_OscConfig+0x3b0>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	2b20      	cmp	r3, #32
 8003702:	d108      	bne.n	8003716 <HAL_RCC_OscConfig+0x39a>
 8003704:	4b65      	ldr	r3, [pc, #404]	; (800389c <HAL_RCC_OscConfig+0x520>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800370c:	4a63      	ldr	r2, [pc, #396]	; (800389c <HAL_RCC_OscConfig+0x520>)
 800370e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003712:	6053      	str	r3, [r2, #4]
 8003714:	e02e      	b.n	8003774 <HAL_RCC_OscConfig+0x3f8>
 8003716:	4b61      	ldr	r3, [pc, #388]	; (800389c <HAL_RCC_OscConfig+0x520>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	069b      	lsls	r3, r3, #26
 8003724:	495d      	ldr	r1, [pc, #372]	; (800389c <HAL_RCC_OscConfig+0x520>)
 8003726:	4313      	orrs	r3, r2
 8003728:	604b      	str	r3, [r1, #4]
 800372a:	e023      	b.n	8003774 <HAL_RCC_OscConfig+0x3f8>
 800372c:	4b5b      	ldr	r3, [pc, #364]	; (800389c <HAL_RCC_OscConfig+0x520>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	061b      	lsls	r3, r3, #24
 800373a:	4958      	ldr	r1, [pc, #352]	; (800389c <HAL_RCC_OscConfig+0x520>)
 800373c:	4313      	orrs	r3, r2
 800373e:	60cb      	str	r3, [r1, #12]
 8003740:	e018      	b.n	8003774 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003742:	4b56      	ldr	r3, [pc, #344]	; (800389c <HAL_RCC_OscConfig+0x520>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a55      	ldr	r2, [pc, #340]	; (800389c <HAL_RCC_OscConfig+0x520>)
 8003748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800374c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7fe f9e3 	bl	8001b18 <HAL_GetTick>
 8003752:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003756:	f7fe f9df 	bl	8001b18 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e212      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003768:	4b4c      	ldr	r3, [pc, #304]	; (800389c <HAL_RCC_OscConfig+0x520>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f0      	bne.n	8003756 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d036      	beq.n	80037ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d019      	beq.n	80037bc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003788:	4b44      	ldr	r3, [pc, #272]	; (800389c <HAL_RCC_OscConfig+0x520>)
 800378a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800378c:	4a43      	ldr	r2, [pc, #268]	; (800389c <HAL_RCC_OscConfig+0x520>)
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003794:	f7fe f9c0 	bl	8001b18 <HAL_GetTick>
 8003798:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800379c:	f7fe f9bc 	bl	8001b18 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e1ef      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037ae:	4b3b      	ldr	r3, [pc, #236]	; (800389c <HAL_RCC_OscConfig+0x520>)
 80037b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x420>
 80037ba:	e018      	b.n	80037ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037bc:	4b37      	ldr	r3, [pc, #220]	; (800389c <HAL_RCC_OscConfig+0x520>)
 80037be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c0:	4a36      	ldr	r2, [pc, #216]	; (800389c <HAL_RCC_OscConfig+0x520>)
 80037c2:	f023 0301 	bic.w	r3, r3, #1
 80037c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c8:	f7fe f9a6 	bl	8001b18 <HAL_GetTick>
 80037cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d0:	f7fe f9a2 	bl	8001b18 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e1d5      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037e2:	4b2e      	ldr	r3, [pc, #184]	; (800389c <HAL_RCC_OscConfig+0x520>)
 80037e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d036      	beq.n	8003868 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d019      	beq.n	8003836 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003802:	4b26      	ldr	r3, [pc, #152]	; (800389c <HAL_RCC_OscConfig+0x520>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a25      	ldr	r2, [pc, #148]	; (800389c <HAL_RCC_OscConfig+0x520>)
 8003808:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800380c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800380e:	f7fe f983 	bl	8001b18 <HAL_GetTick>
 8003812:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003816:	f7fe f97f 	bl	8001b18 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e1b2      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003828:	4b1c      	ldr	r3, [pc, #112]	; (800389c <HAL_RCC_OscConfig+0x520>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCC_OscConfig+0x49a>
 8003834:	e018      	b.n	8003868 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003836:	4b19      	ldr	r3, [pc, #100]	; (800389c <HAL_RCC_OscConfig+0x520>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a18      	ldr	r2, [pc, #96]	; (800389c <HAL_RCC_OscConfig+0x520>)
 800383c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003840:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003842:	f7fe f969 	bl	8001b18 <HAL_GetTick>
 8003846:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800384a:	f7fe f965 	bl	8001b18 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e198      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800385c:	4b0f      	ldr	r3, [pc, #60]	; (800389c <HAL_RCC_OscConfig+0x520>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f0      	bne.n	800384a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 8085 	beq.w	8003980 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <HAL_RCC_OscConfig+0x524>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a09      	ldr	r2, [pc, #36]	; (80038a0 <HAL_RCC_OscConfig+0x524>)
 800387c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003880:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003882:	f7fe f949 	bl	8001b18 <HAL_GetTick>
 8003886:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003888:	e00c      	b.n	80038a4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800388a:	f7fe f945 	bl	8001b18 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b64      	cmp	r3, #100	; 0x64
 8003896:	d905      	bls.n	80038a4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e178      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
 800389c:	58024400 	.word	0x58024400
 80038a0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038a4:	4b96      	ldr	r3, [pc, #600]	; (8003b00 <HAL_RCC_OscConfig+0x784>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0ec      	beq.n	800388a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d106      	bne.n	80038c6 <HAL_RCC_OscConfig+0x54a>
 80038b8:	4b92      	ldr	r3, [pc, #584]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038bc:	4a91      	ldr	r2, [pc, #580]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	6713      	str	r3, [r2, #112]	; 0x70
 80038c4:	e02d      	b.n	8003922 <HAL_RCC_OscConfig+0x5a6>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x56c>
 80038ce:	4b8d      	ldr	r3, [pc, #564]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	4a8c      	ldr	r2, [pc, #560]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	6713      	str	r3, [r2, #112]	; 0x70
 80038da:	4b8a      	ldr	r3, [pc, #552]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	4a89      	ldr	r2, [pc, #548]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 80038e0:	f023 0304 	bic.w	r3, r3, #4
 80038e4:	6713      	str	r3, [r2, #112]	; 0x70
 80038e6:	e01c      	b.n	8003922 <HAL_RCC_OscConfig+0x5a6>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b05      	cmp	r3, #5
 80038ee:	d10c      	bne.n	800390a <HAL_RCC_OscConfig+0x58e>
 80038f0:	4b84      	ldr	r3, [pc, #528]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	4a83      	ldr	r2, [pc, #524]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 80038f6:	f043 0304 	orr.w	r3, r3, #4
 80038fa:	6713      	str	r3, [r2, #112]	; 0x70
 80038fc:	4b81      	ldr	r3, [pc, #516]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003900:	4a80      	ldr	r2, [pc, #512]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	6713      	str	r3, [r2, #112]	; 0x70
 8003908:	e00b      	b.n	8003922 <HAL_RCC_OscConfig+0x5a6>
 800390a:	4b7e      	ldr	r3, [pc, #504]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390e:	4a7d      	ldr	r2, [pc, #500]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	6713      	str	r3, [r2, #112]	; 0x70
 8003916:	4b7b      	ldr	r3, [pc, #492]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	4a7a      	ldr	r2, [pc, #488]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 800391c:	f023 0304 	bic.w	r3, r3, #4
 8003920:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d015      	beq.n	8003956 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392a:	f7fe f8f5 	bl	8001b18 <HAL_GetTick>
 800392e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003932:	f7fe f8f1 	bl	8001b18 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e122      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003948:	4b6e      	ldr	r3, [pc, #440]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0ee      	beq.n	8003932 <HAL_RCC_OscConfig+0x5b6>
 8003954:	e014      	b.n	8003980 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003956:	f7fe f8df 	bl	8001b18 <HAL_GetTick>
 800395a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800395c:	e00a      	b.n	8003974 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800395e:	f7fe f8db 	bl	8001b18 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f241 3288 	movw	r2, #5000	; 0x1388
 800396c:	4293      	cmp	r3, r2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e10c      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003974:	4b63      	ldr	r3, [pc, #396]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1ee      	bne.n	800395e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8101 	beq.w	8003b8c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800398a:	4b5e      	ldr	r3, [pc, #376]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003992:	2b18      	cmp	r3, #24
 8003994:	f000 80bc 	beq.w	8003b10 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	2b02      	cmp	r3, #2
 800399e:	f040 8095 	bne.w	8003acc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a2:	4b58      	ldr	r3, [pc, #352]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a57      	ldr	r2, [pc, #348]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 80039a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ae:	f7fe f8b3 	bl	8001b18 <HAL_GetTick>
 80039b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b6:	f7fe f8af 	bl	8001b18 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e0e2      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039c8:	4b4e      	ldr	r3, [pc, #312]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1f0      	bne.n	80039b6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039d4:	4b4b      	ldr	r3, [pc, #300]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 80039d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039d8:	4b4b      	ldr	r3, [pc, #300]	; (8003b08 <HAL_RCC_OscConfig+0x78c>)
 80039da:	4013      	ands	r3, r2
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039e4:	0112      	lsls	r2, r2, #4
 80039e6:	430a      	orrs	r2, r1
 80039e8:	4946      	ldr	r1, [pc, #280]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	628b      	str	r3, [r1, #40]	; 0x28
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	3b01      	subs	r3, #1
 80039f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fc:	3b01      	subs	r3, #1
 80039fe:	025b      	lsls	r3, r3, #9
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	041b      	lsls	r3, r3, #16
 8003a0c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	3b01      	subs	r3, #1
 8003a18:	061b      	lsls	r3, r3, #24
 8003a1a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a1e:	4939      	ldr	r1, [pc, #228]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003a24:	4b37      	ldr	r3, [pc, #220]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	4a36      	ldr	r2, [pc, #216]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a30:	4b34      	ldr	r3, [pc, #208]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a34:	4b35      	ldr	r3, [pc, #212]	; (8003b0c <HAL_RCC_OscConfig+0x790>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a3c:	00d2      	lsls	r2, r2, #3
 8003a3e:	4931      	ldr	r1, [pc, #196]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a44:	4b2f      	ldr	r3, [pc, #188]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	f023 020c 	bic.w	r2, r3, #12
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	492c      	ldr	r1, [pc, #176]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a56:	4b2b      	ldr	r3, [pc, #172]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	f023 0202 	bic.w	r2, r3, #2
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	4928      	ldr	r1, [pc, #160]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a68:	4b26      	ldr	r3, [pc, #152]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	4a25      	ldr	r2, [pc, #148]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a74:	4b23      	ldr	r3, [pc, #140]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	4a22      	ldr	r2, [pc, #136]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a80:	4b20      	ldr	r3, [pc, #128]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	4a1f      	ldr	r2, [pc, #124]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a98:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a19      	ldr	r2, [pc, #100]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fe f838 	bl	8001b18 <HAL_GetTick>
 8003aa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aac:	f7fe f834 	bl	8001b18 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e067      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003abe:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0x730>
 8003aca:	e05f      	b.n	8003b8c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003acc:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a0c      	ldr	r2, [pc, #48]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad8:	f7fe f81e 	bl	8001b18 <HAL_GetTick>
 8003adc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae0:	f7fe f81a 	bl	8001b18 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e04d      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003af2:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <HAL_RCC_OscConfig+0x788>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x764>
 8003afe:	e045      	b.n	8003b8c <HAL_RCC_OscConfig+0x810>
 8003b00:	58024800 	.word	0x58024800
 8003b04:	58024400 	.word	0x58024400
 8003b08:	fffffc0c 	.word	0xfffffc0c
 8003b0c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b10:	4b21      	ldr	r3, [pc, #132]	; (8003b98 <HAL_RCC_OscConfig+0x81c>)
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b16:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <HAL_RCC_OscConfig+0x81c>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d031      	beq.n	8003b88 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f003 0203 	and.w	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d12a      	bne.n	8003b88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d122      	bne.n	8003b88 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d11a      	bne.n	8003b88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	0a5b      	lsrs	r3, r3, #9
 8003b56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d111      	bne.n	8003b88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	0c1b      	lsrs	r3, r3, #16
 8003b68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d108      	bne.n	8003b88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	0e1b      	lsrs	r3, r3, #24
 8003b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b82:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3730      	adds	r7, #48	; 0x30
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	58024400 	.word	0x58024400

08003b9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e19c      	b.n	8003eea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb0:	4b8a      	ldr	r3, [pc, #552]	; (8003ddc <HAL_RCC_ClockConfig+0x240>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d910      	bls.n	8003be0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bbe:	4b87      	ldr	r3, [pc, #540]	; (8003ddc <HAL_RCC_ClockConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 020f 	bic.w	r2, r3, #15
 8003bc6:	4985      	ldr	r1, [pc, #532]	; (8003ddc <HAL_RCC_ClockConfig+0x240>)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bce:	4b83      	ldr	r3, [pc, #524]	; (8003ddc <HAL_RCC_ClockConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e184      	b.n	8003eea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d010      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	4b7b      	ldr	r3, [pc, #492]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d908      	bls.n	8003c0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bfc:	4b78      	ldr	r3, [pc, #480]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	4975      	ldr	r1, [pc, #468]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d010      	beq.n	8003c3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695a      	ldr	r2, [r3, #20]
 8003c1e:	4b70      	ldr	r3, [pc, #448]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d908      	bls.n	8003c3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c2a:	4b6d      	ldr	r3, [pc, #436]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	496a      	ldr	r1, [pc, #424]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d010      	beq.n	8003c6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699a      	ldr	r2, [r3, #24]
 8003c4c:	4b64      	ldr	r3, [pc, #400]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d908      	bls.n	8003c6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c58:	4b61      	ldr	r3, [pc, #388]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	495e      	ldr	r1, [pc, #376]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d010      	beq.n	8003c98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69da      	ldr	r2, [r3, #28]
 8003c7a:	4b59      	ldr	r3, [pc, #356]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d908      	bls.n	8003c98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c86:	4b56      	ldr	r3, [pc, #344]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	4953      	ldr	r1, [pc, #332]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d010      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	4b4d      	ldr	r3, [pc, #308]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d908      	bls.n	8003cc6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb4:	4b4a      	ldr	r3, [pc, #296]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f023 020f 	bic.w	r2, r3, #15
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4947      	ldr	r1, [pc, #284]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d055      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003cd2:	4b43      	ldr	r3, [pc, #268]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	4940      	ldr	r1, [pc, #256]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d107      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cec:	4b3c      	ldr	r3, [pc, #240]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d121      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0f6      	b.n	8003eea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d107      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d04:	4b36      	ldr	r3, [pc, #216]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d115      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0ea      	b.n	8003eea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d107      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d1c:	4b30      	ldr	r3, [pc, #192]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d109      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0de      	b.n	8003eea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d2c:	4b2c      	ldr	r3, [pc, #176]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0d6      	b.n	8003eea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d3c:	4b28      	ldr	r3, [pc, #160]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f023 0207 	bic.w	r2, r3, #7
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4925      	ldr	r1, [pc, #148]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4e:	f7fd fee3 	bl	8001b18 <HAL_GetTick>
 8003d52:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d54:	e00a      	b.n	8003d6c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d56:	f7fd fedf 	bl	8001b18 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e0be      	b.n	8003eea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6c:	4b1c      	ldr	r3, [pc, #112]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d1eb      	bne.n	8003d56 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d010      	beq.n	8003dac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d208      	bcs.n	8003dac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d9a:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f023 020f 	bic.w	r2, r3, #15
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	490e      	ldr	r1, [pc, #56]	; (8003de0 <HAL_RCC_ClockConfig+0x244>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <HAL_RCC_ClockConfig+0x240>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d214      	bcs.n	8003de4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dba:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <HAL_RCC_ClockConfig+0x240>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f023 020f 	bic.w	r2, r3, #15
 8003dc2:	4906      	ldr	r1, [pc, #24]	; (8003ddc <HAL_RCC_ClockConfig+0x240>)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dca:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <HAL_RCC_ClockConfig+0x240>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d005      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e086      	b.n	8003eea <HAL_RCC_ClockConfig+0x34e>
 8003ddc:	52002000 	.word	0x52002000
 8003de0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d010      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	4b3f      	ldr	r3, [pc, #252]	; (8003ef4 <HAL_RCC_ClockConfig+0x358>)
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d208      	bcs.n	8003e12 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e00:	4b3c      	ldr	r3, [pc, #240]	; (8003ef4 <HAL_RCC_ClockConfig+0x358>)
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	4939      	ldr	r1, [pc, #228]	; (8003ef4 <HAL_RCC_ClockConfig+0x358>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d010      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695a      	ldr	r2, [r3, #20]
 8003e22:	4b34      	ldr	r3, [pc, #208]	; (8003ef4 <HAL_RCC_ClockConfig+0x358>)
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d208      	bcs.n	8003e40 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e2e:	4b31      	ldr	r3, [pc, #196]	; (8003ef4 <HAL_RCC_ClockConfig+0x358>)
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	492e      	ldr	r1, [pc, #184]	; (8003ef4 <HAL_RCC_ClockConfig+0x358>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d010      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699a      	ldr	r2, [r3, #24]
 8003e50:	4b28      	ldr	r3, [pc, #160]	; (8003ef4 <HAL_RCC_ClockConfig+0x358>)
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d208      	bcs.n	8003e6e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e5c:	4b25      	ldr	r3, [pc, #148]	; (8003ef4 <HAL_RCC_ClockConfig+0x358>)
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	4922      	ldr	r1, [pc, #136]	; (8003ef4 <HAL_RCC_ClockConfig+0x358>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d010      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69da      	ldr	r2, [r3, #28]
 8003e7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <HAL_RCC_ClockConfig+0x358>)
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d208      	bcs.n	8003e9c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e8a:	4b1a      	ldr	r3, [pc, #104]	; (8003ef4 <HAL_RCC_ClockConfig+0x358>)
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	4917      	ldr	r1, [pc, #92]	; (8003ef4 <HAL_RCC_ClockConfig+0x358>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e9c:	f000 f834 	bl	8003f08 <HAL_RCC_GetSysClockFreq>
 8003ea0:	4601      	mov	r1, r0
 8003ea2:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <HAL_RCC_ClockConfig+0x358>)
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	4a12      	ldr	r2, [pc, #72]	; (8003ef8 <HAL_RCC_ClockConfig+0x35c>)
 8003eae:	5cd3      	ldrb	r3, [r2, r3]
 8003eb0:	f003 031f 	and.w	r3, r3, #31
 8003eb4:	fa21 f303 	lsr.w	r3, r1, r3
 8003eb8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003eba:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <HAL_RCC_ClockConfig+0x358>)
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	4a0d      	ldr	r2, [pc, #52]	; (8003ef8 <HAL_RCC_ClockConfig+0x35c>)
 8003ec4:	5cd3      	ldrb	r3, [r2, r3]
 8003ec6:	f003 031f 	and.w	r3, r3, #31
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed0:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <HAL_RCC_ClockConfig+0x360>)
 8003ed2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ed4:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <HAL_RCC_ClockConfig+0x364>)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003eda:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <HAL_RCC_ClockConfig+0x368>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fd fc96 	bl	8001810 <HAL_InitTick>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	58024400 	.word	0x58024400
 8003ef8:	0800c5cc 	.word	0x0800c5cc
 8003efc:	24000004 	.word	0x24000004
 8003f00:	24000000 	.word	0x24000000
 8003f04:	24000008 	.word	0x24000008

08003f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b089      	sub	sp, #36	; 0x24
 8003f0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f0e:	4baf      	ldr	r3, [pc, #700]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f16:	2b18      	cmp	r3, #24
 8003f18:	f200 814e 	bhi.w	80041b8 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003f1c:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f22:	bf00      	nop
 8003f24:	08003f89 	.word	0x08003f89
 8003f28:	080041b9 	.word	0x080041b9
 8003f2c:	080041b9 	.word	0x080041b9
 8003f30:	080041b9 	.word	0x080041b9
 8003f34:	080041b9 	.word	0x080041b9
 8003f38:	080041b9 	.word	0x080041b9
 8003f3c:	080041b9 	.word	0x080041b9
 8003f40:	080041b9 	.word	0x080041b9
 8003f44:	08003faf 	.word	0x08003faf
 8003f48:	080041b9 	.word	0x080041b9
 8003f4c:	080041b9 	.word	0x080041b9
 8003f50:	080041b9 	.word	0x080041b9
 8003f54:	080041b9 	.word	0x080041b9
 8003f58:	080041b9 	.word	0x080041b9
 8003f5c:	080041b9 	.word	0x080041b9
 8003f60:	080041b9 	.word	0x080041b9
 8003f64:	08003fb5 	.word	0x08003fb5
 8003f68:	080041b9 	.word	0x080041b9
 8003f6c:	080041b9 	.word	0x080041b9
 8003f70:	080041b9 	.word	0x080041b9
 8003f74:	080041b9 	.word	0x080041b9
 8003f78:	080041b9 	.word	0x080041b9
 8003f7c:	080041b9 	.word	0x080041b9
 8003f80:	080041b9 	.word	0x080041b9
 8003f84:	08003fbb 	.word	0x08003fbb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f88:	4b90      	ldr	r3, [pc, #576]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f94:	4b8d      	ldr	r3, [pc, #564]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	08db      	lsrs	r3, r3, #3
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	4a8c      	ldr	r2, [pc, #560]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003fa6:	e10a      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003fa8:	4b89      	ldr	r3, [pc, #548]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003faa:	61bb      	str	r3, [r7, #24]
    break;
 8003fac:	e107      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003fae:	4b89      	ldr	r3, [pc, #548]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003fb0:	61bb      	str	r3, [r7, #24]
    break;
 8003fb2:	e104      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003fb4:	4b88      	ldr	r3, [pc, #544]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003fb6:	61bb      	str	r3, [r7, #24]
    break;
 8003fb8:	e101      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fba:	4b84      	ldr	r3, [pc, #528]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003fc4:	4b81      	ldr	r3, [pc, #516]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003fd0:	4b7e      	ldr	r3, [pc, #504]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003fda:	4b7c      	ldr	r3, [pc, #496]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fde:	08db      	lsrs	r3, r3, #3
 8003fe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	fb02 f303 	mul.w	r3, r2, r3
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80da 	beq.w	80041b2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d05a      	beq.n	80040ba <HAL_RCC_GetSysClockFreq+0x1b2>
 8004004:	2b01      	cmp	r3, #1
 8004006:	d302      	bcc.n	800400e <HAL_RCC_GetSysClockFreq+0x106>
 8004008:	2b02      	cmp	r3, #2
 800400a:	d078      	beq.n	80040fe <HAL_RCC_GetSysClockFreq+0x1f6>
 800400c:	e099      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800400e:	4b6f      	ldr	r3, [pc, #444]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d02d      	beq.n	8004076 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800401a:	4b6c      	ldr	r3, [pc, #432]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	08db      	lsrs	r3, r3, #3
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	4a6a      	ldr	r2, [pc, #424]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004026:	fa22 f303 	lsr.w	r3, r2, r3
 800402a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	ee07 3a90 	vmov	s15, r3
 8004032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	ee07 3a90 	vmov	s15, r3
 800403c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004044:	4b61      	ldr	r3, [pc, #388]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800404c:	ee07 3a90 	vmov	s15, r3
 8004050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004054:	ed97 6a02 	vldr	s12, [r7, #8]
 8004058:	eddf 5a60 	vldr	s11, [pc, #384]	; 80041dc <HAL_RCC_GetSysClockFreq+0x2d4>
 800405c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004060:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004068:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800406c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004070:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004074:	e087      	b.n	8004186 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	ee07 3a90 	vmov	s15, r3
 800407c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004080:	eddf 6a57 	vldr	s13, [pc, #348]	; 80041e0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004088:	4b50      	ldr	r3, [pc, #320]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004090:	ee07 3a90 	vmov	s15, r3
 8004094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004098:	ed97 6a02 	vldr	s12, [r7, #8]
 800409c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80041dc <HAL_RCC_GetSysClockFreq+0x2d4>
 80040a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040b8:	e065      	b.n	8004186 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	ee07 3a90 	vmov	s15, r3
 80040c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c4:	eddf 6a47 	vldr	s13, [pc, #284]	; 80041e4 <HAL_RCC_GetSysClockFreq+0x2dc>
 80040c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040cc:	4b3f      	ldr	r3, [pc, #252]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d4:	ee07 3a90 	vmov	s15, r3
 80040d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80040e0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80041dc <HAL_RCC_GetSysClockFreq+0x2d4>
 80040e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040fc:	e043      	b.n	8004186 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	ee07 3a90 	vmov	s15, r3
 8004104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004108:	eddf 6a37 	vldr	s13, [pc, #220]	; 80041e8 <HAL_RCC_GetSysClockFreq+0x2e0>
 800410c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004110:	4b2e      	ldr	r3, [pc, #184]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004118:	ee07 3a90 	vmov	s15, r3
 800411c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004120:	ed97 6a02 	vldr	s12, [r7, #8]
 8004124:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80041dc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004128:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800412c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004134:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800413c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004140:	e021      	b.n	8004186 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	ee07 3a90 	vmov	s15, r3
 8004148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80041e4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004154:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800415c:	ee07 3a90 	vmov	s15, r3
 8004160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004164:	ed97 6a02 	vldr	s12, [r7, #8]
 8004168:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80041dc <HAL_RCC_GetSysClockFreq+0x2d4>
 800416c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004170:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004174:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004178:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800417c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004180:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004184:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004186:	4b11      	ldr	r3, [pc, #68]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	0a5b      	lsrs	r3, r3, #9
 800418c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004190:	3301      	adds	r3, #1
 8004192:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800419e:	edd7 6a07 	vldr	s13, [r7, #28]
 80041a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041aa:	ee17 3a90 	vmov	r3, s15
 80041ae:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80041b0:	e005      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61bb      	str	r3, [r7, #24]
    break;
 80041b6:	e002      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80041b8:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80041ba:	61bb      	str	r3, [r7, #24]
    break;
 80041bc:	bf00      	nop
  }

  return sysclockfreq;
 80041be:	69bb      	ldr	r3, [r7, #24]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3724      	adds	r7, #36	; 0x24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	58024400 	.word	0x58024400
 80041d0:	03d09000 	.word	0x03d09000
 80041d4:	003d0900 	.word	0x003d0900
 80041d8:	007a1200 	.word	0x007a1200
 80041dc:	46000000 	.word	0x46000000
 80041e0:	4c742400 	.word	0x4c742400
 80041e4:	4a742400 	.word	0x4a742400
 80041e8:	4af42400 	.word	0x4af42400

080041ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80041f2:	f7ff fe89 	bl	8003f08 <HAL_RCC_GetSysClockFreq>
 80041f6:	4601      	mov	r1, r0
 80041f8:	4b10      	ldr	r3, [pc, #64]	; (800423c <HAL_RCC_GetHCLKFreq+0x50>)
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	0a1b      	lsrs	r3, r3, #8
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	4a0f      	ldr	r2, [pc, #60]	; (8004240 <HAL_RCC_GetHCLKFreq+0x54>)
 8004204:	5cd3      	ldrb	r3, [r2, r3]
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	fa21 f303 	lsr.w	r3, r1, r3
 800420e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004210:	4b0a      	ldr	r3, [pc, #40]	; (800423c <HAL_RCC_GetHCLKFreq+0x50>)
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	4a09      	ldr	r2, [pc, #36]	; (8004240 <HAL_RCC_GetHCLKFreq+0x54>)
 800421a:	5cd3      	ldrb	r3, [r2, r3]
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	fa22 f303 	lsr.w	r3, r2, r3
 8004226:	4a07      	ldr	r2, [pc, #28]	; (8004244 <HAL_RCC_GetHCLKFreq+0x58>)
 8004228:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800422a:	4a07      	ldr	r2, [pc, #28]	; (8004248 <HAL_RCC_GetHCLKFreq+0x5c>)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004230:	4b04      	ldr	r3, [pc, #16]	; (8004244 <HAL_RCC_GetHCLKFreq+0x58>)
 8004232:	681b      	ldr	r3, [r3, #0]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	58024400 	.word	0x58024400
 8004240:	0800c5cc 	.word	0x0800c5cc
 8004244:	24000004 	.word	0x24000004
 8004248:	24000000 	.word	0x24000000

0800424c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004250:	f7ff ffcc 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 8004254:	4601      	mov	r1, r0
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	091b      	lsrs	r3, r3, #4
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	4a04      	ldr	r2, [pc, #16]	; (8004274 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004262:	5cd3      	ldrb	r3, [r2, r3]
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}
 8004270:	58024400 	.word	0x58024400
 8004274:	0800c5cc 	.word	0x0800c5cc

08004278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800427c:	f7ff ffb6 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 8004280:	4601      	mov	r1, r0
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	0a1b      	lsrs	r3, r3, #8
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	4a04      	ldr	r2, [pc, #16]	; (80042a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800428e:	5cd3      	ldrb	r3, [r2, r3]
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004298:	4618      	mov	r0, r3
 800429a:	bd80      	pop	{r7, pc}
 800429c:	58024400 	.word	0x58024400
 80042a0:	0800c5cc 	.word	0x0800c5cc

080042a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	223f      	movs	r2, #63	; 0x3f
 80042b2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042b4:	4b1a      	ldr	r3, [pc, #104]	; (8004320 <HAL_RCC_GetClockConfig+0x7c>)
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f003 0207 	and.w	r2, r3, #7
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80042c0:	4b17      	ldr	r3, [pc, #92]	; (8004320 <HAL_RCC_GetClockConfig+0x7c>)
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80042cc:	4b14      	ldr	r3, [pc, #80]	; (8004320 <HAL_RCC_GetClockConfig+0x7c>)
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	f003 020f 	and.w	r2, r3, #15
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80042d8:	4b11      	ldr	r3, [pc, #68]	; (8004320 <HAL_RCC_GetClockConfig+0x7c>)
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <HAL_RCC_GetClockConfig+0x7c>)
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_RCC_GetClockConfig+0x7c>)
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80042fc:	4b08      	ldr	r3, [pc, #32]	; (8004320 <HAL_RCC_GetClockConfig+0x7c>)
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004308:	4b06      	ldr	r3, [pc, #24]	; (8004324 <HAL_RCC_GetClockConfig+0x80>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 020f 	and.w	r2, r3, #15
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	601a      	str	r2, [r3, #0]
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	58024400 	.word	0x58024400
 8004324:	52002000 	.word	0x52002000

08004328 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004330:	2300      	movs	r3, #0
 8004332:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004334:	2300      	movs	r3, #0
 8004336:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d03d      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800434c:	d013      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800434e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004352:	d802      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d007      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004358:	e01f      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800435a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800435e:	d013      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004360:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004364:	d01c      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004366:	e018      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004368:	4baf      	ldr	r3, [pc, #700]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	4aae      	ldr	r2, [pc, #696]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800436e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004372:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004374:	e015      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3304      	adds	r3, #4
 800437a:	2102      	movs	r1, #2
 800437c:	4618      	mov	r0, r3
 800437e:	f001 f96f 	bl	8005660 <RCCEx_PLL2_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004386:	e00c      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3324      	adds	r3, #36	; 0x24
 800438c:	2102      	movs	r1, #2
 800438e:	4618      	mov	r0, r3
 8004390:	f001 fa18 	bl	80057c4 <RCCEx_PLL3_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004398:	e003      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	75fb      	strb	r3, [r7, #23]
      break;
 800439e:	e000      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80043a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043a2:	7dfb      	ldrb	r3, [r7, #23]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d109      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80043a8:	4b9f      	ldr	r3, [pc, #636]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80043aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043b4:	499c      	ldr	r1, [pc, #624]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	650b      	str	r3, [r1, #80]	; 0x50
 80043ba:	e001      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043bc:	7dfb      	ldrb	r3, [r7, #23]
 80043be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d03d      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d826      	bhi.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80043d4:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80043d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043da:	bf00      	nop
 80043dc:	080043f1 	.word	0x080043f1
 80043e0:	080043ff 	.word	0x080043ff
 80043e4:	08004411 	.word	0x08004411
 80043e8:	08004429 	.word	0x08004429
 80043ec:	08004429 	.word	0x08004429
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f0:	4b8d      	ldr	r3, [pc, #564]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	4a8c      	ldr	r2, [pc, #560]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80043f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043fc:	e015      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3304      	adds	r3, #4
 8004402:	2100      	movs	r1, #0
 8004404:	4618      	mov	r0, r3
 8004406:	f001 f92b 	bl	8005660 <RCCEx_PLL2_Config>
 800440a:	4603      	mov	r3, r0
 800440c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800440e:	e00c      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3324      	adds	r3, #36	; 0x24
 8004414:	2100      	movs	r1, #0
 8004416:	4618      	mov	r0, r3
 8004418:	f001 f9d4 	bl	80057c4 <RCCEx_PLL3_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004420:	e003      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
      break;
 8004426:	e000      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800442a:	7dfb      	ldrb	r3, [r7, #23]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d109      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004430:	4b7d      	ldr	r3, [pc, #500]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004434:	f023 0207 	bic.w	r2, r3, #7
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443c:	497a      	ldr	r1, [pc, #488]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800443e:	4313      	orrs	r3, r2
 8004440:	650b      	str	r3, [r1, #80]	; 0x50
 8004442:	e001      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004444:	7dfb      	ldrb	r3, [r7, #23]
 8004446:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004450:	2b00      	cmp	r3, #0
 8004452:	d03e      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004458:	2b80      	cmp	r3, #128	; 0x80
 800445a:	d01c      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800445c:	2b80      	cmp	r3, #128	; 0x80
 800445e:	d804      	bhi.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004464:	2b40      	cmp	r3, #64	; 0x40
 8004466:	d00d      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004468:	e01e      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800446a:	2bc0      	cmp	r3, #192	; 0xc0
 800446c:	d01f      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x186>
 800446e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004472:	d01e      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004474:	e018      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004476:	4b6c      	ldr	r3, [pc, #432]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	4a6b      	ldr	r2, [pc, #428]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800447c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004480:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004482:	e017      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	2100      	movs	r1, #0
 800448a:	4618      	mov	r0, r3
 800448c:	f001 f8e8 	bl	8005660 <RCCEx_PLL2_Config>
 8004490:	4603      	mov	r3, r0
 8004492:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004494:	e00e      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3324      	adds	r3, #36	; 0x24
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f001 f991 	bl	80057c4 <RCCEx_PLL3_Config>
 80044a2:	4603      	mov	r3, r0
 80044a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80044a6:	e005      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	75fb      	strb	r3, [r7, #23]
      break;
 80044ac:	e002      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80044b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d109      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80044ba:	4b5b      	ldr	r3, [pc, #364]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80044bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044be:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c6:	4958      	ldr	r1, [pc, #352]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	650b      	str	r3, [r1, #80]	; 0x50
 80044cc:	e001      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ce:	7dfb      	ldrb	r3, [r7, #23]
 80044d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d044      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044e8:	d01f      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80044ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ee:	d805      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80044f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044f8:	d00e      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80044fa:	e01f      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x214>
 80044fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004500:	d01f      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004502:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004506:	d01e      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004508:	e018      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800450a:	4b47      	ldr	r3, [pc, #284]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	4a46      	ldr	r2, [pc, #280]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004514:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004516:	e017      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3304      	adds	r3, #4
 800451c:	2100      	movs	r1, #0
 800451e:	4618      	mov	r0, r3
 8004520:	f001 f89e 	bl	8005660 <RCCEx_PLL2_Config>
 8004524:	4603      	mov	r3, r0
 8004526:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004528:	e00e      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3324      	adds	r3, #36	; 0x24
 800452e:	2100      	movs	r1, #0
 8004530:	4618      	mov	r0, r3
 8004532:	f001 f947 	bl	80057c4 <RCCEx_PLL3_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800453a:	e005      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	75fb      	strb	r3, [r7, #23]
      break;
 8004540:	e002      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004542:	bf00      	nop
 8004544:	e000      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004548:	7dfb      	ldrb	r3, [r7, #23]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10a      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800454e:	4b36      	ldr	r3, [pc, #216]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004552:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800455c:	4932      	ldr	r1, [pc, #200]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800455e:	4313      	orrs	r3, r2
 8004560:	658b      	str	r3, [r1, #88]	; 0x58
 8004562:	e001      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004564:	7dfb      	ldrb	r3, [r7, #23]
 8004566:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004570:	2b00      	cmp	r3, #0
 8004572:	d044      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800457a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800457e:	d01f      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004580:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004584:	d805      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800458a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800458e:	d00e      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004590:	e01f      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004592:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004596:	d01f      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004598:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800459c:	d01e      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800459e:	e018      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a0:	4b21      	ldr	r3, [pc, #132]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	4a20      	ldr	r2, [pc, #128]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80045a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045ac:	e017      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3304      	adds	r3, #4
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f001 f853 	bl	8005660 <RCCEx_PLL2_Config>
 80045ba:	4603      	mov	r3, r0
 80045bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80045be:	e00e      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3324      	adds	r3, #36	; 0x24
 80045c4:	2100      	movs	r1, #0
 80045c6:	4618      	mov	r0, r3
 80045c8:	f001 f8fc 	bl	80057c4 <RCCEx_PLL3_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045d0:	e005      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	75fb      	strb	r3, [r7, #23]
      break;
 80045d6:	e002      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80045d8:	bf00      	nop
 80045da:	e000      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80045dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045de:	7dfb      	ldrb	r3, [r7, #23]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10a      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80045e4:	4b10      	ldr	r3, [pc, #64]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80045e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045f2:	490d      	ldr	r1, [pc, #52]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	658b      	str	r3, [r1, #88]	; 0x58
 80045f8:	e001      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fa:	7dfb      	ldrb	r3, [r7, #23]
 80045fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d035      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460e:	2b10      	cmp	r3, #16
 8004610:	d00c      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004612:	2b10      	cmp	r3, #16
 8004614:	d802      	bhi.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d01b      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800461a:	e017      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800461c:	2b20      	cmp	r3, #32
 800461e:	d00c      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004620:	2b30      	cmp	r3, #48	; 0x30
 8004622:	d018      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004624:	e012      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004626:	bf00      	nop
 8004628:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800462c:	4baf      	ldr	r3, [pc, #700]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	4aae      	ldr	r2, [pc, #696]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004636:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004638:	e00e      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3304      	adds	r3, #4
 800463e:	2102      	movs	r1, #2
 8004640:	4618      	mov	r0, r3
 8004642:	f001 f80d 	bl	8005660 <RCCEx_PLL2_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800464a:	e005      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	75fb      	strb	r3, [r7, #23]
      break;
 8004650:	e002      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004652:	bf00      	nop
 8004654:	e000      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004656:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004658:	7dfb      	ldrb	r3, [r7, #23]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800465e:	4ba3      	ldr	r3, [pc, #652]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004662:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466a:	49a0      	ldr	r1, [pc, #640]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800466c:	4313      	orrs	r3, r2
 800466e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004670:	e001      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004672:	7dfb      	ldrb	r3, [r7, #23]
 8004674:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d042      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468a:	d01f      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800468c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004690:	d805      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469a:	d00e      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x392>
 800469c:	e01f      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800469e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046a2:	d01f      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80046a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046a8:	d01e      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80046aa:	e018      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ac:	4b8f      	ldr	r3, [pc, #572]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	4a8e      	ldr	r2, [pc, #568]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80046b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80046b8:	e017      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3304      	adds	r3, #4
 80046be:	2100      	movs	r1, #0
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 ffcd 	bl	8005660 <RCCEx_PLL2_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80046ca:	e00e      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3324      	adds	r3, #36	; 0x24
 80046d0:	2100      	movs	r1, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	f001 f876 	bl	80057c4 <RCCEx_PLL3_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80046dc:	e005      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	75fb      	strb	r3, [r7, #23]
      break;
 80046e2:	e002      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80046e4:	bf00      	nop
 80046e6:	e000      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80046e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d109      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80046f0:	4b7e      	ldr	r3, [pc, #504]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80046f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fc:	497b      	ldr	r1, [pc, #492]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	650b      	str	r3, [r1, #80]	; 0x50
 8004702:	e001      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004704:	7dfb      	ldrb	r3, [r7, #23]
 8004706:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d042      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004718:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800471c:	d01b      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800471e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004722:	d805      	bhi.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d022      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472c:	d00a      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800472e:	e01b      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004730:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004734:	d01d      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004736:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800473a:	d01c      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800473c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004740:	d01b      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004742:	e011      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	2101      	movs	r1, #1
 800474a:	4618      	mov	r0, r3
 800474c:	f000 ff88 	bl	8005660 <RCCEx_PLL2_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004754:	e012      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3324      	adds	r3, #36	; 0x24
 800475a:	2101      	movs	r1, #1
 800475c:	4618      	mov	r0, r3
 800475e:	f001 f831 	bl	80057c4 <RCCEx_PLL3_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004766:	e009      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	75fb      	strb	r3, [r7, #23]
      break;
 800476c:	e006      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800476e:	bf00      	nop
 8004770:	e004      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004772:	bf00      	nop
 8004774:	e002      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004776:	bf00      	nop
 8004778:	e000      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800477a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800477c:	7dfb      	ldrb	r3, [r7, #23]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d109      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004782:	4b5a      	ldr	r3, [pc, #360]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004786:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800478e:	4957      	ldr	r1, [pc, #348]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004790:	4313      	orrs	r3, r2
 8004792:	650b      	str	r3, [r1, #80]	; 0x50
 8004794:	e001      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004796:	7dfb      	ldrb	r3, [r7, #23]
 8004798:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d044      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047b0:	d01b      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80047b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047b6:	d805      	bhi.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d022      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80047bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80047c2:	e01b      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80047c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c8:	d01d      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80047ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047ce:	d01c      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80047d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047d4:	d01b      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80047d6:	e011      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3304      	adds	r3, #4
 80047dc:	2101      	movs	r1, #1
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 ff3e 	bl	8005660 <RCCEx_PLL2_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80047e8:	e012      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3324      	adds	r3, #36	; 0x24
 80047ee:	2101      	movs	r1, #1
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 ffe7 	bl	80057c4 <RCCEx_PLL3_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80047fa:	e009      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004800:	e006      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004802:	bf00      	nop
 8004804:	e004      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004806:	bf00      	nop
 8004808:	e002      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800480a:	bf00      	nop
 800480c:	e000      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800480e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004810:	7dfb      	ldrb	r3, [r7, #23]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004816:	4b35      	ldr	r3, [pc, #212]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004824:	4931      	ldr	r1, [pc, #196]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004826:	4313      	orrs	r3, r2
 8004828:	658b      	str	r3, [r1, #88]	; 0x58
 800482a:	e001      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482c:	7dfb      	ldrb	r3, [r7, #23]
 800482e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d02d      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004844:	d005      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800484a:	d009      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800484c:	2b00      	cmp	r3, #0
 800484e:	d013      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004850:	e00f      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004852:	4b26      	ldr	r3, [pc, #152]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	4a25      	ldr	r2, [pc, #148]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800485c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800485e:	e00c      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3304      	adds	r3, #4
 8004864:	2101      	movs	r1, #1
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fefa 	bl	8005660 <RCCEx_PLL2_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004870:	e003      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	75fb      	strb	r3, [r7, #23]
      break;
 8004876:	e000      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d109      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004880:	4b1a      	ldr	r3, [pc, #104]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004884:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800488c:	4917      	ldr	r1, [pc, #92]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800488e:	4313      	orrs	r3, r2
 8004890:	650b      	str	r3, [r1, #80]	; 0x50
 8004892:	e001      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004894:	7dfb      	ldrb	r3, [r7, #23]
 8004896:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d035      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d81b      	bhi.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80048ac:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80048ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b2:	bf00      	nop
 80048b4:	080048f1 	.word	0x080048f1
 80048b8:	080048c5 	.word	0x080048c5
 80048bc:	080048d3 	.word	0x080048d3
 80048c0:	080048f1 	.word	0x080048f1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c4:	4b09      	ldr	r3, [pc, #36]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	4a08      	ldr	r2, [pc, #32]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80048ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80048d0:	e00f      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3304      	adds	r3, #4
 80048d6:	2102      	movs	r1, #2
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fec1 	bl	8005660 <RCCEx_PLL2_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80048e2:	e006      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	75fb      	strb	r3, [r7, #23]
      break;
 80048e8:	e003      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80048ea:	bf00      	nop
 80048ec:	58024400 	.word	0x58024400
      break;
 80048f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d109      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80048f8:	4bba      	ldr	r3, [pc, #744]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80048fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fc:	f023 0203 	bic.w	r2, r3, #3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004904:	49b7      	ldr	r1, [pc, #732]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004906:	4313      	orrs	r3, r2
 8004908:	64cb      	str	r3, [r1, #76]	; 0x4c
 800490a:	e001      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490c:	7dfb      	ldrb	r3, [r7, #23]
 800490e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8086 	beq.w	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800491e:	4bb2      	ldr	r3, [pc, #712]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4ab1      	ldr	r2, [pc, #708]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004928:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800492a:	f7fd f8f5 	bl	8001b18 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004930:	e009      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004932:	f7fd f8f1 	bl	8001b18 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b64      	cmp	r3, #100	; 0x64
 800493e:	d902      	bls.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	75fb      	strb	r3, [r7, #23]
        break;
 8004944:	e005      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004946:	4ba8      	ldr	r3, [pc, #672]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0ef      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004952:	7dfb      	ldrb	r3, [r7, #23]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d166      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004958:	4ba2      	ldr	r3, [pc, #648]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800495a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004962:	4053      	eors	r3, r2
 8004964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004968:	2b00      	cmp	r3, #0
 800496a:	d013      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800496c:	4b9d      	ldr	r3, [pc, #628]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004974:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004976:	4b9b      	ldr	r3, [pc, #620]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	4a9a      	ldr	r2, [pc, #616]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800497c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004980:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004982:	4b98      	ldr	r3, [pc, #608]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004986:	4a97      	ldr	r2, [pc, #604]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800498c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800498e:	4a95      	ldr	r2, [pc, #596]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800499a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800499e:	d115      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fd f8ba 	bl	8001b18 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049a6:	e00b      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a8:	f7fd f8b6 	bl	8001b18 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d902      	bls.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	75fb      	strb	r3, [r7, #23]
            break;
 80049be:	e005      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049c0:	4b88      	ldr	r3, [pc, #544]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80049c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0ed      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80049cc:	7dfb      	ldrb	r3, [r7, #23]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d126      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049e0:	d10d      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80049e2:	4b80      	ldr	r3, [pc, #512]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049f0:	0919      	lsrs	r1, r3, #4
 80049f2:	4b7e      	ldr	r3, [pc, #504]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80049f4:	400b      	ands	r3, r1
 80049f6:	497b      	ldr	r1, [pc, #492]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	610b      	str	r3, [r1, #16]
 80049fc:	e005      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80049fe:	4b79      	ldr	r3, [pc, #484]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	4a78      	ldr	r2, [pc, #480]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004a04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a08:	6113      	str	r3, [r2, #16]
 8004a0a:	4b76      	ldr	r3, [pc, #472]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004a0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a18:	4972      	ldr	r1, [pc, #456]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	670b      	str	r3, [r1, #112]	; 0x70
 8004a1e:	e004      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	75bb      	strb	r3, [r7, #22]
 8004a24:	e001      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a26:	7dfb      	ldrb	r3, [r7, #23]
 8004a28:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d07d      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a3a:	2b28      	cmp	r3, #40	; 0x28
 8004a3c:	d866      	bhi.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004a3e:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a44:	08004b13 	.word	0x08004b13
 8004a48:	08004b0d 	.word	0x08004b0d
 8004a4c:	08004b0d 	.word	0x08004b0d
 8004a50:	08004b0d 	.word	0x08004b0d
 8004a54:	08004b0d 	.word	0x08004b0d
 8004a58:	08004b0d 	.word	0x08004b0d
 8004a5c:	08004b0d 	.word	0x08004b0d
 8004a60:	08004b0d 	.word	0x08004b0d
 8004a64:	08004ae9 	.word	0x08004ae9
 8004a68:	08004b0d 	.word	0x08004b0d
 8004a6c:	08004b0d 	.word	0x08004b0d
 8004a70:	08004b0d 	.word	0x08004b0d
 8004a74:	08004b0d 	.word	0x08004b0d
 8004a78:	08004b0d 	.word	0x08004b0d
 8004a7c:	08004b0d 	.word	0x08004b0d
 8004a80:	08004b0d 	.word	0x08004b0d
 8004a84:	08004afb 	.word	0x08004afb
 8004a88:	08004b0d 	.word	0x08004b0d
 8004a8c:	08004b0d 	.word	0x08004b0d
 8004a90:	08004b0d 	.word	0x08004b0d
 8004a94:	08004b0d 	.word	0x08004b0d
 8004a98:	08004b0d 	.word	0x08004b0d
 8004a9c:	08004b0d 	.word	0x08004b0d
 8004aa0:	08004b0d 	.word	0x08004b0d
 8004aa4:	08004b13 	.word	0x08004b13
 8004aa8:	08004b0d 	.word	0x08004b0d
 8004aac:	08004b0d 	.word	0x08004b0d
 8004ab0:	08004b0d 	.word	0x08004b0d
 8004ab4:	08004b0d 	.word	0x08004b0d
 8004ab8:	08004b0d 	.word	0x08004b0d
 8004abc:	08004b0d 	.word	0x08004b0d
 8004ac0:	08004b0d 	.word	0x08004b0d
 8004ac4:	08004b13 	.word	0x08004b13
 8004ac8:	08004b0d 	.word	0x08004b0d
 8004acc:	08004b0d 	.word	0x08004b0d
 8004ad0:	08004b0d 	.word	0x08004b0d
 8004ad4:	08004b0d 	.word	0x08004b0d
 8004ad8:	08004b0d 	.word	0x08004b0d
 8004adc:	08004b0d 	.word	0x08004b0d
 8004ae0:	08004b0d 	.word	0x08004b0d
 8004ae4:	08004b13 	.word	0x08004b13
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3304      	adds	r3, #4
 8004aec:	2101      	movs	r1, #1
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fdb6 	bl	8005660 <RCCEx_PLL2_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004af8:	e00c      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3324      	adds	r3, #36	; 0x24
 8004afe:	2101      	movs	r1, #1
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fe5f 	bl	80057c4 <RCCEx_PLL3_Config>
 8004b06:	4603      	mov	r3, r0
 8004b08:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004b0a:	e003      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b10:	e000      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8004b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b14:	7dfb      	ldrb	r3, [r7, #23]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004b1a:	4b32      	ldr	r3, [pc, #200]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b26:	492f      	ldr	r1, [pc, #188]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	654b      	str	r3, [r1, #84]	; 0x54
 8004b2c:	e001      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b2e:	7dfb      	ldrb	r3, [r7, #23]
 8004b30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d037      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b42:	2b05      	cmp	r3, #5
 8004b44:	d820      	bhi.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004b46:	a201      	add	r2, pc, #4	; (adr r2, 8004b4c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4c:	08004b8f 	.word	0x08004b8f
 8004b50:	08004b65 	.word	0x08004b65
 8004b54:	08004b77 	.word	0x08004b77
 8004b58:	08004b8f 	.word	0x08004b8f
 8004b5c:	08004b8f 	.word	0x08004b8f
 8004b60:	08004b8f 	.word	0x08004b8f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3304      	adds	r3, #4
 8004b68:	2101      	movs	r1, #1
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fd78 	bl	8005660 <RCCEx_PLL2_Config>
 8004b70:	4603      	mov	r3, r0
 8004b72:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004b74:	e00c      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3324      	adds	r3, #36	; 0x24
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fe21 	bl	80057c4 <RCCEx_PLL3_Config>
 8004b82:	4603      	mov	r3, r0
 8004b84:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004b86:	e003      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b8c:	e000      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b90:	7dfb      	ldrb	r3, [r7, #23]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d109      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b96:	4b13      	ldr	r3, [pc, #76]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9a:	f023 0207 	bic.w	r2, r3, #7
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba2:	4910      	ldr	r1, [pc, #64]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	654b      	str	r3, [r1, #84]	; 0x54
 8004ba8:	e001      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004baa:	7dfb      	ldrb	r3, [r7, #23]
 8004bac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d040      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc0:	2b05      	cmp	r3, #5
 8004bc2:	d827      	bhi.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004bc4:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8004bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bca:	bf00      	nop
 8004bcc:	08004c1b 	.word	0x08004c1b
 8004bd0:	08004bf1 	.word	0x08004bf1
 8004bd4:	08004c03 	.word	0x08004c03
 8004bd8:	08004c1b 	.word	0x08004c1b
 8004bdc:	08004c1b 	.word	0x08004c1b
 8004be0:	08004c1b 	.word	0x08004c1b
 8004be4:	58024400 	.word	0x58024400
 8004be8:	58024800 	.word	0x58024800
 8004bec:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fd32 	bl	8005660 <RCCEx_PLL2_Config>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004c00:	e00c      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3324      	adds	r3, #36	; 0x24
 8004c06:	2101      	movs	r1, #1
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 fddb 	bl	80057c4 <RCCEx_PLL3_Config>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004c12:	e003      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	75fb      	strb	r3, [r7, #23]
      break;
 8004c18:	e000      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c22:	4bb2      	ldr	r3, [pc, #712]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c26:	f023 0207 	bic.w	r2, r3, #7
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c30:	49ae      	ldr	r1, [pc, #696]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	658b      	str	r3, [r1, #88]	; 0x58
 8004c36:	e001      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c38:	7dfb      	ldrb	r3, [r7, #23]
 8004c3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0320 	and.w	r3, r3, #32
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d044      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c52:	d01b      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c58:	d805      	bhi.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d022      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004c5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c62:	d00a      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004c64:	e01b      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6a:	d01d      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c70:	d01c      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004c72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c76:	d01b      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004c78:	e011      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	2100      	movs	r1, #0
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fced 	bl	8005660 <RCCEx_PLL2_Config>
 8004c86:	4603      	mov	r3, r0
 8004c88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004c8a:	e012      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3324      	adds	r3, #36	; 0x24
 8004c90:	2102      	movs	r1, #2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fd96 	bl	80057c4 <RCCEx_PLL3_Config>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004c9c:	e009      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca2:	e006      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004ca4:	bf00      	nop
 8004ca6:	e004      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004ca8:	bf00      	nop
 8004caa:	e002      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004cac:	bf00      	nop
 8004cae:	e000      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004cb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cb2:	7dfb      	ldrb	r3, [r7, #23]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cb8:	4b8c      	ldr	r3, [pc, #560]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cc6:	4989      	ldr	r1, [pc, #548]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	654b      	str	r3, [r1, #84]	; 0x54
 8004ccc:	e001      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cce:	7dfb      	ldrb	r3, [r7, #23]
 8004cd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d044      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce8:	d01b      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cee:	d805      	bhi.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d022      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf8:	d00a      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004cfa:	e01b      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d00:	d01d      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004d02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d06:	d01c      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004d08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d0c:	d01b      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004d0e:	e011      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3304      	adds	r3, #4
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fca2 	bl	8005660 <RCCEx_PLL2_Config>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004d20:	e012      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3324      	adds	r3, #36	; 0x24
 8004d26:	2102      	movs	r1, #2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fd4b 	bl	80057c4 <RCCEx_PLL3_Config>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004d32:	e009      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	75fb      	strb	r3, [r7, #23]
      break;
 8004d38:	e006      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004d3a:	bf00      	nop
 8004d3c:	e004      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004d3e:	bf00      	nop
 8004d40:	e002      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004d42:	bf00      	nop
 8004d44:	e000      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10a      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d4e:	4b67      	ldr	r3, [pc, #412]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d5c:	4963      	ldr	r1, [pc, #396]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	658b      	str	r3, [r1, #88]	; 0x58
 8004d62:	e001      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
 8004d66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d044      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d7e:	d01b      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d84:	d805      	bhi.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d022      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d8e:	d00a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004d90:	e01b      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8004d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d96:	d01d      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004d98:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004d9c:	d01c      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8004d9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004da2:	d01b      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004da4:	e011      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3304      	adds	r3, #4
 8004daa:	2100      	movs	r1, #0
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fc57 	bl	8005660 <RCCEx_PLL2_Config>
 8004db2:	4603      	mov	r3, r0
 8004db4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004db6:	e012      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3324      	adds	r3, #36	; 0x24
 8004dbc:	2102      	movs	r1, #2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fd00 	bl	80057c4 <RCCEx_PLL3_Config>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004dc8:	e009      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8004dce:	e006      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004dd0:	bf00      	nop
 8004dd2:	e004      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004dd4:	bf00      	nop
 8004dd6:	e002      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004dd8:	bf00      	nop
 8004dda:	e000      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dde:	7dfb      	ldrb	r3, [r7, #23]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10a      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004de4:	4b41      	ldr	r3, [pc, #260]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004df2:	493e      	ldr	r1, [pc, #248]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	658b      	str	r3, [r1, #88]	; 0x58
 8004df8:	e001      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
 8004dfc:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d01a      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e14:	d10a      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3324      	adds	r3, #36	; 0x24
 8004e1a:	2102      	movs	r1, #2
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fcd1 	bl	80057c4 <RCCEx_PLL3_Config>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004e2c:	4b2f      	ldr	r3, [pc, #188]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e3a:	492c      	ldr	r1, [pc, #176]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0310 	and.w	r3, r3, #16
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01a      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e56:	d10a      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3324      	adds	r3, #36	; 0x24
 8004e5c:	2102      	movs	r1, #2
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fcb0 	bl	80057c4 <RCCEx_PLL3_Config>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e6e:	4b1f      	ldr	r3, [pc, #124]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e7c:	491b      	ldr	r1, [pc, #108]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d032      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e98:	d00d      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8004e9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e9e:	d016      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d111      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fbd8 	bl	8005660 <RCCEx_PLL2_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004eb4:	e00c      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3324      	adds	r3, #36	; 0x24
 8004eba:	2102      	movs	r1, #2
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 fc81 	bl	80057c4 <RCCEx_PLL3_Config>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004ec6:	e003      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	75fb      	strb	r3, [r7, #23]
      break;
 8004ecc:	e000      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8004ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ed6:	4b05      	ldr	r3, [pc, #20]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ee4:	4901      	ldr	r1, [pc, #4]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	658b      	str	r3, [r1, #88]	; 0x58
 8004eea:	e003      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004eec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
 8004ef2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d02f      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f0a:	d00c      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004f0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f10:	d015      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8004f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f16:	d10f      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f18:	4b79      	ldr	r3, [pc, #484]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	4a78      	ldr	r2, [pc, #480]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004f24:	e00c      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3324      	adds	r3, #36	; 0x24
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fc49 	bl	80057c4 <RCCEx_PLL3_Config>
 8004f32:	4603      	mov	r3, r0
 8004f34:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004f36:	e003      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f3c:	e000      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f40:	7dfb      	ldrb	r3, [r7, #23]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10a      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f46:	4b6e      	ldr	r3, [pc, #440]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f54:	496a      	ldr	r1, [pc, #424]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	654b      	str	r3, [r1, #84]	; 0x54
 8004f5a:	e001      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
 8004f5e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d029      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f78:	d007      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004f7a:	e00f      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f7c:	4b60      	ldr	r3, [pc, #384]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	4a5f      	ldr	r2, [pc, #380]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004f88:	e00b      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	2102      	movs	r1, #2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fb65 	bl	8005660 <RCCEx_PLL2_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004f9a:	e002      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d109      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004fa8:	4b55      	ldr	r3, [pc, #340]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb4:	4952      	ldr	r1, [pc, #328]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004fba:	e001      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3324      	adds	r3, #36	; 0x24
 8004fd0:	2102      	movs	r1, #2
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fbf6 	bl	80057c4 <RCCEx_PLL3_Config>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d02f      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ff6:	d00c      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ffc:	d802      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d011      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005002:	e00d      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005008:	d00f      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800500a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800500e:	d00e      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005010:	e006      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005012:	4b3b      	ldr	r3, [pc, #236]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005016:	4a3a      	ldr	r2, [pc, #232]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800501c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800501e:	e007      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	75fb      	strb	r3, [r7, #23]
      break;
 8005024:	e004      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005026:	bf00      	nop
 8005028:	e002      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800502a:	bf00      	nop
 800502c:	e000      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800502e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005030:	7dfb      	ldrb	r3, [r7, #23]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d109      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005036:	4b32      	ldr	r3, [pc, #200]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005042:	492f      	ldr	r1, [pc, #188]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005044:	4313      	orrs	r3, r2
 8005046:	654b      	str	r3, [r1, #84]	; 0x54
 8005048:	e001      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504a:	7dfb      	ldrb	r3, [r7, #23]
 800504c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d008      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800505a:	4b29      	ldr	r3, [pc, #164]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800505c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005066:	4926      	ldr	r1, [pc, #152]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005068:	4313      	orrs	r3, r2
 800506a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d009      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005078:	4b21      	ldr	r3, [pc, #132]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005086:	491e      	ldr	r1, [pc, #120]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005088:	4313      	orrs	r3, r2
 800508a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d008      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005098:	4b19      	ldr	r3, [pc, #100]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800509a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800509c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050a4:	4916      	ldr	r1, [pc, #88]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00d      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050b6:	4b12      	ldr	r3, [pc, #72]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	4a11      	ldr	r2, [pc, #68]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80050bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050c0:	6113      	str	r3, [r2, #16]
 80050c2:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80050cc:	490c      	ldr	r1, [pc, #48]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	da08      	bge.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80050da:	4b09      	ldr	r3, [pc, #36]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80050dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e6:	4906      	ldr	r1, [pc, #24]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80050ec:	7dbb      	ldrb	r3, [r7, #22]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	e000      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	58024400 	.word	0x58024400

08005104 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005108:	f7ff f870 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 800510c:	4601      	mov	r1, r0
 800510e:	4b06      	ldr	r3, [pc, #24]	; (8005128 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	091b      	lsrs	r3, r3, #4
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	4a04      	ldr	r2, [pc, #16]	; (800512c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800511a:	5cd3      	ldrb	r3, [r2, r3]
 800511c:	f003 031f 	and.w	r3, r3, #31
 8005120:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005124:	4618      	mov	r0, r3
 8005126:	bd80      	pop	{r7, pc}
 8005128:	58024400 	.word	0x58024400
 800512c:	0800c5cc 	.word	0x0800c5cc

08005130 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005130:	b480      	push	{r7}
 8005132:	b089      	sub	sp, #36	; 0x24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005138:	4b9d      	ldr	r3, [pc, #628]	; (80053b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	f003 0303 	and.w	r3, r3, #3
 8005140:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005142:	4b9b      	ldr	r3, [pc, #620]	; (80053b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	0b1b      	lsrs	r3, r3, #12
 8005148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800514c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800514e:	4b98      	ldr	r3, [pc, #608]	; (80053b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	091b      	lsrs	r3, r3, #4
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800515a:	4b95      	ldr	r3, [pc, #596]	; (80053b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515e:	08db      	lsrs	r3, r3, #3
 8005160:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	fb02 f303 	mul.w	r3, r2, r3
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005172:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 810a 	beq.w	8005392 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d05a      	beq.n	800523a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005184:	2b01      	cmp	r3, #1
 8005186:	d302      	bcc.n	800518e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005188:	2b02      	cmp	r3, #2
 800518a:	d078      	beq.n	800527e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800518c:	e099      	b.n	80052c2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800518e:	4b88      	ldr	r3, [pc, #544]	; (80053b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b00      	cmp	r3, #0
 8005198:	d02d      	beq.n	80051f6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800519a:	4b85      	ldr	r3, [pc, #532]	; (80053b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	08db      	lsrs	r3, r3, #3
 80051a0:	f003 0303 	and.w	r3, r3, #3
 80051a4:	4a83      	ldr	r2, [pc, #524]	; (80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80051a6:	fa22 f303 	lsr.w	r3, r2, r3
 80051aa:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	ee07 3a90 	vmov	s15, r3
 80051bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051c4:	4b7a      	ldr	r3, [pc, #488]	; (80053b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051cc:	ee07 3a90 	vmov	s15, r3
 80051d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80051d8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80053b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80051dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80051f4:	e087      	b.n	8005306 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	ee07 3a90 	vmov	s15, r3
 80051fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005200:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80053bc <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005204:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005208:	4b69      	ldr	r3, [pc, #420]	; (80053b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005210:	ee07 3a90 	vmov	s15, r3
 8005214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005218:	ed97 6a03 	vldr	s12, [r7, #12]
 800521c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80053b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005220:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005224:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005228:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800522c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005234:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005238:	e065      	b.n	8005306 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	ee07 3a90 	vmov	s15, r3
 8005240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005244:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005248:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800524c:	4b58      	ldr	r3, [pc, #352]	; (80053b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005254:	ee07 3a90 	vmov	s15, r3
 8005258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800525c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005260:	eddf 5a55 	vldr	s11, [pc, #340]	; 80053b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005264:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005268:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800526c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005278:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800527c:	e043      	b.n	8005306 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	ee07 3a90 	vmov	s15, r3
 8005284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005288:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800528c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005290:	4b47      	ldr	r3, [pc, #284]	; (80053b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005298:	ee07 3a90 	vmov	s15, r3
 800529c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80052a4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80053b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80052a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052c0:	e021      	b.n	8005306 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	ee07 3a90 	vmov	s15, r3
 80052c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052cc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80052d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052d4:	4b36      	ldr	r3, [pc, #216]	; (80053b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80052d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052dc:	ee07 3a90 	vmov	s15, r3
 80052e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80052e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80053b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80052ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005300:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005304:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005306:	4b2a      	ldr	r3, [pc, #168]	; (80053b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	0a5b      	lsrs	r3, r3, #9
 800530c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005310:	ee07 3a90 	vmov	s15, r3
 8005314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800531c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005320:	edd7 6a07 	vldr	s13, [r7, #28]
 8005324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800532c:	ee17 2a90 	vmov	r2, s15
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005334:	4b1e      	ldr	r3, [pc, #120]	; (80053b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	0c1b      	lsrs	r3, r3, #16
 800533a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005346:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800534a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800534e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800535a:	ee17 2a90 	vmov	r2, s15
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005362:	4b13      	ldr	r3, [pc, #76]	; (80053b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005366:	0e1b      	lsrs	r3, r3, #24
 8005368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800536c:	ee07 3a90 	vmov	s15, r3
 8005370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005378:	ee37 7a87 	vadd.f32	s14, s15, s14
 800537c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005388:	ee17 2a90 	vmov	r2, s15
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005390:	e008      	b.n	80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	609a      	str	r2, [r3, #8]
}
 80053a4:	bf00      	nop
 80053a6:	3724      	adds	r7, #36	; 0x24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	58024400 	.word	0x58024400
 80053b4:	03d09000 	.word	0x03d09000
 80053b8:	46000000 	.word	0x46000000
 80053bc:	4c742400 	.word	0x4c742400
 80053c0:	4a742400 	.word	0x4a742400
 80053c4:	4af42400 	.word	0x4af42400

080053c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b089      	sub	sp, #36	; 0x24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053d0:	4b9d      	ldr	r3, [pc, #628]	; (8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	f003 0303 	and.w	r3, r3, #3
 80053d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80053da:	4b9b      	ldr	r3, [pc, #620]	; (8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	0d1b      	lsrs	r3, r3, #20
 80053e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80053e6:	4b98      	ldr	r3, [pc, #608]	; (8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	0a1b      	lsrs	r3, r3, #8
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80053f2:	4b95      	ldr	r3, [pc, #596]	; (8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80053f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f6:	08db      	lsrs	r3, r3, #3
 80053f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	fb02 f303 	mul.w	r3, r2, r3
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 810a 	beq.w	800562a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d05a      	beq.n	80054d2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800541c:	2b01      	cmp	r3, #1
 800541e:	d302      	bcc.n	8005426 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005420:	2b02      	cmp	r3, #2
 8005422:	d078      	beq.n	8005516 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005424:	e099      	b.n	800555a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005426:	4b88      	ldr	r3, [pc, #544]	; (8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d02d      	beq.n	800548e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005432:	4b85      	ldr	r3, [pc, #532]	; (8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	08db      	lsrs	r3, r3, #3
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	4a83      	ldr	r2, [pc, #524]	; (800564c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800543e:	fa22 f303 	lsr.w	r3, r2, r3
 8005442:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	ee07 3a90 	vmov	s15, r3
 8005454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800545c:	4b7a      	ldr	r3, [pc, #488]	; (8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005464:	ee07 3a90 	vmov	s15, r3
 8005468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005470:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005650 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800547c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005488:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800548c:	e087      	b.n	800559e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	ee07 3a90 	vmov	s15, r3
 8005494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005498:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005654 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800549c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a0:	4b69      	ldr	r3, [pc, #420]	; (8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a8:	ee07 3a90 	vmov	s15, r3
 80054ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80054b4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005650 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80054b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054d0:	e065      	b.n	800559e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	ee07 3a90 	vmov	s15, r3
 80054d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054dc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80054e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054e4:	4b58      	ldr	r3, [pc, #352]	; (8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ec:	ee07 3a90 	vmov	s15, r3
 80054f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80054f8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005650 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80054fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005500:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005508:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800550c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005510:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005514:	e043      	b.n	800559e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	ee07 3a90 	vmov	s15, r3
 800551c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005520:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800565c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005528:	4b47      	ldr	r3, [pc, #284]	; (8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005530:	ee07 3a90 	vmov	s15, r3
 8005534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005538:	ed97 6a03 	vldr	s12, [r7, #12]
 800553c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005650 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005540:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005548:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800554c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005554:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005558:	e021      	b.n	800559e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	ee07 3a90 	vmov	s15, r3
 8005560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005564:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005568:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800556c:	4b36      	ldr	r3, [pc, #216]	; (8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800556e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005574:	ee07 3a90 	vmov	s15, r3
 8005578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800557c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005580:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005650 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005584:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005588:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800558c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005590:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005598:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800559c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800559e:	4b2a      	ldr	r3, [pc, #168]	; (8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	0a5b      	lsrs	r3, r3, #9
 80055a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055a8:	ee07 3a90 	vmov	s15, r3
 80055ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80055bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055c4:	ee17 2a90 	vmov	r2, s15
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80055cc:	4b1e      	ldr	r3, [pc, #120]	; (8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	0c1b      	lsrs	r3, r3, #16
 80055d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80055ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055f2:	ee17 2a90 	vmov	r2, s15
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80055fa:	4b13      	ldr	r3, [pc, #76]	; (8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	0e1b      	lsrs	r3, r3, #24
 8005600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005604:	ee07 3a90 	vmov	s15, r3
 8005608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005610:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005614:	edd7 6a07 	vldr	s13, [r7, #28]
 8005618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800561c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005620:	ee17 2a90 	vmov	r2, s15
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005628:	e008      	b.n	800563c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	609a      	str	r2, [r3, #8]
}
 800563c:	bf00      	nop
 800563e:	3724      	adds	r7, #36	; 0x24
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	58024400 	.word	0x58024400
 800564c:	03d09000 	.word	0x03d09000
 8005650:	46000000 	.word	0x46000000
 8005654:	4c742400 	.word	0x4c742400
 8005658:	4a742400 	.word	0x4a742400
 800565c:	4af42400 	.word	0x4af42400

08005660 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800566e:	4b53      	ldr	r3, [pc, #332]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	2b03      	cmp	r3, #3
 8005678:	d101      	bne.n	800567e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e099      	b.n	80057b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800567e:	4b4f      	ldr	r3, [pc, #316]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a4e      	ldr	r2, [pc, #312]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 8005684:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800568a:	f7fc fa45 	bl	8001b18 <HAL_GetTick>
 800568e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005690:	e008      	b.n	80056a4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005692:	f7fc fa41 	bl	8001b18 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e086      	b.n	80057b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056a4:	4b45      	ldr	r3, [pc, #276]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1f0      	bne.n	8005692 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80056b0:	4b42      	ldr	r3, [pc, #264]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 80056b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	031b      	lsls	r3, r3, #12
 80056be:	493f      	ldr	r1, [pc, #252]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	628b      	str	r3, [r1, #40]	; 0x28
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	025b      	lsls	r3, r3, #9
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	3b01      	subs	r3, #1
 80056e0:	041b      	lsls	r3, r3, #16
 80056e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	3b01      	subs	r3, #1
 80056ee:	061b      	lsls	r3, r3, #24
 80056f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80056f4:	4931      	ldr	r1, [pc, #196]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80056fa:	4b30      	ldr	r3, [pc, #192]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	492d      	ldr	r1, [pc, #180]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 8005708:	4313      	orrs	r3, r2
 800570a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800570c:	4b2b      	ldr	r3, [pc, #172]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	f023 0220 	bic.w	r2, r3, #32
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	4928      	ldr	r1, [pc, #160]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 800571a:	4313      	orrs	r3, r2
 800571c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800571e:	4b27      	ldr	r3, [pc, #156]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	4a26      	ldr	r2, [pc, #152]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 8005724:	f023 0310 	bic.w	r3, r3, #16
 8005728:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800572a:	4b24      	ldr	r3, [pc, #144]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 800572c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800572e:	4b24      	ldr	r3, [pc, #144]	; (80057c0 <RCCEx_PLL2_Config+0x160>)
 8005730:	4013      	ands	r3, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	69d2      	ldr	r2, [r2, #28]
 8005736:	00d2      	lsls	r2, r2, #3
 8005738:	4920      	ldr	r1, [pc, #128]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 800573a:	4313      	orrs	r3, r2
 800573c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800573e:	4b1f      	ldr	r3, [pc, #124]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	4a1e      	ldr	r2, [pc, #120]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 8005744:	f043 0310 	orr.w	r3, r3, #16
 8005748:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d106      	bne.n	800575e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005750:	4b1a      	ldr	r3, [pc, #104]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	4a19      	ldr	r2, [pc, #100]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 8005756:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800575a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800575c:	e00f      	b.n	800577e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d106      	bne.n	8005772 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005764:	4b15      	ldr	r3, [pc, #84]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	4a14      	ldr	r2, [pc, #80]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 800576a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800576e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005770:	e005      	b.n	800577e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005772:	4b12      	ldr	r3, [pc, #72]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 8005774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005776:	4a11      	ldr	r2, [pc, #68]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 8005778:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800577c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800577e:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a0e      	ldr	r2, [pc, #56]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 8005784:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005788:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800578a:	f7fc f9c5 	bl	8001b18 <HAL_GetTick>
 800578e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005790:	e008      	b.n	80057a4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005792:	f7fc f9c1 	bl	8001b18 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d901      	bls.n	80057a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e006      	b.n	80057b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <RCCEx_PLL2_Config+0x15c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0f0      	beq.n	8005792 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	58024400 	.word	0x58024400
 80057c0:	ffff0007 	.word	0xffff0007

080057c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057d2:	4b53      	ldr	r3, [pc, #332]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 80057d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d6:	f003 0303 	and.w	r3, r3, #3
 80057da:	2b03      	cmp	r3, #3
 80057dc:	d101      	bne.n	80057e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e099      	b.n	8005916 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80057e2:	4b4f      	ldr	r3, [pc, #316]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a4e      	ldr	r2, [pc, #312]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 80057e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ee:	f7fc f993 	bl	8001b18 <HAL_GetTick>
 80057f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80057f4:	e008      	b.n	8005808 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80057f6:	f7fc f98f 	bl	8001b18 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e086      	b.n	8005916 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005808:	4b45      	ldr	r3, [pc, #276]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1f0      	bne.n	80057f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005814:	4b42      	ldr	r3, [pc, #264]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 8005816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005818:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	051b      	lsls	r3, r3, #20
 8005822:	493f      	ldr	r1, [pc, #252]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 8005824:	4313      	orrs	r3, r2
 8005826:	628b      	str	r3, [r1, #40]	; 0x28
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	3b01      	subs	r3, #1
 800582e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	3b01      	subs	r3, #1
 8005838:	025b      	lsls	r3, r3, #9
 800583a:	b29b      	uxth	r3, r3
 800583c:	431a      	orrs	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	3b01      	subs	r3, #1
 8005844:	041b      	lsls	r3, r3, #16
 8005846:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	3b01      	subs	r3, #1
 8005852:	061b      	lsls	r3, r3, #24
 8005854:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005858:	4931      	ldr	r1, [pc, #196]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 800585a:	4313      	orrs	r3, r2
 800585c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800585e:	4b30      	ldr	r3, [pc, #192]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	492d      	ldr	r1, [pc, #180]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 800586c:	4313      	orrs	r3, r2
 800586e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005870:	4b2b      	ldr	r3, [pc, #172]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	4928      	ldr	r1, [pc, #160]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 800587e:	4313      	orrs	r3, r2
 8005880:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005882:	4b27      	ldr	r3, [pc, #156]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	4a26      	ldr	r2, [pc, #152]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 8005888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800588c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800588e:	4b24      	ldr	r3, [pc, #144]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 8005890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005892:	4b24      	ldr	r3, [pc, #144]	; (8005924 <RCCEx_PLL3_Config+0x160>)
 8005894:	4013      	ands	r3, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	69d2      	ldr	r2, [r2, #28]
 800589a:	00d2      	lsls	r2, r2, #3
 800589c:	4920      	ldr	r1, [pc, #128]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80058a2:	4b1f      	ldr	r3, [pc, #124]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 80058a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a6:	4a1e      	ldr	r2, [pc, #120]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 80058a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d106      	bne.n	80058c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80058b4:	4b1a      	ldr	r3, [pc, #104]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	4a19      	ldr	r2, [pc, #100]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 80058ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80058be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058c0:	e00f      	b.n	80058e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d106      	bne.n	80058d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80058c8:	4b15      	ldr	r3, [pc, #84]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	4a14      	ldr	r2, [pc, #80]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 80058ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80058d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058d4:	e005      	b.n	80058e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80058d6:	4b12      	ldr	r3, [pc, #72]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	4a11      	ldr	r2, [pc, #68]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 80058dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80058e2:	4b0f      	ldr	r3, [pc, #60]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a0e      	ldr	r2, [pc, #56]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 80058e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058ee:	f7fc f913 	bl	8001b18 <HAL_GetTick>
 80058f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80058f4:	e008      	b.n	8005908 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80058f6:	f7fc f90f 	bl	8001b18 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e006      	b.n	8005916 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005908:	4b05      	ldr	r3, [pc, #20]	; (8005920 <RCCEx_PLL3_Config+0x15c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0f0      	beq.n	80058f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	58024400 	.word	0x58024400
 8005924:	ffff0007 	.word	0xffff0007

08005928 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e0e2      	b.n	8005b04 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a70      	ldr	r2, [pc, #448]	; (8005b0c <HAL_SPI_Init+0x1e4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00f      	beq.n	800596e <HAL_SPI_Init+0x46>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a6f      	ldr	r2, [pc, #444]	; (8005b10 <HAL_SPI_Init+0x1e8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00a      	beq.n	800596e <HAL_SPI_Init+0x46>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a6d      	ldr	r2, [pc, #436]	; (8005b14 <HAL_SPI_Init+0x1ec>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d005      	beq.n	800596e <HAL_SPI_Init+0x46>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	2b0f      	cmp	r3, #15
 8005968:	d901      	bls.n	800596e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e0ca      	b.n	8005b04 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f001 f870 	bl	8006a54 <SPI_GetPacketSize>
 8005974:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a64      	ldr	r2, [pc, #400]	; (8005b0c <HAL_SPI_Init+0x1e4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00c      	beq.n	800599a <HAL_SPI_Init+0x72>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a62      	ldr	r2, [pc, #392]	; (8005b10 <HAL_SPI_Init+0x1e8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d007      	beq.n	800599a <HAL_SPI_Init+0x72>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a61      	ldr	r2, [pc, #388]	; (8005b14 <HAL_SPI_Init+0x1ec>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d002      	beq.n	800599a <HAL_SPI_Init+0x72>
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b08      	cmp	r3, #8
 8005998:	d811      	bhi.n	80059be <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800599e:	4a5b      	ldr	r2, [pc, #364]	; (8005b0c <HAL_SPI_Init+0x1e4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d009      	beq.n	80059b8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a59      	ldr	r2, [pc, #356]	; (8005b10 <HAL_SPI_Init+0x1e8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d004      	beq.n	80059b8 <HAL_SPI_Init+0x90>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a58      	ldr	r2, [pc, #352]	; (8005b14 <HAL_SPI_Init+0x1ec>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d104      	bne.n	80059c2 <HAL_SPI_Init+0x9a>
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2b10      	cmp	r3, #16
 80059bc:	d901      	bls.n	80059c2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e0a0      	b.n	8005b04 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d106      	bne.n	80059dc <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fb fdc0 	bl	800155c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0201 	bic.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059fc:	d110      	bne.n	8005a20 <HAL_SPI_Init+0xf8>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a06:	d10b      	bne.n	8005a20 <HAL_SPI_Init+0xf8>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d107      	bne.n	8005a20 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a1e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a32:	ea42 0103 	orr.w	r1, r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a80:	ea42 0103 	orr.w	r1, r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d113      	bne.n	8005ac0 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aaa:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005abe:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0201 	bic.w	r2, r2, #1
 8005ace:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40013000 	.word	0x40013000
 8005b10:	40003800 	.word	0x40003800
 8005b14:	40003c00 	.word	0x40003c00

08005b18 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08a      	sub	sp, #40	; 0x28
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	4613      	mov	r3, r2
 8005b26:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3320      	adds	r3, #32
 8005b2e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_SPI_Transmit+0x2a>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e1d7      	b.n	8005ef2 <HAL_SPI_Transmit+0x3da>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b4a:	f7fb ffe5 	bl	8001b18 <HAL_GetTick>
 8005b4e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d007      	beq.n	8005b6c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005b68:	7efb      	ldrb	r3, [r7, #27]
 8005b6a:	e1c2      	b.n	8005ef2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <HAL_SPI_Transmit+0x60>
 8005b72:	88fb      	ldrh	r3, [r7, #6]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d107      	bne.n	8005b88 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005b84:	7efb      	ldrb	r3, [r7, #27]
 8005b86:	e1b4      	b.n	8005ef2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2203      	movs	r2, #3
 8005b8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	88fa      	ldrh	r2, [r7, #6]
 8005ba2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	88fa      	ldrh	r2, [r7, #6]
 8005baa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005bd8:	d107      	bne.n	8005bea <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005be8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	4b96      	ldr	r3, [pc, #600]	; (8005e4c <HAL_SPI_Transmit+0x334>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	88f9      	ldrh	r1, [r7, #6]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	6812      	ldr	r2, [r2, #0]
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0201 	orr.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c16:	d107      	bne.n	8005c28 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	2b0f      	cmp	r3, #15
 8005c2e:	d947      	bls.n	8005cc0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005c30:	e03f      	b.n	8005cb2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d114      	bne.n	8005c6a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6812      	ldr	r2, [r2, #0]
 8005c4a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c50:	1d1a      	adds	r2, r3, #4
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005c68:	e023      	b.n	8005cb2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c6a:	f7fb ff55 	bl	8001b18 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d803      	bhi.n	8005c82 <HAL_SPI_Transmit+0x16a>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c80:	d102      	bne.n	8005c88 <HAL_SPI_Transmit+0x170>
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d114      	bne.n	8005cb2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 fe15 	bl	80068b8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e11f      	b.n	8005ef2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1b9      	bne.n	8005c32 <HAL_SPI_Transmit+0x11a>
 8005cbe:	e0f2      	b.n	8005ea6 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	2b07      	cmp	r3, #7
 8005cc6:	f240 80e7 	bls.w	8005e98 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005cca:	e05d      	b.n	8005d88 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d132      	bne.n	8005d40 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d918      	bls.n	8005d18 <HAL_SPI_Transmit+0x200>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d014      	beq.n	8005d18 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfe:	1d1a      	adds	r2, r3, #4
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b02      	subs	r3, #2
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005d16:	e037      	b.n	8005d88 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1c:	881a      	ldrh	r2, [r3, #0]
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d26:	1c9a      	adds	r2, r3, #2
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005d3e:	e023      	b.n	8005d88 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d40:	f7fb feea 	bl	8001b18 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d803      	bhi.n	8005d58 <HAL_SPI_Transmit+0x240>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d56:	d102      	bne.n	8005d5e <HAL_SPI_Transmit+0x246>
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d114      	bne.n	8005d88 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 fdaa 	bl	80068b8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e0b4      	b.n	8005ef2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d19b      	bne.n	8005ccc <HAL_SPI_Transmit+0x1b4>
 8005d94:	e087      	b.n	8005ea6 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d155      	bne.n	8005e50 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d918      	bls.n	8005de2 <HAL_SPI_Transmit+0x2ca>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db4:	2b40      	cmp	r3, #64	; 0x40
 8005db6:	d914      	bls.n	8005de2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc8:	1d1a      	adds	r2, r3, #4
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b04      	subs	r3, #4
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005de0:	e05a      	b.n	8005e98 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d917      	bls.n	8005e1e <HAL_SPI_Transmit+0x306>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d013      	beq.n	8005e1e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dfa:	881a      	ldrh	r2, [r3, #0]
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e04:	1c9a      	adds	r2, r3, #2
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	3b02      	subs	r3, #2
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005e1c:	e03c      	b.n	8005e98 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3320      	adds	r3, #32
 8005e28:	7812      	ldrb	r2, [r2, #0]
 8005e2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005e48:	e026      	b.n	8005e98 <HAL_SPI_Transmit+0x380>
 8005e4a:	bf00      	nop
 8005e4c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e50:	f7fb fe62 	bl	8001b18 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d803      	bhi.n	8005e68 <HAL_SPI_Transmit+0x350>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e66:	d102      	bne.n	8005e6e <HAL_SPI_Transmit+0x356>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d114      	bne.n	8005e98 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 fd22 	bl	80068b8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e02c      	b.n	8005ef2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f47f af78 	bne.w	8005d96 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2200      	movs	r2, #0
 8005eae:	2108      	movs	r1, #8
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 fda1 	bl	80069f8 <SPI_WaitOnFlagUntilTimeout>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d007      	beq.n	8005ecc <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ec2:	f043 0220 	orr.w	r2, r3, #32
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 fcf3 	bl	80068b8 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e000      	b.n	8005ef2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8005ef0:	7efb      	ldrb	r3, [r7, #27]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3720      	adds	r7, #32
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop

08005efc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08a      	sub	sp, #40	; 0x28
 8005f00:	af02      	add	r7, sp, #8
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	603b      	str	r3, [r7, #0]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3330      	adds	r3, #48	; 0x30
 8005f16:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f20:	d112      	bne.n	8005f48 <HAL_SPI_Receive+0x4c>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10e      	bne.n	8005f48 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2204      	movs	r2, #4
 8005f2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f32:	88fa      	ldrh	r2, [r7, #6]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	68b9      	ldr	r1, [r7, #8]
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 f9ce 	bl	80062e0 <HAL_SPI_TransmitReceive>
 8005f44:	4603      	mov	r3, r0
 8005f46:	e1c7      	b.n	80062d8 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <HAL_SPI_Receive+0x5a>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e1c0      	b.n	80062d8 <HAL_SPI_Receive+0x3dc>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f5e:	f7fb fddb 	bl	8001b18 <HAL_GetTick>
 8005f62:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d007      	beq.n	8005f80 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8005f70:	2302      	movs	r3, #2
 8005f72:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005f7c:	7ffb      	ldrb	r3, [r7, #31]
 8005f7e:	e1ab      	b.n	80062d8 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <HAL_SPI_Receive+0x90>
 8005f86:	88fb      	ldrh	r3, [r7, #6]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d107      	bne.n	8005f9c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005f98:	7ffb      	ldrb	r3, [r7, #31]
 8005f9a:	e19d      	b.n	80062d8 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2204      	movs	r2, #4
 8005fa0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	88fa      	ldrh	r2, [r7, #6]
 8005fb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	88fa      	ldrh	r2, [r7, #6]
 8005fbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005fec:	d107      	bne.n	8005ffe <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ffc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	4b94      	ldr	r3, [pc, #592]	; (8006258 <HAL_SPI_Receive+0x35c>)
 8006006:	4013      	ands	r3, r2
 8006008:	88f9      	ldrh	r1, [r7, #6]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	6812      	ldr	r2, [r2, #0]
 800600e:	430b      	orrs	r3, r1
 8006010:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f042 0201 	orr.w	r2, r2, #1
 8006020:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800602a:	d107      	bne.n	800603c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800603a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	2b0f      	cmp	r3, #15
 8006042:	d948      	bls.n	80060d6 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006044:	e040      	b.n	80060c8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	695a      	ldr	r2, [r3, #20]
 800604c:	f248 0308 	movw	r3, #32776	; 0x8008
 8006050:	4013      	ands	r3, r2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d014      	beq.n	8006080 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800605e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006060:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006066:	1d1a      	adds	r2, r3, #4
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800607e:	e023      	b.n	80060c8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006080:	f7fb fd4a 	bl	8001b18 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	429a      	cmp	r2, r3
 800608e:	d803      	bhi.n	8006098 <HAL_SPI_Receive+0x19c>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006096:	d102      	bne.n	800609e <HAL_SPI_Receive+0x1a2>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d114      	bne.n	80060c8 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 fc0a 	bl	80068b8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e107      	b.n	80062d8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1b8      	bne.n	8006046 <HAL_SPI_Receive+0x14a>
 80060d4:	e0ed      	b.n	80062b2 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	2b07      	cmp	r3, #7
 80060dc:	f240 80e2 	bls.w	80062a4 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80060e0:	e05b      	b.n	800619a <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d030      	beq.n	8006152 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d014      	beq.n	8006128 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006106:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006108:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800610e:	1d1a      	adds	r2, r3, #4
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800611a:	b29b      	uxth	r3, r3
 800611c:	3b02      	subs	r3, #2
 800611e:	b29a      	uxth	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006126:	e038      	b.n	800619a <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	8812      	ldrh	r2, [r2, #0]
 8006130:	b292      	uxth	r2, r2
 8006132:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006138:	1c9a      	adds	r2, r3, #2
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006144:	b29b      	uxth	r3, r3
 8006146:	3b01      	subs	r3, #1
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006150:	e023      	b.n	800619a <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006152:	f7fb fce1 	bl	8001b18 <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	429a      	cmp	r2, r3
 8006160:	d803      	bhi.n	800616a <HAL_SPI_Receive+0x26e>
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006168:	d102      	bne.n	8006170 <HAL_SPI_Receive+0x274>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d114      	bne.n	800619a <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 fba1 	bl	80068b8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006184:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e09e      	b.n	80062d8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d19d      	bne.n	80060e2 <HAL_SPI_Receive+0x1e6>
 80061a6:	e084      	b.n	80062b2 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d052      	beq.n	800625c <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d014      	beq.n	80061ee <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80061ce:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061d4:	1d1a      	adds	r2, r3, #4
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b04      	subs	r3, #4
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80061ec:	e05a      	b.n	80062a4 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80061f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061fc:	d914      	bls.n	8006228 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	8812      	ldrh	r2, [r2, #0]
 8006206:	b292      	uxth	r2, r2
 8006208:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800620e:	1c9a      	adds	r2, r3, #2
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b02      	subs	r3, #2
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006226:	e03d      	b.n	80062a4 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006234:	7812      	ldrb	r2, [r2, #0]
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800624a:	b29b      	uxth	r3, r3
 800624c:	3b01      	subs	r3, #1
 800624e:	b29a      	uxth	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006256:	e025      	b.n	80062a4 <HAL_SPI_Receive+0x3a8>
 8006258:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800625c:	f7fb fc5c 	bl	8001b18 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d803      	bhi.n	8006274 <HAL_SPI_Receive+0x378>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006272:	d102      	bne.n	800627a <HAL_SPI_Receive+0x37e>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d114      	bne.n	80062a4 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 fb1c 	bl	80068b8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800628e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e019      	b.n	80062d8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f47f af7b 	bne.w	80061a8 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 fb00 	bl	80068b8 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 80062d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3720      	adds	r7, #32
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b08e      	sub	sp, #56	; 0x38
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3320      	adds	r3, #32
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3330      	adds	r3, #48	; 0x30
 8006302:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <HAL_SPI_TransmitReceive+0x32>
 800630e:	2302      	movs	r3, #2
 8006310:	e2ce      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x5d0>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800631a:	f7fb fbfd 	bl	8001b18 <HAL_GetTick>
 800631e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006320:	887b      	ldrh	r3, [r7, #2]
 8006322:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006324:	887b      	ldrh	r3, [r7, #2]
 8006326:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800632e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006336:	7efb      	ldrb	r3, [r7, #27]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d014      	beq.n	8006366 <HAL_SPI_TransmitReceive+0x86>
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006342:	d106      	bne.n	8006352 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d102      	bne.n	8006352 <HAL_SPI_TransmitReceive+0x72>
 800634c:	7efb      	ldrb	r3, [r7, #27]
 800634e:	2b04      	cmp	r3, #4
 8006350:	d009      	beq.n	8006366 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8006352:	2302      	movs	r3, #2
 8006354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006360:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006364:	e2a4      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d005      	beq.n	8006378 <HAL_SPI_TransmitReceive+0x98>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <HAL_SPI_TransmitReceive+0x98>
 8006372:	887b      	ldrh	r3, [r7, #2]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d109      	bne.n	800638c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006386:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800638a:	e291      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b04      	cmp	r3, #4
 8006396:	d003      	beq.n	80063a0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2205      	movs	r2, #5
 800639c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	887a      	ldrh	r2, [r7, #2]
 80063b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	887a      	ldrh	r2, [r7, #2]
 80063ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	887a      	ldrh	r2, [r7, #2]
 80063c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	887a      	ldrh	r2, [r7, #2]
 80063d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	4b9f      	ldr	r3, [pc, #636]	; (8006664 <HAL_SPI_TransmitReceive+0x384>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	8879      	ldrh	r1, [r7, #2]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	6812      	ldr	r2, [r2, #0]
 80063f0:	430b      	orrs	r3, r1
 80063f2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0201 	orr.w	r2, r2, #1
 8006402:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800640c:	d107      	bne.n	800641e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800641c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	2b0f      	cmp	r3, #15
 8006424:	d970      	bls.n	8006508 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006426:	e068      	b.n	80064fa <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b02      	cmp	r3, #2
 8006434:	d11a      	bne.n	800646c <HAL_SPI_TransmitReceive+0x18c>
 8006436:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006438:	2b00      	cmp	r3, #0
 800643a:	d017      	beq.n	800646c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800644c:	1d1a      	adds	r2, r3, #4
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006458:	b29b      	uxth	r3, r3
 800645a:	3b01      	subs	r3, #1
 800645c:	b29a      	uxth	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800646a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695a      	ldr	r2, [r3, #20]
 8006472:	f248 0308 	movw	r3, #32776	; 0x8008
 8006476:	4013      	ands	r3, r2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d01a      	beq.n	80064b2 <HAL_SPI_TransmitReceive+0x1d2>
 800647c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d017      	beq.n	80064b2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800648a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800648c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006492:	1d1a      	adds	r2, r3, #4
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80064b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064b2:	f7fb fb31 	bl	8001b18 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064be:	429a      	cmp	r2, r3
 80064c0:	d803      	bhi.n	80064ca <HAL_SPI_TransmitReceive+0x1ea>
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c8:	d102      	bne.n	80064d0 <HAL_SPI_TransmitReceive+0x1f0>
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d114      	bne.n	80064fa <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 f9f1 	bl	80068b8 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e1da      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80064fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d193      	bne.n	8006428 <HAL_SPI_TransmitReceive+0x148>
 8006500:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006502:	2b00      	cmp	r3, #0
 8006504:	d190      	bne.n	8006428 <HAL_SPI_TransmitReceive+0x148>
 8006506:	e1ac      	b.n	8006862 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	2b07      	cmp	r3, #7
 800650e:	f240 81a0 	bls.w	8006852 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006512:	e0a9      	b.n	8006668 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b02      	cmp	r3, #2
 8006520:	d139      	bne.n	8006596 <HAL_SPI_TransmitReceive+0x2b6>
 8006522:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006524:	2b00      	cmp	r3, #0
 8006526:	d036      	beq.n	8006596 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006528:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800652a:	2b01      	cmp	r3, #1
 800652c:	d91c      	bls.n	8006568 <HAL_SPI_TransmitReceive+0x288>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d018      	beq.n	8006568 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6812      	ldr	r2, [r2, #0]
 8006540:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006546:	1d1a      	adds	r2, r3, #4
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006552:	b29b      	uxth	r3, r3
 8006554:	3b02      	subs	r3, #2
 8006556:	b29a      	uxth	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006564:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006566:	e016      	b.n	8006596 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656c:	881a      	ldrh	r2, [r3, #0]
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006576:	1c9a      	adds	r2, r3, #2
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006582:	b29b      	uxth	r3, r3
 8006584:	3b01      	subs	r3, #1
 8006586:	b29a      	uxth	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006594:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d03a      	beq.n	800661a <HAL_SPI_TransmitReceive+0x33a>
 80065a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d037      	beq.n	800661a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d018      	beq.n	80065ea <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80065c2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065c8:	1d1a      	adds	r2, r3, #4
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	3b02      	subs	r3, #2
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80065e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80065e8:	e017      	b.n	800661a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ee:	6a3a      	ldr	r2, [r7, #32]
 80065f0:	8812      	ldrh	r2, [r2, #0]
 80065f2:	b292      	uxth	r2, r2
 80065f4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065fa:	1c9a      	adds	r2, r3, #2
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006606:	b29b      	uxth	r3, r3
 8006608:	3b01      	subs	r3, #1
 800660a:	b29a      	uxth	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006618:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800661a:	f7fb fa7d 	bl	8001b18 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006626:	429a      	cmp	r2, r3
 8006628:	d803      	bhi.n	8006632 <HAL_SPI_TransmitReceive+0x352>
 800662a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006630:	d102      	bne.n	8006638 <HAL_SPI_TransmitReceive+0x358>
 8006632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006634:	2b00      	cmp	r3, #0
 8006636:	d117      	bne.n	8006668 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 f93d 	bl	80068b8 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800664c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e126      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x5d0>
 8006662:	bf00      	nop
 8006664:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006668:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800666a:	2b00      	cmp	r3, #0
 800666c:	f47f af52 	bne.w	8006514 <HAL_SPI_TransmitReceive+0x234>
 8006670:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006672:	2b00      	cmp	r3, #0
 8006674:	f47f af4e 	bne.w	8006514 <HAL_SPI_TransmitReceive+0x234>
 8006678:	e0f3      	b.n	8006862 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b02      	cmp	r3, #2
 8006686:	d15a      	bne.n	800673e <HAL_SPI_TransmitReceive+0x45e>
 8006688:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800668a:	2b00      	cmp	r3, #0
 800668c:	d057      	beq.n	800673e <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800668e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006690:	2b03      	cmp	r3, #3
 8006692:	d91c      	bls.n	80066ce <HAL_SPI_TransmitReceive+0x3ee>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006698:	2b40      	cmp	r3, #64	; 0x40
 800669a:	d918      	bls.n	80066ce <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6812      	ldr	r2, [r2, #0]
 80066a6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ac:	1d1a      	adds	r2, r3, #4
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b04      	subs	r3, #4
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80066ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80066cc:	e037      	b.n	800673e <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80066ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d91b      	bls.n	800670c <HAL_SPI_TransmitReceive+0x42c>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d017      	beq.n	800670c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e0:	881a      	ldrh	r2, [r3, #0]
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ea:	1c9a      	adds	r2, r3, #2
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b02      	subs	r3, #2
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006708:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800670a:	e018      	b.n	800673e <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3320      	adds	r3, #32
 8006716:	7812      	ldrb	r2, [r2, #0]
 8006718:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800672a:	b29b      	uxth	r3, r3
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800673c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d05e      	beq.n	800680a <HAL_SPI_TransmitReceive+0x52a>
 800674c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800674e:	2b00      	cmp	r3, #0
 8006750:	d05b      	beq.n	800680a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d018      	beq.n	8006792 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006768:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800676a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006770:	1d1a      	adds	r2, r3, #4
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800677c:	b29b      	uxth	r3, r3
 800677e:	3b04      	subs	r3, #4
 8006780:	b29a      	uxth	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800678e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006790:	e03b      	b.n	800680a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800679c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a0:	d918      	bls.n	80067d4 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067a6:	6a3a      	ldr	r2, [r7, #32]
 80067a8:	8812      	ldrh	r2, [r2, #0]
 80067aa:	b292      	uxth	r2, r2
 80067ac:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b2:	1c9a      	adds	r2, r3, #2
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067be:	b29b      	uxth	r3, r3
 80067c0:	3b02      	subs	r3, #2
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80067d2:	e01a      	b.n	800680a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067e0:	7812      	ldrb	r2, [r2, #0]
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006808:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800680a:	f7fb f985 	bl	8001b18 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006816:	429a      	cmp	r2, r3
 8006818:	d803      	bhi.n	8006822 <HAL_SPI_TransmitReceive+0x542>
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006820:	d102      	bne.n	8006828 <HAL_SPI_TransmitReceive+0x548>
 8006822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006824:	2b00      	cmp	r3, #0
 8006826:	d114      	bne.n	8006852 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f000 f845 	bl	80068b8 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800683c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e02e      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006852:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006854:	2b00      	cmp	r3, #0
 8006856:	f47f af10 	bne.w	800667a <HAL_SPI_TransmitReceive+0x39a>
 800685a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800685c:	2b00      	cmp	r3, #0
 800685e:	f47f af0c 	bne.w	800667a <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	2200      	movs	r2, #0
 800686a:	2108      	movs	r1, #8
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f8c3 	bl	80069f8 <SPI_WaitOnFlagUntilTimeout>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d007      	beq.n	8006888 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800687e:	f043 0220 	orr.w	r2, r3, #32
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 f815 	bl	80068b8 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e001      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 80068ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3730      	adds	r7, #48	; 0x30
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699a      	ldr	r2, [r3, #24]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0208 	orr.w	r2, r2, #8
 80068d6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699a      	ldr	r2, [r3, #24]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0210 	orr.w	r2, r2, #16
 80068e6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0201 	bic.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6919      	ldr	r1, [r3, #16]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	4b3c      	ldr	r3, [pc, #240]	; (80069f4 <SPI_CloseTransfer+0x13c>)
 8006904:	400b      	ands	r3, r1
 8006906:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006916:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b04      	cmp	r3, #4
 8006922:	d014      	beq.n	800694e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00f      	beq.n	800694e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006934:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	699a      	ldr	r2, [r3, #24]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f042 0220 	orr.w	r2, r2, #32
 800694c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b03      	cmp	r3, #3
 8006958:	d014      	beq.n	8006984 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00f      	beq.n	8006984 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800696a:	f043 0204 	orr.w	r2, r3, #4
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699a      	ldr	r2, [r3, #24]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006982:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00f      	beq.n	80069ae <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006994:	f043 0201 	orr.w	r2, r3, #1
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	699a      	ldr	r2, [r3, #24]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ac:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00f      	beq.n	80069d8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069be:	f043 0208 	orr.w	r2, r3, #8
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	699a      	ldr	r2, [r3, #24]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069d6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80069e8:	bf00      	nop
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	fffffc90 	.word	0xfffffc90

080069f8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	603b      	str	r3, [r7, #0]
 8006a04:	4613      	mov	r3, r2
 8006a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006a08:	e010      	b.n	8006a2c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a0a:	f7fb f885 	bl	8001b18 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	69ba      	ldr	r2, [r7, #24]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d803      	bhi.n	8006a22 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d102      	bne.n	8006a28 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e00f      	b.n	8006a4c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	695a      	ldr	r2, [r3, #20]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	4013      	ands	r3, r2
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	bf0c      	ite	eq
 8006a3c:	2301      	moveq	r3, #1
 8006a3e:	2300      	movne	r3, #0
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	461a      	mov	r2, r3
 8006a44:	79fb      	ldrb	r3, [r7, #7]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d0df      	beq.n	8006a0a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a60:	095b      	lsrs	r3, r3, #5
 8006a62:	3301      	adds	r3, #1
 8006a64:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	3307      	adds	r3, #7
 8006a72:	08db      	lsrs	r3, r3, #3
 8006a74:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	fb02 f303 	mul.w	r3, r2, r3
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d101      	bne.n	8006a9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e049      	b.n	8006b30 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d106      	bne.n	8006ab6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f841 	bl	8006b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2202      	movs	r2, #2
 8006aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4610      	mov	r0, r2
 8006aca:	f000 f9bd 	bl	8006e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d001      	beq.n	8006b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e021      	b.n	8006ba8 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68da      	ldr	r2, [r3, #12]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0201 	orr.w	r2, r2, #1
 8006b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689a      	ldr	r2, [r3, #8]
 8006b82:	4b0c      	ldr	r3, [pc, #48]	; (8006bb4 <HAL_TIM_Base_Start_IT+0x68>)
 8006b84:	4013      	ands	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b06      	cmp	r3, #6
 8006b8c:	d00b      	beq.n	8006ba6 <HAL_TIM_Base_Start_IT+0x5a>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b94:	d007      	beq.n	8006ba6 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f042 0201 	orr.w	r2, r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	00010007 	.word	0x00010007

08006bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d122      	bne.n	8006c14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d11b      	bne.n	8006c14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f06f 0202 	mvn.w	r2, #2
 8006be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	f003 0303 	and.w	r3, r3, #3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f905 	bl	8006e0a <HAL_TIM_IC_CaptureCallback>
 8006c00:	e005      	b.n	8006c0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f8f7 	bl	8006df6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f908 	bl	8006e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f003 0304 	and.w	r3, r3, #4
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	d122      	bne.n	8006c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	d11b      	bne.n	8006c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f06f 0204 	mvn.w	r2, #4
 8006c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f8db 	bl	8006e0a <HAL_TIM_IC_CaptureCallback>
 8006c54:	e005      	b.n	8006c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f8cd 	bl	8006df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f8de 	bl	8006e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f003 0308 	and.w	r3, r3, #8
 8006c72:	2b08      	cmp	r3, #8
 8006c74:	d122      	bne.n	8006cbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f003 0308 	and.w	r3, r3, #8
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d11b      	bne.n	8006cbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f06f 0208 	mvn.w	r2, #8
 8006c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2204      	movs	r2, #4
 8006c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	f003 0303 	and.w	r3, r3, #3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f8b1 	bl	8006e0a <HAL_TIM_IC_CaptureCallback>
 8006ca8:	e005      	b.n	8006cb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f8a3 	bl	8006df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f8b4 	bl	8006e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f003 0310 	and.w	r3, r3, #16
 8006cc6:	2b10      	cmp	r3, #16
 8006cc8:	d122      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f003 0310 	and.w	r3, r3, #16
 8006cd4:	2b10      	cmp	r3, #16
 8006cd6:	d11b      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f06f 0210 	mvn.w	r2, #16
 8006ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2208      	movs	r2, #8
 8006ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f887 	bl	8006e0a <HAL_TIM_IC_CaptureCallback>
 8006cfc:	e005      	b.n	8006d0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f879 	bl	8006df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f88a 	bl	8006e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d10e      	bne.n	8006d3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d107      	bne.n	8006d3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f06f 0201 	mvn.w	r2, #1
 8006d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7fa fac4 	bl	80012c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d46:	2b80      	cmp	r3, #128	; 0x80
 8006d48:	d10e      	bne.n	8006d68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d54:	2b80      	cmp	r3, #128	; 0x80
 8006d56:	d107      	bne.n	8006d68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f914 	bl	8006f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d76:	d10e      	bne.n	8006d96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d82:	2b80      	cmp	r3, #128	; 0x80
 8006d84:	d107      	bne.n	8006d96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f907 	bl	8006fa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da0:	2b40      	cmp	r3, #64	; 0x40
 8006da2:	d10e      	bne.n	8006dc2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dae:	2b40      	cmp	r3, #64	; 0x40
 8006db0:	d107      	bne.n	8006dc2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f838 	bl	8006e32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	f003 0320 	and.w	r3, r3, #32
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	d10e      	bne.n	8006dee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	d107      	bne.n	8006dee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f06f 0220 	mvn.w	r2, #32
 8006de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f8c7 	bl	8006f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dee:	bf00      	nop
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b083      	sub	sp, #12
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e12:	bf00      	nop
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
	...

08006e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a40      	ldr	r2, [pc, #256]	; (8006f5c <TIM_Base_SetConfig+0x114>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d013      	beq.n	8006e88 <TIM_Base_SetConfig+0x40>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e66:	d00f      	beq.n	8006e88 <TIM_Base_SetConfig+0x40>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a3d      	ldr	r2, [pc, #244]	; (8006f60 <TIM_Base_SetConfig+0x118>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00b      	beq.n	8006e88 <TIM_Base_SetConfig+0x40>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a3c      	ldr	r2, [pc, #240]	; (8006f64 <TIM_Base_SetConfig+0x11c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d007      	beq.n	8006e88 <TIM_Base_SetConfig+0x40>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a3b      	ldr	r2, [pc, #236]	; (8006f68 <TIM_Base_SetConfig+0x120>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d003      	beq.n	8006e88 <TIM_Base_SetConfig+0x40>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a3a      	ldr	r2, [pc, #232]	; (8006f6c <TIM_Base_SetConfig+0x124>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d108      	bne.n	8006e9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a2f      	ldr	r2, [pc, #188]	; (8006f5c <TIM_Base_SetConfig+0x114>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d01f      	beq.n	8006ee2 <TIM_Base_SetConfig+0x9a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea8:	d01b      	beq.n	8006ee2 <TIM_Base_SetConfig+0x9a>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a2c      	ldr	r2, [pc, #176]	; (8006f60 <TIM_Base_SetConfig+0x118>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d017      	beq.n	8006ee2 <TIM_Base_SetConfig+0x9a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a2b      	ldr	r2, [pc, #172]	; (8006f64 <TIM_Base_SetConfig+0x11c>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d013      	beq.n	8006ee2 <TIM_Base_SetConfig+0x9a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a2a      	ldr	r2, [pc, #168]	; (8006f68 <TIM_Base_SetConfig+0x120>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d00f      	beq.n	8006ee2 <TIM_Base_SetConfig+0x9a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a29      	ldr	r2, [pc, #164]	; (8006f6c <TIM_Base_SetConfig+0x124>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00b      	beq.n	8006ee2 <TIM_Base_SetConfig+0x9a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a28      	ldr	r2, [pc, #160]	; (8006f70 <TIM_Base_SetConfig+0x128>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d007      	beq.n	8006ee2 <TIM_Base_SetConfig+0x9a>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a27      	ldr	r2, [pc, #156]	; (8006f74 <TIM_Base_SetConfig+0x12c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d003      	beq.n	8006ee2 <TIM_Base_SetConfig+0x9a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a26      	ldr	r2, [pc, #152]	; (8006f78 <TIM_Base_SetConfig+0x130>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d108      	bne.n	8006ef4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a10      	ldr	r2, [pc, #64]	; (8006f5c <TIM_Base_SetConfig+0x114>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d00f      	beq.n	8006f40 <TIM_Base_SetConfig+0xf8>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a12      	ldr	r2, [pc, #72]	; (8006f6c <TIM_Base_SetConfig+0x124>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d00b      	beq.n	8006f40 <TIM_Base_SetConfig+0xf8>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a11      	ldr	r2, [pc, #68]	; (8006f70 <TIM_Base_SetConfig+0x128>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d007      	beq.n	8006f40 <TIM_Base_SetConfig+0xf8>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a10      	ldr	r2, [pc, #64]	; (8006f74 <TIM_Base_SetConfig+0x12c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d003      	beq.n	8006f40 <TIM_Base_SetConfig+0xf8>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a0f      	ldr	r2, [pc, #60]	; (8006f78 <TIM_Base_SetConfig+0x130>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d103      	bne.n	8006f48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	691a      	ldr	r2, [r3, #16]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	615a      	str	r2, [r3, #20]
}
 8006f4e:	bf00      	nop
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	40010000 	.word	0x40010000
 8006f60:	40000400 	.word	0x40000400
 8006f64:	40000800 	.word	0x40000800
 8006f68:	40000c00 	.word	0x40000c00
 8006f6c:	40010400 	.word	0x40010400
 8006f70:	40014000 	.word	0x40014000
 8006f74:	40014400 	.word	0x40014400
 8006f78:	40014800 	.word	0x40014800

08006f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e042      	b.n	8007050 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d106      	bne.n	8006fe2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7fa fb07 	bl	80015f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2224      	movs	r2, #36	; 0x24
 8006fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 0201 	bic.w	r2, r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f91a 	bl	8007234 <UART_SetConfig>
 8007000:	4603      	mov	r3, r0
 8007002:	2b01      	cmp	r3, #1
 8007004:	d101      	bne.n	800700a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e022      	b.n	8007050 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 febe 	bl	8007d94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689a      	ldr	r2, [r3, #8]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0201 	orr.w	r2, r2, #1
 8007046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 ff45 	bl	8007ed8 <UART_CheckIdleState>
 800704e:	4603      	mov	r3, r0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e04a      	b.n	8007100 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007070:	2b00      	cmp	r3, #0
 8007072:	d106      	bne.n	8007082 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f7fa fab7 	bl	80015f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2224      	movs	r2, #36	; 0x24
 8007086:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0201 	bic.w	r2, r2, #1
 8007098:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f8ca 	bl	8007234 <UART_SetConfig>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e02a      	b.n	8007100 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fe6e 	bl	8007d94 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689a      	ldr	r2, [r3, #8]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80070d6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689a      	ldr	r2, [r3, #8]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f042 0208 	orr.w	r2, r2, #8
 80070e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0201 	orr.w	r2, r2, #1
 80070f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 feed 	bl	8007ed8 <UART_CheckIdleState>
 80070fe:	4603      	mov	r3, r0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b08a      	sub	sp, #40	; 0x28
 800710c:	af02      	add	r7, sp, #8
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	4613      	mov	r3, r2
 8007116:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800711e:	2b20      	cmp	r3, #32
 8007120:	f040 8083 	bne.w	800722a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d002      	beq.n	8007130 <HAL_UART_Transmit+0x28>
 800712a:	88fb      	ldrh	r3, [r7, #6]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e07b      	b.n	800722c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800713a:	2b01      	cmp	r3, #1
 800713c:	d101      	bne.n	8007142 <HAL_UART_Transmit+0x3a>
 800713e:	2302      	movs	r3, #2
 8007140:	e074      	b.n	800722c <HAL_UART_Transmit+0x124>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2221      	movs	r2, #33	; 0x21
 8007156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800715a:	f7fa fcdd 	bl	8001b18 <HAL_GetTick>
 800715e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	88fa      	ldrh	r2, [r7, #6]
 8007164:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	88fa      	ldrh	r2, [r7, #6]
 800716c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007178:	d108      	bne.n	800718c <HAL_UART_Transmit+0x84>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d104      	bne.n	800718c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007182:	2300      	movs	r3, #0
 8007184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	61bb      	str	r3, [r7, #24]
 800718a:	e003      	b.n	8007194 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007190:	2300      	movs	r3, #0
 8007192:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800719c:	e02c      	b.n	80071f8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2200      	movs	r2, #0
 80071a6:	2180      	movs	r1, #128	; 0x80
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f000 fedd 	bl	8007f68 <UART_WaitOnFlagUntilTimeout>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e039      	b.n	800722c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10b      	bne.n	80071d6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	3302      	adds	r3, #2
 80071d2:	61bb      	str	r3, [r7, #24]
 80071d4:	e007      	b.n	80071e6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	781a      	ldrb	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	3301      	adds	r3, #1
 80071e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071fe:	b29b      	uxth	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1cc      	bne.n	800719e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2200      	movs	r2, #0
 800720c:	2140      	movs	r1, #64	; 0x40
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 feaa 	bl	8007f68 <UART_WaitOnFlagUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e006      	b.n	800722c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2220      	movs	r2, #32
 8007222:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	e000      	b.n	800722c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800722a:	2302      	movs	r3, #2
  }
}
 800722c:	4618      	mov	r0, r3
 800722e:	3720      	adds	r7, #32
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007234:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007238:	b08e      	sub	sp, #56	; 0x38
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	431a      	orrs	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	4313      	orrs	r3, r2
 800725a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007260:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007262:	4313      	orrs	r3, r2
 8007264:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	4bc1      	ldr	r3, [pc, #772]	; (8007574 <UART_SetConfig+0x340>)
 800726e:	4013      	ands	r3, r2
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	6812      	ldr	r2, [r2, #0]
 8007274:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007276:	430b      	orrs	r3, r1
 8007278:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4ab7      	ldr	r2, [pc, #732]	; (8007578 <UART_SetConfig+0x344>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d004      	beq.n	80072aa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072a6:	4313      	orrs	r3, r2
 80072a8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689a      	ldr	r2, [r3, #8]
 80072b0:	4bb2      	ldr	r3, [pc, #712]	; (800757c <UART_SetConfig+0x348>)
 80072b2:	4013      	ands	r3, r2
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	6812      	ldr	r2, [r2, #0]
 80072b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80072ba:	430b      	orrs	r3, r1
 80072bc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c4:	f023 010f 	bic.w	r1, r3, #15
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4aa9      	ldr	r2, [pc, #676]	; (8007580 <UART_SetConfig+0x34c>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d177      	bne.n	80073ce <UART_SetConfig+0x19a>
 80072de:	4ba9      	ldr	r3, [pc, #676]	; (8007584 <UART_SetConfig+0x350>)
 80072e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072e6:	2b28      	cmp	r3, #40	; 0x28
 80072e8:	d86c      	bhi.n	80073c4 <UART_SetConfig+0x190>
 80072ea:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <UART_SetConfig+0xbc>)
 80072ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f0:	08007395 	.word	0x08007395
 80072f4:	080073c5 	.word	0x080073c5
 80072f8:	080073c5 	.word	0x080073c5
 80072fc:	080073c5 	.word	0x080073c5
 8007300:	080073c5 	.word	0x080073c5
 8007304:	080073c5 	.word	0x080073c5
 8007308:	080073c5 	.word	0x080073c5
 800730c:	080073c5 	.word	0x080073c5
 8007310:	0800739d 	.word	0x0800739d
 8007314:	080073c5 	.word	0x080073c5
 8007318:	080073c5 	.word	0x080073c5
 800731c:	080073c5 	.word	0x080073c5
 8007320:	080073c5 	.word	0x080073c5
 8007324:	080073c5 	.word	0x080073c5
 8007328:	080073c5 	.word	0x080073c5
 800732c:	080073c5 	.word	0x080073c5
 8007330:	080073a5 	.word	0x080073a5
 8007334:	080073c5 	.word	0x080073c5
 8007338:	080073c5 	.word	0x080073c5
 800733c:	080073c5 	.word	0x080073c5
 8007340:	080073c5 	.word	0x080073c5
 8007344:	080073c5 	.word	0x080073c5
 8007348:	080073c5 	.word	0x080073c5
 800734c:	080073c5 	.word	0x080073c5
 8007350:	080073ad 	.word	0x080073ad
 8007354:	080073c5 	.word	0x080073c5
 8007358:	080073c5 	.word	0x080073c5
 800735c:	080073c5 	.word	0x080073c5
 8007360:	080073c5 	.word	0x080073c5
 8007364:	080073c5 	.word	0x080073c5
 8007368:	080073c5 	.word	0x080073c5
 800736c:	080073c5 	.word	0x080073c5
 8007370:	080073b5 	.word	0x080073b5
 8007374:	080073c5 	.word	0x080073c5
 8007378:	080073c5 	.word	0x080073c5
 800737c:	080073c5 	.word	0x080073c5
 8007380:	080073c5 	.word	0x080073c5
 8007384:	080073c5 	.word	0x080073c5
 8007388:	080073c5 	.word	0x080073c5
 800738c:	080073c5 	.word	0x080073c5
 8007390:	080073bd 	.word	0x080073bd
 8007394:	2301      	movs	r3, #1
 8007396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800739a:	e233      	b.n	8007804 <UART_SetConfig+0x5d0>
 800739c:	2304      	movs	r3, #4
 800739e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073a2:	e22f      	b.n	8007804 <UART_SetConfig+0x5d0>
 80073a4:	2308      	movs	r3, #8
 80073a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073aa:	e22b      	b.n	8007804 <UART_SetConfig+0x5d0>
 80073ac:	2310      	movs	r3, #16
 80073ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073b2:	e227      	b.n	8007804 <UART_SetConfig+0x5d0>
 80073b4:	2320      	movs	r3, #32
 80073b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ba:	e223      	b.n	8007804 <UART_SetConfig+0x5d0>
 80073bc:	2340      	movs	r3, #64	; 0x40
 80073be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073c2:	e21f      	b.n	8007804 <UART_SetConfig+0x5d0>
 80073c4:	2380      	movs	r3, #128	; 0x80
 80073c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ca:	bf00      	nop
 80073cc:	e21a      	b.n	8007804 <UART_SetConfig+0x5d0>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a6d      	ldr	r2, [pc, #436]	; (8007588 <UART_SetConfig+0x354>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d132      	bne.n	800743e <UART_SetConfig+0x20a>
 80073d8:	4b6a      	ldr	r3, [pc, #424]	; (8007584 <UART_SetConfig+0x350>)
 80073da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073dc:	f003 0307 	and.w	r3, r3, #7
 80073e0:	2b05      	cmp	r3, #5
 80073e2:	d827      	bhi.n	8007434 <UART_SetConfig+0x200>
 80073e4:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <UART_SetConfig+0x1b8>)
 80073e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ea:	bf00      	nop
 80073ec:	08007405 	.word	0x08007405
 80073f0:	0800740d 	.word	0x0800740d
 80073f4:	08007415 	.word	0x08007415
 80073f8:	0800741d 	.word	0x0800741d
 80073fc:	08007425 	.word	0x08007425
 8007400:	0800742d 	.word	0x0800742d
 8007404:	2300      	movs	r3, #0
 8007406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800740a:	e1fb      	b.n	8007804 <UART_SetConfig+0x5d0>
 800740c:	2304      	movs	r3, #4
 800740e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007412:	e1f7      	b.n	8007804 <UART_SetConfig+0x5d0>
 8007414:	2308      	movs	r3, #8
 8007416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800741a:	e1f3      	b.n	8007804 <UART_SetConfig+0x5d0>
 800741c:	2310      	movs	r3, #16
 800741e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007422:	e1ef      	b.n	8007804 <UART_SetConfig+0x5d0>
 8007424:	2320      	movs	r3, #32
 8007426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800742a:	e1eb      	b.n	8007804 <UART_SetConfig+0x5d0>
 800742c:	2340      	movs	r3, #64	; 0x40
 800742e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007432:	e1e7      	b.n	8007804 <UART_SetConfig+0x5d0>
 8007434:	2380      	movs	r3, #128	; 0x80
 8007436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800743a:	bf00      	nop
 800743c:	e1e2      	b.n	8007804 <UART_SetConfig+0x5d0>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a52      	ldr	r2, [pc, #328]	; (800758c <UART_SetConfig+0x358>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d132      	bne.n	80074ae <UART_SetConfig+0x27a>
 8007448:	4b4e      	ldr	r3, [pc, #312]	; (8007584 <UART_SetConfig+0x350>)
 800744a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744c:	f003 0307 	and.w	r3, r3, #7
 8007450:	2b05      	cmp	r3, #5
 8007452:	d827      	bhi.n	80074a4 <UART_SetConfig+0x270>
 8007454:	a201      	add	r2, pc, #4	; (adr r2, 800745c <UART_SetConfig+0x228>)
 8007456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745a:	bf00      	nop
 800745c:	08007475 	.word	0x08007475
 8007460:	0800747d 	.word	0x0800747d
 8007464:	08007485 	.word	0x08007485
 8007468:	0800748d 	.word	0x0800748d
 800746c:	08007495 	.word	0x08007495
 8007470:	0800749d 	.word	0x0800749d
 8007474:	2300      	movs	r3, #0
 8007476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800747a:	e1c3      	b.n	8007804 <UART_SetConfig+0x5d0>
 800747c:	2304      	movs	r3, #4
 800747e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007482:	e1bf      	b.n	8007804 <UART_SetConfig+0x5d0>
 8007484:	2308      	movs	r3, #8
 8007486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800748a:	e1bb      	b.n	8007804 <UART_SetConfig+0x5d0>
 800748c:	2310      	movs	r3, #16
 800748e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007492:	e1b7      	b.n	8007804 <UART_SetConfig+0x5d0>
 8007494:	2320      	movs	r3, #32
 8007496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800749a:	e1b3      	b.n	8007804 <UART_SetConfig+0x5d0>
 800749c:	2340      	movs	r3, #64	; 0x40
 800749e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074a2:	e1af      	b.n	8007804 <UART_SetConfig+0x5d0>
 80074a4:	2380      	movs	r3, #128	; 0x80
 80074a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074aa:	bf00      	nop
 80074ac:	e1aa      	b.n	8007804 <UART_SetConfig+0x5d0>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a37      	ldr	r2, [pc, #220]	; (8007590 <UART_SetConfig+0x35c>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d132      	bne.n	800751e <UART_SetConfig+0x2ea>
 80074b8:	4b32      	ldr	r3, [pc, #200]	; (8007584 <UART_SetConfig+0x350>)
 80074ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074bc:	f003 0307 	and.w	r3, r3, #7
 80074c0:	2b05      	cmp	r3, #5
 80074c2:	d827      	bhi.n	8007514 <UART_SetConfig+0x2e0>
 80074c4:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <UART_SetConfig+0x298>)
 80074c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ca:	bf00      	nop
 80074cc:	080074e5 	.word	0x080074e5
 80074d0:	080074ed 	.word	0x080074ed
 80074d4:	080074f5 	.word	0x080074f5
 80074d8:	080074fd 	.word	0x080074fd
 80074dc:	08007505 	.word	0x08007505
 80074e0:	0800750d 	.word	0x0800750d
 80074e4:	2300      	movs	r3, #0
 80074e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ea:	e18b      	b.n	8007804 <UART_SetConfig+0x5d0>
 80074ec:	2304      	movs	r3, #4
 80074ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074f2:	e187      	b.n	8007804 <UART_SetConfig+0x5d0>
 80074f4:	2308      	movs	r3, #8
 80074f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074fa:	e183      	b.n	8007804 <UART_SetConfig+0x5d0>
 80074fc:	2310      	movs	r3, #16
 80074fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007502:	e17f      	b.n	8007804 <UART_SetConfig+0x5d0>
 8007504:	2320      	movs	r3, #32
 8007506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800750a:	e17b      	b.n	8007804 <UART_SetConfig+0x5d0>
 800750c:	2340      	movs	r3, #64	; 0x40
 800750e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007512:	e177      	b.n	8007804 <UART_SetConfig+0x5d0>
 8007514:	2380      	movs	r3, #128	; 0x80
 8007516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800751a:	bf00      	nop
 800751c:	e172      	b.n	8007804 <UART_SetConfig+0x5d0>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a1c      	ldr	r2, [pc, #112]	; (8007594 <UART_SetConfig+0x360>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d144      	bne.n	80075b2 <UART_SetConfig+0x37e>
 8007528:	4b16      	ldr	r3, [pc, #88]	; (8007584 <UART_SetConfig+0x350>)
 800752a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	2b05      	cmp	r3, #5
 8007532:	d839      	bhi.n	80075a8 <UART_SetConfig+0x374>
 8007534:	a201      	add	r2, pc, #4	; (adr r2, 800753c <UART_SetConfig+0x308>)
 8007536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753a:	bf00      	nop
 800753c:	08007555 	.word	0x08007555
 8007540:	0800755d 	.word	0x0800755d
 8007544:	08007565 	.word	0x08007565
 8007548:	0800756d 	.word	0x0800756d
 800754c:	08007599 	.word	0x08007599
 8007550:	080075a1 	.word	0x080075a1
 8007554:	2300      	movs	r3, #0
 8007556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800755a:	e153      	b.n	8007804 <UART_SetConfig+0x5d0>
 800755c:	2304      	movs	r3, #4
 800755e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007562:	e14f      	b.n	8007804 <UART_SetConfig+0x5d0>
 8007564:	2308      	movs	r3, #8
 8007566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800756a:	e14b      	b.n	8007804 <UART_SetConfig+0x5d0>
 800756c:	2310      	movs	r3, #16
 800756e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007572:	e147      	b.n	8007804 <UART_SetConfig+0x5d0>
 8007574:	cfff69f3 	.word	0xcfff69f3
 8007578:	58000c00 	.word	0x58000c00
 800757c:	11fff4ff 	.word	0x11fff4ff
 8007580:	40011000 	.word	0x40011000
 8007584:	58024400 	.word	0x58024400
 8007588:	40004400 	.word	0x40004400
 800758c:	40004800 	.word	0x40004800
 8007590:	40004c00 	.word	0x40004c00
 8007594:	40005000 	.word	0x40005000
 8007598:	2320      	movs	r3, #32
 800759a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800759e:	e131      	b.n	8007804 <UART_SetConfig+0x5d0>
 80075a0:	2340      	movs	r3, #64	; 0x40
 80075a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075a6:	e12d      	b.n	8007804 <UART_SetConfig+0x5d0>
 80075a8:	2380      	movs	r3, #128	; 0x80
 80075aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ae:	bf00      	nop
 80075b0:	e128      	b.n	8007804 <UART_SetConfig+0x5d0>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4ab6      	ldr	r2, [pc, #728]	; (8007890 <UART_SetConfig+0x65c>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d178      	bne.n	80076ae <UART_SetConfig+0x47a>
 80075bc:	4bb5      	ldr	r3, [pc, #724]	; (8007894 <UART_SetConfig+0x660>)
 80075be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075c4:	2b28      	cmp	r3, #40	; 0x28
 80075c6:	d86d      	bhi.n	80076a4 <UART_SetConfig+0x470>
 80075c8:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <UART_SetConfig+0x39c>)
 80075ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ce:	bf00      	nop
 80075d0:	08007675 	.word	0x08007675
 80075d4:	080076a5 	.word	0x080076a5
 80075d8:	080076a5 	.word	0x080076a5
 80075dc:	080076a5 	.word	0x080076a5
 80075e0:	080076a5 	.word	0x080076a5
 80075e4:	080076a5 	.word	0x080076a5
 80075e8:	080076a5 	.word	0x080076a5
 80075ec:	080076a5 	.word	0x080076a5
 80075f0:	0800767d 	.word	0x0800767d
 80075f4:	080076a5 	.word	0x080076a5
 80075f8:	080076a5 	.word	0x080076a5
 80075fc:	080076a5 	.word	0x080076a5
 8007600:	080076a5 	.word	0x080076a5
 8007604:	080076a5 	.word	0x080076a5
 8007608:	080076a5 	.word	0x080076a5
 800760c:	080076a5 	.word	0x080076a5
 8007610:	08007685 	.word	0x08007685
 8007614:	080076a5 	.word	0x080076a5
 8007618:	080076a5 	.word	0x080076a5
 800761c:	080076a5 	.word	0x080076a5
 8007620:	080076a5 	.word	0x080076a5
 8007624:	080076a5 	.word	0x080076a5
 8007628:	080076a5 	.word	0x080076a5
 800762c:	080076a5 	.word	0x080076a5
 8007630:	0800768d 	.word	0x0800768d
 8007634:	080076a5 	.word	0x080076a5
 8007638:	080076a5 	.word	0x080076a5
 800763c:	080076a5 	.word	0x080076a5
 8007640:	080076a5 	.word	0x080076a5
 8007644:	080076a5 	.word	0x080076a5
 8007648:	080076a5 	.word	0x080076a5
 800764c:	080076a5 	.word	0x080076a5
 8007650:	08007695 	.word	0x08007695
 8007654:	080076a5 	.word	0x080076a5
 8007658:	080076a5 	.word	0x080076a5
 800765c:	080076a5 	.word	0x080076a5
 8007660:	080076a5 	.word	0x080076a5
 8007664:	080076a5 	.word	0x080076a5
 8007668:	080076a5 	.word	0x080076a5
 800766c:	080076a5 	.word	0x080076a5
 8007670:	0800769d 	.word	0x0800769d
 8007674:	2301      	movs	r3, #1
 8007676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800767a:	e0c3      	b.n	8007804 <UART_SetConfig+0x5d0>
 800767c:	2304      	movs	r3, #4
 800767e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007682:	e0bf      	b.n	8007804 <UART_SetConfig+0x5d0>
 8007684:	2308      	movs	r3, #8
 8007686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800768a:	e0bb      	b.n	8007804 <UART_SetConfig+0x5d0>
 800768c:	2310      	movs	r3, #16
 800768e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007692:	e0b7      	b.n	8007804 <UART_SetConfig+0x5d0>
 8007694:	2320      	movs	r3, #32
 8007696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800769a:	e0b3      	b.n	8007804 <UART_SetConfig+0x5d0>
 800769c:	2340      	movs	r3, #64	; 0x40
 800769e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076a2:	e0af      	b.n	8007804 <UART_SetConfig+0x5d0>
 80076a4:	2380      	movs	r3, #128	; 0x80
 80076a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076aa:	bf00      	nop
 80076ac:	e0aa      	b.n	8007804 <UART_SetConfig+0x5d0>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a79      	ldr	r2, [pc, #484]	; (8007898 <UART_SetConfig+0x664>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d132      	bne.n	800771e <UART_SetConfig+0x4ea>
 80076b8:	4b76      	ldr	r3, [pc, #472]	; (8007894 <UART_SetConfig+0x660>)
 80076ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076bc:	f003 0307 	and.w	r3, r3, #7
 80076c0:	2b05      	cmp	r3, #5
 80076c2:	d827      	bhi.n	8007714 <UART_SetConfig+0x4e0>
 80076c4:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <UART_SetConfig+0x498>)
 80076c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ca:	bf00      	nop
 80076cc:	080076e5 	.word	0x080076e5
 80076d0:	080076ed 	.word	0x080076ed
 80076d4:	080076f5 	.word	0x080076f5
 80076d8:	080076fd 	.word	0x080076fd
 80076dc:	08007705 	.word	0x08007705
 80076e0:	0800770d 	.word	0x0800770d
 80076e4:	2300      	movs	r3, #0
 80076e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ea:	e08b      	b.n	8007804 <UART_SetConfig+0x5d0>
 80076ec:	2304      	movs	r3, #4
 80076ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076f2:	e087      	b.n	8007804 <UART_SetConfig+0x5d0>
 80076f4:	2308      	movs	r3, #8
 80076f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076fa:	e083      	b.n	8007804 <UART_SetConfig+0x5d0>
 80076fc:	2310      	movs	r3, #16
 80076fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007702:	e07f      	b.n	8007804 <UART_SetConfig+0x5d0>
 8007704:	2320      	movs	r3, #32
 8007706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800770a:	e07b      	b.n	8007804 <UART_SetConfig+0x5d0>
 800770c:	2340      	movs	r3, #64	; 0x40
 800770e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007712:	e077      	b.n	8007804 <UART_SetConfig+0x5d0>
 8007714:	2380      	movs	r3, #128	; 0x80
 8007716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800771a:	bf00      	nop
 800771c:	e072      	b.n	8007804 <UART_SetConfig+0x5d0>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a5e      	ldr	r2, [pc, #376]	; (800789c <UART_SetConfig+0x668>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d132      	bne.n	800778e <UART_SetConfig+0x55a>
 8007728:	4b5a      	ldr	r3, [pc, #360]	; (8007894 <UART_SetConfig+0x660>)
 800772a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772c:	f003 0307 	and.w	r3, r3, #7
 8007730:	2b05      	cmp	r3, #5
 8007732:	d827      	bhi.n	8007784 <UART_SetConfig+0x550>
 8007734:	a201      	add	r2, pc, #4	; (adr r2, 800773c <UART_SetConfig+0x508>)
 8007736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773a:	bf00      	nop
 800773c:	08007755 	.word	0x08007755
 8007740:	0800775d 	.word	0x0800775d
 8007744:	08007765 	.word	0x08007765
 8007748:	0800776d 	.word	0x0800776d
 800774c:	08007775 	.word	0x08007775
 8007750:	0800777d 	.word	0x0800777d
 8007754:	2300      	movs	r3, #0
 8007756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800775a:	e053      	b.n	8007804 <UART_SetConfig+0x5d0>
 800775c:	2304      	movs	r3, #4
 800775e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007762:	e04f      	b.n	8007804 <UART_SetConfig+0x5d0>
 8007764:	2308      	movs	r3, #8
 8007766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800776a:	e04b      	b.n	8007804 <UART_SetConfig+0x5d0>
 800776c:	2310      	movs	r3, #16
 800776e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007772:	e047      	b.n	8007804 <UART_SetConfig+0x5d0>
 8007774:	2320      	movs	r3, #32
 8007776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800777a:	e043      	b.n	8007804 <UART_SetConfig+0x5d0>
 800777c:	2340      	movs	r3, #64	; 0x40
 800777e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007782:	e03f      	b.n	8007804 <UART_SetConfig+0x5d0>
 8007784:	2380      	movs	r3, #128	; 0x80
 8007786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800778a:	bf00      	nop
 800778c:	e03a      	b.n	8007804 <UART_SetConfig+0x5d0>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a43      	ldr	r2, [pc, #268]	; (80078a0 <UART_SetConfig+0x66c>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d132      	bne.n	80077fe <UART_SetConfig+0x5ca>
 8007798:	4b3e      	ldr	r3, [pc, #248]	; (8007894 <UART_SetConfig+0x660>)
 800779a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779c:	f003 0307 	and.w	r3, r3, #7
 80077a0:	2b05      	cmp	r3, #5
 80077a2:	d827      	bhi.n	80077f4 <UART_SetConfig+0x5c0>
 80077a4:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <UART_SetConfig+0x578>)
 80077a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077aa:	bf00      	nop
 80077ac:	080077c5 	.word	0x080077c5
 80077b0:	080077cd 	.word	0x080077cd
 80077b4:	080077d5 	.word	0x080077d5
 80077b8:	080077dd 	.word	0x080077dd
 80077bc:	080077e5 	.word	0x080077e5
 80077c0:	080077ed 	.word	0x080077ed
 80077c4:	2302      	movs	r3, #2
 80077c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ca:	e01b      	b.n	8007804 <UART_SetConfig+0x5d0>
 80077cc:	2304      	movs	r3, #4
 80077ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077d2:	e017      	b.n	8007804 <UART_SetConfig+0x5d0>
 80077d4:	2308      	movs	r3, #8
 80077d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077da:	e013      	b.n	8007804 <UART_SetConfig+0x5d0>
 80077dc:	2310      	movs	r3, #16
 80077de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077e2:	e00f      	b.n	8007804 <UART_SetConfig+0x5d0>
 80077e4:	2320      	movs	r3, #32
 80077e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ea:	e00b      	b.n	8007804 <UART_SetConfig+0x5d0>
 80077ec:	2340      	movs	r3, #64	; 0x40
 80077ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077f2:	e007      	b.n	8007804 <UART_SetConfig+0x5d0>
 80077f4:	2380      	movs	r3, #128	; 0x80
 80077f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077fa:	bf00      	nop
 80077fc:	e002      	b.n	8007804 <UART_SetConfig+0x5d0>
 80077fe:	2380      	movs	r3, #128	; 0x80
 8007800:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a25      	ldr	r2, [pc, #148]	; (80078a0 <UART_SetConfig+0x66c>)
 800780a:	4293      	cmp	r3, r2
 800780c:	f040 80b8 	bne.w	8007980 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007810:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007814:	2b08      	cmp	r3, #8
 8007816:	d019      	beq.n	800784c <UART_SetConfig+0x618>
 8007818:	2b08      	cmp	r3, #8
 800781a:	dc04      	bgt.n	8007826 <UART_SetConfig+0x5f2>
 800781c:	2b02      	cmp	r3, #2
 800781e:	d009      	beq.n	8007834 <UART_SetConfig+0x600>
 8007820:	2b04      	cmp	r3, #4
 8007822:	d00b      	beq.n	800783c <UART_SetConfig+0x608>
 8007824:	e042      	b.n	80078ac <UART_SetConfig+0x678>
 8007826:	2b20      	cmp	r3, #32
 8007828:	d02b      	beq.n	8007882 <UART_SetConfig+0x64e>
 800782a:	2b40      	cmp	r3, #64	; 0x40
 800782c:	d02c      	beq.n	8007888 <UART_SetConfig+0x654>
 800782e:	2b10      	cmp	r3, #16
 8007830:	d014      	beq.n	800785c <UART_SetConfig+0x628>
 8007832:	e03b      	b.n	80078ac <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007834:	f7fd fc66 	bl	8005104 <HAL_RCCEx_GetD3PCLK1Freq>
 8007838:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800783a:	e03d      	b.n	80078b8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800783c:	f107 0314 	add.w	r3, r7, #20
 8007840:	4618      	mov	r0, r3
 8007842:	f7fd fc75 	bl	8005130 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800784a:	e035      	b.n	80078b8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800784c:	f107 0308 	add.w	r3, r7, #8
 8007850:	4618      	mov	r0, r3
 8007852:	f7fd fdb9 	bl	80053c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800785a:	e02d      	b.n	80078b8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800785c:	4b0d      	ldr	r3, [pc, #52]	; (8007894 <UART_SetConfig+0x660>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0320 	and.w	r3, r3, #32
 8007864:	2b00      	cmp	r3, #0
 8007866:	d009      	beq.n	800787c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007868:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <UART_SetConfig+0x660>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	08db      	lsrs	r3, r3, #3
 800786e:	f003 0303 	and.w	r3, r3, #3
 8007872:	4a0c      	ldr	r2, [pc, #48]	; (80078a4 <UART_SetConfig+0x670>)
 8007874:	fa22 f303 	lsr.w	r3, r2, r3
 8007878:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800787a:	e01d      	b.n	80078b8 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800787c:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <UART_SetConfig+0x670>)
 800787e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007880:	e01a      	b.n	80078b8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007882:	4b09      	ldr	r3, [pc, #36]	; (80078a8 <UART_SetConfig+0x674>)
 8007884:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007886:	e017      	b.n	80078b8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007888:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800788c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800788e:	e013      	b.n	80078b8 <UART_SetConfig+0x684>
 8007890:	40011400 	.word	0x40011400
 8007894:	58024400 	.word	0x58024400
 8007898:	40007800 	.word	0x40007800
 800789c:	40007c00 	.word	0x40007c00
 80078a0:	58000c00 	.word	0x58000c00
 80078a4:	03d09000 	.word	0x03d09000
 80078a8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80078ac:	2300      	movs	r3, #0
 80078ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80078b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 824d 	beq.w	8007d5a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	4aad      	ldr	r2, [pc, #692]	; (8007b7c <UART_SetConfig+0x948>)
 80078c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078ca:	461a      	mov	r2, r3
 80078cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80078d2:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	4613      	mov	r3, r2
 80078da:	005b      	lsls	r3, r3, #1
 80078dc:	4413      	add	r3, r2
 80078de:	6a3a      	ldr	r2, [r7, #32]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d305      	bcc.n	80078f0 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078ea:	6a3a      	ldr	r2, [r7, #32]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d903      	bls.n	80078f8 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80078f6:	e230      	b.n	8007d5a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fa:	4618      	mov	r0, r3
 80078fc:	f04f 0100 	mov.w	r1, #0
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007904:	4a9d      	ldr	r2, [pc, #628]	; (8007b7c <UART_SetConfig+0x948>)
 8007906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800790a:	b29b      	uxth	r3, r3
 800790c:	f04f 0400 	mov.w	r4, #0
 8007910:	461a      	mov	r2, r3
 8007912:	4623      	mov	r3, r4
 8007914:	f7f8 fce4 	bl	80002e0 <__aeabi_uldivmod>
 8007918:	4603      	mov	r3, r0
 800791a:	460c      	mov	r4, r1
 800791c:	4619      	mov	r1, r3
 800791e:	4622      	mov	r2, r4
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	f04f 0400 	mov.w	r4, #0
 8007928:	0214      	lsls	r4, r2, #8
 800792a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800792e:	020b      	lsls	r3, r1, #8
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	6852      	ldr	r2, [r2, #4]
 8007934:	0852      	lsrs	r2, r2, #1
 8007936:	4611      	mov	r1, r2
 8007938:	f04f 0200 	mov.w	r2, #0
 800793c:	eb13 0b01 	adds.w	fp, r3, r1
 8007940:	eb44 0c02 	adc.w	ip, r4, r2
 8007944:	4658      	mov	r0, fp
 8007946:	4661      	mov	r1, ip
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f04f 0400 	mov.w	r4, #0
 8007950:	461a      	mov	r2, r3
 8007952:	4623      	mov	r3, r4
 8007954:	f7f8 fcc4 	bl	80002e0 <__aeabi_uldivmod>
 8007958:	4603      	mov	r3, r0
 800795a:	460c      	mov	r4, r1
 800795c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800795e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007960:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007964:	d308      	bcc.n	8007978 <UART_SetConfig+0x744>
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007968:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800796c:	d204      	bcs.n	8007978 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007974:	60da      	str	r2, [r3, #12]
 8007976:	e1f0      	b.n	8007d5a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800797e:	e1ec      	b.n	8007d5a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	69db      	ldr	r3, [r3, #28]
 8007984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007988:	f040 8100 	bne.w	8007b8c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800798c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007990:	2b40      	cmp	r3, #64	; 0x40
 8007992:	f200 80b7 	bhi.w	8007b04 <UART_SetConfig+0x8d0>
 8007996:	a201      	add	r2, pc, #4	; (adr r2, 800799c <UART_SetConfig+0x768>)
 8007998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799c:	08007aa1 	.word	0x08007aa1
 80079a0:	08007aa9 	.word	0x08007aa9
 80079a4:	08007b05 	.word	0x08007b05
 80079a8:	08007b05 	.word	0x08007b05
 80079ac:	08007ab1 	.word	0x08007ab1
 80079b0:	08007b05 	.word	0x08007b05
 80079b4:	08007b05 	.word	0x08007b05
 80079b8:	08007b05 	.word	0x08007b05
 80079bc:	08007ac1 	.word	0x08007ac1
 80079c0:	08007b05 	.word	0x08007b05
 80079c4:	08007b05 	.word	0x08007b05
 80079c8:	08007b05 	.word	0x08007b05
 80079cc:	08007b05 	.word	0x08007b05
 80079d0:	08007b05 	.word	0x08007b05
 80079d4:	08007b05 	.word	0x08007b05
 80079d8:	08007b05 	.word	0x08007b05
 80079dc:	08007ad1 	.word	0x08007ad1
 80079e0:	08007b05 	.word	0x08007b05
 80079e4:	08007b05 	.word	0x08007b05
 80079e8:	08007b05 	.word	0x08007b05
 80079ec:	08007b05 	.word	0x08007b05
 80079f0:	08007b05 	.word	0x08007b05
 80079f4:	08007b05 	.word	0x08007b05
 80079f8:	08007b05 	.word	0x08007b05
 80079fc:	08007b05 	.word	0x08007b05
 8007a00:	08007b05 	.word	0x08007b05
 8007a04:	08007b05 	.word	0x08007b05
 8007a08:	08007b05 	.word	0x08007b05
 8007a0c:	08007b05 	.word	0x08007b05
 8007a10:	08007b05 	.word	0x08007b05
 8007a14:	08007b05 	.word	0x08007b05
 8007a18:	08007b05 	.word	0x08007b05
 8007a1c:	08007af7 	.word	0x08007af7
 8007a20:	08007b05 	.word	0x08007b05
 8007a24:	08007b05 	.word	0x08007b05
 8007a28:	08007b05 	.word	0x08007b05
 8007a2c:	08007b05 	.word	0x08007b05
 8007a30:	08007b05 	.word	0x08007b05
 8007a34:	08007b05 	.word	0x08007b05
 8007a38:	08007b05 	.word	0x08007b05
 8007a3c:	08007b05 	.word	0x08007b05
 8007a40:	08007b05 	.word	0x08007b05
 8007a44:	08007b05 	.word	0x08007b05
 8007a48:	08007b05 	.word	0x08007b05
 8007a4c:	08007b05 	.word	0x08007b05
 8007a50:	08007b05 	.word	0x08007b05
 8007a54:	08007b05 	.word	0x08007b05
 8007a58:	08007b05 	.word	0x08007b05
 8007a5c:	08007b05 	.word	0x08007b05
 8007a60:	08007b05 	.word	0x08007b05
 8007a64:	08007b05 	.word	0x08007b05
 8007a68:	08007b05 	.word	0x08007b05
 8007a6c:	08007b05 	.word	0x08007b05
 8007a70:	08007b05 	.word	0x08007b05
 8007a74:	08007b05 	.word	0x08007b05
 8007a78:	08007b05 	.word	0x08007b05
 8007a7c:	08007b05 	.word	0x08007b05
 8007a80:	08007b05 	.word	0x08007b05
 8007a84:	08007b05 	.word	0x08007b05
 8007a88:	08007b05 	.word	0x08007b05
 8007a8c:	08007b05 	.word	0x08007b05
 8007a90:	08007b05 	.word	0x08007b05
 8007a94:	08007b05 	.word	0x08007b05
 8007a98:	08007b05 	.word	0x08007b05
 8007a9c:	08007afd 	.word	0x08007afd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aa0:	f7fc fbd4 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8007aa4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007aa6:	e033      	b.n	8007b10 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007aa8:	f7fc fbe6 	bl	8004278 <HAL_RCC_GetPCLK2Freq>
 8007aac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007aae:	e02f      	b.n	8007b10 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ab0:	f107 0314 	add.w	r3, r7, #20
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fd fb3b 	bl	8005130 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007abe:	e027      	b.n	8007b10 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ac0:	f107 0308 	add.w	r3, r7, #8
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fd fc7f 	bl	80053c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ace:	e01f      	b.n	8007b10 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ad0:	4b2b      	ldr	r3, [pc, #172]	; (8007b80 <UART_SetConfig+0x94c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0320 	and.w	r3, r3, #32
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d009      	beq.n	8007af0 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007adc:	4b28      	ldr	r3, [pc, #160]	; (8007b80 <UART_SetConfig+0x94c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	08db      	lsrs	r3, r3, #3
 8007ae2:	f003 0303 	and.w	r3, r3, #3
 8007ae6:	4a27      	ldr	r2, [pc, #156]	; (8007b84 <UART_SetConfig+0x950>)
 8007ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8007aec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007aee:	e00f      	b.n	8007b10 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8007af0:	4b24      	ldr	r3, [pc, #144]	; (8007b84 <UART_SetConfig+0x950>)
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007af4:	e00c      	b.n	8007b10 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007af6:	4b24      	ldr	r3, [pc, #144]	; (8007b88 <UART_SetConfig+0x954>)
 8007af8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007afa:	e009      	b.n	8007b10 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007afc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b02:	e005      	b.n	8007b10 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007b0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 8121 	beq.w	8007d5a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1c:	4a17      	ldr	r2, [pc, #92]	; (8007b7c <UART_SetConfig+0x948>)
 8007b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b22:	461a      	mov	r2, r3
 8007b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b26:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b2a:	005a      	lsls	r2, r3, #1
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	085b      	lsrs	r3, r3, #1
 8007b32:	441a      	add	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b42:	2b0f      	cmp	r3, #15
 8007b44:	d916      	bls.n	8007b74 <UART_SetConfig+0x940>
 8007b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b4c:	d212      	bcs.n	8007b74 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	f023 030f 	bic.w	r3, r3, #15
 8007b56:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5a:	085b      	lsrs	r3, r3, #1
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	f003 0307 	and.w	r3, r3, #7
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b66:	4313      	orrs	r3, r2
 8007b68:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b70:	60da      	str	r2, [r3, #12]
 8007b72:	e0f2      	b.n	8007d5a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007b7a:	e0ee      	b.n	8007d5a <UART_SetConfig+0xb26>
 8007b7c:	0800c5dc 	.word	0x0800c5dc
 8007b80:	58024400 	.word	0x58024400
 8007b84:	03d09000 	.word	0x03d09000
 8007b88:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b90:	2b40      	cmp	r3, #64	; 0x40
 8007b92:	f200 80b7 	bhi.w	8007d04 <UART_SetConfig+0xad0>
 8007b96:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <UART_SetConfig+0x968>)
 8007b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9c:	08007ca1 	.word	0x08007ca1
 8007ba0:	08007ca9 	.word	0x08007ca9
 8007ba4:	08007d05 	.word	0x08007d05
 8007ba8:	08007d05 	.word	0x08007d05
 8007bac:	08007cb1 	.word	0x08007cb1
 8007bb0:	08007d05 	.word	0x08007d05
 8007bb4:	08007d05 	.word	0x08007d05
 8007bb8:	08007d05 	.word	0x08007d05
 8007bbc:	08007cc1 	.word	0x08007cc1
 8007bc0:	08007d05 	.word	0x08007d05
 8007bc4:	08007d05 	.word	0x08007d05
 8007bc8:	08007d05 	.word	0x08007d05
 8007bcc:	08007d05 	.word	0x08007d05
 8007bd0:	08007d05 	.word	0x08007d05
 8007bd4:	08007d05 	.word	0x08007d05
 8007bd8:	08007d05 	.word	0x08007d05
 8007bdc:	08007cd1 	.word	0x08007cd1
 8007be0:	08007d05 	.word	0x08007d05
 8007be4:	08007d05 	.word	0x08007d05
 8007be8:	08007d05 	.word	0x08007d05
 8007bec:	08007d05 	.word	0x08007d05
 8007bf0:	08007d05 	.word	0x08007d05
 8007bf4:	08007d05 	.word	0x08007d05
 8007bf8:	08007d05 	.word	0x08007d05
 8007bfc:	08007d05 	.word	0x08007d05
 8007c00:	08007d05 	.word	0x08007d05
 8007c04:	08007d05 	.word	0x08007d05
 8007c08:	08007d05 	.word	0x08007d05
 8007c0c:	08007d05 	.word	0x08007d05
 8007c10:	08007d05 	.word	0x08007d05
 8007c14:	08007d05 	.word	0x08007d05
 8007c18:	08007d05 	.word	0x08007d05
 8007c1c:	08007cf7 	.word	0x08007cf7
 8007c20:	08007d05 	.word	0x08007d05
 8007c24:	08007d05 	.word	0x08007d05
 8007c28:	08007d05 	.word	0x08007d05
 8007c2c:	08007d05 	.word	0x08007d05
 8007c30:	08007d05 	.word	0x08007d05
 8007c34:	08007d05 	.word	0x08007d05
 8007c38:	08007d05 	.word	0x08007d05
 8007c3c:	08007d05 	.word	0x08007d05
 8007c40:	08007d05 	.word	0x08007d05
 8007c44:	08007d05 	.word	0x08007d05
 8007c48:	08007d05 	.word	0x08007d05
 8007c4c:	08007d05 	.word	0x08007d05
 8007c50:	08007d05 	.word	0x08007d05
 8007c54:	08007d05 	.word	0x08007d05
 8007c58:	08007d05 	.word	0x08007d05
 8007c5c:	08007d05 	.word	0x08007d05
 8007c60:	08007d05 	.word	0x08007d05
 8007c64:	08007d05 	.word	0x08007d05
 8007c68:	08007d05 	.word	0x08007d05
 8007c6c:	08007d05 	.word	0x08007d05
 8007c70:	08007d05 	.word	0x08007d05
 8007c74:	08007d05 	.word	0x08007d05
 8007c78:	08007d05 	.word	0x08007d05
 8007c7c:	08007d05 	.word	0x08007d05
 8007c80:	08007d05 	.word	0x08007d05
 8007c84:	08007d05 	.word	0x08007d05
 8007c88:	08007d05 	.word	0x08007d05
 8007c8c:	08007d05 	.word	0x08007d05
 8007c90:	08007d05 	.word	0x08007d05
 8007c94:	08007d05 	.word	0x08007d05
 8007c98:	08007d05 	.word	0x08007d05
 8007c9c:	08007cfd 	.word	0x08007cfd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ca0:	f7fc fad4 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8007ca4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007ca6:	e033      	b.n	8007d10 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ca8:	f7fc fae6 	bl	8004278 <HAL_RCC_GetPCLK2Freq>
 8007cac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007cae:	e02f      	b.n	8007d10 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cb0:	f107 0314 	add.w	r3, r7, #20
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fd fa3b 	bl	8005130 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cbe:	e027      	b.n	8007d10 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cc0:	f107 0308 	add.w	r3, r7, #8
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7fd fb7f 	bl	80053c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cce:	e01f      	b.n	8007d10 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cd0:	4b2c      	ldr	r3, [pc, #176]	; (8007d84 <UART_SetConfig+0xb50>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0320 	and.w	r3, r3, #32
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d009      	beq.n	8007cf0 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cdc:	4b29      	ldr	r3, [pc, #164]	; (8007d84 <UART_SetConfig+0xb50>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	08db      	lsrs	r3, r3, #3
 8007ce2:	f003 0303 	and.w	r3, r3, #3
 8007ce6:	4a28      	ldr	r2, [pc, #160]	; (8007d88 <UART_SetConfig+0xb54>)
 8007ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007cee:	e00f      	b.n	8007d10 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8007cf0:	4b25      	ldr	r3, [pc, #148]	; (8007d88 <UART_SetConfig+0xb54>)
 8007cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cf4:	e00c      	b.n	8007d10 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cf6:	4b25      	ldr	r3, [pc, #148]	; (8007d8c <UART_SetConfig+0xb58>)
 8007cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cfa:	e009      	b.n	8007d10 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d02:	e005      	b.n	8007d10 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8007d04:	2300      	movs	r3, #0
 8007d06:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007d0e:	bf00      	nop
    }

    if (pclk != 0U)
 8007d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d021      	beq.n	8007d5a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1a:	4a1d      	ldr	r2, [pc, #116]	; (8007d90 <UART_SetConfig+0xb5c>)
 8007d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d20:	461a      	mov	r2, r3
 8007d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d24:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	085b      	lsrs	r3, r3, #1
 8007d2e:	441a      	add	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3e:	2b0f      	cmp	r3, #15
 8007d40:	d908      	bls.n	8007d54 <UART_SetConfig+0xb20>
 8007d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d48:	d204      	bcs.n	8007d54 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d50:	60da      	str	r2, [r3, #12]
 8007d52:	e002      	b.n	8007d5a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007d76:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3738      	adds	r7, #56	; 0x38
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007d84:	58024400 	.word	0x58024400
 8007d88:	03d09000 	.word	0x03d09000
 8007d8c:	003d0900 	.word	0x003d0900
 8007d90:	0800c5dc 	.word	0x0800c5dc

08007d94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00a      	beq.n	8007dbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de4:	f003 0304 	and.w	r3, r3, #4
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00a      	beq.n	8007e02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e06:	f003 0308 	and.w	r3, r3, #8
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00a      	beq.n	8007e24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	430a      	orrs	r2, r1
 8007e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e28:	f003 0310 	and.w	r3, r3, #16
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00a      	beq.n	8007e46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4a:	f003 0320 	and.w	r3, r3, #32
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00a      	beq.n	8007e68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d01a      	beq.n	8007eaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e92:	d10a      	bne.n	8007eaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00a      	beq.n	8007ecc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	605a      	str	r2, [r3, #4]
  }
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af02      	add	r7, sp, #8
 8007ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007ee8:	f7f9 fe16 	bl	8001b18 <HAL_GetTick>
 8007eec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0308 	and.w	r3, r3, #8
 8007ef8:	2b08      	cmp	r3, #8
 8007efa:	d10e      	bne.n	8007f1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007efc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f82c 	bl	8007f68 <UART_WaitOnFlagUntilTimeout>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e022      	b.n	8007f60 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0304 	and.w	r3, r3, #4
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	d10e      	bne.n	8007f46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f816 	bl	8007f68 <UART_WaitOnFlagUntilTimeout>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e00c      	b.n	8007f60 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	603b      	str	r3, [r7, #0]
 8007f74:	4613      	mov	r3, r2
 8007f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f78:	e062      	b.n	8008040 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f80:	d05e      	beq.n	8008040 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f82:	f7f9 fdc9 	bl	8001b18 <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d302      	bcc.n	8007f98 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d11d      	bne.n	8007fd4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007fa6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689a      	ldr	r2, [r3, #8]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0201 	bic.w	r2, r2, #1
 8007fb6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e045      	b.n	8008060 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 0304 	and.w	r3, r3, #4
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d02e      	beq.n	8008040 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69db      	ldr	r3, [r3, #28]
 8007fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ff0:	d126      	bne.n	8008040 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ffa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800800a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689a      	ldr	r2, [r3, #8]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 0201 	bic.w	r2, r2, #1
 800801a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2220      	movs	r2, #32
 8008020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2220      	movs	r2, #32
 8008028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2220      	movs	r2, #32
 8008030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e00f      	b.n	8008060 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	69da      	ldr	r2, [r3, #28]
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	4013      	ands	r3, r2
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	429a      	cmp	r2, r3
 800804e:	bf0c      	ite	eq
 8008050:	2301      	moveq	r3, #1
 8008052:	2300      	movne	r3, #0
 8008054:	b2db      	uxtb	r3, r3
 8008056:	461a      	mov	r2, r3
 8008058:	79fb      	ldrb	r3, [r7, #7]
 800805a:	429a      	cmp	r2, r3
 800805c:	d08d      	beq.n	8007f7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008076:	2b01      	cmp	r3, #1
 8008078:	d101      	bne.n	800807e <HAL_UARTEx_DisableFifoMode+0x16>
 800807a:	2302      	movs	r3, #2
 800807c:	e027      	b.n	80080ce <HAL_UARTEx_DisableFifoMode+0x66>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2224      	movs	r2, #36	; 0x24
 800808a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f022 0201 	bic.w	r2, r2, #1
 80080a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2220      	movs	r2, #32
 80080c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d101      	bne.n	80080f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080ee:	2302      	movs	r3, #2
 80080f0:	e02d      	b.n	800814e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2224      	movs	r2, #36	; 0x24
 80080fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 0201 	bic.w	r2, r2, #1
 8008118:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f850 	bl	80081d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2220      	movs	r2, #32
 8008140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b084      	sub	sp, #16
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008166:	2b01      	cmp	r3, #1
 8008168:	d101      	bne.n	800816e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800816a:	2302      	movs	r3, #2
 800816c:	e02d      	b.n	80081ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2224      	movs	r2, #36	; 0x24
 800817a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f022 0201 	bic.w	r2, r2, #1
 8008194:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f812 	bl	80081d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2220      	movs	r2, #32
 80081bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b089      	sub	sp, #36	; 0x24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80081dc:	4a2f      	ldr	r2, [pc, #188]	; (800829c <UARTEx_SetNbDataToProcess+0xc8>)
 80081de:	f107 0314 	add.w	r3, r7, #20
 80081e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80081e6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80081ea:	4a2d      	ldr	r2, [pc, #180]	; (80082a0 <UARTEx_SetNbDataToProcess+0xcc>)
 80081ec:	f107 030c 	add.w	r3, r7, #12
 80081f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80081f4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d108      	bne.n	8008212 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008210:	e03d      	b.n	800828e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008212:	2310      	movs	r3, #16
 8008214:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008216:	2310      	movs	r3, #16
 8008218:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	0e5b      	lsrs	r3, r3, #25
 8008222:	b2db      	uxtb	r3, r3
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	0f5b      	lsrs	r3, r3, #29
 8008232:	b2db      	uxtb	r3, r3
 8008234:	f003 0307 	and.w	r3, r3, #7
 8008238:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800823a:	7fbb      	ldrb	r3, [r7, #30]
 800823c:	7f3a      	ldrb	r2, [r7, #28]
 800823e:	f107 0120 	add.w	r1, r7, #32
 8008242:	440a      	add	r2, r1
 8008244:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008248:	fb02 f303 	mul.w	r3, r2, r3
 800824c:	7f3a      	ldrb	r2, [r7, #28]
 800824e:	f107 0120 	add.w	r1, r7, #32
 8008252:	440a      	add	r2, r1
 8008254:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008258:	fb93 f3f2 	sdiv	r3, r3, r2
 800825c:	b29a      	uxth	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008264:	7ffb      	ldrb	r3, [r7, #31]
 8008266:	7f7a      	ldrb	r2, [r7, #29]
 8008268:	f107 0120 	add.w	r1, r7, #32
 800826c:	440a      	add	r2, r1
 800826e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008272:	fb02 f303 	mul.w	r3, r2, r3
 8008276:	7f7a      	ldrb	r2, [r7, #29]
 8008278:	f107 0120 	add.w	r1, r7, #32
 800827c:	440a      	add	r2, r1
 800827e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008282:	fb93 f3f2 	sdiv	r3, r3, r2
 8008286:	b29a      	uxth	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800828e:	bf00      	nop
 8008290:	3724      	adds	r7, #36	; 0x24
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	0800b514 	.word	0x0800b514
 80082a0:	0800b51c 	.word	0x0800b51c

080082a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082a4:	b084      	sub	sp, #16
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	f107 001c 	add.w	r0, r7, #28
 80082b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d120      	bne.n	80082fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	68da      	ldr	r2, [r3, #12]
 80082cc:	4b25      	ldr	r3, [pc, #148]	; (8008364 <USB_CoreInit+0xc0>)
 80082ce:	4013      	ands	r3, r2
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d105      	bne.n	80082f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fa4c 	bl	8008790 <USB_CoreReset>
 80082f8:	4603      	mov	r3, r0
 80082fa:	73fb      	strb	r3, [r7, #15]
 80082fc:	e01a      	b.n	8008334 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fa40 	bl	8008790 <USB_CoreReset>
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008316:	2b00      	cmp	r3, #0
 8008318:	d106      	bne.n	8008328 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	639a      	str	r2, [r3, #56]	; 0x38
 8008326:	e005      	b.n	8008334 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	2b01      	cmp	r3, #1
 8008338:	d10b      	bne.n	8008352 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f043 0206 	orr.w	r2, r3, #6
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f043 0220 	orr.w	r2, r3, #32
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008352:	7bfb      	ldrb	r3, [r7, #15]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800835e:	b004      	add	sp, #16
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	ffbdffbf 	.word	0xffbdffbf

08008368 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f023 0201 	bic.w	r2, r3, #1
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b082      	sub	sp, #8
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	460b      	mov	r3, r1
 8008394:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80083a2:	78fb      	ldrb	r3, [r7, #3]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d106      	bne.n	80083b6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	60da      	str	r2, [r3, #12]
 80083b4:	e00b      	b.n	80083ce <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80083b6:	78fb      	ldrb	r3, [r7, #3]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d106      	bne.n	80083ca <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	60da      	str	r2, [r3, #12]
 80083c8:	e001      	b.n	80083ce <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e003      	b.n	80083d6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80083ce:	2032      	movs	r0, #50	; 0x32
 80083d0:	f7f9 fbae 	bl	8001b30 <HAL_Delay>

  return HAL_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
	...

080083e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083e0:	b084      	sub	sp, #16
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b086      	sub	sp, #24
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80083ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80083fa:	2300      	movs	r3, #0
 80083fc:	613b      	str	r3, [r7, #16]
 80083fe:	e009      	b.n	8008414 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	3340      	adds	r3, #64	; 0x40
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	2200      	movs	r2, #0
 800840c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	3301      	adds	r3, #1
 8008412:	613b      	str	r3, [r7, #16]
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	2b0e      	cmp	r3, #14
 8008418:	d9f2      	bls.n	8008400 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800841a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800841c:	2b00      	cmp	r3, #0
 800841e:	d11c      	bne.n	800845a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800842e:	f043 0302 	orr.w	r3, r3, #2
 8008432:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008438:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	e005      	b.n	8008466 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800846c:	461a      	mov	r2, r3
 800846e:	2300      	movs	r3, #0
 8008470:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008478:	4619      	mov	r1, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008480:	461a      	mov	r2, r3
 8008482:	680b      	ldr	r3, [r1, #0]
 8008484:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008488:	2b01      	cmp	r3, #1
 800848a:	d10c      	bne.n	80084a6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800848c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848e:	2b00      	cmp	r3, #0
 8008490:	d104      	bne.n	800849c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008492:	2100      	movs	r1, #0
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f949 	bl	800872c <USB_SetDevSpeed>
 800849a:	e008      	b.n	80084ae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800849c:	2101      	movs	r1, #1
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f944 	bl	800872c <USB_SetDevSpeed>
 80084a4:	e003      	b.n	80084ae <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80084a6:	2103      	movs	r1, #3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f93f 	bl	800872c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80084ae:	2110      	movs	r1, #16
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f8f3 	bl	800869c <USB_FlushTxFifo>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f911 	bl	80086e8 <USB_FlushRxFifo>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d6:	461a      	mov	r2, r3
 80084d8:	2300      	movs	r3, #0
 80084da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e2:	461a      	mov	r2, r3
 80084e4:	2300      	movs	r3, #0
 80084e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ee:	461a      	mov	r2, r3
 80084f0:	2300      	movs	r3, #0
 80084f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084f4:	2300      	movs	r3, #0
 80084f6:	613b      	str	r3, [r7, #16]
 80084f8:	e043      	b.n	8008582 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	4413      	add	r3, r2
 8008502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800850c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008510:	d118      	bne.n	8008544 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10a      	bne.n	800852e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4413      	add	r3, r2
 8008520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008524:	461a      	mov	r2, r3
 8008526:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800852a:	6013      	str	r3, [r2, #0]
 800852c:	e013      	b.n	8008556 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	4413      	add	r3, r2
 8008536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800853a:	461a      	mov	r2, r3
 800853c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008540:	6013      	str	r3, [r2, #0]
 8008542:	e008      	b.n	8008556 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008550:	461a      	mov	r2, r3
 8008552:	2300      	movs	r3, #0
 8008554:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	015a      	lsls	r2, r3, #5
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	4413      	add	r3, r2
 800855e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008562:	461a      	mov	r2, r3
 8008564:	2300      	movs	r3, #0
 8008566:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	4413      	add	r3, r2
 8008570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008574:	461a      	mov	r2, r3
 8008576:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800857a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	3301      	adds	r3, #1
 8008580:	613b      	str	r3, [r7, #16]
 8008582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	429a      	cmp	r2, r3
 8008588:	d3b7      	bcc.n	80084fa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800858a:	2300      	movs	r3, #0
 800858c:	613b      	str	r3, [r7, #16]
 800858e:	e043      	b.n	8008618 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	4413      	add	r3, r2
 8008598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085a6:	d118      	bne.n	80085da <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10a      	bne.n	80085c4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ba:	461a      	mov	r2, r3
 80085bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80085c0:	6013      	str	r3, [r2, #0]
 80085c2:	e013      	b.n	80085ec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	015a      	lsls	r2, r3, #5
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d0:	461a      	mov	r2, r3
 80085d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80085d6:	6013      	str	r3, [r2, #0]
 80085d8:	e008      	b.n	80085ec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	015a      	lsls	r2, r3, #5
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	4413      	add	r3, r2
 80085e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e6:	461a      	mov	r2, r3
 80085e8:	2300      	movs	r3, #0
 80085ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f8:	461a      	mov	r2, r3
 80085fa:	2300      	movs	r3, #0
 80085fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	4413      	add	r3, r2
 8008606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800860a:	461a      	mov	r2, r3
 800860c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008610:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	3301      	adds	r3, #1
 8008616:	613b      	str	r3, [r7, #16]
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	429a      	cmp	r2, r3
 800861e:	d3b7      	bcc.n	8008590 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800862e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008632:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008640:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008644:	2b00      	cmp	r3, #0
 8008646:	d105      	bne.n	8008654 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	f043 0210 	orr.w	r2, r3, #16
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	699a      	ldr	r2, [r3, #24]
 8008658:	4b0e      	ldr	r3, [pc, #56]	; (8008694 <USB_DevInit+0x2b4>)
 800865a:	4313      	orrs	r3, r2
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008662:	2b00      	cmp	r3, #0
 8008664:	d005      	beq.n	8008672 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	f043 0208 	orr.w	r2, r3, #8
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008674:	2b01      	cmp	r3, #1
 8008676:	d105      	bne.n	8008684 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	699a      	ldr	r2, [r3, #24]
 800867c:	4b06      	ldr	r3, [pc, #24]	; (8008698 <USB_DevInit+0x2b8>)
 800867e:	4313      	orrs	r3, r2
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008684:	7dfb      	ldrb	r3, [r7, #23]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008690:	b004      	add	sp, #16
 8008692:	4770      	bx	lr
 8008694:	803c3800 	.word	0x803c3800
 8008698:	40000004 	.word	0x40000004

0800869c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	019b      	lsls	r3, r3, #6
 80086ae:	f043 0220 	orr.w	r2, r3, #32
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3301      	adds	r3, #1
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4a09      	ldr	r2, [pc, #36]	; (80086e4 <USB_FlushTxFifo+0x48>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d901      	bls.n	80086c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e006      	b.n	80086d6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	f003 0320 	and.w	r3, r3, #32
 80086d0:	2b20      	cmp	r3, #32
 80086d2:	d0f0      	beq.n	80086b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	00030d40 	.word	0x00030d40

080086e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2210      	movs	r2, #16
 80086f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3301      	adds	r3, #1
 80086fe:	60fb      	str	r3, [r7, #12]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4a09      	ldr	r2, [pc, #36]	; (8008728 <USB_FlushRxFifo+0x40>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d901      	bls.n	800870c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e006      	b.n	800871a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	f003 0310 	and.w	r3, r3, #16
 8008714:	2b10      	cmp	r3, #16
 8008716:	d0f0      	beq.n	80086fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	00030d40 	.word	0x00030d40

0800872c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	78fb      	ldrb	r3, [r7, #3]
 8008746:	68f9      	ldr	r1, [r7, #12]
 8008748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800874c:	4313      	orrs	r3, r2
 800874e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008778:	f043 0302 	orr.w	r3, r3, #2
 800877c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800877e:	2003      	movs	r0, #3
 8008780:	f7f9 f9d6 	bl	8001b30 <HAL_Delay>

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
	...

08008790 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008798:	2300      	movs	r3, #0
 800879a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	3301      	adds	r3, #1
 80087a0:	60fb      	str	r3, [r7, #12]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	4a13      	ldr	r2, [pc, #76]	; (80087f4 <USB_CoreReset+0x64>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d901      	bls.n	80087ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e01b      	b.n	80087e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	daf2      	bge.n	800879c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	f043 0201 	orr.w	r2, r3, #1
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	3301      	adds	r3, #1
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4a09      	ldr	r2, [pc, #36]	; (80087f4 <USB_CoreReset+0x64>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d901      	bls.n	80087d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087d4:	2303      	movs	r3, #3
 80087d6:	e006      	b.n	80087e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d0f0      	beq.n	80087c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	00030d40 	.word	0x00030d40

080087f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80087f8:	b480      	push	{r7}
 80087fa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80087fc:	bf00      	nop
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
	...

08008808 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800880e:	f3ef 8305 	mrs	r3, IPSR
 8008812:	60bb      	str	r3, [r7, #8]
  return(result);
 8008814:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10f      	bne.n	800883a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800881a:	f3ef 8310 	mrs	r3, PRIMASK
 800881e:	607b      	str	r3, [r7, #4]
  return(result);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d105      	bne.n	8008832 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008826:	f3ef 8311 	mrs	r3, BASEPRI
 800882a:	603b      	str	r3, [r7, #0]
  return(result);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d007      	beq.n	8008842 <osKernelInitialize+0x3a>
 8008832:	4b0e      	ldr	r3, [pc, #56]	; (800886c <osKernelInitialize+0x64>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b02      	cmp	r3, #2
 8008838:	d103      	bne.n	8008842 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800883a:	f06f 0305 	mvn.w	r3, #5
 800883e:	60fb      	str	r3, [r7, #12]
 8008840:	e00c      	b.n	800885c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008842:	4b0a      	ldr	r3, [pc, #40]	; (800886c <osKernelInitialize+0x64>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d105      	bne.n	8008856 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800884a:	4b08      	ldr	r3, [pc, #32]	; (800886c <osKernelInitialize+0x64>)
 800884c:	2201      	movs	r2, #1
 800884e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	e002      	b.n	800885c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008856:	f04f 33ff 	mov.w	r3, #4294967295
 800885a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800885c:	68fb      	ldr	r3, [r7, #12]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	240000f0 	.word	0x240000f0

08008870 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008876:	f3ef 8305 	mrs	r3, IPSR
 800887a:	60bb      	str	r3, [r7, #8]
  return(result);
 800887c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10f      	bne.n	80088a2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008882:	f3ef 8310 	mrs	r3, PRIMASK
 8008886:	607b      	str	r3, [r7, #4]
  return(result);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d105      	bne.n	800889a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800888e:	f3ef 8311 	mrs	r3, BASEPRI
 8008892:	603b      	str	r3, [r7, #0]
  return(result);
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d007      	beq.n	80088aa <osKernelStart+0x3a>
 800889a:	4b0f      	ldr	r3, [pc, #60]	; (80088d8 <osKernelStart+0x68>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d103      	bne.n	80088aa <osKernelStart+0x3a>
    stat = osErrorISR;
 80088a2:	f06f 0305 	mvn.w	r3, #5
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	e010      	b.n	80088cc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80088aa:	4b0b      	ldr	r3, [pc, #44]	; (80088d8 <osKernelStart+0x68>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d109      	bne.n	80088c6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80088b2:	f7ff ffa1 	bl	80087f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80088b6:	4b08      	ldr	r3, [pc, #32]	; (80088d8 <osKernelStart+0x68>)
 80088b8:	2202      	movs	r2, #2
 80088ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80088bc:	f001 f898 	bl	80099f0 <vTaskStartScheduler>
      stat = osOK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	60fb      	str	r3, [r7, #12]
 80088c4:	e002      	b.n	80088cc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80088c6:	f04f 33ff 	mov.w	r3, #4294967295
 80088ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80088cc:	68fb      	ldr	r3, [r7, #12]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	240000f0 	.word	0x240000f0

080088dc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088e2:	f3ef 8305 	mrs	r3, IPSR
 80088e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80088e8:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10f      	bne.n	800890e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ee:	f3ef 8310 	mrs	r3, PRIMASK
 80088f2:	607b      	str	r3, [r7, #4]
  return(result);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d105      	bne.n	8008906 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088fa:	f3ef 8311 	mrs	r3, BASEPRI
 80088fe:	603b      	str	r3, [r7, #0]
  return(result);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d007      	beq.n	8008916 <osKernelGetTickCount+0x3a>
 8008906:	4b08      	ldr	r3, [pc, #32]	; (8008928 <osKernelGetTickCount+0x4c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b02      	cmp	r3, #2
 800890c:	d103      	bne.n	8008916 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800890e:	f001 f98d 	bl	8009c2c <xTaskGetTickCountFromISR>
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	e002      	b.n	800891c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8008916:	f001 f979 	bl	8009c0c <xTaskGetTickCount>
 800891a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800891c:	68fb      	ldr	r3, [r7, #12]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	240000f0 	.word	0x240000f0

0800892c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800892c:	b580      	push	{r7, lr}
 800892e:	b090      	sub	sp, #64	; 0x40
 8008930:	af04      	add	r7, sp, #16
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008938:	2300      	movs	r3, #0
 800893a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800893c:	f3ef 8305 	mrs	r3, IPSR
 8008940:	61fb      	str	r3, [r7, #28]
  return(result);
 8008942:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008944:	2b00      	cmp	r3, #0
 8008946:	f040 808f 	bne.w	8008a68 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800894a:	f3ef 8310 	mrs	r3, PRIMASK
 800894e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d105      	bne.n	8008962 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008956:	f3ef 8311 	mrs	r3, BASEPRI
 800895a:	617b      	str	r3, [r7, #20]
  return(result);
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d003      	beq.n	800896a <osThreadNew+0x3e>
 8008962:	4b44      	ldr	r3, [pc, #272]	; (8008a74 <osThreadNew+0x148>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b02      	cmp	r3, #2
 8008968:	d07e      	beq.n	8008a68 <osThreadNew+0x13c>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d07b      	beq.n	8008a68 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008970:	2380      	movs	r3, #128	; 0x80
 8008972:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008974:	2318      	movs	r3, #24
 8008976:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008978:	2300      	movs	r3, #0
 800897a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800897c:	f04f 33ff 	mov.w	r3, #4294967295
 8008980:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d045      	beq.n	8008a14 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d002      	beq.n	8008996 <osThreadNew+0x6a>
        name = attr->name;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d008      	beq.n	80089bc <osThreadNew+0x90>
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	2b38      	cmp	r3, #56	; 0x38
 80089ae:	d805      	bhi.n	80089bc <osThreadNew+0x90>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	f003 0301 	and.w	r3, r3, #1
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <osThreadNew+0x94>
        return (NULL);
 80089bc:	2300      	movs	r3, #0
 80089be:	e054      	b.n	8008a6a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	695b      	ldr	r3, [r3, #20]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d003      	beq.n	80089d0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	089b      	lsrs	r3, r3, #2
 80089ce:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00e      	beq.n	80089f6 <osThreadNew+0xca>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	2b5b      	cmp	r3, #91	; 0x5b
 80089de:	d90a      	bls.n	80089f6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d006      	beq.n	80089f6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <osThreadNew+0xca>
        mem = 1;
 80089f0:	2301      	movs	r3, #1
 80089f2:	623b      	str	r3, [r7, #32]
 80089f4:	e010      	b.n	8008a18 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10c      	bne.n	8008a18 <osThreadNew+0xec>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d108      	bne.n	8008a18 <osThreadNew+0xec>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d104      	bne.n	8008a18 <osThreadNew+0xec>
          mem = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	623b      	str	r3, [r7, #32]
 8008a12:	e001      	b.n	8008a18 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008a14:	2300      	movs	r3, #0
 8008a16:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d110      	bne.n	8008a40 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a26:	9202      	str	r2, [sp, #8]
 8008a28:	9301      	str	r3, [sp, #4]
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 fe09 	bl	800964c <xTaskCreateStatic>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	613b      	str	r3, [r7, #16]
 8008a3e:	e013      	b.n	8008a68 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d110      	bne.n	8008a68 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	f107 0310 	add.w	r3, r7, #16
 8008a4e:	9301      	str	r3, [sp, #4]
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 fe51 	bl	8009700 <xTaskCreate>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d001      	beq.n	8008a68 <osThreadNew+0x13c>
          hTask = NULL;
 8008a64:	2300      	movs	r3, #0
 8008a66:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a68:	693b      	ldr	r3, [r7, #16]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3730      	adds	r7, #48	; 0x30
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	240000f0 	.word	0x240000f0

08008a78 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a80:	f3ef 8305 	mrs	r3, IPSR
 8008a84:	613b      	str	r3, [r7, #16]
  return(result);
 8008a86:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10f      	bne.n	8008aac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8008a90:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d105      	bne.n	8008aa4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a98:	f3ef 8311 	mrs	r3, BASEPRI
 8008a9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d007      	beq.n	8008ab4 <osDelay+0x3c>
 8008aa4:	4b0a      	ldr	r3, [pc, #40]	; (8008ad0 <osDelay+0x58>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d103      	bne.n	8008ab4 <osDelay+0x3c>
    stat = osErrorISR;
 8008aac:	f06f 0305 	mvn.w	r3, #5
 8008ab0:	617b      	str	r3, [r7, #20]
 8008ab2:	e007      	b.n	8008ac4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d002      	beq.n	8008ac4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 ff62 	bl	8009988 <vTaskDelay>
    }
  }

  return (stat);
 8008ac4:	697b      	ldr	r3, [r7, #20]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3718      	adds	r7, #24
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	240000f0 	.word	0x240000f0

08008ad4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	4a07      	ldr	r2, [pc, #28]	; (8008b00 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ae4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	4a06      	ldr	r2, [pc, #24]	; (8008b04 <vApplicationGetIdleTaskMemory+0x30>)
 8008aea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2280      	movs	r2, #128	; 0x80
 8008af0:	601a      	str	r2, [r3, #0]
}
 8008af2:	bf00      	nop
 8008af4:	3714      	adds	r7, #20
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	240000f4 	.word	0x240000f4
 8008b04:	24000150 	.word	0x24000150

08008b08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	4a07      	ldr	r2, [pc, #28]	; (8008b34 <vApplicationGetTimerTaskMemory+0x2c>)
 8008b18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	4a06      	ldr	r2, [pc, #24]	; (8008b38 <vApplicationGetTimerTaskMemory+0x30>)
 8008b1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b26:	601a      	str	r2, [r3, #0]
}
 8008b28:	bf00      	nop
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	24000350 	.word	0x24000350
 8008b38:	240003ac 	.word	0x240003ac

08008b3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f103 0208 	add.w	r2, r3, #8
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f04f 32ff 	mov.w	r2, #4294967295
 8008b54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f103 0208 	add.w	r2, r3, #8
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f103 0208 	add.w	r2, r3, #8
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b8a:	bf00      	nop
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b96:	b480      	push	{r7}
 8008b98:	b085      	sub	sp, #20
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	689a      	ldr	r2, [r3, #8]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	683a      	ldr	r2, [r7, #0]
 8008bba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	1c5a      	adds	r2, r3, #1
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	601a      	str	r2, [r3, #0]
}
 8008bd2:	bf00      	nop
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bde:	b480      	push	{r7}
 8008be0:	b085      	sub	sp, #20
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
 8008be6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf4:	d103      	bne.n	8008bfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	e00c      	b.n	8008c18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	3308      	adds	r3, #8
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	e002      	b.n	8008c0c <vListInsert+0x2e>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d2f6      	bcs.n	8008c06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	683a      	ldr	r2, [r7, #0]
 8008c32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	1c5a      	adds	r2, r3, #1
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	601a      	str	r2, [r3, #0]
}
 8008c44:	bf00      	nop
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	6892      	ldr	r2, [r2, #8]
 8008c66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	6852      	ldr	r2, [r2, #4]
 8008c70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d103      	bne.n	8008c84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	689a      	ldr	r2, [r3, #8]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	1e5a      	subs	r2, r3, #1
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d109      	bne.n	8008ccc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbc:	f383 8811 	msr	BASEPRI, r3
 8008cc0:	f3bf 8f6f 	isb	sy
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	60bb      	str	r3, [r7, #8]
 8008cca:	e7fe      	b.n	8008cca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008ccc:	f002 f826 	bl	800ad1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd8:	68f9      	ldr	r1, [r7, #12]
 8008cda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cdc:	fb01 f303 	mul.w	r3, r1, r3
 8008ce0:	441a      	add	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	68f9      	ldr	r1, [r7, #12]
 8008d00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d02:	fb01 f303 	mul.w	r3, r1, r3
 8008d06:	441a      	add	r2, r3
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	22ff      	movs	r2, #255	; 0xff
 8008d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	22ff      	movs	r2, #255	; 0xff
 8008d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d114      	bne.n	8008d4c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d01a      	beq.n	8008d60 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3310      	adds	r3, #16
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f001 f8f0 	bl	8009f14 <xTaskRemoveFromEventList>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d012      	beq.n	8008d60 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d3a:	4b0d      	ldr	r3, [pc, #52]	; (8008d70 <xQueueGenericReset+0xcc>)
 8008d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	e009      	b.n	8008d60 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	3310      	adds	r3, #16
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7ff fef3 	bl	8008b3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	3324      	adds	r3, #36	; 0x24
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7ff feee 	bl	8008b3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d60:	f002 f80a 	bl	800ad78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d64:	2301      	movs	r3, #1
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	e000ed04 	.word	0xe000ed04

08008d74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08e      	sub	sp, #56	; 0x38
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d109      	bne.n	8008d9c <xQueueGenericCreateStatic+0x28>
 8008d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d9a:	e7fe      	b.n	8008d9a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d109      	bne.n	8008db6 <xQueueGenericCreateStatic+0x42>
 8008da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	627b      	str	r3, [r7, #36]	; 0x24
 8008db4:	e7fe      	b.n	8008db4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <xQueueGenericCreateStatic+0x4e>
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <xQueueGenericCreateStatic+0x52>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e000      	b.n	8008dc8 <xQueueGenericCreateStatic+0x54>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d109      	bne.n	8008de0 <xQueueGenericCreateStatic+0x6c>
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	623b      	str	r3, [r7, #32]
 8008dde:	e7fe      	b.n	8008dde <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d102      	bne.n	8008dec <xQueueGenericCreateStatic+0x78>
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <xQueueGenericCreateStatic+0x7c>
 8008dec:	2301      	movs	r3, #1
 8008dee:	e000      	b.n	8008df2 <xQueueGenericCreateStatic+0x7e>
 8008df0:	2300      	movs	r3, #0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d109      	bne.n	8008e0a <xQueueGenericCreateStatic+0x96>
 8008df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	61fb      	str	r3, [r7, #28]
 8008e08:	e7fe      	b.n	8008e08 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e0a:	2350      	movs	r3, #80	; 0x50
 8008e0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	2b50      	cmp	r3, #80	; 0x50
 8008e12:	d009      	beq.n	8008e28 <xQueueGenericCreateStatic+0xb4>
 8008e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	61bb      	str	r3, [r7, #24]
 8008e26:	e7fe      	b.n	8008e26 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00d      	beq.n	8008e50 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e3c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	4613      	mov	r3, r2
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	68b9      	ldr	r1, [r7, #8]
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 f805 	bl	8008e5a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3730      	adds	r7, #48	; 0x30
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b084      	sub	sp, #16
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	60f8      	str	r0, [r7, #12]
 8008e62:	60b9      	str	r1, [r7, #8]
 8008e64:	607a      	str	r2, [r7, #4]
 8008e66:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d103      	bne.n	8008e76 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	e002      	b.n	8008e7c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e88:	2101      	movs	r1, #1
 8008e8a:	69b8      	ldr	r0, [r7, #24]
 8008e8c:	f7ff ff0a 	bl	8008ca4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	78fa      	ldrb	r2, [r7, #3]
 8008e94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e98:	bf00      	nop
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08e      	sub	sp, #56	; 0x38
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d109      	bne.n	8008ed0 <xQueueGenericSend+0x30>
 8008ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ece:	e7fe      	b.n	8008ece <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d103      	bne.n	8008ede <xQueueGenericSend+0x3e>
 8008ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <xQueueGenericSend+0x42>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e000      	b.n	8008ee4 <xQueueGenericSend+0x44>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d109      	bne.n	8008efc <xQueueGenericSend+0x5c>
 8008ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8008efa:	e7fe      	b.n	8008efa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d103      	bne.n	8008f0a <xQueueGenericSend+0x6a>
 8008f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d101      	bne.n	8008f0e <xQueueGenericSend+0x6e>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e000      	b.n	8008f10 <xQueueGenericSend+0x70>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d109      	bne.n	8008f28 <xQueueGenericSend+0x88>
 8008f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	623b      	str	r3, [r7, #32]
 8008f26:	e7fe      	b.n	8008f26 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f28:	f001 f9aa 	bl	800a280 <xTaskGetSchedulerState>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d102      	bne.n	8008f38 <xQueueGenericSend+0x98>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <xQueueGenericSend+0x9c>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e000      	b.n	8008f3e <xQueueGenericSend+0x9e>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d109      	bne.n	8008f56 <xQueueGenericSend+0xb6>
 8008f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	61fb      	str	r3, [r7, #28]
 8008f54:	e7fe      	b.n	8008f54 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f56:	f001 fee1 	bl	800ad1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d302      	bcc.n	8008f6c <xQueueGenericSend+0xcc>
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d129      	bne.n	8008fc0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	68b9      	ldr	r1, [r7, #8]
 8008f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f72:	f000 f9ff 	bl	8009374 <prvCopyDataToQueue>
 8008f76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d010      	beq.n	8008fa2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	3324      	adds	r3, #36	; 0x24
 8008f84:	4618      	mov	r0, r3
 8008f86:	f000 ffc5 	bl	8009f14 <xTaskRemoveFromEventList>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d013      	beq.n	8008fb8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f90:	4b3f      	ldr	r3, [pc, #252]	; (8009090 <xQueueGenericSend+0x1f0>)
 8008f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	e00a      	b.n	8008fb8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d007      	beq.n	8008fb8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008fa8:	4b39      	ldr	r3, [pc, #228]	; (8009090 <xQueueGenericSend+0x1f0>)
 8008faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008fb8:	f001 fede 	bl	800ad78 <vPortExitCritical>
				return pdPASS;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e063      	b.n	8009088 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d103      	bne.n	8008fce <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008fc6:	f001 fed7 	bl	800ad78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	e05c      	b.n	8009088 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d106      	bne.n	8008fe2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fd4:	f107 0314 	add.w	r3, r7, #20
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f000 fffd 	bl	8009fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fe2:	f001 fec9 	bl	800ad78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fe6:	f000 fd67 	bl	8009ab8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fea:	f001 fe97 	bl	800ad1c <vPortEnterCritical>
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ff4:	b25b      	sxtb	r3, r3
 8008ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffa:	d103      	bne.n	8009004 <xQueueGenericSend+0x164>
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800900a:	b25b      	sxtb	r3, r3
 800900c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009010:	d103      	bne.n	800901a <xQueueGenericSend+0x17a>
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	2200      	movs	r2, #0
 8009016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800901a:	f001 fead 	bl	800ad78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800901e:	1d3a      	adds	r2, r7, #4
 8009020:	f107 0314 	add.w	r3, r7, #20
 8009024:	4611      	mov	r1, r2
 8009026:	4618      	mov	r0, r3
 8009028:	f000 ffec 	bl	800a004 <xTaskCheckForTimeOut>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d124      	bne.n	800907c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009032:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009034:	f000 fa96 	bl	8009564 <prvIsQueueFull>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d018      	beq.n	8009070 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	3310      	adds	r3, #16
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	4611      	mov	r1, r2
 8009046:	4618      	mov	r0, r3
 8009048:	f000 ff16 	bl	8009e78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800904c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800904e:	f000 fa21 	bl	8009494 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009052:	f000 fd3f 	bl	8009ad4 <xTaskResumeAll>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	f47f af7c 	bne.w	8008f56 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800905e:	4b0c      	ldr	r3, [pc, #48]	; (8009090 <xQueueGenericSend+0x1f0>)
 8009060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	f3bf 8f6f 	isb	sy
 800906e:	e772      	b.n	8008f56 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009072:	f000 fa0f 	bl	8009494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009076:	f000 fd2d 	bl	8009ad4 <xTaskResumeAll>
 800907a:	e76c      	b.n	8008f56 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800907c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800907e:	f000 fa09 	bl	8009494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009082:	f000 fd27 	bl	8009ad4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009086:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009088:	4618      	mov	r0, r3
 800908a:	3738      	adds	r7, #56	; 0x38
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	e000ed04 	.word	0xe000ed04

08009094 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b08e      	sub	sp, #56	; 0x38
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
 80090a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d109      	bne.n	80090c0 <xQueueGenericSendFromISR+0x2c>
 80090ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	627b      	str	r3, [r7, #36]	; 0x24
 80090be:	e7fe      	b.n	80090be <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d103      	bne.n	80090ce <xQueueGenericSendFromISR+0x3a>
 80090c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d101      	bne.n	80090d2 <xQueueGenericSendFromISR+0x3e>
 80090ce:	2301      	movs	r3, #1
 80090d0:	e000      	b.n	80090d4 <xQueueGenericSendFromISR+0x40>
 80090d2:	2300      	movs	r3, #0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d109      	bne.n	80090ec <xQueueGenericSendFromISR+0x58>
 80090d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	623b      	str	r3, [r7, #32]
 80090ea:	e7fe      	b.n	80090ea <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d103      	bne.n	80090fa <xQueueGenericSendFromISR+0x66>
 80090f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d101      	bne.n	80090fe <xQueueGenericSendFromISR+0x6a>
 80090fa:	2301      	movs	r3, #1
 80090fc:	e000      	b.n	8009100 <xQueueGenericSendFromISR+0x6c>
 80090fe:	2300      	movs	r3, #0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d109      	bne.n	8009118 <xQueueGenericSendFromISR+0x84>
 8009104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	61fb      	str	r3, [r7, #28]
 8009116:	e7fe      	b.n	8009116 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009118:	f001 fedc 	bl	800aed4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800911c:	f3ef 8211 	mrs	r2, BASEPRI
 8009120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	61ba      	str	r2, [r7, #24]
 8009132:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009134:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009136:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800913c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009140:	429a      	cmp	r2, r3
 8009142:	d302      	bcc.n	800914a <xQueueGenericSendFromISR+0xb6>
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	2b02      	cmp	r3, #2
 8009148:	d12c      	bne.n	80091a4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	68b9      	ldr	r1, [r7, #8]
 8009158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800915a:	f000 f90b 	bl	8009374 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800915e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009166:	d112      	bne.n	800918e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	2b00      	cmp	r3, #0
 800916e:	d016      	beq.n	800919e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	3324      	adds	r3, #36	; 0x24
 8009174:	4618      	mov	r0, r3
 8009176:	f000 fecd 	bl	8009f14 <xTaskRemoveFromEventList>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00e      	beq.n	800919e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00b      	beq.n	800919e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	601a      	str	r2, [r3, #0]
 800918c:	e007      	b.n	800919e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800918e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009192:	3301      	adds	r3, #1
 8009194:	b2db      	uxtb	r3, r3
 8009196:	b25a      	sxtb	r2, r3
 8009198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800919e:	2301      	movs	r3, #1
 80091a0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80091a2:	e001      	b.n	80091a8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80091a4:	2300      	movs	r3, #0
 80091a6:	637b      	str	r3, [r7, #52]	; 0x34
 80091a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091aa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3738      	adds	r7, #56	; 0x38
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08c      	sub	sp, #48	; 0x30
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80091c8:	2300      	movs	r3, #0
 80091ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80091d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d109      	bne.n	80091ea <xQueueReceive+0x2e>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	623b      	str	r3, [r7, #32]
 80091e8:	e7fe      	b.n	80091e8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d103      	bne.n	80091f8 <xQueueReceive+0x3c>
 80091f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d101      	bne.n	80091fc <xQueueReceive+0x40>
 80091f8:	2301      	movs	r3, #1
 80091fa:	e000      	b.n	80091fe <xQueueReceive+0x42>
 80091fc:	2300      	movs	r3, #0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d109      	bne.n	8009216 <xQueueReceive+0x5a>
 8009202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	61fb      	str	r3, [r7, #28]
 8009214:	e7fe      	b.n	8009214 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009216:	f001 f833 	bl	800a280 <xTaskGetSchedulerState>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d102      	bne.n	8009226 <xQueueReceive+0x6a>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d101      	bne.n	800922a <xQueueReceive+0x6e>
 8009226:	2301      	movs	r3, #1
 8009228:	e000      	b.n	800922c <xQueueReceive+0x70>
 800922a:	2300      	movs	r3, #0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d109      	bne.n	8009244 <xQueueReceive+0x88>
 8009230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	61bb      	str	r3, [r7, #24]
 8009242:	e7fe      	b.n	8009242 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009244:	f001 fd6a 	bl	800ad1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009250:	2b00      	cmp	r3, #0
 8009252:	d01f      	beq.n	8009294 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009254:	68b9      	ldr	r1, [r7, #8]
 8009256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009258:	f000 f8f6 	bl	8009448 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800925c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925e:	1e5a      	subs	r2, r3, #1
 8009260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009262:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00f      	beq.n	800928c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	3310      	adds	r3, #16
 8009270:	4618      	mov	r0, r3
 8009272:	f000 fe4f 	bl	8009f14 <xTaskRemoveFromEventList>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d007      	beq.n	800928c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800927c:	4b3c      	ldr	r3, [pc, #240]	; (8009370 <xQueueReceive+0x1b4>)
 800927e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800928c:	f001 fd74 	bl	800ad78 <vPortExitCritical>
				return pdPASS;
 8009290:	2301      	movs	r3, #1
 8009292:	e069      	b.n	8009368 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d103      	bne.n	80092a2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800929a:	f001 fd6d 	bl	800ad78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800929e:	2300      	movs	r3, #0
 80092a0:	e062      	b.n	8009368 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d106      	bne.n	80092b6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092a8:	f107 0310 	add.w	r3, r7, #16
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 fe93 	bl	8009fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092b2:	2301      	movs	r3, #1
 80092b4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092b6:	f001 fd5f 	bl	800ad78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092ba:	f000 fbfd 	bl	8009ab8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092be:	f001 fd2d 	bl	800ad1c <vPortEnterCritical>
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092c8:	b25b      	sxtb	r3, r3
 80092ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ce:	d103      	bne.n	80092d8 <xQueueReceive+0x11c>
 80092d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092de:	b25b      	sxtb	r3, r3
 80092e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e4:	d103      	bne.n	80092ee <xQueueReceive+0x132>
 80092e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092ee:	f001 fd43 	bl	800ad78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092f2:	1d3a      	adds	r2, r7, #4
 80092f4:	f107 0310 	add.w	r3, r7, #16
 80092f8:	4611      	mov	r1, r2
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 fe82 	bl	800a004 <xTaskCheckForTimeOut>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d123      	bne.n	800934e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009308:	f000 f916 	bl	8009538 <prvIsQueueEmpty>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d017      	beq.n	8009342 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009314:	3324      	adds	r3, #36	; 0x24
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	4611      	mov	r1, r2
 800931a:	4618      	mov	r0, r3
 800931c:	f000 fdac 	bl	8009e78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009322:	f000 f8b7 	bl	8009494 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009326:	f000 fbd5 	bl	8009ad4 <xTaskResumeAll>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d189      	bne.n	8009244 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009330:	4b0f      	ldr	r3, [pc, #60]	; (8009370 <xQueueReceive+0x1b4>)
 8009332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	e780      	b.n	8009244 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009344:	f000 f8a6 	bl	8009494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009348:	f000 fbc4 	bl	8009ad4 <xTaskResumeAll>
 800934c:	e77a      	b.n	8009244 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800934e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009350:	f000 f8a0 	bl	8009494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009354:	f000 fbbe 	bl	8009ad4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800935a:	f000 f8ed 	bl	8009538 <prvIsQueueEmpty>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	f43f af6f 	beq.w	8009244 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009366:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009368:	4618      	mov	r0, r3
 800936a:	3730      	adds	r7, #48	; 0x30
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	e000ed04 	.word	0xe000ed04

08009374 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009380:	2300      	movs	r3, #0
 8009382:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009388:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938e:	2b00      	cmp	r3, #0
 8009390:	d10d      	bne.n	80093ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d14d      	bne.n	8009436 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 ff8c 	bl	800a2bc <xTaskPriorityDisinherit>
 80093a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	609a      	str	r2, [r3, #8]
 80093ac:	e043      	b.n	8009436 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d119      	bne.n	80093e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6858      	ldr	r0, [r3, #4]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093bc:	461a      	mov	r2, r3
 80093be:	68b9      	ldr	r1, [r7, #8]
 80093c0:	f001 ffc0 	bl	800b344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	685a      	ldr	r2, [r3, #4]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093cc:	441a      	add	r2, r3
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d32b      	bcc.n	8009436 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	605a      	str	r2, [r3, #4]
 80093e6:	e026      	b.n	8009436 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	68d8      	ldr	r0, [r3, #12]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f0:	461a      	mov	r2, r3
 80093f2:	68b9      	ldr	r1, [r7, #8]
 80093f4:	f001 ffa6 	bl	800b344 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	68da      	ldr	r2, [r3, #12]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009400:	425b      	negs	r3, r3
 8009402:	441a      	add	r2, r3
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	68da      	ldr	r2, [r3, #12]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	429a      	cmp	r2, r3
 8009412:	d207      	bcs.n	8009424 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	689a      	ldr	r2, [r3, #8]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941c:	425b      	negs	r3, r3
 800941e:	441a      	add	r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2b02      	cmp	r3, #2
 8009428:	d105      	bne.n	8009436 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	3b01      	subs	r3, #1
 8009434:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	1c5a      	adds	r2, r3, #1
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800943e:	697b      	ldr	r3, [r7, #20]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3718      	adds	r7, #24
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009456:	2b00      	cmp	r3, #0
 8009458:	d018      	beq.n	800948c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	68da      	ldr	r2, [r3, #12]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009462:	441a      	add	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	68da      	ldr	r2, [r3, #12]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	429a      	cmp	r2, r3
 8009472:	d303      	bcc.n	800947c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	68d9      	ldr	r1, [r3, #12]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009484:	461a      	mov	r2, r3
 8009486:	6838      	ldr	r0, [r7, #0]
 8009488:	f001 ff5c 	bl	800b344 <memcpy>
	}
}
 800948c:	bf00      	nop
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800949c:	f001 fc3e 	bl	800ad1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094a8:	e011      	b.n	80094ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d012      	beq.n	80094d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	3324      	adds	r3, #36	; 0x24
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 fd2c 	bl	8009f14 <xTaskRemoveFromEventList>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80094c2:	f000 fdff 	bl	800a0c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
 80094c8:	3b01      	subs	r3, #1
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	dce9      	bgt.n	80094aa <prvUnlockQueue+0x16>
 80094d6:	e000      	b.n	80094da <prvUnlockQueue+0x46>
					break;
 80094d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	22ff      	movs	r2, #255	; 0xff
 80094de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80094e2:	f001 fc49 	bl	800ad78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80094e6:	f001 fc19 	bl	800ad1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094f2:	e011      	b.n	8009518 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d012      	beq.n	8009522 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	3310      	adds	r3, #16
 8009500:	4618      	mov	r0, r3
 8009502:	f000 fd07 	bl	8009f14 <xTaskRemoveFromEventList>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d001      	beq.n	8009510 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800950c:	f000 fdda 	bl	800a0c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009510:	7bbb      	ldrb	r3, [r7, #14]
 8009512:	3b01      	subs	r3, #1
 8009514:	b2db      	uxtb	r3, r3
 8009516:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800951c:	2b00      	cmp	r3, #0
 800951e:	dce9      	bgt.n	80094f4 <prvUnlockQueue+0x60>
 8009520:	e000      	b.n	8009524 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009522:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	22ff      	movs	r2, #255	; 0xff
 8009528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800952c:	f001 fc24 	bl	800ad78 <vPortExitCritical>
}
 8009530:	bf00      	nop
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009540:	f001 fbec 	bl	800ad1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009548:	2b00      	cmp	r3, #0
 800954a:	d102      	bne.n	8009552 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800954c:	2301      	movs	r3, #1
 800954e:	60fb      	str	r3, [r7, #12]
 8009550:	e001      	b.n	8009556 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009552:	2300      	movs	r3, #0
 8009554:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009556:	f001 fc0f 	bl	800ad78 <vPortExitCritical>

	return xReturn;
 800955a:	68fb      	ldr	r3, [r7, #12]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800956c:	f001 fbd6 	bl	800ad1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009578:	429a      	cmp	r2, r3
 800957a:	d102      	bne.n	8009582 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800957c:	2301      	movs	r3, #1
 800957e:	60fb      	str	r3, [r7, #12]
 8009580:	e001      	b.n	8009586 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009582:	2300      	movs	r3, #0
 8009584:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009586:	f001 fbf7 	bl	800ad78 <vPortExitCritical>

	return xReturn;
 800958a:	68fb      	ldr	r3, [r7, #12]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800959e:	2300      	movs	r3, #0
 80095a0:	60fb      	str	r3, [r7, #12]
 80095a2:	e014      	b.n	80095ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80095a4:	4a0e      	ldr	r2, [pc, #56]	; (80095e0 <vQueueAddToRegistry+0x4c>)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10b      	bne.n	80095c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80095b0:	490b      	ldr	r1, [pc, #44]	; (80095e0 <vQueueAddToRegistry+0x4c>)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80095ba:	4a09      	ldr	r2, [pc, #36]	; (80095e0 <vQueueAddToRegistry+0x4c>)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	4413      	add	r3, r2
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80095c6:	e005      	b.n	80095d4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	3301      	adds	r3, #1
 80095cc:	60fb      	str	r3, [r7, #12]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2b07      	cmp	r3, #7
 80095d2:	d9e7      	bls.n	80095a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80095d4:	bf00      	nop
 80095d6:	3714      	adds	r7, #20
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	2400517c 	.word	0x2400517c

080095e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b086      	sub	sp, #24
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80095f4:	f001 fb92 	bl	800ad1c <vPortEnterCritical>
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095fe:	b25b      	sxtb	r3, r3
 8009600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009604:	d103      	bne.n	800960e <vQueueWaitForMessageRestricted+0x2a>
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009614:	b25b      	sxtb	r3, r3
 8009616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800961a:	d103      	bne.n	8009624 <vQueueWaitForMessageRestricted+0x40>
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009624:	f001 fba8 	bl	800ad78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962c:	2b00      	cmp	r3, #0
 800962e:	d106      	bne.n	800963e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	3324      	adds	r3, #36	; 0x24
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	68b9      	ldr	r1, [r7, #8]
 8009638:	4618      	mov	r0, r3
 800963a:	f000 fc41 	bl	8009ec0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800963e:	6978      	ldr	r0, [r7, #20]
 8009640:	f7ff ff28 	bl	8009494 <prvUnlockQueue>
	}
 8009644:	bf00      	nop
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800964c:	b580      	push	{r7, lr}
 800964e:	b08e      	sub	sp, #56	; 0x38
 8009650:	af04      	add	r7, sp, #16
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
 8009658:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800965a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965c:	2b00      	cmp	r3, #0
 800965e:	d109      	bne.n	8009674 <xTaskCreateStatic+0x28>
 8009660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	623b      	str	r3, [r7, #32]
 8009672:	e7fe      	b.n	8009672 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009676:	2b00      	cmp	r3, #0
 8009678:	d109      	bne.n	800968e <xTaskCreateStatic+0x42>
 800967a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967e:	f383 8811 	msr	BASEPRI, r3
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	61fb      	str	r3, [r7, #28]
 800968c:	e7fe      	b.n	800968c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800968e:	235c      	movs	r3, #92	; 0x5c
 8009690:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	2b5c      	cmp	r3, #92	; 0x5c
 8009696:	d009      	beq.n	80096ac <xTaskCreateStatic+0x60>
 8009698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	61bb      	str	r3, [r7, #24]
 80096aa:	e7fe      	b.n	80096aa <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80096ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80096ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d01e      	beq.n	80096f2 <xTaskCreateStatic+0xa6>
 80096b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d01b      	beq.n	80096f2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80096be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80096c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c6:	2202      	movs	r2, #2
 80096c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80096cc:	2300      	movs	r3, #0
 80096ce:	9303      	str	r3, [sp, #12]
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	9302      	str	r3, [sp, #8]
 80096d4:	f107 0314 	add.w	r3, r7, #20
 80096d8:	9301      	str	r3, [sp, #4]
 80096da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	68b9      	ldr	r1, [r7, #8]
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f000 f850 	bl	800978a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80096ec:	f000 f8dc 	bl	80098a8 <prvAddNewTaskToReadyList>
 80096f0:	e001      	b.n	80096f6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80096f2:	2300      	movs	r3, #0
 80096f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80096f6:	697b      	ldr	r3, [r7, #20]
	}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3728      	adds	r7, #40	; 0x28
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009700:	b580      	push	{r7, lr}
 8009702:	b08c      	sub	sp, #48	; 0x30
 8009704:	af04      	add	r7, sp, #16
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	603b      	str	r3, [r7, #0]
 800970c:	4613      	mov	r3, r2
 800970e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009710:	88fb      	ldrh	r3, [r7, #6]
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4618      	mov	r0, r3
 8009716:	f001 fc1b 	bl	800af50 <pvPortMalloc>
 800971a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00e      	beq.n	8009740 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009722:	205c      	movs	r0, #92	; 0x5c
 8009724:	f001 fc14 	bl	800af50 <pvPortMalloc>
 8009728:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d003      	beq.n	8009738 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	697a      	ldr	r2, [r7, #20]
 8009734:	631a      	str	r2, [r3, #48]	; 0x30
 8009736:	e005      	b.n	8009744 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009738:	6978      	ldr	r0, [r7, #20]
 800973a:	f001 fccb 	bl	800b0d4 <vPortFree>
 800973e:	e001      	b.n	8009744 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009740:	2300      	movs	r3, #0
 8009742:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d017      	beq.n	800977a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009752:	88fa      	ldrh	r2, [r7, #6]
 8009754:	2300      	movs	r3, #0
 8009756:	9303      	str	r3, [sp, #12]
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	9302      	str	r3, [sp, #8]
 800975c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975e:	9301      	str	r3, [sp, #4]
 8009760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	68b9      	ldr	r1, [r7, #8]
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f000 f80e 	bl	800978a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800976e:	69f8      	ldr	r0, [r7, #28]
 8009770:	f000 f89a 	bl	80098a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009774:	2301      	movs	r3, #1
 8009776:	61bb      	str	r3, [r7, #24]
 8009778:	e002      	b.n	8009780 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800977a:	f04f 33ff 	mov.w	r3, #4294967295
 800977e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009780:	69bb      	ldr	r3, [r7, #24]
	}
 8009782:	4618      	mov	r0, r3
 8009784:	3720      	adds	r7, #32
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b088      	sub	sp, #32
 800978e:	af00      	add	r7, sp, #0
 8009790:	60f8      	str	r0, [r7, #12]
 8009792:	60b9      	str	r1, [r7, #8]
 8009794:	607a      	str	r2, [r7, #4]
 8009796:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	461a      	mov	r2, r3
 80097a2:	21a5      	movs	r1, #165	; 0xa5
 80097a4:	f001 fdd9 	bl	800b35a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80097a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097ac:	6879      	ldr	r1, [r7, #4]
 80097ae:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80097b2:	440b      	add	r3, r1
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	f023 0307 	bic.w	r3, r3, #7
 80097c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	f003 0307 	and.w	r3, r3, #7
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d009      	beq.n	80097e0 <prvInitialiseNewTask+0x56>
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	617b      	str	r3, [r7, #20]
 80097de:	e7fe      	b.n	80097de <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d01f      	beq.n	8009826 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097e6:	2300      	movs	r3, #0
 80097e8:	61fb      	str	r3, [r7, #28]
 80097ea:	e012      	b.n	8009812 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	4413      	add	r3, r2
 80097f2:	7819      	ldrb	r1, [r3, #0]
 80097f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	4413      	add	r3, r2
 80097fa:	3334      	adds	r3, #52	; 0x34
 80097fc:	460a      	mov	r2, r1
 80097fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	4413      	add	r3, r2
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d006      	beq.n	800981a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	3301      	adds	r3, #1
 8009810:	61fb      	str	r3, [r7, #28]
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	2b0f      	cmp	r3, #15
 8009816:	d9e9      	bls.n	80097ec <prvInitialiseNewTask+0x62>
 8009818:	e000      	b.n	800981c <prvInitialiseNewTask+0x92>
			{
				break;
 800981a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800981c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981e:	2200      	movs	r2, #0
 8009820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009824:	e003      	b.n	800982e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800982e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009830:	2b37      	cmp	r3, #55	; 0x37
 8009832:	d901      	bls.n	8009838 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009834:	2337      	movs	r3, #55	; 0x37
 8009836:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800983c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800983e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009842:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009846:	2200      	movs	r2, #0
 8009848:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	3304      	adds	r3, #4
 800984e:	4618      	mov	r0, r3
 8009850:	f7ff f994 	bl	8008b7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009856:	3318      	adds	r3, #24
 8009858:	4618      	mov	r0, r3
 800985a:	f7ff f98f 	bl	8008b7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009862:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009866:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800986a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800986e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009872:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009876:	2200      	movs	r2, #0
 8009878:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800987a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987c:	2200      	movs	r2, #0
 800987e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009882:	683a      	ldr	r2, [r7, #0]
 8009884:	68f9      	ldr	r1, [r7, #12]
 8009886:	69b8      	ldr	r0, [r7, #24]
 8009888:	f001 f91e 	bl	800aac8 <pxPortInitialiseStack>
 800988c:	4602      	mov	r2, r0
 800988e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009890:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009894:	2b00      	cmp	r3, #0
 8009896:	d002      	beq.n	800989e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800989c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800989e:	bf00      	nop
 80098a0:	3720      	adds	r7, #32
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
	...

080098a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80098b0:	f001 fa34 	bl	800ad1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80098b4:	4b2d      	ldr	r3, [pc, #180]	; (800996c <prvAddNewTaskToReadyList+0xc4>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	3301      	adds	r3, #1
 80098ba:	4a2c      	ldr	r2, [pc, #176]	; (800996c <prvAddNewTaskToReadyList+0xc4>)
 80098bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80098be:	4b2c      	ldr	r3, [pc, #176]	; (8009970 <prvAddNewTaskToReadyList+0xc8>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d109      	bne.n	80098da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80098c6:	4a2a      	ldr	r2, [pc, #168]	; (8009970 <prvAddNewTaskToReadyList+0xc8>)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80098cc:	4b27      	ldr	r3, [pc, #156]	; (800996c <prvAddNewTaskToReadyList+0xc4>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d110      	bne.n	80098f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80098d4:	f000 fc1a 	bl	800a10c <prvInitialiseTaskLists>
 80098d8:	e00d      	b.n	80098f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80098da:	4b26      	ldr	r3, [pc, #152]	; (8009974 <prvAddNewTaskToReadyList+0xcc>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d109      	bne.n	80098f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80098e2:	4b23      	ldr	r3, [pc, #140]	; (8009970 <prvAddNewTaskToReadyList+0xc8>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d802      	bhi.n	80098f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80098f0:	4a1f      	ldr	r2, [pc, #124]	; (8009970 <prvAddNewTaskToReadyList+0xc8>)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80098f6:	4b20      	ldr	r3, [pc, #128]	; (8009978 <prvAddNewTaskToReadyList+0xd0>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	3301      	adds	r3, #1
 80098fc:	4a1e      	ldr	r2, [pc, #120]	; (8009978 <prvAddNewTaskToReadyList+0xd0>)
 80098fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009900:	4b1d      	ldr	r3, [pc, #116]	; (8009978 <prvAddNewTaskToReadyList+0xd0>)
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990c:	4b1b      	ldr	r3, [pc, #108]	; (800997c <prvAddNewTaskToReadyList+0xd4>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	429a      	cmp	r2, r3
 8009912:	d903      	bls.n	800991c <prvAddNewTaskToReadyList+0x74>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009918:	4a18      	ldr	r2, [pc, #96]	; (800997c <prvAddNewTaskToReadyList+0xd4>)
 800991a:	6013      	str	r3, [r2, #0]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009920:	4613      	mov	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4a15      	ldr	r2, [pc, #84]	; (8009980 <prvAddNewTaskToReadyList+0xd8>)
 800992a:	441a      	add	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3304      	adds	r3, #4
 8009930:	4619      	mov	r1, r3
 8009932:	4610      	mov	r0, r2
 8009934:	f7ff f92f 	bl	8008b96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009938:	f001 fa1e 	bl	800ad78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800993c:	4b0d      	ldr	r3, [pc, #52]	; (8009974 <prvAddNewTaskToReadyList+0xcc>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00e      	beq.n	8009962 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009944:	4b0a      	ldr	r3, [pc, #40]	; (8009970 <prvAddNewTaskToReadyList+0xc8>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994e:	429a      	cmp	r2, r3
 8009950:	d207      	bcs.n	8009962 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009952:	4b0c      	ldr	r3, [pc, #48]	; (8009984 <prvAddNewTaskToReadyList+0xdc>)
 8009954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009958:	601a      	str	r2, [r3, #0]
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009962:	bf00      	nop
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	24000c80 	.word	0x24000c80
 8009970:	240007ac 	.word	0x240007ac
 8009974:	24000c8c 	.word	0x24000c8c
 8009978:	24000c9c 	.word	0x24000c9c
 800997c:	24000c88 	.word	0x24000c88
 8009980:	240007b0 	.word	0x240007b0
 8009984:	e000ed04 	.word	0xe000ed04

08009988 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009990:	2300      	movs	r3, #0
 8009992:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d016      	beq.n	80099c8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800999a:	4b13      	ldr	r3, [pc, #76]	; (80099e8 <vTaskDelay+0x60>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d009      	beq.n	80099b6 <vTaskDelay+0x2e>
 80099a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a6:	f383 8811 	msr	BASEPRI, r3
 80099aa:	f3bf 8f6f 	isb	sy
 80099ae:	f3bf 8f4f 	dsb	sy
 80099b2:	60bb      	str	r3, [r7, #8]
 80099b4:	e7fe      	b.n	80099b4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80099b6:	f000 f87f 	bl	8009ab8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80099ba:	2100      	movs	r1, #0
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fce9 	bl	800a394 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80099c2:	f000 f887 	bl	8009ad4 <xTaskResumeAll>
 80099c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d107      	bne.n	80099de <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80099ce:	4b07      	ldr	r3, [pc, #28]	; (80099ec <vTaskDelay+0x64>)
 80099d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099d4:	601a      	str	r2, [r3, #0]
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099de:	bf00      	nop
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	24000ca8 	.word	0x24000ca8
 80099ec:	e000ed04 	.word	0xe000ed04

080099f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b08a      	sub	sp, #40	; 0x28
 80099f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80099f6:	2300      	movs	r3, #0
 80099f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80099fa:	2300      	movs	r3, #0
 80099fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80099fe:	463a      	mov	r2, r7
 8009a00:	1d39      	adds	r1, r7, #4
 8009a02:	f107 0308 	add.w	r3, r7, #8
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7ff f864 	bl	8008ad4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	9202      	str	r2, [sp, #8]
 8009a14:	9301      	str	r3, [sp, #4]
 8009a16:	2300      	movs	r3, #0
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	460a      	mov	r2, r1
 8009a1e:	4920      	ldr	r1, [pc, #128]	; (8009aa0 <vTaskStartScheduler+0xb0>)
 8009a20:	4820      	ldr	r0, [pc, #128]	; (8009aa4 <vTaskStartScheduler+0xb4>)
 8009a22:	f7ff fe13 	bl	800964c <xTaskCreateStatic>
 8009a26:	4602      	mov	r2, r0
 8009a28:	4b1f      	ldr	r3, [pc, #124]	; (8009aa8 <vTaskStartScheduler+0xb8>)
 8009a2a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009a2c:	4b1e      	ldr	r3, [pc, #120]	; (8009aa8 <vTaskStartScheduler+0xb8>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d002      	beq.n	8009a3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009a34:	2301      	movs	r3, #1
 8009a36:	617b      	str	r3, [r7, #20]
 8009a38:	e001      	b.n	8009a3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d102      	bne.n	8009a4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009a44:	f000 fcfa 	bl	800a43c <xTimerCreateTimerTask>
 8009a48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d115      	bne.n	8009a7c <vTaskStartScheduler+0x8c>
 8009a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a62:	4b12      	ldr	r3, [pc, #72]	; (8009aac <vTaskStartScheduler+0xbc>)
 8009a64:	f04f 32ff 	mov.w	r2, #4294967295
 8009a68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a6a:	4b11      	ldr	r3, [pc, #68]	; (8009ab0 <vTaskStartScheduler+0xc0>)
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a70:	4b10      	ldr	r3, [pc, #64]	; (8009ab4 <vTaskStartScheduler+0xc4>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a76:	f001 f8b3 	bl	800abe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a7a:	e00d      	b.n	8009a98 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a82:	d109      	bne.n	8009a98 <vTaskStartScheduler+0xa8>
 8009a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a88:	f383 8811 	msr	BASEPRI, r3
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	60fb      	str	r3, [r7, #12]
 8009a96:	e7fe      	b.n	8009a96 <vTaskStartScheduler+0xa6>
}
 8009a98:	bf00      	nop
 8009a9a:	3718      	adds	r7, #24
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	0800b524 	.word	0x0800b524
 8009aa4:	0800a0dd 	.word	0x0800a0dd
 8009aa8:	24000ca4 	.word	0x24000ca4
 8009aac:	24000ca0 	.word	0x24000ca0
 8009ab0:	24000c8c 	.word	0x24000c8c
 8009ab4:	24000c84 	.word	0x24000c84

08009ab8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ab8:	b480      	push	{r7}
 8009aba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009abc:	4b04      	ldr	r3, [pc, #16]	; (8009ad0 <vTaskSuspendAll+0x18>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	4a03      	ldr	r2, [pc, #12]	; (8009ad0 <vTaskSuspendAll+0x18>)
 8009ac4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009ac6:	bf00      	nop
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	24000ca8 	.word	0x24000ca8

08009ad4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009ada:	2300      	movs	r3, #0
 8009adc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009ae2:	4b41      	ldr	r3, [pc, #260]	; (8009be8 <xTaskResumeAll+0x114>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d109      	bne.n	8009afe <xTaskResumeAll+0x2a>
 8009aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aee:	f383 8811 	msr	BASEPRI, r3
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	603b      	str	r3, [r7, #0]
 8009afc:	e7fe      	b.n	8009afc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009afe:	f001 f90d 	bl	800ad1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b02:	4b39      	ldr	r3, [pc, #228]	; (8009be8 <xTaskResumeAll+0x114>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	3b01      	subs	r3, #1
 8009b08:	4a37      	ldr	r2, [pc, #220]	; (8009be8 <xTaskResumeAll+0x114>)
 8009b0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b0c:	4b36      	ldr	r3, [pc, #216]	; (8009be8 <xTaskResumeAll+0x114>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d162      	bne.n	8009bda <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b14:	4b35      	ldr	r3, [pc, #212]	; (8009bec <xTaskResumeAll+0x118>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d05e      	beq.n	8009bda <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b1c:	e02f      	b.n	8009b7e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b1e:	4b34      	ldr	r3, [pc, #208]	; (8009bf0 <xTaskResumeAll+0x11c>)
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	3318      	adds	r3, #24
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7ff f890 	bl	8008c50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	3304      	adds	r3, #4
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7ff f88b 	bl	8008c50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b3e:	4b2d      	ldr	r3, [pc, #180]	; (8009bf4 <xTaskResumeAll+0x120>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d903      	bls.n	8009b4e <xTaskResumeAll+0x7a>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4a:	4a2a      	ldr	r2, [pc, #168]	; (8009bf4 <xTaskResumeAll+0x120>)
 8009b4c:	6013      	str	r3, [r2, #0]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b52:	4613      	mov	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4a27      	ldr	r2, [pc, #156]	; (8009bf8 <xTaskResumeAll+0x124>)
 8009b5c:	441a      	add	r2, r3
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3304      	adds	r3, #4
 8009b62:	4619      	mov	r1, r3
 8009b64:	4610      	mov	r0, r2
 8009b66:	f7ff f816 	bl	8008b96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6e:	4b23      	ldr	r3, [pc, #140]	; (8009bfc <xTaskResumeAll+0x128>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d302      	bcc.n	8009b7e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009b78:	4b21      	ldr	r3, [pc, #132]	; (8009c00 <xTaskResumeAll+0x12c>)
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b7e:	4b1c      	ldr	r3, [pc, #112]	; (8009bf0 <xTaskResumeAll+0x11c>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1cb      	bne.n	8009b1e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b8c:	f000 fb58 	bl	800a240 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009b90:	4b1c      	ldr	r3, [pc, #112]	; (8009c04 <xTaskResumeAll+0x130>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d010      	beq.n	8009bbe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b9c:	f000 f858 	bl	8009c50 <xTaskIncrementTick>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d002      	beq.n	8009bac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009ba6:	4b16      	ldr	r3, [pc, #88]	; (8009c00 <xTaskResumeAll+0x12c>)
 8009ba8:	2201      	movs	r2, #1
 8009baa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1f1      	bne.n	8009b9c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009bb8:	4b12      	ldr	r3, [pc, #72]	; (8009c04 <xTaskResumeAll+0x130>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009bbe:	4b10      	ldr	r3, [pc, #64]	; (8009c00 <xTaskResumeAll+0x12c>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d009      	beq.n	8009bda <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009bca:	4b0f      	ldr	r3, [pc, #60]	; (8009c08 <xTaskResumeAll+0x134>)
 8009bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bd0:	601a      	str	r2, [r3, #0]
 8009bd2:	f3bf 8f4f 	dsb	sy
 8009bd6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009bda:	f001 f8cd 	bl	800ad78 <vPortExitCritical>

	return xAlreadyYielded;
 8009bde:	68bb      	ldr	r3, [r7, #8]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	24000ca8 	.word	0x24000ca8
 8009bec:	24000c80 	.word	0x24000c80
 8009bf0:	24000c40 	.word	0x24000c40
 8009bf4:	24000c88 	.word	0x24000c88
 8009bf8:	240007b0 	.word	0x240007b0
 8009bfc:	240007ac 	.word	0x240007ac
 8009c00:	24000c94 	.word	0x24000c94
 8009c04:	24000c90 	.word	0x24000c90
 8009c08:	e000ed04 	.word	0xe000ed04

08009c0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009c12:	4b05      	ldr	r3, [pc, #20]	; (8009c28 <xTaskGetTickCount+0x1c>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009c18:	687b      	ldr	r3, [r7, #4]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	24000c84 	.word	0x24000c84

08009c2c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c32:	f001 f94f 	bl	800aed4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009c36:	2300      	movs	r3, #0
 8009c38:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009c3a:	4b04      	ldr	r3, [pc, #16]	; (8009c4c <xTaskGetTickCountFromISR+0x20>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c40:	683b      	ldr	r3, [r7, #0]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3708      	adds	r7, #8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	24000c84 	.word	0x24000c84

08009c50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c56:	2300      	movs	r3, #0
 8009c58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c5a:	4b4e      	ldr	r3, [pc, #312]	; (8009d94 <xTaskIncrementTick+0x144>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f040 8088 	bne.w	8009d74 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009c64:	4b4c      	ldr	r3, [pc, #304]	; (8009d98 <xTaskIncrementTick+0x148>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009c6c:	4a4a      	ldr	r2, [pc, #296]	; (8009d98 <xTaskIncrementTick+0x148>)
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d11f      	bne.n	8009cb8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c78:	4b48      	ldr	r3, [pc, #288]	; (8009d9c <xTaskIncrementTick+0x14c>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d009      	beq.n	8009c96 <xTaskIncrementTick+0x46>
 8009c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	603b      	str	r3, [r7, #0]
 8009c94:	e7fe      	b.n	8009c94 <xTaskIncrementTick+0x44>
 8009c96:	4b41      	ldr	r3, [pc, #260]	; (8009d9c <xTaskIncrementTick+0x14c>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	60fb      	str	r3, [r7, #12]
 8009c9c:	4b40      	ldr	r3, [pc, #256]	; (8009da0 <xTaskIncrementTick+0x150>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a3e      	ldr	r2, [pc, #248]	; (8009d9c <xTaskIncrementTick+0x14c>)
 8009ca2:	6013      	str	r3, [r2, #0]
 8009ca4:	4a3e      	ldr	r2, [pc, #248]	; (8009da0 <xTaskIncrementTick+0x150>)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6013      	str	r3, [r2, #0]
 8009caa:	4b3e      	ldr	r3, [pc, #248]	; (8009da4 <xTaskIncrementTick+0x154>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	4a3c      	ldr	r2, [pc, #240]	; (8009da4 <xTaskIncrementTick+0x154>)
 8009cb2:	6013      	str	r3, [r2, #0]
 8009cb4:	f000 fac4 	bl	800a240 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009cb8:	4b3b      	ldr	r3, [pc, #236]	; (8009da8 <xTaskIncrementTick+0x158>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	693a      	ldr	r2, [r7, #16]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d349      	bcc.n	8009d56 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cc2:	4b36      	ldr	r3, [pc, #216]	; (8009d9c <xTaskIncrementTick+0x14c>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d104      	bne.n	8009cd6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ccc:	4b36      	ldr	r3, [pc, #216]	; (8009da8 <xTaskIncrementTick+0x158>)
 8009cce:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd2:	601a      	str	r2, [r3, #0]
					break;
 8009cd4:	e03f      	b.n	8009d56 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cd6:	4b31      	ldr	r3, [pc, #196]	; (8009d9c <xTaskIncrementTick+0x14c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ce6:	693a      	ldr	r2, [r7, #16]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d203      	bcs.n	8009cf6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009cee:	4a2e      	ldr	r2, [pc, #184]	; (8009da8 <xTaskIncrementTick+0x158>)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009cf4:	e02f      	b.n	8009d56 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	3304      	adds	r3, #4
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fe ffa8 	bl	8008c50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d004      	beq.n	8009d12 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	3318      	adds	r3, #24
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7fe ff9f 	bl	8008c50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d16:	4b25      	ldr	r3, [pc, #148]	; (8009dac <xTaskIncrementTick+0x15c>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d903      	bls.n	8009d26 <xTaskIncrementTick+0xd6>
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d22:	4a22      	ldr	r2, [pc, #136]	; (8009dac <xTaskIncrementTick+0x15c>)
 8009d24:	6013      	str	r3, [r2, #0]
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4a1f      	ldr	r2, [pc, #124]	; (8009db0 <xTaskIncrementTick+0x160>)
 8009d34:	441a      	add	r2, r3
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	3304      	adds	r3, #4
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	f7fe ff2a 	bl	8008b96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d46:	4b1b      	ldr	r3, [pc, #108]	; (8009db4 <xTaskIncrementTick+0x164>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d3b8      	bcc.n	8009cc2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009d50:	2301      	movs	r3, #1
 8009d52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d54:	e7b5      	b.n	8009cc2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d56:	4b17      	ldr	r3, [pc, #92]	; (8009db4 <xTaskIncrementTick+0x164>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d5c:	4914      	ldr	r1, [pc, #80]	; (8009db0 <xTaskIncrementTick+0x160>)
 8009d5e:	4613      	mov	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	440b      	add	r3, r1
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d907      	bls.n	8009d7e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	617b      	str	r3, [r7, #20]
 8009d72:	e004      	b.n	8009d7e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009d74:	4b10      	ldr	r3, [pc, #64]	; (8009db8 <xTaskIncrementTick+0x168>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	4a0f      	ldr	r2, [pc, #60]	; (8009db8 <xTaskIncrementTick+0x168>)
 8009d7c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009d7e:	4b0f      	ldr	r3, [pc, #60]	; (8009dbc <xTaskIncrementTick+0x16c>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d001      	beq.n	8009d8a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8009d86:	2301      	movs	r3, #1
 8009d88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009d8a:	697b      	ldr	r3, [r7, #20]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	24000ca8 	.word	0x24000ca8
 8009d98:	24000c84 	.word	0x24000c84
 8009d9c:	24000c38 	.word	0x24000c38
 8009da0:	24000c3c 	.word	0x24000c3c
 8009da4:	24000c98 	.word	0x24000c98
 8009da8:	24000ca0 	.word	0x24000ca0
 8009dac:	24000c88 	.word	0x24000c88
 8009db0:	240007b0 	.word	0x240007b0
 8009db4:	240007ac 	.word	0x240007ac
 8009db8:	24000c90 	.word	0x24000c90
 8009dbc:	24000c94 	.word	0x24000c94

08009dc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009dc6:	4b27      	ldr	r3, [pc, #156]	; (8009e64 <vTaskSwitchContext+0xa4>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d003      	beq.n	8009dd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009dce:	4b26      	ldr	r3, [pc, #152]	; (8009e68 <vTaskSwitchContext+0xa8>)
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009dd4:	e040      	b.n	8009e58 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009dd6:	4b24      	ldr	r3, [pc, #144]	; (8009e68 <vTaskSwitchContext+0xa8>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ddc:	4b23      	ldr	r3, [pc, #140]	; (8009e6c <vTaskSwitchContext+0xac>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	60fb      	str	r3, [r7, #12]
 8009de2:	e00f      	b.n	8009e04 <vTaskSwitchContext+0x44>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d109      	bne.n	8009dfe <vTaskSwitchContext+0x3e>
 8009dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	607b      	str	r3, [r7, #4]
 8009dfc:	e7fe      	b.n	8009dfc <vTaskSwitchContext+0x3c>
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	3b01      	subs	r3, #1
 8009e02:	60fb      	str	r3, [r7, #12]
 8009e04:	491a      	ldr	r1, [pc, #104]	; (8009e70 <vTaskSwitchContext+0xb0>)
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4413      	add	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	440b      	add	r3, r1
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d0e5      	beq.n	8009de4 <vTaskSwitchContext+0x24>
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4a13      	ldr	r2, [pc, #76]	; (8009e70 <vTaskSwitchContext+0xb0>)
 8009e24:	4413      	add	r3, r2
 8009e26:	60bb      	str	r3, [r7, #8]
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	685a      	ldr	r2, [r3, #4]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	605a      	str	r2, [r3, #4]
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	3308      	adds	r3, #8
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d104      	bne.n	8009e48 <vTaskSwitchContext+0x88>
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	685a      	ldr	r2, [r3, #4]
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	605a      	str	r2, [r3, #4]
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	4a09      	ldr	r2, [pc, #36]	; (8009e74 <vTaskSwitchContext+0xb4>)
 8009e50:	6013      	str	r3, [r2, #0]
 8009e52:	4a06      	ldr	r2, [pc, #24]	; (8009e6c <vTaskSwitchContext+0xac>)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6013      	str	r3, [r2, #0]
}
 8009e58:	bf00      	nop
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr
 8009e64:	24000ca8 	.word	0x24000ca8
 8009e68:	24000c94 	.word	0x24000c94
 8009e6c:	24000c88 	.word	0x24000c88
 8009e70:	240007b0 	.word	0x240007b0
 8009e74:	240007ac 	.word	0x240007ac

08009e78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d109      	bne.n	8009e9c <vTaskPlaceOnEventList+0x24>
 8009e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	60fb      	str	r3, [r7, #12]
 8009e9a:	e7fe      	b.n	8009e9a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e9c:	4b07      	ldr	r3, [pc, #28]	; (8009ebc <vTaskPlaceOnEventList+0x44>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3318      	adds	r3, #24
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f7fe fe9a 	bl	8008bde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009eaa:	2101      	movs	r1, #1
 8009eac:	6838      	ldr	r0, [r7, #0]
 8009eae:	f000 fa71 	bl	800a394 <prvAddCurrentTaskToDelayedList>
}
 8009eb2:	bf00      	nop
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	240007ac 	.word	0x240007ac

08009ec0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d109      	bne.n	8009ee6 <vTaskPlaceOnEventListRestricted+0x26>
 8009ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	617b      	str	r3, [r7, #20]
 8009ee4:	e7fe      	b.n	8009ee4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ee6:	4b0a      	ldr	r3, [pc, #40]	; (8009f10 <vTaskPlaceOnEventListRestricted+0x50>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3318      	adds	r3, #24
 8009eec:	4619      	mov	r1, r3
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f7fe fe51 	bl	8008b96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d002      	beq.n	8009f00 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009efa:	f04f 33ff 	mov.w	r3, #4294967295
 8009efe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009f00:	6879      	ldr	r1, [r7, #4]
 8009f02:	68b8      	ldr	r0, [r7, #8]
 8009f04:	f000 fa46 	bl	800a394 <prvAddCurrentTaskToDelayedList>
	}
 8009f08:	bf00      	nop
 8009f0a:	3718      	adds	r7, #24
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	240007ac 	.word	0x240007ac

08009f14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d109      	bne.n	8009f3e <xTaskRemoveFromEventList+0x2a>
 8009f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2e:	f383 8811 	msr	BASEPRI, r3
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	60fb      	str	r3, [r7, #12]
 8009f3c:	e7fe      	b.n	8009f3c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	3318      	adds	r3, #24
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fe fe84 	bl	8008c50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f48:	4b1d      	ldr	r3, [pc, #116]	; (8009fc0 <xTaskRemoveFromEventList+0xac>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d11d      	bne.n	8009f8c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	3304      	adds	r3, #4
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7fe fe7b 	bl	8008c50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f5e:	4b19      	ldr	r3, [pc, #100]	; (8009fc4 <xTaskRemoveFromEventList+0xb0>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d903      	bls.n	8009f6e <xTaskRemoveFromEventList+0x5a>
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6a:	4a16      	ldr	r2, [pc, #88]	; (8009fc4 <xTaskRemoveFromEventList+0xb0>)
 8009f6c:	6013      	str	r3, [r2, #0]
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f72:	4613      	mov	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4a13      	ldr	r2, [pc, #76]	; (8009fc8 <xTaskRemoveFromEventList+0xb4>)
 8009f7c:	441a      	add	r2, r3
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	3304      	adds	r3, #4
 8009f82:	4619      	mov	r1, r3
 8009f84:	4610      	mov	r0, r2
 8009f86:	f7fe fe06 	bl	8008b96 <vListInsertEnd>
 8009f8a:	e005      	b.n	8009f98 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	3318      	adds	r3, #24
 8009f90:	4619      	mov	r1, r3
 8009f92:	480e      	ldr	r0, [pc, #56]	; (8009fcc <xTaskRemoveFromEventList+0xb8>)
 8009f94:	f7fe fdff 	bl	8008b96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9c:	4b0c      	ldr	r3, [pc, #48]	; (8009fd0 <xTaskRemoveFromEventList+0xbc>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d905      	bls.n	8009fb2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009faa:	4b0a      	ldr	r3, [pc, #40]	; (8009fd4 <xTaskRemoveFromEventList+0xc0>)
 8009fac:	2201      	movs	r2, #1
 8009fae:	601a      	str	r2, [r3, #0]
 8009fb0:	e001      	b.n	8009fb6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009fb6:	697b      	ldr	r3, [r7, #20]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3718      	adds	r7, #24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	24000ca8 	.word	0x24000ca8
 8009fc4:	24000c88 	.word	0x24000c88
 8009fc8:	240007b0 	.word	0x240007b0
 8009fcc:	24000c40 	.word	0x24000c40
 8009fd0:	240007ac 	.word	0x240007ac
 8009fd4:	24000c94 	.word	0x24000c94

08009fd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009fe0:	4b06      	ldr	r3, [pc, #24]	; (8009ffc <vTaskInternalSetTimeOutState+0x24>)
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009fe8:	4b05      	ldr	r3, [pc, #20]	; (800a000 <vTaskInternalSetTimeOutState+0x28>)
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	605a      	str	r2, [r3, #4]
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	24000c98 	.word	0x24000c98
 800a000:	24000c84 	.word	0x24000c84

0800a004 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b088      	sub	sp, #32
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d109      	bne.n	800a028 <xTaskCheckForTimeOut+0x24>
 800a014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	613b      	str	r3, [r7, #16]
 800a026:	e7fe      	b.n	800a026 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d109      	bne.n	800a042 <xTaskCheckForTimeOut+0x3e>
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	60fb      	str	r3, [r7, #12]
 800a040:	e7fe      	b.n	800a040 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a042:	f000 fe6b 	bl	800ad1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a046:	4b1d      	ldr	r3, [pc, #116]	; (800a0bc <xTaskCheckForTimeOut+0xb8>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	69ba      	ldr	r2, [r7, #24]
 800a052:	1ad3      	subs	r3, r2, r3
 800a054:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a05e:	d102      	bne.n	800a066 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a060:	2300      	movs	r3, #0
 800a062:	61fb      	str	r3, [r7, #28]
 800a064:	e023      	b.n	800a0ae <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	4b15      	ldr	r3, [pc, #84]	; (800a0c0 <xTaskCheckForTimeOut+0xbc>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d007      	beq.n	800a082 <xTaskCheckForTimeOut+0x7e>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	69ba      	ldr	r2, [r7, #24]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d302      	bcc.n	800a082 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a07c:	2301      	movs	r3, #1
 800a07e:	61fb      	str	r3, [r7, #28]
 800a080:	e015      	b.n	800a0ae <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	697a      	ldr	r2, [r7, #20]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d20b      	bcs.n	800a0a4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	1ad2      	subs	r2, r2, r3
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7ff ff9d 	bl	8009fd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	61fb      	str	r3, [r7, #28]
 800a0a2:	e004      	b.n	800a0ae <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a0ae:	f000 fe63 	bl	800ad78 <vPortExitCritical>

	return xReturn;
 800a0b2:	69fb      	ldr	r3, [r7, #28]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3720      	adds	r7, #32
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	24000c84 	.word	0x24000c84
 800a0c0:	24000c98 	.word	0x24000c98

0800a0c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a0c8:	4b03      	ldr	r3, [pc, #12]	; (800a0d8 <vTaskMissedYield+0x14>)
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	601a      	str	r2, [r3, #0]
}
 800a0ce:	bf00      	nop
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr
 800a0d8:	24000c94 	.word	0x24000c94

0800a0dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a0e4:	f000 f852 	bl	800a18c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a0e8:	4b06      	ldr	r3, [pc, #24]	; (800a104 <prvIdleTask+0x28>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d9f9      	bls.n	800a0e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a0f0:	4b05      	ldr	r3, [pc, #20]	; (800a108 <prvIdleTask+0x2c>)
 800a0f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0f6:	601a      	str	r2, [r3, #0]
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a100:	e7f0      	b.n	800a0e4 <prvIdleTask+0x8>
 800a102:	bf00      	nop
 800a104:	240007b0 	.word	0x240007b0
 800a108:	e000ed04 	.word	0xe000ed04

0800a10c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a112:	2300      	movs	r3, #0
 800a114:	607b      	str	r3, [r7, #4]
 800a116:	e00c      	b.n	800a132 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	4613      	mov	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	4413      	add	r3, r2
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	4a12      	ldr	r2, [pc, #72]	; (800a16c <prvInitialiseTaskLists+0x60>)
 800a124:	4413      	add	r3, r2
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe fd08 	bl	8008b3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	3301      	adds	r3, #1
 800a130:	607b      	str	r3, [r7, #4]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2b37      	cmp	r3, #55	; 0x37
 800a136:	d9ef      	bls.n	800a118 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a138:	480d      	ldr	r0, [pc, #52]	; (800a170 <prvInitialiseTaskLists+0x64>)
 800a13a:	f7fe fcff 	bl	8008b3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a13e:	480d      	ldr	r0, [pc, #52]	; (800a174 <prvInitialiseTaskLists+0x68>)
 800a140:	f7fe fcfc 	bl	8008b3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a144:	480c      	ldr	r0, [pc, #48]	; (800a178 <prvInitialiseTaskLists+0x6c>)
 800a146:	f7fe fcf9 	bl	8008b3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a14a:	480c      	ldr	r0, [pc, #48]	; (800a17c <prvInitialiseTaskLists+0x70>)
 800a14c:	f7fe fcf6 	bl	8008b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a150:	480b      	ldr	r0, [pc, #44]	; (800a180 <prvInitialiseTaskLists+0x74>)
 800a152:	f7fe fcf3 	bl	8008b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a156:	4b0b      	ldr	r3, [pc, #44]	; (800a184 <prvInitialiseTaskLists+0x78>)
 800a158:	4a05      	ldr	r2, [pc, #20]	; (800a170 <prvInitialiseTaskLists+0x64>)
 800a15a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a15c:	4b0a      	ldr	r3, [pc, #40]	; (800a188 <prvInitialiseTaskLists+0x7c>)
 800a15e:	4a05      	ldr	r2, [pc, #20]	; (800a174 <prvInitialiseTaskLists+0x68>)
 800a160:	601a      	str	r2, [r3, #0]
}
 800a162:	bf00      	nop
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	240007b0 	.word	0x240007b0
 800a170:	24000c10 	.word	0x24000c10
 800a174:	24000c24 	.word	0x24000c24
 800a178:	24000c40 	.word	0x24000c40
 800a17c:	24000c54 	.word	0x24000c54
 800a180:	24000c6c 	.word	0x24000c6c
 800a184:	24000c38 	.word	0x24000c38
 800a188:	24000c3c 	.word	0x24000c3c

0800a18c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a192:	e019      	b.n	800a1c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a194:	f000 fdc2 	bl	800ad1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a198:	4b0f      	ldr	r3, [pc, #60]	; (800a1d8 <prvCheckTasksWaitingTermination+0x4c>)
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	3304      	adds	r3, #4
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fe fd53 	bl	8008c50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a1aa:	4b0c      	ldr	r3, [pc, #48]	; (800a1dc <prvCheckTasksWaitingTermination+0x50>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	4a0a      	ldr	r2, [pc, #40]	; (800a1dc <prvCheckTasksWaitingTermination+0x50>)
 800a1b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a1b4:	4b0a      	ldr	r3, [pc, #40]	; (800a1e0 <prvCheckTasksWaitingTermination+0x54>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	4a09      	ldr	r2, [pc, #36]	; (800a1e0 <prvCheckTasksWaitingTermination+0x54>)
 800a1bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a1be:	f000 fddb 	bl	800ad78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f80e 	bl	800a1e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1c8:	4b05      	ldr	r3, [pc, #20]	; (800a1e0 <prvCheckTasksWaitingTermination+0x54>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1e1      	bne.n	800a194 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a1d0:	bf00      	nop
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	24000c54 	.word	0x24000c54
 800a1dc:	24000c80 	.word	0x24000c80
 800a1e0:	24000c68 	.word	0x24000c68

0800a1e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d108      	bne.n	800a208 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f000 ff6a 	bl	800b0d4 <vPortFree>
				vPortFree( pxTCB );
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 ff67 	bl	800b0d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a206:	e017      	b.n	800a238 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d103      	bne.n	800a21a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 ff5e 	bl	800b0d4 <vPortFree>
	}
 800a218:	e00e      	b.n	800a238 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a220:	2b02      	cmp	r3, #2
 800a222:	d009      	beq.n	800a238 <prvDeleteTCB+0x54>
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	60fb      	str	r3, [r7, #12]
 800a236:	e7fe      	b.n	800a236 <prvDeleteTCB+0x52>
	}
 800a238:	bf00      	nop
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a246:	4b0c      	ldr	r3, [pc, #48]	; (800a278 <prvResetNextTaskUnblockTime+0x38>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d104      	bne.n	800a25a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a250:	4b0a      	ldr	r3, [pc, #40]	; (800a27c <prvResetNextTaskUnblockTime+0x3c>)
 800a252:	f04f 32ff 	mov.w	r2, #4294967295
 800a256:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a258:	e008      	b.n	800a26c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a25a:	4b07      	ldr	r3, [pc, #28]	; (800a278 <prvResetNextTaskUnblockTime+0x38>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	4a04      	ldr	r2, [pc, #16]	; (800a27c <prvResetNextTaskUnblockTime+0x3c>)
 800a26a:	6013      	str	r3, [r2, #0]
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr
 800a278:	24000c38 	.word	0x24000c38
 800a27c:	24000ca0 	.word	0x24000ca0

0800a280 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a286:	4b0b      	ldr	r3, [pc, #44]	; (800a2b4 <xTaskGetSchedulerState+0x34>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d102      	bne.n	800a294 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a28e:	2301      	movs	r3, #1
 800a290:	607b      	str	r3, [r7, #4]
 800a292:	e008      	b.n	800a2a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a294:	4b08      	ldr	r3, [pc, #32]	; (800a2b8 <xTaskGetSchedulerState+0x38>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d102      	bne.n	800a2a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a29c:	2302      	movs	r3, #2
 800a29e:	607b      	str	r3, [r7, #4]
 800a2a0:	e001      	b.n	800a2a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a2a6:	687b      	ldr	r3, [r7, #4]
	}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	24000c8c 	.word	0x24000c8c
 800a2b8:	24000ca8 	.word	0x24000ca8

0800a2bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d054      	beq.n	800a37c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a2d2:	4b2d      	ldr	r3, [pc, #180]	; (800a388 <xTaskPriorityDisinherit+0xcc>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	693a      	ldr	r2, [r7, #16]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d009      	beq.n	800a2f0 <xTaskPriorityDisinherit+0x34>
 800a2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e0:	f383 8811 	msr	BASEPRI, r3
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	60fb      	str	r3, [r7, #12]
 800a2ee:	e7fe      	b.n	800a2ee <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d109      	bne.n	800a30c <xTaskPriorityDisinherit+0x50>
 800a2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	60bb      	str	r3, [r7, #8]
 800a30a:	e7fe      	b.n	800a30a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a310:	1e5a      	subs	r2, r3, #1
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a31e:	429a      	cmp	r2, r3
 800a320:	d02c      	beq.n	800a37c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a326:	2b00      	cmp	r3, #0
 800a328:	d128      	bne.n	800a37c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	3304      	adds	r3, #4
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fe fc8e 	bl	8008c50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a340:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a34c:	4b0f      	ldr	r3, [pc, #60]	; (800a38c <xTaskPriorityDisinherit+0xd0>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	429a      	cmp	r2, r3
 800a352:	d903      	bls.n	800a35c <xTaskPriorityDisinherit+0xa0>
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a358:	4a0c      	ldr	r2, [pc, #48]	; (800a38c <xTaskPriorityDisinherit+0xd0>)
 800a35a:	6013      	str	r3, [r2, #0]
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a360:	4613      	mov	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4a09      	ldr	r2, [pc, #36]	; (800a390 <xTaskPriorityDisinherit+0xd4>)
 800a36a:	441a      	add	r2, r3
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	3304      	adds	r3, #4
 800a370:	4619      	mov	r1, r3
 800a372:	4610      	mov	r0, r2
 800a374:	f7fe fc0f 	bl	8008b96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a378:	2301      	movs	r3, #1
 800a37a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a37c:	697b      	ldr	r3, [r7, #20]
	}
 800a37e:	4618      	mov	r0, r3
 800a380:	3718      	adds	r7, #24
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	240007ac 	.word	0x240007ac
 800a38c:	24000c88 	.word	0x24000c88
 800a390:	240007b0 	.word	0x240007b0

0800a394 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a39e:	4b21      	ldr	r3, [pc, #132]	; (800a424 <prvAddCurrentTaskToDelayedList+0x90>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3a4:	4b20      	ldr	r3, [pc, #128]	; (800a428 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3304      	adds	r3, #4
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fe fc50 	bl	8008c50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b6:	d10a      	bne.n	800a3ce <prvAddCurrentTaskToDelayedList+0x3a>
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d007      	beq.n	800a3ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3be:	4b1a      	ldr	r3, [pc, #104]	; (800a428 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	3304      	adds	r3, #4
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	4819      	ldr	r0, [pc, #100]	; (800a42c <prvAddCurrentTaskToDelayedList+0x98>)
 800a3c8:	f7fe fbe5 	bl	8008b96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a3cc:	e026      	b.n	800a41c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a3d6:	4b14      	ldr	r3, [pc, #80]	; (800a428 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d209      	bcs.n	800a3fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3e6:	4b12      	ldr	r3, [pc, #72]	; (800a430 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	4b0f      	ldr	r3, [pc, #60]	; (800a428 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	3304      	adds	r3, #4
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	4610      	mov	r0, r2
 800a3f4:	f7fe fbf3 	bl	8008bde <vListInsert>
}
 800a3f8:	e010      	b.n	800a41c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3fa:	4b0e      	ldr	r3, [pc, #56]	; (800a434 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	4b0a      	ldr	r3, [pc, #40]	; (800a428 <prvAddCurrentTaskToDelayedList+0x94>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3304      	adds	r3, #4
 800a404:	4619      	mov	r1, r3
 800a406:	4610      	mov	r0, r2
 800a408:	f7fe fbe9 	bl	8008bde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a40c:	4b0a      	ldr	r3, [pc, #40]	; (800a438 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	429a      	cmp	r2, r3
 800a414:	d202      	bcs.n	800a41c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a416:	4a08      	ldr	r2, [pc, #32]	; (800a438 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	6013      	str	r3, [r2, #0]
}
 800a41c:	bf00      	nop
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	24000c84 	.word	0x24000c84
 800a428:	240007ac 	.word	0x240007ac
 800a42c:	24000c6c 	.word	0x24000c6c
 800a430:	24000c3c 	.word	0x24000c3c
 800a434:	24000c38 	.word	0x24000c38
 800a438:	24000ca0 	.word	0x24000ca0

0800a43c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b08a      	sub	sp, #40	; 0x28
 800a440:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a442:	2300      	movs	r3, #0
 800a444:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a446:	f000 faff 	bl	800aa48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a44a:	4b1c      	ldr	r3, [pc, #112]	; (800a4bc <xTimerCreateTimerTask+0x80>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d021      	beq.n	800a496 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a452:	2300      	movs	r3, #0
 800a454:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a456:	2300      	movs	r3, #0
 800a458:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a45a:	1d3a      	adds	r2, r7, #4
 800a45c:	f107 0108 	add.w	r1, r7, #8
 800a460:	f107 030c 	add.w	r3, r7, #12
 800a464:	4618      	mov	r0, r3
 800a466:	f7fe fb4f 	bl	8008b08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a46a:	6879      	ldr	r1, [r7, #4]
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	9202      	str	r2, [sp, #8]
 800a472:	9301      	str	r3, [sp, #4]
 800a474:	2302      	movs	r3, #2
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	2300      	movs	r3, #0
 800a47a:	460a      	mov	r2, r1
 800a47c:	4910      	ldr	r1, [pc, #64]	; (800a4c0 <xTimerCreateTimerTask+0x84>)
 800a47e:	4811      	ldr	r0, [pc, #68]	; (800a4c4 <xTimerCreateTimerTask+0x88>)
 800a480:	f7ff f8e4 	bl	800964c <xTaskCreateStatic>
 800a484:	4602      	mov	r2, r0
 800a486:	4b10      	ldr	r3, [pc, #64]	; (800a4c8 <xTimerCreateTimerTask+0x8c>)
 800a488:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a48a:	4b0f      	ldr	r3, [pc, #60]	; (800a4c8 <xTimerCreateTimerTask+0x8c>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d001      	beq.n	800a496 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a492:	2301      	movs	r3, #1
 800a494:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d109      	bne.n	800a4b0 <xTimerCreateTimerTask+0x74>
 800a49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a0:	f383 8811 	msr	BASEPRI, r3
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	613b      	str	r3, [r7, #16]
 800a4ae:	e7fe      	b.n	800a4ae <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a4b0:	697b      	ldr	r3, [r7, #20]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3718      	adds	r7, #24
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	24000cdc 	.word	0x24000cdc
 800a4c0:	0800b52c 	.word	0x0800b52c
 800a4c4:	0800a5fd 	.word	0x0800a5fd
 800a4c8:	24000ce0 	.word	0x24000ce0

0800a4cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b08a      	sub	sp, #40	; 0x28
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	607a      	str	r2, [r7, #4]
 800a4d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d109      	bne.n	800a4f8 <xTimerGenericCommand+0x2c>
 800a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e8:	f383 8811 	msr	BASEPRI, r3
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	623b      	str	r3, [r7, #32]
 800a4f6:	e7fe      	b.n	800a4f6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a4f8:	4b19      	ldr	r3, [pc, #100]	; (800a560 <xTimerGenericCommand+0x94>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d02a      	beq.n	800a556 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	2b05      	cmp	r3, #5
 800a510:	dc18      	bgt.n	800a544 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a512:	f7ff feb5 	bl	800a280 <xTaskGetSchedulerState>
 800a516:	4603      	mov	r3, r0
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d109      	bne.n	800a530 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a51c:	4b10      	ldr	r3, [pc, #64]	; (800a560 <xTimerGenericCommand+0x94>)
 800a51e:	6818      	ldr	r0, [r3, #0]
 800a520:	f107 0110 	add.w	r1, r7, #16
 800a524:	2300      	movs	r3, #0
 800a526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a528:	f7fe fcba 	bl	8008ea0 <xQueueGenericSend>
 800a52c:	6278      	str	r0, [r7, #36]	; 0x24
 800a52e:	e012      	b.n	800a556 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a530:	4b0b      	ldr	r3, [pc, #44]	; (800a560 <xTimerGenericCommand+0x94>)
 800a532:	6818      	ldr	r0, [r3, #0]
 800a534:	f107 0110 	add.w	r1, r7, #16
 800a538:	2300      	movs	r3, #0
 800a53a:	2200      	movs	r2, #0
 800a53c:	f7fe fcb0 	bl	8008ea0 <xQueueGenericSend>
 800a540:	6278      	str	r0, [r7, #36]	; 0x24
 800a542:	e008      	b.n	800a556 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a544:	4b06      	ldr	r3, [pc, #24]	; (800a560 <xTimerGenericCommand+0x94>)
 800a546:	6818      	ldr	r0, [r3, #0]
 800a548:	f107 0110 	add.w	r1, r7, #16
 800a54c:	2300      	movs	r3, #0
 800a54e:	683a      	ldr	r2, [r7, #0]
 800a550:	f7fe fda0 	bl	8009094 <xQueueGenericSendFromISR>
 800a554:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3728      	adds	r7, #40	; 0x28
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	24000cdc 	.word	0x24000cdc

0800a564 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b088      	sub	sp, #32
 800a568:	af02      	add	r7, sp, #8
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a56e:	4b22      	ldr	r3, [pc, #136]	; (800a5f8 <prvProcessExpiredTimer+0x94>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	3304      	adds	r3, #4
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fe fb67 	bl	8008c50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a588:	f003 0304 	and.w	r3, r3, #4
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d021      	beq.n	800a5d4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	699a      	ldr	r2, [r3, #24]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	18d1      	adds	r1, r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	6978      	ldr	r0, [r7, #20]
 800a59e:	f000 f8d1 	bl	800a744 <prvInsertTimerInActiveList>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d01e      	beq.n	800a5e6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	6978      	ldr	r0, [r7, #20]
 800a5b4:	f7ff ff8a 	bl	800a4cc <xTimerGenericCommand>
 800a5b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d112      	bne.n	800a5e6 <prvProcessExpiredTimer+0x82>
 800a5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	60fb      	str	r3, [r7, #12]
 800a5d2:	e7fe      	b.n	800a5d2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5da:	f023 0301 	bic.w	r3, r3, #1
 800a5de:	b2da      	uxtb	r2, r3
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	6978      	ldr	r0, [r7, #20]
 800a5ec:	4798      	blx	r3
}
 800a5ee:	bf00      	nop
 800a5f0:	3718      	adds	r7, #24
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	24000cd4 	.word	0x24000cd4

0800a5fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a604:	f107 0308 	add.w	r3, r7, #8
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 f857 	bl	800a6bc <prvGetNextExpireTime>
 800a60e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	4619      	mov	r1, r3
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f000 f803 	bl	800a620 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a61a:	f000 f8d5 	bl	800a7c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a61e:	e7f1      	b.n	800a604 <prvTimerTask+0x8>

0800a620 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a62a:	f7ff fa45 	bl	8009ab8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a62e:	f107 0308 	add.w	r3, r7, #8
 800a632:	4618      	mov	r0, r3
 800a634:	f000 f866 	bl	800a704 <prvSampleTimeNow>
 800a638:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d130      	bne.n	800a6a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d10a      	bne.n	800a65c <prvProcessTimerOrBlockTask+0x3c>
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d806      	bhi.n	800a65c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a64e:	f7ff fa41 	bl	8009ad4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a652:	68f9      	ldr	r1, [r7, #12]
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7ff ff85 	bl	800a564 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a65a:	e024      	b.n	800a6a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d008      	beq.n	800a674 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a662:	4b13      	ldr	r3, [pc, #76]	; (800a6b0 <prvProcessTimerOrBlockTask+0x90>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d101      	bne.n	800a670 <prvProcessTimerOrBlockTask+0x50>
 800a66c:	2301      	movs	r3, #1
 800a66e:	e000      	b.n	800a672 <prvProcessTimerOrBlockTask+0x52>
 800a670:	2300      	movs	r3, #0
 800a672:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a674:	4b0f      	ldr	r3, [pc, #60]	; (800a6b4 <prvProcessTimerOrBlockTask+0x94>)
 800a676:	6818      	ldr	r0, [r3, #0]
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	1ad3      	subs	r3, r2, r3
 800a67e:	683a      	ldr	r2, [r7, #0]
 800a680:	4619      	mov	r1, r3
 800a682:	f7fe ffaf 	bl	80095e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a686:	f7ff fa25 	bl	8009ad4 <xTaskResumeAll>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10a      	bne.n	800a6a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a690:	4b09      	ldr	r3, [pc, #36]	; (800a6b8 <prvProcessTimerOrBlockTask+0x98>)
 800a692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a696:	601a      	str	r2, [r3, #0]
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	f3bf 8f6f 	isb	sy
}
 800a6a0:	e001      	b.n	800a6a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a6a2:	f7ff fa17 	bl	8009ad4 <xTaskResumeAll>
}
 800a6a6:	bf00      	nop
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	24000cd8 	.word	0x24000cd8
 800a6b4:	24000cdc 	.word	0x24000cdc
 800a6b8:	e000ed04 	.word	0xe000ed04

0800a6bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a6c4:	4b0e      	ldr	r3, [pc, #56]	; (800a700 <prvGetNextExpireTime+0x44>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d101      	bne.n	800a6d2 <prvGetNextExpireTime+0x16>
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	e000      	b.n	800a6d4 <prvGetNextExpireTime+0x18>
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d105      	bne.n	800a6ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6e0:	4b07      	ldr	r3, [pc, #28]	; (800a700 <prvGetNextExpireTime+0x44>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	60fb      	str	r3, [r7, #12]
 800a6ea:	e001      	b.n	800a6f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	24000cd4 	.word	0x24000cd4

0800a704 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a70c:	f7ff fa7e 	bl	8009c0c <xTaskGetTickCount>
 800a710:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a712:	4b0b      	ldr	r3, [pc, #44]	; (800a740 <prvSampleTimeNow+0x3c>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d205      	bcs.n	800a728 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a71c:	f000 f930 	bl	800a980 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	601a      	str	r2, [r3, #0]
 800a726:	e002      	b.n	800a72e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a72e:	4a04      	ldr	r2, [pc, #16]	; (800a740 <prvSampleTimeNow+0x3c>)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a734:	68fb      	ldr	r3, [r7, #12]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	24000ce4 	.word	0x24000ce4

0800a744 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b086      	sub	sp, #24
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
 800a750:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a752:	2300      	movs	r3, #0
 800a754:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a762:	68ba      	ldr	r2, [r7, #8]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	429a      	cmp	r2, r3
 800a768:	d812      	bhi.n	800a790 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	1ad2      	subs	r2, r2, r3
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	699b      	ldr	r3, [r3, #24]
 800a774:	429a      	cmp	r2, r3
 800a776:	d302      	bcc.n	800a77e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a778:	2301      	movs	r3, #1
 800a77a:	617b      	str	r3, [r7, #20]
 800a77c:	e01b      	b.n	800a7b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a77e:	4b10      	ldr	r3, [pc, #64]	; (800a7c0 <prvInsertTimerInActiveList+0x7c>)
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	3304      	adds	r3, #4
 800a786:	4619      	mov	r1, r3
 800a788:	4610      	mov	r0, r2
 800a78a:	f7fe fa28 	bl	8008bde <vListInsert>
 800a78e:	e012      	b.n	800a7b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	429a      	cmp	r2, r3
 800a796:	d206      	bcs.n	800a7a6 <prvInsertTimerInActiveList+0x62>
 800a798:	68ba      	ldr	r2, [r7, #8]
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d302      	bcc.n	800a7a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	617b      	str	r3, [r7, #20]
 800a7a4:	e007      	b.n	800a7b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7a6:	4b07      	ldr	r3, [pc, #28]	; (800a7c4 <prvInsertTimerInActiveList+0x80>)
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	3304      	adds	r3, #4
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	f7fe fa14 	bl	8008bde <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a7b6:	697b      	ldr	r3, [r7, #20]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3718      	adds	r7, #24
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	24000cd8 	.word	0x24000cd8
 800a7c4:	24000cd4 	.word	0x24000cd4

0800a7c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b08e      	sub	sp, #56	; 0x38
 800a7cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7ce:	e0c6      	b.n	800a95e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	da17      	bge.n	800a806 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a7d6:	1d3b      	adds	r3, r7, #4
 800a7d8:	3304      	adds	r3, #4
 800a7da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d109      	bne.n	800a7f6 <prvProcessReceivedCommands+0x2e>
 800a7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e6:	f383 8811 	msr	BASEPRI, r3
 800a7ea:	f3bf 8f6f 	isb	sy
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	61fb      	str	r3, [r7, #28]
 800a7f4:	e7fe      	b.n	800a7f4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7fc:	6850      	ldr	r0, [r2, #4]
 800a7fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a800:	6892      	ldr	r2, [r2, #8]
 800a802:	4611      	mov	r1, r2
 800a804:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f2c0 80a7 	blt.w	800a95c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d004      	beq.n	800a824 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81c:	3304      	adds	r3, #4
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fe fa16 	bl	8008c50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a824:	463b      	mov	r3, r7
 800a826:	4618      	mov	r0, r3
 800a828:	f7ff ff6c 	bl	800a704 <prvSampleTimeNow>
 800a82c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2b09      	cmp	r3, #9
 800a832:	f200 8094 	bhi.w	800a95e <prvProcessReceivedCommands+0x196>
 800a836:	a201      	add	r2, pc, #4	; (adr r2, 800a83c <prvProcessReceivedCommands+0x74>)
 800a838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83c:	0800a865 	.word	0x0800a865
 800a840:	0800a865 	.word	0x0800a865
 800a844:	0800a865 	.word	0x0800a865
 800a848:	0800a8d7 	.word	0x0800a8d7
 800a84c:	0800a8eb 	.word	0x0800a8eb
 800a850:	0800a933 	.word	0x0800a933
 800a854:	0800a865 	.word	0x0800a865
 800a858:	0800a865 	.word	0x0800a865
 800a85c:	0800a8d7 	.word	0x0800a8d7
 800a860:	0800a8eb 	.word	0x0800a8eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a86a:	f043 0301 	orr.w	r3, r3, #1
 800a86e:	b2da      	uxtb	r2, r3
 800a870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87a:	699b      	ldr	r3, [r3, #24]
 800a87c:	18d1      	adds	r1, r2, r3
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a884:	f7ff ff5e 	bl	800a744 <prvInsertTimerInActiveList>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d067      	beq.n	800a95e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a890:	6a1b      	ldr	r3, [r3, #32]
 800a892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a894:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a89c:	f003 0304 	and.w	r3, r3, #4
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d05c      	beq.n	800a95e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a8a4:	68ba      	ldr	r2, [r7, #8]
 800a8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a8:	699b      	ldr	r3, [r3, #24]
 800a8aa:	441a      	add	r2, r3
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	9300      	str	r3, [sp, #0]
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	2100      	movs	r1, #0
 800a8b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8b6:	f7ff fe09 	bl	800a4cc <xTimerGenericCommand>
 800a8ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a8bc:	6a3b      	ldr	r3, [r7, #32]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d14d      	bne.n	800a95e <prvProcessReceivedCommands+0x196>
 800a8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c6:	f383 8811 	msr	BASEPRI, r3
 800a8ca:	f3bf 8f6f 	isb	sy
 800a8ce:	f3bf 8f4f 	dsb	sy
 800a8d2:	61bb      	str	r3, [r7, #24]
 800a8d4:	e7fe      	b.n	800a8d4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8dc:	f023 0301 	bic.w	r3, r3, #1
 800a8e0:	b2da      	uxtb	r2, r3
 800a8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a8e8:	e039      	b.n	800a95e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8f0:	f043 0301 	orr.w	r3, r3, #1
 800a8f4:	b2da      	uxtb	r2, r3
 800a8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a8fc:	68ba      	ldr	r2, [r7, #8]
 800a8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a900:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d109      	bne.n	800a91e <prvProcessReceivedCommands+0x156>
 800a90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90e:	f383 8811 	msr	BASEPRI, r3
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	f3bf 8f4f 	dsb	sy
 800a91a:	617b      	str	r3, [r7, #20]
 800a91c:	e7fe      	b.n	800a91c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	699a      	ldr	r2, [r3, #24]
 800a922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a924:	18d1      	adds	r1, r2, r3
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a92a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a92c:	f7ff ff0a 	bl	800a744 <prvInsertTimerInActiveList>
					break;
 800a930:	e015      	b.n	800a95e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a938:	f003 0302 	and.w	r3, r3, #2
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d103      	bne.n	800a948 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800a940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a942:	f000 fbc7 	bl	800b0d4 <vPortFree>
 800a946:	e00a      	b.n	800a95e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a94e:	f023 0301 	bic.w	r3, r3, #1
 800a952:	b2da      	uxtb	r2, r3
 800a954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a95a:	e000      	b.n	800a95e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a95c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a95e:	4b07      	ldr	r3, [pc, #28]	; (800a97c <prvProcessReceivedCommands+0x1b4>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	1d39      	adds	r1, r7, #4
 800a964:	2200      	movs	r2, #0
 800a966:	4618      	mov	r0, r3
 800a968:	f7fe fc28 	bl	80091bc <xQueueReceive>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f47f af2e 	bne.w	800a7d0 <prvProcessReceivedCommands+0x8>
	}
}
 800a974:	bf00      	nop
 800a976:	3730      	adds	r7, #48	; 0x30
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	24000cdc 	.word	0x24000cdc

0800a980 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b088      	sub	sp, #32
 800a984:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a986:	e047      	b.n	800aa18 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a988:	4b2d      	ldr	r3, [pc, #180]	; (800aa40 <prvSwitchTimerLists+0xc0>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a992:	4b2b      	ldr	r3, [pc, #172]	; (800aa40 <prvSwitchTimerLists+0xc0>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	3304      	adds	r3, #4
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fe f955 	bl	8008c50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6a1b      	ldr	r3, [r3, #32]
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9b4:	f003 0304 	and.w	r3, r3, #4
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d02d      	beq.n	800aa18 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	693a      	ldr	r2, [r7, #16]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d90e      	bls.n	800a9ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9da:	4b19      	ldr	r3, [pc, #100]	; (800aa40 <prvSwitchTimerLists+0xc0>)
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	3304      	adds	r3, #4
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	4610      	mov	r0, r2
 800a9e6:	f7fe f8fa 	bl	8008bde <vListInsert>
 800a9ea:	e015      	b.n	800aa18 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f7ff fd68 	bl	800a4cc <xTimerGenericCommand>
 800a9fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d109      	bne.n	800aa18 <prvSwitchTimerLists+0x98>
 800aa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	603b      	str	r3, [r7, #0]
 800aa16:	e7fe      	b.n	800aa16 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa18:	4b09      	ldr	r3, [pc, #36]	; (800aa40 <prvSwitchTimerLists+0xc0>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d1b2      	bne.n	800a988 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aa22:	4b07      	ldr	r3, [pc, #28]	; (800aa40 <prvSwitchTimerLists+0xc0>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aa28:	4b06      	ldr	r3, [pc, #24]	; (800aa44 <prvSwitchTimerLists+0xc4>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a04      	ldr	r2, [pc, #16]	; (800aa40 <prvSwitchTimerLists+0xc0>)
 800aa2e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aa30:	4a04      	ldr	r2, [pc, #16]	; (800aa44 <prvSwitchTimerLists+0xc4>)
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	6013      	str	r3, [r2, #0]
}
 800aa36:	bf00      	nop
 800aa38:	3718      	adds	r7, #24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	24000cd4 	.word	0x24000cd4
 800aa44:	24000cd8 	.word	0x24000cd8

0800aa48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aa4e:	f000 f965 	bl	800ad1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aa52:	4b15      	ldr	r3, [pc, #84]	; (800aaa8 <prvCheckForValidListAndQueue+0x60>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d120      	bne.n	800aa9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa5a:	4814      	ldr	r0, [pc, #80]	; (800aaac <prvCheckForValidListAndQueue+0x64>)
 800aa5c:	f7fe f86e 	bl	8008b3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa60:	4813      	ldr	r0, [pc, #76]	; (800aab0 <prvCheckForValidListAndQueue+0x68>)
 800aa62:	f7fe f86b 	bl	8008b3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aa66:	4b13      	ldr	r3, [pc, #76]	; (800aab4 <prvCheckForValidListAndQueue+0x6c>)
 800aa68:	4a10      	ldr	r2, [pc, #64]	; (800aaac <prvCheckForValidListAndQueue+0x64>)
 800aa6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aa6c:	4b12      	ldr	r3, [pc, #72]	; (800aab8 <prvCheckForValidListAndQueue+0x70>)
 800aa6e:	4a10      	ldr	r2, [pc, #64]	; (800aab0 <prvCheckForValidListAndQueue+0x68>)
 800aa70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa72:	2300      	movs	r3, #0
 800aa74:	9300      	str	r3, [sp, #0]
 800aa76:	4b11      	ldr	r3, [pc, #68]	; (800aabc <prvCheckForValidListAndQueue+0x74>)
 800aa78:	4a11      	ldr	r2, [pc, #68]	; (800aac0 <prvCheckForValidListAndQueue+0x78>)
 800aa7a:	2110      	movs	r1, #16
 800aa7c:	200a      	movs	r0, #10
 800aa7e:	f7fe f979 	bl	8008d74 <xQueueGenericCreateStatic>
 800aa82:	4602      	mov	r2, r0
 800aa84:	4b08      	ldr	r3, [pc, #32]	; (800aaa8 <prvCheckForValidListAndQueue+0x60>)
 800aa86:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa88:	4b07      	ldr	r3, [pc, #28]	; (800aaa8 <prvCheckForValidListAndQueue+0x60>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d005      	beq.n	800aa9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa90:	4b05      	ldr	r3, [pc, #20]	; (800aaa8 <prvCheckForValidListAndQueue+0x60>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	490b      	ldr	r1, [pc, #44]	; (800aac4 <prvCheckForValidListAndQueue+0x7c>)
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7fe fd7c 	bl	8009594 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa9c:	f000 f96c 	bl	800ad78 <vPortExitCritical>
}
 800aaa0:	bf00      	nop
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	24000cdc 	.word	0x24000cdc
 800aaac:	24000cac 	.word	0x24000cac
 800aab0:	24000cc0 	.word	0x24000cc0
 800aab4:	24000cd4 	.word	0x24000cd4
 800aab8:	24000cd8 	.word	0x24000cd8
 800aabc:	24000d88 	.word	0x24000d88
 800aac0:	24000ce8 	.word	0x24000ce8
 800aac4:	0800b534 	.word	0x0800b534

0800aac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3b04      	subs	r3, #4
 800aad8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	3b04      	subs	r3, #4
 800aae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	f023 0201 	bic.w	r2, r3, #1
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	3b04      	subs	r3, #4
 800aaf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aaf8:	4a0c      	ldr	r2, [pc, #48]	; (800ab2c <pxPortInitialiseStack+0x64>)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	3b14      	subs	r3, #20
 800ab02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	3b04      	subs	r3, #4
 800ab0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f06f 0202 	mvn.w	r2, #2
 800ab16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	3b20      	subs	r3, #32
 800ab1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3714      	adds	r7, #20
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr
 800ab2c:	0800ab31 	.word	0x0800ab31

0800ab30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab3a:	4b11      	ldr	r3, [pc, #68]	; (800ab80 <prvTaskExitError+0x50>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab42:	d009      	beq.n	800ab58 <prvTaskExitError+0x28>
 800ab44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	60fb      	str	r3, [r7, #12]
 800ab56:	e7fe      	b.n	800ab56 <prvTaskExitError+0x26>
 800ab58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5c:	f383 8811 	msr	BASEPRI, r3
 800ab60:	f3bf 8f6f 	isb	sy
 800ab64:	f3bf 8f4f 	dsb	sy
 800ab68:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab6a:	bf00      	nop
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d0fc      	beq.n	800ab6c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab72:	bf00      	nop
 800ab74:	3714      	adds	r7, #20
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	24000010 	.word	0x24000010
	...

0800ab90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab90:	4b07      	ldr	r3, [pc, #28]	; (800abb0 <pxCurrentTCBConst2>)
 800ab92:	6819      	ldr	r1, [r3, #0]
 800ab94:	6808      	ldr	r0, [r1, #0]
 800ab96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9a:	f380 8809 	msr	PSP, r0
 800ab9e:	f3bf 8f6f 	isb	sy
 800aba2:	f04f 0000 	mov.w	r0, #0
 800aba6:	f380 8811 	msr	BASEPRI, r0
 800abaa:	4770      	bx	lr
 800abac:	f3af 8000 	nop.w

0800abb0 <pxCurrentTCBConst2>:
 800abb0:	240007ac 	.word	0x240007ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop

0800abb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800abb8:	4808      	ldr	r0, [pc, #32]	; (800abdc <prvPortStartFirstTask+0x24>)
 800abba:	6800      	ldr	r0, [r0, #0]
 800abbc:	6800      	ldr	r0, [r0, #0]
 800abbe:	f380 8808 	msr	MSP, r0
 800abc2:	f04f 0000 	mov.w	r0, #0
 800abc6:	f380 8814 	msr	CONTROL, r0
 800abca:	b662      	cpsie	i
 800abcc:	b661      	cpsie	f
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	df00      	svc	0
 800abd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800abda:	bf00      	nop
 800abdc:	e000ed08 	.word	0xe000ed08

0800abe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800abe6:	4b44      	ldr	r3, [pc, #272]	; (800acf8 <xPortStartScheduler+0x118>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a44      	ldr	r2, [pc, #272]	; (800acfc <xPortStartScheduler+0x11c>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d109      	bne.n	800ac04 <xPortStartScheduler+0x24>
 800abf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf4:	f383 8811 	msr	BASEPRI, r3
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	613b      	str	r3, [r7, #16]
 800ac02:	e7fe      	b.n	800ac02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ac04:	4b3c      	ldr	r3, [pc, #240]	; (800acf8 <xPortStartScheduler+0x118>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a3d      	ldr	r2, [pc, #244]	; (800ad00 <xPortStartScheduler+0x120>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d109      	bne.n	800ac22 <xPortStartScheduler+0x42>
 800ac0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac12:	f383 8811 	msr	BASEPRI, r3
 800ac16:	f3bf 8f6f 	isb	sy
 800ac1a:	f3bf 8f4f 	dsb	sy
 800ac1e:	60fb      	str	r3, [r7, #12]
 800ac20:	e7fe      	b.n	800ac20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac22:	4b38      	ldr	r3, [pc, #224]	; (800ad04 <xPortStartScheduler+0x124>)
 800ac24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	22ff      	movs	r2, #255	; 0xff
 800ac32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac3c:	78fb      	ldrb	r3, [r7, #3]
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	4b30      	ldr	r3, [pc, #192]	; (800ad08 <xPortStartScheduler+0x128>)
 800ac48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac4a:	4b30      	ldr	r3, [pc, #192]	; (800ad0c <xPortStartScheduler+0x12c>)
 800ac4c:	2207      	movs	r2, #7
 800ac4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac50:	e009      	b.n	800ac66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ac52:	4b2e      	ldr	r3, [pc, #184]	; (800ad0c <xPortStartScheduler+0x12c>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3b01      	subs	r3, #1
 800ac58:	4a2c      	ldr	r2, [pc, #176]	; (800ad0c <xPortStartScheduler+0x12c>)
 800ac5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac5c:	78fb      	ldrb	r3, [r7, #3]
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac66:	78fb      	ldrb	r3, [r7, #3]
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac6e:	2b80      	cmp	r3, #128	; 0x80
 800ac70:	d0ef      	beq.n	800ac52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac72:	4b26      	ldr	r3, [pc, #152]	; (800ad0c <xPortStartScheduler+0x12c>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f1c3 0307 	rsb	r3, r3, #7
 800ac7a:	2b04      	cmp	r3, #4
 800ac7c:	d009      	beq.n	800ac92 <xPortStartScheduler+0xb2>
 800ac7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	60bb      	str	r3, [r7, #8]
 800ac90:	e7fe      	b.n	800ac90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac92:	4b1e      	ldr	r3, [pc, #120]	; (800ad0c <xPortStartScheduler+0x12c>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	021b      	lsls	r3, r3, #8
 800ac98:	4a1c      	ldr	r2, [pc, #112]	; (800ad0c <xPortStartScheduler+0x12c>)
 800ac9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac9c:	4b1b      	ldr	r3, [pc, #108]	; (800ad0c <xPortStartScheduler+0x12c>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aca4:	4a19      	ldr	r2, [pc, #100]	; (800ad0c <xPortStartScheduler+0x12c>)
 800aca6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800acb0:	4b17      	ldr	r3, [pc, #92]	; (800ad10 <xPortStartScheduler+0x130>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a16      	ldr	r2, [pc, #88]	; (800ad10 <xPortStartScheduler+0x130>)
 800acb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800acba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800acbc:	4b14      	ldr	r3, [pc, #80]	; (800ad10 <xPortStartScheduler+0x130>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a13      	ldr	r2, [pc, #76]	; (800ad10 <xPortStartScheduler+0x130>)
 800acc2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800acc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800acc8:	f000 f8d6 	bl	800ae78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800accc:	4b11      	ldr	r3, [pc, #68]	; (800ad14 <xPortStartScheduler+0x134>)
 800acce:	2200      	movs	r2, #0
 800acd0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800acd2:	f000 f8f5 	bl	800aec0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800acd6:	4b10      	ldr	r3, [pc, #64]	; (800ad18 <xPortStartScheduler+0x138>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a0f      	ldr	r2, [pc, #60]	; (800ad18 <xPortStartScheduler+0x138>)
 800acdc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ace0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ace2:	f7ff ff69 	bl	800abb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ace6:	f7ff f86b 	bl	8009dc0 <vTaskSwitchContext>
	prvTaskExitError();
 800acea:	f7ff ff21 	bl	800ab30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	e000ed00 	.word	0xe000ed00
 800acfc:	410fc271 	.word	0x410fc271
 800ad00:	410fc270 	.word	0x410fc270
 800ad04:	e000e400 	.word	0xe000e400
 800ad08:	24000dd8 	.word	0x24000dd8
 800ad0c:	24000ddc 	.word	0x24000ddc
 800ad10:	e000ed20 	.word	0xe000ed20
 800ad14:	24000010 	.word	0x24000010
 800ad18:	e000ef34 	.word	0xe000ef34

0800ad1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad26:	f383 8811 	msr	BASEPRI, r3
 800ad2a:	f3bf 8f6f 	isb	sy
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ad34:	4b0e      	ldr	r3, [pc, #56]	; (800ad70 <vPortEnterCritical+0x54>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	4a0d      	ldr	r2, [pc, #52]	; (800ad70 <vPortEnterCritical+0x54>)
 800ad3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad3e:	4b0c      	ldr	r3, [pc, #48]	; (800ad70 <vPortEnterCritical+0x54>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d10e      	bne.n	800ad64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad46:	4b0b      	ldr	r3, [pc, #44]	; (800ad74 <vPortEnterCritical+0x58>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d009      	beq.n	800ad64 <vPortEnterCritical+0x48>
 800ad50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad54:	f383 8811 	msr	BASEPRI, r3
 800ad58:	f3bf 8f6f 	isb	sy
 800ad5c:	f3bf 8f4f 	dsb	sy
 800ad60:	603b      	str	r3, [r7, #0]
 800ad62:	e7fe      	b.n	800ad62 <vPortEnterCritical+0x46>
	}
}
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	24000010 	.word	0x24000010
 800ad74:	e000ed04 	.word	0xe000ed04

0800ad78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad7e:	4b11      	ldr	r3, [pc, #68]	; (800adc4 <vPortExitCritical+0x4c>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d109      	bne.n	800ad9a <vPortExitCritical+0x22>
 800ad86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8a:	f383 8811 	msr	BASEPRI, r3
 800ad8e:	f3bf 8f6f 	isb	sy
 800ad92:	f3bf 8f4f 	dsb	sy
 800ad96:	607b      	str	r3, [r7, #4]
 800ad98:	e7fe      	b.n	800ad98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ad9a:	4b0a      	ldr	r3, [pc, #40]	; (800adc4 <vPortExitCritical+0x4c>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	4a08      	ldr	r2, [pc, #32]	; (800adc4 <vPortExitCritical+0x4c>)
 800ada2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ada4:	4b07      	ldr	r3, [pc, #28]	; (800adc4 <vPortExitCritical+0x4c>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d104      	bne.n	800adb6 <vPortExitCritical+0x3e>
 800adac:	2300      	movs	r3, #0
 800adae:	603b      	str	r3, [r7, #0]
	__asm volatile
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800adb6:	bf00      	nop
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	24000010 	.word	0x24000010
	...

0800add0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800add0:	f3ef 8009 	mrs	r0, PSP
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	4b15      	ldr	r3, [pc, #84]	; (800ae30 <pxCurrentTCBConst>)
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	f01e 0f10 	tst.w	lr, #16
 800ade0:	bf08      	it	eq
 800ade2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ade6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adea:	6010      	str	r0, [r2, #0]
 800adec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800adf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800adf4:	f380 8811 	msr	BASEPRI, r0
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f7fe ffde 	bl	8009dc0 <vTaskSwitchContext>
 800ae04:	f04f 0000 	mov.w	r0, #0
 800ae08:	f380 8811 	msr	BASEPRI, r0
 800ae0c:	bc09      	pop	{r0, r3}
 800ae0e:	6819      	ldr	r1, [r3, #0]
 800ae10:	6808      	ldr	r0, [r1, #0]
 800ae12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae16:	f01e 0f10 	tst.w	lr, #16
 800ae1a:	bf08      	it	eq
 800ae1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae20:	f380 8809 	msr	PSP, r0
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	f3af 8000 	nop.w

0800ae30 <pxCurrentTCBConst>:
 800ae30:	240007ac 	.word	0x240007ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae34:	bf00      	nop
 800ae36:	bf00      	nop

0800ae38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae50:	f7fe fefe 	bl	8009c50 <xTaskIncrementTick>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d003      	beq.n	800ae62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae5a:	4b06      	ldr	r3, [pc, #24]	; (800ae74 <SysTick_Handler+0x3c>)
 800ae5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae60:	601a      	str	r2, [r3, #0]
 800ae62:	2300      	movs	r3, #0
 800ae64:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae6c:	bf00      	nop
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	e000ed04 	.word	0xe000ed04

0800ae78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae78:	b480      	push	{r7}
 800ae7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae7c:	4b0b      	ldr	r3, [pc, #44]	; (800aeac <vPortSetupTimerInterrupt+0x34>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae82:	4b0b      	ldr	r3, [pc, #44]	; (800aeb0 <vPortSetupTimerInterrupt+0x38>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae88:	4b0a      	ldr	r3, [pc, #40]	; (800aeb4 <vPortSetupTimerInterrupt+0x3c>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a0a      	ldr	r2, [pc, #40]	; (800aeb8 <vPortSetupTimerInterrupt+0x40>)
 800ae8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae92:	099b      	lsrs	r3, r3, #6
 800ae94:	4a09      	ldr	r2, [pc, #36]	; (800aebc <vPortSetupTimerInterrupt+0x44>)
 800ae96:	3b01      	subs	r3, #1
 800ae98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae9a:	4b04      	ldr	r3, [pc, #16]	; (800aeac <vPortSetupTimerInterrupt+0x34>)
 800ae9c:	2207      	movs	r2, #7
 800ae9e:	601a      	str	r2, [r3, #0]
}
 800aea0:	bf00      	nop
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop
 800aeac:	e000e010 	.word	0xe000e010
 800aeb0:	e000e018 	.word	0xe000e018
 800aeb4:	24000000 	.word	0x24000000
 800aeb8:	10624dd3 	.word	0x10624dd3
 800aebc:	e000e014 	.word	0xe000e014

0800aec0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aec0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aed0 <vPortEnableVFP+0x10>
 800aec4:	6801      	ldr	r1, [r0, #0]
 800aec6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aeca:	6001      	str	r1, [r0, #0]
 800aecc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aece:	bf00      	nop
 800aed0:	e000ed88 	.word	0xe000ed88

0800aed4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aeda:	f3ef 8305 	mrs	r3, IPSR
 800aede:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2b0f      	cmp	r3, #15
 800aee4:	d913      	bls.n	800af0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aee6:	4a16      	ldr	r2, [pc, #88]	; (800af40 <vPortValidateInterruptPriority+0x6c>)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	4413      	add	r3, r2
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aef0:	4b14      	ldr	r3, [pc, #80]	; (800af44 <vPortValidateInterruptPriority+0x70>)
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	7afa      	ldrb	r2, [r7, #11]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d209      	bcs.n	800af0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800aefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefe:	f383 8811 	msr	BASEPRI, r3
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	607b      	str	r3, [r7, #4]
 800af0c:	e7fe      	b.n	800af0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800af0e:	4b0e      	ldr	r3, [pc, #56]	; (800af48 <vPortValidateInterruptPriority+0x74>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800af16:	4b0d      	ldr	r3, [pc, #52]	; (800af4c <vPortValidateInterruptPriority+0x78>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d909      	bls.n	800af32 <vPortValidateInterruptPriority+0x5e>
 800af1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af22:	f383 8811 	msr	BASEPRI, r3
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	603b      	str	r3, [r7, #0]
 800af30:	e7fe      	b.n	800af30 <vPortValidateInterruptPriority+0x5c>
	}
 800af32:	bf00      	nop
 800af34:	3714      	adds	r7, #20
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	e000e3f0 	.word	0xe000e3f0
 800af44:	24000dd8 	.word	0x24000dd8
 800af48:	e000ed0c 	.word	0xe000ed0c
 800af4c:	24000ddc 	.word	0x24000ddc

0800af50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b08a      	sub	sp, #40	; 0x28
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af58:	2300      	movs	r3, #0
 800af5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af5c:	f7fe fdac 	bl	8009ab8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af60:	4b57      	ldr	r3, [pc, #348]	; (800b0c0 <pvPortMalloc+0x170>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d101      	bne.n	800af6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af68:	f000 f90c 	bl	800b184 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af6c:	4b55      	ldr	r3, [pc, #340]	; (800b0c4 <pvPortMalloc+0x174>)
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4013      	ands	r3, r2
 800af74:	2b00      	cmp	r3, #0
 800af76:	f040 808c 	bne.w	800b092 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d01c      	beq.n	800afba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800af80:	2208      	movs	r2, #8
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4413      	add	r3, r2
 800af86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f003 0307 	and.w	r3, r3, #7
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d013      	beq.n	800afba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f023 0307 	bic.w	r3, r3, #7
 800af98:	3308      	adds	r3, #8
 800af9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f003 0307 	and.w	r3, r3, #7
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d009      	beq.n	800afba <pvPortMalloc+0x6a>
 800afa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afaa:	f383 8811 	msr	BASEPRI, r3
 800afae:	f3bf 8f6f 	isb	sy
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	617b      	str	r3, [r7, #20]
 800afb8:	e7fe      	b.n	800afb8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d068      	beq.n	800b092 <pvPortMalloc+0x142>
 800afc0:	4b41      	ldr	r3, [pc, #260]	; (800b0c8 <pvPortMalloc+0x178>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d863      	bhi.n	800b092 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800afca:	4b40      	ldr	r3, [pc, #256]	; (800b0cc <pvPortMalloc+0x17c>)
 800afcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800afce:	4b3f      	ldr	r3, [pc, #252]	; (800b0cc <pvPortMalloc+0x17c>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afd4:	e004      	b.n	800afe0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d903      	bls.n	800aff2 <pvPortMalloc+0xa2>
 800afea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1f1      	bne.n	800afd6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aff2:	4b33      	ldr	r3, [pc, #204]	; (800b0c0 <pvPortMalloc+0x170>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aff8:	429a      	cmp	r2, r3
 800affa:	d04a      	beq.n	800b092 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800affc:	6a3b      	ldr	r3, [r7, #32]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2208      	movs	r2, #8
 800b002:	4413      	add	r3, r2
 800b004:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	6a3b      	ldr	r3, [r7, #32]
 800b00c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	685a      	ldr	r2, [r3, #4]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	1ad2      	subs	r2, r2, r3
 800b016:	2308      	movs	r3, #8
 800b018:	005b      	lsls	r3, r3, #1
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d91e      	bls.n	800b05c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b01e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4413      	add	r3, r2
 800b024:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	f003 0307 	and.w	r3, r3, #7
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d009      	beq.n	800b044 <pvPortMalloc+0xf4>
 800b030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b034:	f383 8811 	msr	BASEPRI, r3
 800b038:	f3bf 8f6f 	isb	sy
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	613b      	str	r3, [r7, #16]
 800b042:	e7fe      	b.n	800b042 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	685a      	ldr	r2, [r3, #4]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	1ad2      	subs	r2, r2, r3
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b056:	69b8      	ldr	r0, [r7, #24]
 800b058:	f000 f8f6 	bl	800b248 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b05c:	4b1a      	ldr	r3, [pc, #104]	; (800b0c8 <pvPortMalloc+0x178>)
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	4a18      	ldr	r2, [pc, #96]	; (800b0c8 <pvPortMalloc+0x178>)
 800b068:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b06a:	4b17      	ldr	r3, [pc, #92]	; (800b0c8 <pvPortMalloc+0x178>)
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	4b18      	ldr	r3, [pc, #96]	; (800b0d0 <pvPortMalloc+0x180>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	429a      	cmp	r2, r3
 800b074:	d203      	bcs.n	800b07e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b076:	4b14      	ldr	r3, [pc, #80]	; (800b0c8 <pvPortMalloc+0x178>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a15      	ldr	r2, [pc, #84]	; (800b0d0 <pvPortMalloc+0x180>)
 800b07c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b080:	685a      	ldr	r2, [r3, #4]
 800b082:	4b10      	ldr	r3, [pc, #64]	; (800b0c4 <pvPortMalloc+0x174>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	431a      	orrs	r2, r3
 800b088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	2200      	movs	r2, #0
 800b090:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b092:	f7fe fd1f 	bl	8009ad4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	f003 0307 	and.w	r3, r3, #7
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d009      	beq.n	800b0b4 <pvPortMalloc+0x164>
 800b0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	60fb      	str	r3, [r7, #12]
 800b0b2:	e7fe      	b.n	800b0b2 <pvPortMalloc+0x162>
	return pvReturn;
 800b0b4:	69fb      	ldr	r3, [r7, #28]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3728      	adds	r7, #40	; 0x28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	240049e8 	.word	0x240049e8
 800b0c4:	240049f4 	.word	0x240049f4
 800b0c8:	240049ec 	.word	0x240049ec
 800b0cc:	240049e0 	.word	0x240049e0
 800b0d0:	240049f0 	.word	0x240049f0

0800b0d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d046      	beq.n	800b174 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b0e6:	2308      	movs	r3, #8
 800b0e8:	425b      	negs	r3, r3
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	685a      	ldr	r2, [r3, #4]
 800b0f8:	4b20      	ldr	r3, [pc, #128]	; (800b17c <vPortFree+0xa8>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4013      	ands	r3, r2
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d109      	bne.n	800b116 <vPortFree+0x42>
 800b102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b106:	f383 8811 	msr	BASEPRI, r3
 800b10a:	f3bf 8f6f 	isb	sy
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	60fb      	str	r3, [r7, #12]
 800b114:	e7fe      	b.n	800b114 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d009      	beq.n	800b132 <vPortFree+0x5e>
 800b11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b122:	f383 8811 	msr	BASEPRI, r3
 800b126:	f3bf 8f6f 	isb	sy
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	60bb      	str	r3, [r7, #8]
 800b130:	e7fe      	b.n	800b130 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	685a      	ldr	r2, [r3, #4]
 800b136:	4b11      	ldr	r3, [pc, #68]	; (800b17c <vPortFree+0xa8>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4013      	ands	r3, r2
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d019      	beq.n	800b174 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d115      	bne.n	800b174 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	685a      	ldr	r2, [r3, #4]
 800b14c:	4b0b      	ldr	r3, [pc, #44]	; (800b17c <vPortFree+0xa8>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	43db      	mvns	r3, r3
 800b152:	401a      	ands	r2, r3
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b158:	f7fe fcae 	bl	8009ab8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	685a      	ldr	r2, [r3, #4]
 800b160:	4b07      	ldr	r3, [pc, #28]	; (800b180 <vPortFree+0xac>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4413      	add	r3, r2
 800b166:	4a06      	ldr	r2, [pc, #24]	; (800b180 <vPortFree+0xac>)
 800b168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b16a:	6938      	ldr	r0, [r7, #16]
 800b16c:	f000 f86c 	bl	800b248 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b170:	f7fe fcb0 	bl	8009ad4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b174:	bf00      	nop
 800b176:	3718      	adds	r7, #24
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	240049f4 	.word	0x240049f4
 800b180:	240049ec 	.word	0x240049ec

0800b184 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b18a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b18e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b190:	4b27      	ldr	r3, [pc, #156]	; (800b230 <prvHeapInit+0xac>)
 800b192:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f003 0307 	and.w	r3, r3, #7
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00c      	beq.n	800b1b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	3307      	adds	r3, #7
 800b1a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f023 0307 	bic.w	r3, r3, #7
 800b1aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	1ad3      	subs	r3, r2, r3
 800b1b2:	4a1f      	ldr	r2, [pc, #124]	; (800b230 <prvHeapInit+0xac>)
 800b1b4:	4413      	add	r3, r2
 800b1b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1bc:	4a1d      	ldr	r2, [pc, #116]	; (800b234 <prvHeapInit+0xb0>)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b1c2:	4b1c      	ldr	r3, [pc, #112]	; (800b234 <prvHeapInit+0xb0>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	68ba      	ldr	r2, [r7, #8]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b1d0:	2208      	movs	r2, #8
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	1a9b      	subs	r3, r3, r2
 800b1d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f023 0307 	bic.w	r3, r3, #7
 800b1de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	4a15      	ldr	r2, [pc, #84]	; (800b238 <prvHeapInit+0xb4>)
 800b1e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b1e6:	4b14      	ldr	r3, [pc, #80]	; (800b238 <prvHeapInit+0xb4>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b1ee:	4b12      	ldr	r3, [pc, #72]	; (800b238 <prvHeapInit+0xb4>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	1ad2      	subs	r2, r2, r3
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b204:	4b0c      	ldr	r3, [pc, #48]	; (800b238 <prvHeapInit+0xb4>)
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	4a0a      	ldr	r2, [pc, #40]	; (800b23c <prvHeapInit+0xb8>)
 800b212:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	4a09      	ldr	r2, [pc, #36]	; (800b240 <prvHeapInit+0xbc>)
 800b21a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b21c:	4b09      	ldr	r3, [pc, #36]	; (800b244 <prvHeapInit+0xc0>)
 800b21e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b222:	601a      	str	r2, [r3, #0]
}
 800b224:	bf00      	nop
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	24000de0 	.word	0x24000de0
 800b234:	240049e0 	.word	0x240049e0
 800b238:	240049e8 	.word	0x240049e8
 800b23c:	240049f0 	.word	0x240049f0
 800b240:	240049ec 	.word	0x240049ec
 800b244:	240049f4 	.word	0x240049f4

0800b248 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b250:	4b28      	ldr	r3, [pc, #160]	; (800b2f4 <prvInsertBlockIntoFreeList+0xac>)
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	e002      	b.n	800b25c <prvInsertBlockIntoFreeList+0x14>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	429a      	cmp	r2, r3
 800b264:	d8f7      	bhi.n	800b256 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	4413      	add	r3, r2
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	429a      	cmp	r2, r3
 800b276:	d108      	bne.n	800b28a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	441a      	add	r2, r3
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	441a      	add	r2, r3
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d118      	bne.n	800b2d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	4b15      	ldr	r3, [pc, #84]	; (800b2f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d00d      	beq.n	800b2c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	685a      	ldr	r2, [r3, #4]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	441a      	add	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	601a      	str	r2, [r3, #0]
 800b2c4:	e008      	b.n	800b2d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b2c6:	4b0c      	ldr	r3, [pc, #48]	; (800b2f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	601a      	str	r2, [r3, #0]
 800b2ce:	e003      	b.n	800b2d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d002      	beq.n	800b2e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2e6:	bf00      	nop
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	240049e0 	.word	0x240049e0
 800b2f8:	240049e8 	.word	0x240049e8

0800b2fc <__libc_init_array>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	4e0d      	ldr	r6, [pc, #52]	; (800b334 <__libc_init_array+0x38>)
 800b300:	4c0d      	ldr	r4, [pc, #52]	; (800b338 <__libc_init_array+0x3c>)
 800b302:	1ba4      	subs	r4, r4, r6
 800b304:	10a4      	asrs	r4, r4, #2
 800b306:	2500      	movs	r5, #0
 800b308:	42a5      	cmp	r5, r4
 800b30a:	d109      	bne.n	800b320 <__libc_init_array+0x24>
 800b30c:	4e0b      	ldr	r6, [pc, #44]	; (800b33c <__libc_init_array+0x40>)
 800b30e:	4c0c      	ldr	r4, [pc, #48]	; (800b340 <__libc_init_array+0x44>)
 800b310:	f000 f82c 	bl	800b36c <_init>
 800b314:	1ba4      	subs	r4, r4, r6
 800b316:	10a4      	asrs	r4, r4, #2
 800b318:	2500      	movs	r5, #0
 800b31a:	42a5      	cmp	r5, r4
 800b31c:	d105      	bne.n	800b32a <__libc_init_array+0x2e>
 800b31e:	bd70      	pop	{r4, r5, r6, pc}
 800b320:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b324:	4798      	blx	r3
 800b326:	3501      	adds	r5, #1
 800b328:	e7ee      	b.n	800b308 <__libc_init_array+0xc>
 800b32a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b32e:	4798      	blx	r3
 800b330:	3501      	adds	r5, #1
 800b332:	e7f2      	b.n	800b31a <__libc_init_array+0x1e>
 800b334:	0800c5fc 	.word	0x0800c5fc
 800b338:	0800c5fc 	.word	0x0800c5fc
 800b33c:	0800c5fc 	.word	0x0800c5fc
 800b340:	0800c600 	.word	0x0800c600

0800b344 <memcpy>:
 800b344:	b510      	push	{r4, lr}
 800b346:	1e43      	subs	r3, r0, #1
 800b348:	440a      	add	r2, r1
 800b34a:	4291      	cmp	r1, r2
 800b34c:	d100      	bne.n	800b350 <memcpy+0xc>
 800b34e:	bd10      	pop	{r4, pc}
 800b350:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b354:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b358:	e7f7      	b.n	800b34a <memcpy+0x6>

0800b35a <memset>:
 800b35a:	4402      	add	r2, r0
 800b35c:	4603      	mov	r3, r0
 800b35e:	4293      	cmp	r3, r2
 800b360:	d100      	bne.n	800b364 <memset+0xa>
 800b362:	4770      	bx	lr
 800b364:	f803 1b01 	strb.w	r1, [r3], #1
 800b368:	e7f9      	b.n	800b35e <memset+0x4>
	...

0800b36c <_init>:
 800b36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36e:	bf00      	nop
 800b370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b372:	bc08      	pop	{r3}
 800b374:	469e      	mov	lr, r3
 800b376:	4770      	bx	lr

0800b378 <_fini>:
 800b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37a:	bf00      	nop
 800b37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b37e:	bc08      	pop	{r3}
 800b380:	469e      	mov	lr, r3
 800b382:	4770      	bx	lr
