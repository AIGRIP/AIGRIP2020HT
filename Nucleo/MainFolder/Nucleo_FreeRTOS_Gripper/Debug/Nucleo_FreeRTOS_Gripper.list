
Nucleo_FreeRTOS_Gripper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b424  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e0  0800b6c4  0800b6c4  0001b6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8a4  0800c8a4  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8a4  0800c8a4  0001c8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8ac  0800c8ac  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8ac  0800c8ac  0001c8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8b0  0800c8b0  0001c8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  0800c8b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000014  0800c8c8  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000074  0800c928  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000050e8  240000d4  0800c988  000200d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240051bc  0800c988  000251bc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037e94  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00004f69  00000000  00000000  00057f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000020f0  00000000  00000000  0005cf00  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001f18  00000000  00000000  0005eff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00005cf8  00000000  00000000  00060f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001baca  00000000  00000000  00066c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00178500  00000000  00000000  000826ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001fabca  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008e90  00000000  00000000  001fac48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000d4 	.word	0x240000d4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b6ac 	.word	0x0800b6ac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000d8 	.word	0x240000d8
 80002dc:	0800b6ac 	.word	0x0800b6ac

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f001 fa84 	bl	8001af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f854 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 fb20 	bl	8000c30 <MX_GPIO_Init>
  MX_ETH_Init();
 80005f0:	f000 f91a 	bl	8000828 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 fa9e 	bl	8000b34 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 fae8 	bl	8000bcc <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 80005fc:	f000 f9a6 	bl	800094c <MX_SPI4_Init>
  MX_UART7_Init();
 8000600:	f000 f9fc 	bl	80009fc <MX_UART7_Init>
  MX_USART2_UART_Init();
 8000604:	f000 fa48 	bl	8000a98 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000608:	f000 f960 	bl	80008cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2110      	movs	r1, #16
 8000610:	4813      	ldr	r0, [pc, #76]	; (8000660 <main+0x80>)
 8000612:	f002 f9b1 	bl	8002978 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000616:	f008 fa9d 	bl	8008b54 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ControlTask */
  ControlTaskHandle = osThreadNew(StartControlTask, NULL, &ControlTask_attributes);
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <main+0x84>)
 800061c:	2100      	movs	r1, #0
 800061e:	4812      	ldr	r0, [pc, #72]	; (8000668 <main+0x88>)
 8000620:	f008 fb2a 	bl	8008c78 <osThreadNew>
 8000624:	4602      	mov	r2, r0
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <main+0x8c>)
 8000628:	601a      	str	r2, [r3, #0]

  /* creation of CommBoard */
  CommBoardHandle = osThreadNew(StartCommBoard, NULL, &CommBoard_attributes);
 800062a:	4a11      	ldr	r2, [pc, #68]	; (8000670 <main+0x90>)
 800062c:	2100      	movs	r1, #0
 800062e:	4811      	ldr	r0, [pc, #68]	; (8000674 <main+0x94>)
 8000630:	f008 fb22 	bl	8008c78 <osThreadNew>
 8000634:	4602      	mov	r2, r0
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <main+0x98>)
 8000638:	601a      	str	r2, [r3, #0]

  /* creation of SensorRead */
  SensorReadHandle = osThreadNew(StartSensorRead, NULL, &SensorRead_attributes);
 800063a:	4a10      	ldr	r2, [pc, #64]	; (800067c <main+0x9c>)
 800063c:	2100      	movs	r1, #0
 800063e:	4810      	ldr	r0, [pc, #64]	; (8000680 <main+0xa0>)
 8000640:	f008 fb1a 	bl	8008c78 <osThreadNew>
 8000644:	4602      	mov	r2, r0
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <main+0xa4>)
 8000648:	601a      	str	r2, [r3, #0]

  /* creation of Safety */
  SafetyHandle = osThreadNew(StartSafety, NULL, &Safety_attributes);
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <main+0xa8>)
 800064c:	2100      	movs	r1, #0
 800064e:	480f      	ldr	r0, [pc, #60]	; (800068c <main+0xac>)
 8000650:	f008 fb12 	bl	8008c78 <osThreadNew>
 8000654:	4602      	mov	r2, r0
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <main+0xb0>)
 8000658:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800065a:	f008 faaf 	bl	8008bbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	e7fe      	b.n	800065e <main+0x7e>
 8000660:	58021000 	.word	0x58021000
 8000664:	0800b7ec 	.word	0x0800b7ec
 8000668:	08001261 	.word	0x08001261
 800066c:	24005084 	.word	0x24005084
 8000670:	0800b810 	.word	0x0800b810
 8000674:	08001281 	.word	0x08001281
 8000678:	24004f6c 	.word	0x24004f6c
 800067c:	0800b834 	.word	0x0800b834
 8000680:	080012fd 	.word	0x080012fd
 8000684:	24004f68 	.word	0x24004f68
 8000688:	0800b858 	.word	0x0800b858
 800068c:	0800131d 	.word	0x0800131d
 8000690:	24004f64 	.word	0x24004f64

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b0cc      	sub	sp, #304	; 0x130
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800069e:	224c      	movs	r2, #76	; 0x4c
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f00a fff9 	bl	800b69a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006ac:	2220      	movs	r2, #32
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f00a fff2 	bl	800b69a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	4618      	mov	r0, r3
 80006bc:	23bc      	movs	r3, #188	; 0xbc
 80006be:	461a      	mov	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f00a ffea 	bl	800b69a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006c6:	2002      	movs	r0, #2
 80006c8:	f002 ffb4 	bl	8003634 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	4b52      	ldr	r3, [pc, #328]	; (800081c <SystemClock_Config+0x188>)
 80006d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d6:	4a51      	ldr	r2, [pc, #324]	; (800081c <SystemClock_Config+0x188>)
 80006d8:	f023 0301 	bic.w	r3, r3, #1
 80006dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006de:	4b4f      	ldr	r3, [pc, #316]	; (800081c <SystemClock_Config+0x188>)
 80006e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e2:	f003 0201 	and.w	r2, r3, #1
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	4b4d      	ldr	r3, [pc, #308]	; (8000820 <SystemClock_Config+0x18c>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f2:	4a4b      	ldr	r2, [pc, #300]	; (8000820 <SystemClock_Config+0x18c>)
 80006f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f8:	6193      	str	r3, [r2, #24]
 80006fa:	4b49      	ldr	r3, [pc, #292]	; (8000820 <SystemClock_Config+0x18c>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800070a:	bf00      	nop
 800070c:	4b44      	ldr	r3, [pc, #272]	; (8000820 <SystemClock_Config+0x18c>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000718:	d1f8      	bne.n	800070c <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800071a:	2303      	movs	r3, #3
 800071c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000720:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000724:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000728:	2301      	movs	r3, #1
 800072a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072e:	2340      	movs	r3, #64	; 0x40
 8000730:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073a:	2302      	movs	r3, #2
 800073c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000746:	2318      	movs	r3, #24
 8000748:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000752:	2304      	movs	r3, #4
 8000754:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800075e:	230c      	movs	r3, #12
 8000760:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000764:	2300      	movs	r3, #0
 8000766:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000774:	4618      	mov	r0, r3
 8000776:	f002 ffa7 	bl	80036c8 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000780:	f000 fdee 	bl	8001360 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	233f      	movs	r3, #63	; 0x3f
 8000786:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800078a:	2300      	movs	r3, #0
 800078c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f003 fb94 	bl	8003ee8 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x136>
  {
    Error_Handler();
 80007c6:	f000 fdcb 	bl	8001360 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	4a15      	ldr	r2, [pc, #84]	; (8000824 <SystemClock_Config+0x190>)
 80007d0:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	2200      	movs	r2, #0
 80007d8:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	2200      	movs	r2, #0
 80007e0:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	2200      	movs	r2, #0
 80007e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	4618      	mov	r0, r3
 80007fe:	f003 ff39 	bl	8004674 <HAL_RCCEx_PeriphCLKConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x178>
  {
    Error_Handler();
 8000808:	f000 fdaa 	bl	8001360 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800080c:	f002 ff4c 	bl	80036a8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000810:	bf00      	nop
 8000812:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	58000400 	.word	0x58000400
 8000820:	58024800 	.word	0x58024800
 8000824:	0004200a 	.word	0x0004200a

08000828 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800082c:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <MX_ETH_Init+0x90>)
 800082e:	4a23      	ldr	r2, [pc, #140]	; (80008bc <MX_ETH_Init+0x94>)
 8000830:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_ETH_Init+0x90>)
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800083a:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_ETH_Init+0x90>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	3301      	adds	r3, #1
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_ETH_Init+0x90>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	3302      	adds	r3, #2
 800084a:	22e1      	movs	r2, #225	; 0xe1
 800084c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_ETH_Init+0x90>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	3303      	adds	r3, #3
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_ETH_Init+0x90>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	3304      	adds	r3, #4
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_ETH_Init+0x90>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	3305      	adds	r3, #5
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_ETH_Init+0x90>)
 800086e:	2201      	movs	r2, #1
 8000870:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_ETH_Init+0x90>)
 8000874:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <MX_ETH_Init+0x98>)
 8000876:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_ETH_Init+0x90>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <MX_ETH_Init+0x9c>)
 800087c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_ETH_Init+0x90>)
 8000880:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000884:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000886:	480c      	ldr	r0, [pc, #48]	; (80008b8 <MX_ETH_Init+0x90>)
 8000888:	f001 fab0 	bl	8001dec <HAL_ETH_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000892:	f000 fd65 	bl	8001360 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000896:	2234      	movs	r2, #52	; 0x34
 8000898:	2100      	movs	r1, #0
 800089a:	480b      	ldr	r0, [pc, #44]	; (80008c8 <MX_ETH_Init+0xa0>)
 800089c:	f00a fefd 	bl	800b69a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_ETH_Init+0xa0>)
 80008a2:	2221      	movs	r2, #33	; 0x21
 80008a4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_ETH_Init+0xa0>)
 80008a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008ac:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_ETH_Init+0xa0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	24005088 	.word	0x24005088
 80008bc:	40028000 	.word	0x40028000
 80008c0:	24000074 	.word	0x24000074
 80008c4:	24000014 	.word	0x24000014
 80008c8:	240050f8 	.word	0x240050f8

080008cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_I2C1_Init+0x74>)
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <MX_I2C1_Init+0x78>)
 80008d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_I2C1_Init+0x74>)
 80008d8:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <MX_I2C1_Init+0x7c>)
 80008da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 10;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_I2C1_Init+0x74>)
 80008de:	220a      	movs	r2, #10
 80008e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_I2C1_Init+0x74>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_I2C1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_I2C1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_I2C1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_I2C1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_I2C1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000906:	480e      	ldr	r0, [pc, #56]	; (8000940 <MX_I2C1_Init+0x74>)
 8000908:	f002 f86a 	bl	80029e0 <HAL_I2C_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000912:	f000 fd25 	bl	8001360 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4809      	ldr	r0, [pc, #36]	; (8000940 <MX_I2C1_Init+0x74>)
 800091a:	f002 fcab 	bl	8003274 <HAL_I2CEx_ConfigAnalogFilter>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000924:	f000 fd1c 	bl	8001360 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_I2C1_Init+0x74>)
 800092c:	f002 fced 	bl	800330a <HAL_I2CEx_ConfigDigitalFilter>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000936:	f000 fd13 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	24004b10 	.word	0x24004b10
 8000944:	40005400 	.word	0x40005400
 8000948:	00602173 	.word	0x00602173

0800094c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <MX_SPI4_Init+0xa8>)
 8000952:	4a29      	ldr	r2, [pc, #164]	; (80009f8 <MX_SPI4_Init+0xac>)
 8000954:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000956:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <MX_SPI4_Init+0xa8>)
 8000958:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800095c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800095e:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <MX_SPI4_Init+0xa8>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000964:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <MX_SPI4_Init+0xa8>)
 8000966:	2207      	movs	r2, #7
 8000968:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800096a:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <MX_SPI4_Init+0xa8>)
 800096c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000970:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000972:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <MX_SPI4_Init+0xa8>)
 8000974:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000978:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800097a:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <MX_SPI4_Init+0xa8>)
 800097c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000980:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_SPI4_Init+0xa8>)
 8000984:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000988:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_SPI4_Init+0xa8>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_SPI4_Init+0xa8>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_SPI4_Init+0xa8>)
 8000998:	2200      	movs	r2, #0
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_SPI4_Init+0xa8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_SPI4_Init+0xa8>)
 80009e0:	f005 f948 	bl	8005c74 <HAL_SPI_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80009ea:	f000 fcb9 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	24004f70 	.word	0x24004f70
 80009f8:	40013400 	.word	0x40013400

080009fc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a02:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <MX_UART7_Init+0x94>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1000000;
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a08:	4a22      	ldr	r2, [pc, #136]	; (8000a94 <MX_UART7_Init+0x98>)
 8000a0a:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000a12:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a20:	220c      	movs	r2, #12
 8000a22:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a24:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart7) != HAL_OK)
 8000a42:	4812      	ldr	r0, [pc, #72]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a44:	f006 fcae 	bl	80073a4 <HAL_HalfDuplex_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 8000a4e:	f000 fc87 	bl	8001360 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a56:	f007 fce6 	bl	8008426 <HAL_UARTEx_SetTxFifoThreshold>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 8000a60:	f000 fc7e 	bl	8001360 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	4809      	ldr	r0, [pc, #36]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a68:	f007 fd1b 	bl	80084a2 <HAL_UARTEx_SetRxFifoThreshold>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 8000a72:	f000 fc75 	bl	8001360 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_UART7_Init+0x90>)
 8000a78:	f007 fc9c 	bl	80083b4 <HAL_UARTEx_DisableFifoMode>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 8000a82:	f000 fc6d 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	240049f8 	.word	0x240049f8
 8000a90:	40007800 	.word	0x40007800
 8000a94:	000f4240 	.word	0x000f4240

08000a98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a9c:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000a9e:	4a23      	ldr	r2, [pc, #140]	; (8000b2c <MX_USART2_UART_Init+0x94>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000aa4:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <MX_USART2_UART_Init+0x98>)
 8000aa6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000abc:	220c      	movs	r2, #12
 8000abe:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000ade:	4812      	ldr	r0, [pc, #72]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ae0:	f006 fc60 	bl	80073a4 <HAL_HalfDuplex_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000aea:	f000 fc39 	bl	8001360 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aee:	2100      	movs	r1, #0
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000af2:	f007 fc98 	bl	8008426 <HAL_UARTEx_SetTxFifoThreshold>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8000afc:	f000 fc30 	bl	8001360 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	4809      	ldr	r0, [pc, #36]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000b04:	f007 fccd 	bl	80084a2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8000b0e:	f000 fc27 	bl	8001360 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_USART2_UART_Init+0x90>)
 8000b14:	f007 fc4e 	bl	80083b4 <HAL_UARTEx_DisableFifoMode>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000b1e:	f000 fc1f 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	24004ff8 	.word	0x24004ff8
 8000b2c:	40004400 	.word	0x40004400
 8000b30:	000f4240 	.word	0x000f4240

08000b34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b3a:	4a23      	ldr	r2, [pc, #140]	; (8000bc8 <MX_USART3_UART_Init+0x94>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b7c:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b7e:	f006 fbc1 	bl	8007304 <HAL_UART_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b88:	f000 fbea 	bl	8001360 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b90:	f007 fc49 	bl	8008426 <HAL_UARTEx_SetTxFifoThreshold>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b9a:	f000 fbe1 	bl	8001360 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000ba2:	f007 fc7e 	bl	80084a2 <HAL_UARTEx_SetRxFifoThreshold>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bac:	f000 fbd8 	bl	8001360 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000bb2:	f007 fbff 	bl	80083b4 <HAL_UARTEx_DisableFifoMode>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bbc:	f000 fbd0 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	24004a84 	.word	0x24004a84
 8000bc8:	40004800 	.word	0x40004800

08000bcc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd2:	4a16      	ldr	r2, [pc, #88]	; (8000c2c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd8:	2209      	movs	r2, #9
 8000bda:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bde:	2202      	movs	r2, #2
 8000be0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c14:	f002 fbc5 	bl	80033a2 <HAL_PCD_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c1e:	f000 fb9f 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	24004b5c 	.word	0x24004b5c
 8000c2c:	40080000 	.word	0x40080000

08000c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08e      	sub	sp, #56	; 0x38
 8000c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c46:	4b69      	ldr	r3, [pc, #420]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	4a67      	ldr	r2, [pc, #412]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c56:	4b65      	ldr	r3, [pc, #404]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	f003 0310 	and.w	r3, r3, #16
 8000c60:	623b      	str	r3, [r7, #32]
 8000c62:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c64:	4b61      	ldr	r3, [pc, #388]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6a:	4a60      	ldr	r2, [pc, #384]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c74:	4b5d      	ldr	r3, [pc, #372]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	61fb      	str	r3, [r7, #28]
 8000c80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c82:	4b5a      	ldr	r3, [pc, #360]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	4a58      	ldr	r2, [pc, #352]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c8a:	f043 0320 	orr.w	r3, r3, #32
 8000c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c92:	4b56      	ldr	r3, [pc, #344]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c98:	f003 0320 	and.w	r3, r3, #32
 8000c9c:	61bb      	str	r3, [r7, #24]
 8000c9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca0:	4b52      	ldr	r3, [pc, #328]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca6:	4a51      	ldr	r2, [pc, #324]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb0:	4b4e      	ldr	r3, [pc, #312]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b4b      	ldr	r3, [pc, #300]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc4:	4a49      	ldr	r2, [pc, #292]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cce:	4b47      	ldr	r3, [pc, #284]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b43      	ldr	r3, [pc, #268]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce2:	4a42      	ldr	r2, [pc, #264]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cec:	4b3f      	ldr	r3, [pc, #252]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfa:	4b3c      	ldr	r3, [pc, #240]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d00:	4a3a      	ldr	r2, [pc, #232]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0a:	4b38      	ldr	r3, [pc, #224]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d18:	4b34      	ldr	r3, [pc, #208]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1e:	4a33      	ldr	r2, [pc, #204]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d28:	4b30      	ldr	r3, [pc, #192]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2112      	movs	r1, #18
 8000d3a:	482d      	ldr	r0, [pc, #180]	; (8000df0 <MX_GPIO_Init+0x1c0>)
 8000d3c:	f001 fe1c 	bl	8002978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d46:	482b      	ldr	r0, [pc, #172]	; (8000df4 <MX_GPIO_Init+0x1c4>)
 8000d48:	f001 fe16 	bl	8002978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d52:	4829      	ldr	r0, [pc, #164]	; (8000df8 <MX_GPIO_Init+0x1c8>)
 8000d54:	f001 fe10 	bl	8002978 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000d58:	2312      	movs	r3, #18
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4820      	ldr	r0, [pc, #128]	; (8000df0 <MX_GPIO_Init+0x1c0>)
 8000d70:	f001 fc52 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	481c      	ldr	r0, [pc, #112]	; (8000dfc <MX_GPIO_Init+0x1cc>)
 8000d8a:	f001 fc45 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin;
 8000d8e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da4:	4619      	mov	r1, r3
 8000da6:	4813      	ldr	r0, [pc, #76]	; (8000df4 <MX_GPIO_Init+0x1c4>)
 8000da8:	f001 fc36 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <MX_GPIO_Init+0x1c8>)
 8000dc6:	f001 fc27 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_GPIO_Init+0x1d0>)
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4809      	ldr	r0, [pc, #36]	; (8000e04 <MX_GPIO_Init+0x1d4>)
 8000dde:	f001 fc1b 	bl	8002618 <HAL_GPIO_Init>

}
 8000de2:	bf00      	nop
 8000de4:	3738      	adds	r7, #56	; 0x38
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	58024400 	.word	0x58024400
 8000df0:	58021000 	.word	0x58021000
 8000df4:	58020400 	.word	0x58020400
 8000df8:	58020c00 	.word	0x58020c00
 8000dfc:	58020800 	.word	0x58020800
 8000e00:	11110000 	.word	0x11110000
 8000e04:	58021800 	.word	0x58021800

08000e08 <SPI_E_ReadReg>:

/* USER CODE BEGIN 4 */

void SPI_E_ReadReg(uint8_t *REG_ADDR, uint8_t *readByte )
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  char READ_REG_ADDR;
  READ_REG_ADDR = *REG_ADDR & 0x7F;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2110      	movs	r1, #16
 8000e22:	480f      	ldr	r0, [pc, #60]	; (8000e60 <SPI_E_ReadReg+0x58>)
 8000e24:	f001 fda8 	bl	8002978 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi4,(uint8_t *) &READ_REG_ADDR, 1, 100);
 8000e28:	f107 010f 	add.w	r1, r7, #15
 8000e2c:	2364      	movs	r3, #100	; 0x64
 8000e2e:	2201      	movs	r2, #1
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <SPI_E_ReadReg+0x5c>)
 8000e32:	f005 f817 	bl	8005e64 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi4,(uint8_t *) readByte, 1, 100);
 8000e36:	2364      	movs	r3, #100	; 0x64
 8000e38:	2201      	movs	r2, #1
 8000e3a:	6839      	ldr	r1, [r7, #0]
 8000e3c:	4809      	ldr	r0, [pc, #36]	; (8000e64 <SPI_E_ReadReg+0x5c>)
 8000e3e:	f005 fa03 	bl	8006248 <HAL_SPI_Receive>

  //HAL_Delay(5);
  osDelay(1);
 8000e42:	2001      	movs	r0, #1
 8000e44:	f007 ffbe 	bl	8008dc4 <osDelay>

  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <SPI_E_ReadReg+0x58>)
 8000e4e:	f001 fd93 	bl	8002978 <HAL_GPIO_WritePin>

  osDelay(1);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f007 ffb6 	bl	8008dc4 <osDelay>

}
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58021000 	.word	0x58021000
 8000e64:	24004f70 	.word	0x24004f70

08000e68 <SPI_E_WriteReg>:

void SPI_E_WriteReg(uint8_t *REG_ADDR, uint8_t *sendByte )
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  char READ_REG_ADDR;
  READ_REG_ADDR = *REG_ADDR | 0x80;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2110      	movs	r1, #16
 8000e82:	480f      	ldr	r0, [pc, #60]	; (8000ec0 <SPI_E_WriteReg+0x58>)
 8000e84:	f001 fd78 	bl	8002978 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi4,(uint8_t *) &READ_REG_ADDR, 1, 100);
 8000e88:	f107 010f 	add.w	r1, r7, #15
 8000e8c:	2364      	movs	r3, #100	; 0x64
 8000e8e:	2201      	movs	r2, #1
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <SPI_E_WriteReg+0x5c>)
 8000e92:	f004 ffe7 	bl	8005e64 <HAL_SPI_Transmit>

  HAL_SPI_Transmit(&hspi4,(uint8_t *) sendByte, 1, 100);
 8000e96:	2364      	movs	r3, #100	; 0x64
 8000e98:	2201      	movs	r2, #1
 8000e9a:	6839      	ldr	r1, [r7, #0]
 8000e9c:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <SPI_E_WriteReg+0x5c>)
 8000e9e:	f004 ffe1 	bl	8005e64 <HAL_SPI_Transmit>

  //HAL_Delay(5);
  osDelay(1);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f007 ff8e 	bl	8008dc4 <osDelay>

  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <SPI_E_WriteReg+0x58>)
 8000eae:	f001 fd63 	bl	8002978 <HAL_GPIO_WritePin>

  osDelay(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f007 ff86 	bl	8008dc4 <osDelay>

}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	58021000 	.word	0x58021000
 8000ec4:	24004f70 	.word	0x24004f70

08000ec8 <startUpMouse>:


void startUpMouse()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0

  // Memory registers to read and write.
  uint8_t startUpRegAddr[] = {0x3A,0x02,0x03,0x04,0x05,0x06,0x10,0x13,0x13,0x62,0x2A,0x10};
 8000ece:	4a60      	ldr	r2, [pc, #384]	; (8001050 <startUpMouse+0x188>)
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ed6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t sendByte;
  uint8_t readByte;


  // Ensure reset
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2110      	movs	r1, #16
 8000ede:	485d      	ldr	r0, [pc, #372]	; (8001054 <startUpMouse+0x18c>)
 8000ee0:	f001 fd4a 	bl	8002978 <HAL_GPIO_WritePin>
  osDelay(1);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f007 ff6d 	bl	8008dc4 <osDelay>
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2110      	movs	r1, #16
 8000eee:	4859      	ldr	r0, [pc, #356]	; (8001054 <startUpMouse+0x18c>)
 8000ef0:	f001 fd42 	bl	8002978 <HAL_GPIO_WritePin>
  osDelay(1);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f007 ff65 	bl	8008dc4 <osDelay>
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	2110      	movs	r1, #16
 8000efe:	4855      	ldr	r0, [pc, #340]	; (8001054 <startUpMouse+0x18c>)
 8000f00:	f001 fd3a 	bl	8002978 <HAL_GPIO_WritePin>
  osDelay(1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f007 ff5d 	bl	8008dc4 <osDelay>

  // Start up register
  sendByte = 0x5A;
 8000f0a:	235a      	movs	r3, #90	; 0x5a
 8000f0c:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[0], &sendByte );
 8000f0e:	1dfa      	adds	r2, r7, #7
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ffa6 	bl	8000e68 <SPI_E_WriteReg>

  // Must wait 50 milliseconds.
  osDelay(50);
 8000f1c:	2032      	movs	r0, #50	; 0x32
 8000f1e:	f007 ff51 	bl	8008dc4 <osDelay>
  // Read and discard data.
  SPI_E_ReadReg(&startUpRegAddr[1], &readByte );
 8000f22:	1dba      	adds	r2, r7, #6
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	3301      	adds	r3, #1
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff6b 	bl	8000e08 <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[2], &readByte );
 8000f32:	1dba      	adds	r2, r7, #6
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	3302      	adds	r3, #2
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff63 	bl	8000e08 <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[3], &readByte );
 8000f42:	1dba      	adds	r2, r7, #6
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	3303      	adds	r3, #3
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff5b 	bl	8000e08 <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[4], &readByte );
 8000f52:	1dba      	adds	r2, r7, #6
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	3304      	adds	r3, #4
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff53 	bl	8000e08 <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[5], &readByte );
 8000f62:	1dba      	adds	r2, r7, #6
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	3305      	adds	r3, #5
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff4b 	bl	8000e08 <SPI_E_ReadReg>

  // Upload SROM data to mouse sensor.

  // Write 0 to Rest_En bit of Config2 register to disable Rest mode.
  sendByte = 0x00;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[6], &sendByte );
 8000f76:	1dfa      	adds	r2, r7, #7
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	3306      	adds	r3, #6
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff71 	bl	8000e68 <SPI_E_WriteReg>

  // Write 0x1d to SROM_Enable register for initializing.
  sendByte = 0x1D;
 8000f86:	231d      	movs	r3, #29
 8000f88:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[7], &sendByte );
 8000f8a:	1dfa      	adds	r2, r7, #7
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	3307      	adds	r3, #7
 8000f92:	4611      	mov	r1, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff67 	bl	8000e68 <SPI_E_WriteReg>

  // Wait 10 ms
  osDelay(10);
 8000f9a:	200a      	movs	r0, #10
 8000f9c:	f007 ff12 	bl	8008dc4 <osDelay>

  // Write 0x18 to SROM_Enable register again to start SROM download.
  sendByte = 0x18;
 8000fa0:	2318      	movs	r3, #24
 8000fa2:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[8], &sendByte );
 8000fa4:	1dfa      	adds	r2, r7, #7
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	3308      	adds	r3, #8
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff5a 	bl	8000e68 <SPI_E_WriteReg>


  // Send the SROM data
  // Select Slave during the whole transfer.
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	4826      	ldr	r0, [pc, #152]	; (8001054 <startUpMouse+0x18c>)
 8000fba:	f001 fcdd 	bl	8002978 <HAL_GPIO_WritePin>
  // Select SROM_Load_Burst register
  HAL_SPI_Transmit(&hspi4, &startUpRegAddr[9], 1, 100);
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	f103 0109 	add.w	r1, r3, #9
 8000fc6:	2364      	movs	r3, #100	; 0x64
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4823      	ldr	r0, [pc, #140]	; (8001058 <startUpMouse+0x190>)
 8000fcc:	f004 ff4a 	bl	8005e64 <HAL_SPI_Transmit>


  for(int i=0;i<firmware_length;i++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	e00d      	b.n	8000ff2 <startUpMouse+0x12a>
  {
	  HAL_SPI_Transmit(&hspi4,(uint8_t *) &firmware_data[i], 1, 100);
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	4a20      	ldr	r2, [pc, #128]	; (800105c <startUpMouse+0x194>)
 8000fda:	1899      	adds	r1, r3, r2
 8000fdc:	2364      	movs	r3, #100	; 0x64
 8000fde:	2201      	movs	r2, #1
 8000fe0:	481d      	ldr	r0, [pc, #116]	; (8001058 <startUpMouse+0x190>)
 8000fe2:	f004 ff3f 	bl	8005e64 <HAL_SPI_Transmit>
	  osDelay(1);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f007 feec 	bl	8008dc4 <osDelay>
  for(int i=0;i<firmware_length;i++)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	f640 73fe 	movw	r3, #4094	; 0xffe
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	dbeb      	blt.n	8000fd6 <startUpMouse+0x10e>
  }

  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2110      	movs	r1, #16
 8001002:	4814      	ldr	r0, [pc, #80]	; (8001054 <startUpMouse+0x18c>)
 8001004:	f001 fcb8 	bl	8002978 <HAL_GPIO_WritePin>

  osDelay(1);
 8001008:	2001      	movs	r0, #1
 800100a:	f007 fedb 	bl	8008dc4 <osDelay>

  // Read the SROM_ID (0x2A) register to verify the ID before any other register reads or writes.
  SPI_E_ReadReg(&startUpRegAddr[10], &readByte );
 800100e:	1dba      	adds	r2, r7, #6
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	330a      	adds	r3, #10
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fef5 	bl	8000e08 <SPI_E_ReadReg>

  // Write 0x00 to config2 register for wired mouse design.
  sendByte = 0x00;
 800101e:	2300      	movs	r3, #0
 8001020:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[11], &sendByte );
 8001022:	1dfa      	adds	r2, r7, #7
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	330b      	adds	r3, #11
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff1b 	bl	8000e68 <SPI_E_WriteReg>

  // Set Config1
  sendByte = 0x77;
 8001032:	2377      	movs	r3, #119	; 0x77
 8001034:	71fb      	strb	r3, [r7, #7]
  uint8_t conf1Addr = 0x0F;
 8001036:	230f      	movs	r3, #15
 8001038:	717b      	strb	r3, [r7, #5]
  SPI_E_WriteReg(&conf1Addr, &sendByte );
 800103a:	1dfa      	adds	r2, r7, #7
 800103c:	1d7b      	adds	r3, r7, #5
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff11 	bl	8000e68 <SPI_E_WriteReg>


}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	0800b6f0 	.word	0x0800b6f0
 8001054:	58021000 	.word	0x58021000
 8001058:	24004f70 	.word	0x24004f70
 800105c:	0800b87c 	.word	0x0800b87c

08001060 <readMouseSensor>:


void readMouseSensor(sensValue *sensorPacket)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

	uint8_t readByte = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	757b      	strb	r3, [r7, #21]
	uint8_t freeze = 0x01;
 800106c:	2301      	movs	r3, #1
 800106e:	753b      	strb	r3, [r7, #20]

	uint8_t motionADR[] = {0x02,0x03,0x04,0x05,0x06};
 8001070:	4a30      	ldr	r2, [pc, #192]	; (8001134 <readMouseSensor+0xd4>)
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	e892 0003 	ldmia.w	r2, {r0, r1}
 800107a:	6018      	str	r0, [r3, #0]
 800107c:	3304      	adds	r3, #4
 800107e:	7019      	strb	r1, [r3, #0]
	uint8_t magnX_L = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	75fb      	strb	r3, [r7, #23]
	uint8_t magnY_L = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	75bb      	strb	r3, [r7, #22]
	// Write the motion address to freeze the current value of delta X and Y.
	SPI_E_WriteReg(&motionADR[0], &freeze );
 8001088:	f107 0214 	add.w	r2, r7, #20
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fee8 	bl	8000e68 <SPI_E_WriteReg>
	// Check if any motion has occurred.
	SPI_E_ReadReg(&motionADR[0], &readByte );
 8001098:	f107 0215 	add.w	r2, r7, #21
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff feb0 	bl	8000e08 <SPI_E_ReadReg>
	// Save the motion bit.
	sensorPacket->mouseMotion = 0 < (0x80 & readByte);
 80010a8:	7d7b      	ldrb	r3, [r7, #21]
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	09db      	lsrs	r3, r3, #7
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	701a      	strb	r2, [r3, #0]


	//Read the delta X registers.
	SPI_E_ReadReg(&motionADR[1], &readByte );
 80010b6:	f107 0215 	add.w	r2, r7, #21
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	3301      	adds	r3, #1
 80010c0:	4611      	mov	r1, r2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fea0 	bl	8000e08 <SPI_E_ReadReg>
	magnX_L = (uint8_t) readByte;
 80010c8:	7d7b      	ldrb	r3, [r7, #21]
 80010ca:	75fb      	strb	r3, [r7, #23]
	SPI_E_ReadReg(&motionADR[2], &readByte );
 80010cc:	f107 0215 	add.w	r2, r7, #21
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	3302      	adds	r3, #2
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fe95 	bl	8000e08 <SPI_E_ReadReg>

	// Merge the lower and higher bit values of the delta X registers.
	sensorPacket->mouse_D_X = magnX_L | (readByte<<8);
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	7d7b      	ldrb	r3, [r7, #21]
 80010e4:	021b      	lsls	r3, r3, #8
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	805a      	strh	r2, [r3, #2]

	//Read the delta X registers.
	SPI_E_ReadReg(&motionADR[3], &readByte );
 80010f0:	f107 0215 	add.w	r2, r7, #21
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	3303      	adds	r3, #3
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fe83 	bl	8000e08 <SPI_E_ReadReg>
	magnY_L = (uint8_t) readByte;
 8001102:	7d7b      	ldrb	r3, [r7, #21]
 8001104:	75bb      	strb	r3, [r7, #22]
	SPI_E_ReadReg(&motionADR[4], &readByte );
 8001106:	f107 0215 	add.w	r2, r7, #21
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	3304      	adds	r3, #4
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fe78 	bl	8000e08 <SPI_E_ReadReg>

	// Merge the lower and higher bit values of the delta Y registers.
	sensorPacket->mouse_D_Y = magnY_L | (readByte<<8);
 8001118:	7dbb      	ldrb	r3, [r7, #22]
 800111a:	b21a      	sxth	r2, r3
 800111c:	7d7b      	ldrb	r3, [r7, #21]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21a      	sxth	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	809a      	strh	r2, [r3, #4]

}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	0800b6fc 	.word	0x0800b6fc

08001138 <I2CCommandHandle>:
}



void I2CCommandHandle( )
{
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b0a2      	sub	sp, #136	; 0x88
 800113c:	af00      	add	r7, sp, #0

	const char str0[] = "Undefined command.\n\r";
 800113e:	4b40      	ldr	r3, [pc, #256]	; (8001240 <I2CCommandHandle+0x108>)
 8001140:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001144:	461d      	mov	r5, r3
 8001146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800114e:	6020      	str	r0, [r4, #0]
 8001150:	3404      	adds	r4, #4
 8001152:	7021      	strb	r1, [r4, #0]
	const char str1[] = "Start the gripper.\n\r";
 8001154:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <I2CCommandHandle+0x10c>)
 8001156:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800115a:	461d      	mov	r5, r3
 800115c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800115e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001160:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001164:	6020      	str	r0, [r4, #0]
 8001166:	3404      	adds	r4, #4
 8001168:	7021      	strb	r1, [r4, #0]
	const char str2[] = "Stop the gripper.\n\r";
 800116a:	4b37      	ldr	r3, [pc, #220]	; (8001248 <I2CCommandHandle+0x110>)
 800116c:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001170:	461d      	mov	r5, r3
 8001172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001176:	682b      	ldr	r3, [r5, #0]
 8001178:	6023      	str	r3, [r4, #0]
	const char str3[] = "Release object.\n\r";
 800117a:	4b34      	ldr	r3, [pc, #208]	; (800124c <I2CCommandHandle+0x114>)
 800117c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001180:	461d      	mov	r5, r3
 8001182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001186:	682b      	ldr	r3, [r5, #0]
 8001188:	8023      	strh	r3, [r4, #0]
	const char str4[] = "Pause the gripper.\n\r";
 800118a:	4b31      	ldr	r3, [pc, #196]	; (8001250 <I2CCommandHandle+0x118>)
 800118c:	f107 0418 	add.w	r4, r7, #24
 8001190:	461d      	mov	r5, r3
 8001192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001196:	e895 0003 	ldmia.w	r5, {r0, r1}
 800119a:	6020      	str	r0, [r4, #0]
 800119c:	3404      	adds	r4, #4
 800119e:	7021      	strb	r1, [r4, #0]
	const char str5[] = "Set motor angle.\n\r";
 80011a0:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <I2CCommandHandle+0x11c>)
 80011a2:	1d3c      	adds	r4, r7, #4
 80011a4:	461d      	mov	r5, r3
 80011a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011aa:	682b      	ldr	r3, [r5, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	8022      	strh	r2, [r4, #0]
 80011b0:	3402      	adds	r4, #2
 80011b2:	0c1b      	lsrs	r3, r3, #16
 80011b4:	7023      	strb	r3, [r4, #0]

	messageStructHeaderFromNano messageHeaderFromNano;

	HAL_I2C_Slave_Receive(&hi2c1, (uint8_t *) &messageHeaderFromNano, sizeof(messageStructHeaderFromNano), 100);
 80011b6:	4639      	mov	r1, r7
 80011b8:	2364      	movs	r3, #100	; 0x64
 80011ba:	2202      	movs	r2, #2
 80011bc:	4826      	ldr	r0, [pc, #152]	; (8001258 <I2CCommandHandle+0x120>)
 80011be:	f001 fda8 	bl	8002d12 <HAL_I2C_Slave_Receive>


	switch(messageHeaderFromNano.frameType)
 80011c2:	783b      	ldrb	r3, [r7, #0]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d82e      	bhi.n	8001228 <I2CCommandHandle+0xf0>
 80011ca:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <I2CCommandHandle+0x98>)
 80011cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d0:	080011e5 	.word	0x080011e5
 80011d4:	080011f3 	.word	0x080011f3
 80011d8:	08001201 	.word	0x08001201
 80011dc:	0800120f 	.word	0x0800120f
 80011e0:	0800121d 	.word	0x0800121d
	{

		case 1:
			HAL_UART_Transmit(&huart3,(uint8_t *) str1, sizeof(str1), 100);
 80011e4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80011e8:	2364      	movs	r3, #100	; 0x64
 80011ea:	2215      	movs	r2, #21
 80011ec:	481b      	ldr	r0, [pc, #108]	; (800125c <I2CCommandHandle+0x124>)
 80011ee:	f006 f931 	bl	8007454 <HAL_UART_Transmit>
			// Should start the gripper

		case 2:
			HAL_UART_Transmit(&huart3,(uint8_t *) str2, sizeof(str2), 100);
 80011f2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80011f6:	2364      	movs	r3, #100	; 0x64
 80011f8:	2214      	movs	r2, #20
 80011fa:	4818      	ldr	r0, [pc, #96]	; (800125c <I2CCommandHandle+0x124>)
 80011fc:	f006 f92a 	bl	8007454 <HAL_UART_Transmit>
			// Should stop the gripper and set it to the standby mode.


		case 3:
			HAL_UART_Transmit(&huart3,(uint8_t *) str3, sizeof(str3), 100);
 8001200:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001204:	2364      	movs	r3, #100	; 0x64
 8001206:	2212      	movs	r2, #18
 8001208:	4814      	ldr	r0, [pc, #80]	; (800125c <I2CCommandHandle+0x124>)
 800120a:	f006 f923 	bl	8007454 <HAL_UART_Transmit>
			// Should set the gripper to release mode.

		case 4:
			HAL_UART_Transmit(&huart3,(uint8_t *) str4, sizeof(str4), 100);
 800120e:	f107 0118 	add.w	r1, r7, #24
 8001212:	2364      	movs	r3, #100	; 0x64
 8001214:	2215      	movs	r2, #21
 8001216:	4811      	ldr	r0, [pc, #68]	; (800125c <I2CCommandHandle+0x124>)
 8001218:	f006 f91c 	bl	8007454 <HAL_UART_Transmit>
			// Should pause the gripper in its current stage.

		case 5:
			HAL_UART_Transmit(&huart3,(uint8_t *) str5, sizeof(str5), 100);
 800121c:	1d39      	adds	r1, r7, #4
 800121e:	2364      	movs	r3, #100	; 0x64
 8001220:	2213      	movs	r2, #19
 8001222:	480e      	ldr	r0, [pc, #56]	; (800125c <I2CCommandHandle+0x124>)
 8001224:	f006 f916 	bl	8007454 <HAL_UART_Transmit>
			// Should handle recommended motor commands from the Nano.

		default:
			HAL_UART_Transmit(&huart3,(uint8_t *) str0, sizeof(str0), 100);
 8001228:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800122c:	2364      	movs	r3, #100	; 0x64
 800122e:	2215      	movs	r2, #21
 8001230:	480a      	ldr	r0, [pc, #40]	; (800125c <I2CCommandHandle+0x124>)
 8001232:	f006 f90f 	bl	8007454 <HAL_UART_Transmit>
			// Should Flush all I2C messages.
	}

}
 8001236:	bf00      	nop
 8001238:	3788      	adds	r7, #136	; 0x88
 800123a:	46bd      	mov	sp, r7
 800123c:	bdb0      	pop	{r4, r5, r7, pc}
 800123e:	bf00      	nop
 8001240:	0800b740 	.word	0x0800b740
 8001244:	0800b758 	.word	0x0800b758
 8001248:	0800b770 	.word	0x0800b770
 800124c:	0800b784 	.word	0x0800b784
 8001250:	0800b798 	.word	0x0800b798
 8001254:	0800b7b0 	.word	0x0800b7b0
 8001258:	24004b10 	.word	0x24004b10
 800125c:	24004a84 	.word	0x24004a84

08001260 <StartControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartControlTask */
void StartControlTask(void *argument)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001268:	2101      	movs	r1, #1
 800126a:	4804      	ldr	r0, [pc, #16]	; (800127c <StartControlTask+0x1c>)
 800126c:	f001 fb9d 	bl	80029aa <HAL_GPIO_TogglePin>
	osDelay(500);
 8001270:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001274:	f007 fda6 	bl	8008dc4 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001278:	e7f6      	b.n	8001268 <StartControlTask+0x8>
 800127a:	bf00      	nop
 800127c:	58020400 	.word	0x58020400

08001280 <StartCommBoard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommBoard */
void StartCommBoard(void *argument)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b091      	sub	sp, #68	; 0x44
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

	// Transmit struct for Nucleo.
	messageStructFromNucleo messageFormNucleo;

	// Set up time variables.
	const uint32_t deadlineCommunication = 1000;
 8001288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128c:	63bb      	str	r3, [r7, #56]	; 0x38
	const uint32_t communicationSleepTime = 25;
 800128e:	2319      	movs	r3, #25
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t lastTransmitTime = osKernelGetTickCount();
 8001292:	f007 fcc9 	bl	8008c28 <osKernelGetTickCount>
 8001296:	63f8      	str	r0, [r7, #60]	; 0x3c

	// Debug sensor values.
	messageFormNucleo.motorStatus[0] = 1;
 8001298:	2301      	movs	r3, #1
 800129a:	817b      	strh	r3, [r7, #10]
	messageFormNucleo.motorStatus[1] = 3;
 800129c:	2303      	movs	r3, #3
 800129e:	81bb      	strh	r3, [r7, #12]
	messageFormNucleo.motorStatus[2] = 3;
 80012a0:	2303      	movs	r3, #3
 80012a2:	81fb      	strh	r3, [r7, #14]
	messageFormNucleo.motorStatus[3] = 7;
 80012a4:	2307      	movs	r3, #7
 80012a6:	823b      	strh	r3, [r7, #16]
	messageFormNucleo.motorStatus[4] = 6;
 80012a8:	2306      	movs	r3, #6
 80012aa:	827b      	strh	r3, [r7, #18]
	messageFormNucleo.motorStatus[5] = 9;
 80012ac:	2309      	movs	r3, #9
 80012ae:	82bb      	strh	r3, [r7, #20]
	messageFormNucleo.motorStatus[6] = 4;
 80012b0:	2304      	movs	r3, #4
 80012b2:	82fb      	strh	r3, [r7, #22]
	messageFormNucleo.motorStatus[7] = 2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	833b      	strh	r3, [r7, #24]

  for(;;)
  {

	// Check if it is time to do a new transmit. Otherwise it check if any new messages is available.
	if( (lastTransmitTime + deadlineCommunication) >= osKernelGetTickCount() ){
 80012b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012bc:	18d4      	adds	r4, r2, r3
 80012be:	f007 fcb3 	bl	8008c28 <osKernelGetTickCount>
 80012c2:	4603      	mov	r3, r0
 80012c4:	429c      	cmp	r4, r3
 80012c6:	d30e      	bcc.n	80012e6 <StartCommBoard+0x66>

		// Transmit the data from Nucleo.
		HAL_I2C_Slave_Transmit(&hi2c1,(uint8_t *) &messageFormNucleo, sizeof(messageStructFromNucleo), 100);
 80012c8:	f107 0108 	add.w	r1, r7, #8
 80012cc:	2364      	movs	r3, #100	; 0x64
 80012ce:	222a      	movs	r2, #42	; 0x2a
 80012d0:	4808      	ldr	r0, [pc, #32]	; (80012f4 <StartCommBoard+0x74>)
 80012d2:	f001 fc15 	bl	8002b00 <HAL_I2C_Slave_Transmit>
		// Save the transmit time.
		lastTransmitTime = osKernelGetTickCount();
 80012d6:	f007 fca7 	bl	8008c28 <osKernelGetTickCount>
 80012da:	63f8      	str	r0, [r7, #60]	; 0x3c

		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80012dc:	2102      	movs	r1, #2
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <StartCommBoard+0x78>)
 80012e0:	f001 fb63 	bl	80029aa <HAL_GPIO_TogglePin>
 80012e4:	e001      	b.n	80012ea <StartCommBoard+0x6a>
	}else{

		// Handle received I2C data.
		I2CCommandHandle();
 80012e6:	f7ff ff27 	bl	8001138 <I2CCommandHandle>
	}

	osDelay(communicationSleepTime);
 80012ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80012ec:	f007 fd6a 	bl	8008dc4 <osDelay>
	if( (lastTransmitTime + deadlineCommunication) >= osKernelGetTickCount() ){
 80012f0:	e7e2      	b.n	80012b8 <StartCommBoard+0x38>
 80012f2:	bf00      	nop
 80012f4:	24004b10 	.word	0x24004b10
 80012f8:	58021000 	.word	0x58021000

080012fc <StartSensorRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorRead */
void StartSensorRead(void *argument)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  sensValue sensorPacket;



  startUpMouse();
 8001304:	f7ff fde0 	bl	8000ec8 <startUpMouse>
  /* Infinite loop */
  for(;;)
  {

    // Read the sensor values.
	readMouseSensor( &sensorPacket );
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fea7 	bl	8001060 <readMouseSensor>

    //UART Send data to console.
    // plotSensorData( &sensorPacket );

    osDelay(1000);
 8001312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001316:	f007 fd55 	bl	8008dc4 <osDelay>
	readMouseSensor( &sensorPacket );
 800131a:	e7f5      	b.n	8001308 <StartSensorRead+0xc>

0800131c <StartSafety>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSafety */
void StartSafety(void *argument)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001324:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001328:	4803      	ldr	r0, [pc, #12]	; (8001338 <StartSafety+0x1c>)
 800132a:	f001 fb3e 	bl	80029aa <HAL_GPIO_TogglePin>
	osDelay(1500);
 800132e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001332:	f007 fd47 	bl	8008dc4 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001336:	e7f5      	b.n	8001324 <StartSafety+0x8>
 8001338:	58020400 	.word	0x58020400

0800133c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d101      	bne.n	8001352 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800134e:	f000 fc0b 	bl	8001b68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40001000 	.word	0x40001000

08001360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_MspInit+0x30>)
 8001378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800137c:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_MspInit+0x30>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_MspInit+0x30>)
 8001388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	58024400 	.word	0x58024400

080013a4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	; 0x38
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a59      	ldr	r2, [pc, #356]	; (8001528 <HAL_ETH_MspInit+0x184>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	f040 80ab 	bne.w	800151e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80013c8:	4b58      	ldr	r3, [pc, #352]	; (800152c <HAL_ETH_MspInit+0x188>)
 80013ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013ce:	4a57      	ldr	r2, [pc, #348]	; (800152c <HAL_ETH_MspInit+0x188>)
 80013d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013d8:	4b54      	ldr	r3, [pc, #336]	; (800152c <HAL_ETH_MspInit+0x188>)
 80013da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013e2:	623b      	str	r3, [r7, #32]
 80013e4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80013e6:	4b51      	ldr	r3, [pc, #324]	; (800152c <HAL_ETH_MspInit+0x188>)
 80013e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013ec:	4a4f      	ldr	r2, [pc, #316]	; (800152c <HAL_ETH_MspInit+0x188>)
 80013ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013f6:	4b4d      	ldr	r3, [pc, #308]	; (800152c <HAL_ETH_MspInit+0x188>)
 80013f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001404:	4b49      	ldr	r3, [pc, #292]	; (800152c <HAL_ETH_MspInit+0x188>)
 8001406:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800140a:	4a48      	ldr	r2, [pc, #288]	; (800152c <HAL_ETH_MspInit+0x188>)
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001414:	4b45      	ldr	r3, [pc, #276]	; (800152c <HAL_ETH_MspInit+0x188>)
 8001416:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	61bb      	str	r3, [r7, #24]
 8001420:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	4b42      	ldr	r3, [pc, #264]	; (800152c <HAL_ETH_MspInit+0x188>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001428:	4a40      	ldr	r2, [pc, #256]	; (800152c <HAL_ETH_MspInit+0x188>)
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001432:	4b3e      	ldr	r3, [pc, #248]	; (800152c <HAL_ETH_MspInit+0x188>)
 8001434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	4b3a      	ldr	r3, [pc, #232]	; (800152c <HAL_ETH_MspInit+0x188>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001446:	4a39      	ldr	r2, [pc, #228]	; (800152c <HAL_ETH_MspInit+0x188>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001450:	4b36      	ldr	r3, [pc, #216]	; (800152c <HAL_ETH_MspInit+0x188>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	4b33      	ldr	r3, [pc, #204]	; (800152c <HAL_ETH_MspInit+0x188>)
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001464:	4a31      	ldr	r2, [pc, #196]	; (800152c <HAL_ETH_MspInit+0x188>)
 8001466:	f043 0302 	orr.w	r3, r3, #2
 800146a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800146e:	4b2f      	ldr	r3, [pc, #188]	; (800152c <HAL_ETH_MspInit+0x188>)
 8001470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800147c:	4b2b      	ldr	r3, [pc, #172]	; (800152c <HAL_ETH_MspInit+0x188>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001482:	4a2a      	ldr	r2, [pc, #168]	; (800152c <HAL_ETH_MspInit+0x188>)
 8001484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001488:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_ETH_MspInit+0x188>)
 800148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800149a:	2332      	movs	r3, #50	; 0x32
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014aa:	230b      	movs	r3, #11
 80014ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	4619      	mov	r1, r3
 80014b4:	481e      	ldr	r0, [pc, #120]	; (8001530 <HAL_ETH_MspInit+0x18c>)
 80014b6:	f001 f8af 	bl	8002618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80014ba:	2386      	movs	r3, #134	; 0x86
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014ca:	230b      	movs	r3, #11
 80014cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d2:	4619      	mov	r1, r3
 80014d4:	4817      	ldr	r0, [pc, #92]	; (8001534 <HAL_ETH_MspInit+0x190>)
 80014d6:	f001 f89f 	bl	8002618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014ec:	230b      	movs	r3, #11
 80014ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f4:	4619      	mov	r1, r3
 80014f6:	4810      	ldr	r0, [pc, #64]	; (8001538 <HAL_ETH_MspInit+0x194>)
 80014f8:	f001 f88e 	bl	8002618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80014fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800150e:	230b      	movs	r3, #11
 8001510:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001516:	4619      	mov	r1, r3
 8001518:	4808      	ldr	r0, [pc, #32]	; (800153c <HAL_ETH_MspInit+0x198>)
 800151a:	f001 f87d 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800151e:	bf00      	nop
 8001520:	3738      	adds	r7, #56	; 0x38
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40028000 	.word	0x40028000
 800152c:	58024400 	.word	0x58024400
 8001530:	58020800 	.word	0x58020800
 8001534:	58020000 	.word	0x58020000
 8001538:	58020400 	.word	0x58020400
 800153c:	58021800 	.word	0x58021800

08001540 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a1a      	ldr	r2, [pc, #104]	; (80015c8 <HAL_I2C_MspInit+0x88>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d12d      	bne.n	80015be <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <HAL_I2C_MspInit+0x8c>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001568:	4a18      	ldr	r2, [pc, #96]	; (80015cc <HAL_I2C_MspInit+0x8c>)
 800156a:	f043 0302 	orr.w	r3, r3, #2
 800156e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <HAL_I2C_MspInit+0x8c>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001580:	23c0      	movs	r3, #192	; 0xc0
 8001582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001584:	2312      	movs	r3, #18
 8001586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001590:	2304      	movs	r3, #4
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	480d      	ldr	r0, [pc, #52]	; (80015d0 <HAL_I2C_MspInit+0x90>)
 800159c:	f001 f83c 	bl	8002618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_I2C_MspInit+0x8c>)
 80015a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_I2C_MspInit+0x8c>)
 80015a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_I2C_MspInit+0x8c>)
 80015b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	3728      	adds	r7, #40	; 0x28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40005400 	.word	0x40005400
 80015cc:	58024400 	.word	0x58024400
 80015d0:	58020400 	.word	0x58020400

080015d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a1a      	ldr	r2, [pc, #104]	; (800165c <HAL_SPI_MspInit+0x88>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d12d      	bne.n	8001652 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_SPI_MspInit+0x8c>)
 80015f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015fc:	4a18      	ldr	r2, [pc, #96]	; (8001660 <HAL_SPI_MspInit+0x8c>)
 80015fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001602:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_SPI_MspInit+0x8c>)
 8001608:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800160c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_SPI_MspInit+0x8c>)
 8001616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <HAL_SPI_MspInit+0x8c>)
 800161c:	f043 0310 	orr.w	r3, r3, #16
 8001620:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_SPI_MspInit+0x8c>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001632:	2364      	movs	r3, #100	; 0x64
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001642:	2305      	movs	r3, #5
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <HAL_SPI_MspInit+0x90>)
 800164e:	f000 ffe3 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	; 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40013400 	.word	0x40013400
 8001660:	58024400 	.word	0x58024400
 8001664:	58021000 	.word	0x58021000

08001668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08e      	sub	sp, #56	; 0x38
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4e      	ldr	r2, [pc, #312]	; (80017c0 <HAL_UART_MspInit+0x158>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d12e      	bne.n	80016e8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800168a:	4b4e      	ldr	r3, [pc, #312]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 800168c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001690:	4a4c      	ldr	r2, [pc, #304]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001692:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001696:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800169a:	4b4a      	ldr	r3, [pc, #296]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 800169c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80016a4:	623b      	str	r3, [r7, #32]
 80016a6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a8:	4b46      	ldr	r3, [pc, #280]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 80016aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ae:	4a45      	ldr	r2, [pc, #276]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 80016b0:	f043 0320 	orr.w	r3, r3, #32
 80016b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016b8:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 80016ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016be:	f003 0320 	and.w	r3, r3, #32
 80016c2:	61fb      	str	r3, [r7, #28]
 80016c4:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ca:	2312      	movs	r3, #18
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80016d6:	2307      	movs	r3, #7
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016de:	4619      	mov	r1, r3
 80016e0:	4839      	ldr	r0, [pc, #228]	; (80017c8 <HAL_UART_MspInit+0x160>)
 80016e2:	f000 ff99 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016e6:	e067      	b.n	80017b8 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a37      	ldr	r2, [pc, #220]	; (80017cc <HAL_UART_MspInit+0x164>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d12e      	bne.n	8001750 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f2:	4b34      	ldr	r3, [pc, #208]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 80016f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016f8:	4a32      	ldr	r2, [pc, #200]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 80016fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001702:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001704:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170c:	61bb      	str	r3, [r7, #24]
 800170e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001710:	4b2c      	ldr	r3, [pc, #176]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001716:	4a2b      	ldr	r2, [pc, #172]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001720:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800172e:	2320      	movs	r3, #32
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001732:	2312      	movs	r3, #18
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800173e:	2307      	movs	r3, #7
 8001740:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001746:	4619      	mov	r1, r3
 8001748:	4821      	ldr	r0, [pc, #132]	; (80017d0 <HAL_UART_MspInit+0x168>)
 800174a:	f000 ff65 	bl	8002618 <HAL_GPIO_Init>
}
 800174e:	e033      	b.n	80017b8 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART3)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a1f      	ldr	r2, [pc, #124]	; (80017d4 <HAL_UART_MspInit+0x16c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d12e      	bne.n	80017b8 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 800175c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001760:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001762:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001766:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 800176c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 800177a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177e:	4a11      	ldr	r2, [pc, #68]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001780:	f043 0308 	orr.w	r3, r3, #8
 8001784:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 800178a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001796:	f44f 7340 	mov.w	r3, #768	; 0x300
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017a8:	2307      	movs	r3, #7
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	4619      	mov	r1, r3
 80017b2:	4807      	ldr	r0, [pc, #28]	; (80017d0 <HAL_UART_MspInit+0x168>)
 80017b4:	f000 ff30 	bl	8002618 <HAL_GPIO_Init>
}
 80017b8:	bf00      	nop
 80017ba:	3738      	adds	r7, #56	; 0x38
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40007800 	.word	0x40007800
 80017c4:	58024400 	.word	0x58024400
 80017c8:	58021400 	.word	0x58021400
 80017cc:	40004400 	.word	0x40004400
 80017d0:	58020c00 	.word	0x58020c00
 80017d4:	40004800 	.word	0x40004800

080017d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a21      	ldr	r2, [pc, #132]	; (800187c <HAL_PCD_MspInit+0xa4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d13b      	bne.n	8001872 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	4b21      	ldr	r3, [pc, #132]	; (8001880 <HAL_PCD_MspInit+0xa8>)
 80017fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001800:	4a1f      	ldr	r2, [pc, #124]	; (8001880 <HAL_PCD_MspInit+0xa8>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <HAL_PCD_MspInit+0xa8>)
 800180c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001818:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800181c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800182a:	230a      	movs	r3, #10
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	4813      	ldr	r0, [pc, #76]	; (8001884 <HAL_PCD_MspInit+0xac>)
 8001836:	f000 feef 	bl	8002618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800183a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800183e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	480d      	ldr	r0, [pc, #52]	; (8001884 <HAL_PCD_MspInit+0xac>)
 8001850:	f000 fee2 	bl	8002618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_PCD_MspInit+0xa8>)
 8001856:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800185a:	4a09      	ldr	r2, [pc, #36]	; (8001880 <HAL_PCD_MspInit+0xa8>)
 800185c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001860:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_PCD_MspInit+0xa8>)
 8001866:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800186a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001872:	bf00      	nop
 8001874:	3728      	adds	r7, #40	; 0x28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40080000 	.word	0x40080000
 8001880:	58024400 	.word	0x58024400
 8001884:	58020000 	.word	0x58020000

08001888 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08e      	sub	sp, #56	; 0x38
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001898:	2200      	movs	r2, #0
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	2036      	movs	r0, #54	; 0x36
 800189e:	f000 fa7d 	bl	8001d9c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018a2:	2036      	movs	r0, #54	; 0x36
 80018a4:	f000 fa94 	bl	8001dd0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018a8:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_InitTick+0xa4>)
 80018aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018ae:	4a1f      	ldr	r2, [pc, #124]	; (800192c <HAL_InitTick+0xa4>)
 80018b0:	f043 0310 	orr.w	r3, r3, #16
 80018b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018b8:	4b1c      	ldr	r3, [pc, #112]	; (800192c <HAL_InitTick+0xa4>)
 80018ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018c6:	f107 020c 	add.w	r2, r7, #12
 80018ca:	f107 0310 	add.w	r3, r7, #16
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f002 fe8d 	bl	80045f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018d6:	f002 fe5f 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 80018da:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80018dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018de:	4a14      	ldr	r2, [pc, #80]	; (8001930 <HAL_InitTick+0xa8>)
 80018e0:	fba2 2303 	umull	r2, r3, r2, r3
 80018e4:	0c9b      	lsrs	r3, r3, #18
 80018e6:	3b01      	subs	r3, #1
 80018e8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_InitTick+0xac>)
 80018ec:	4a12      	ldr	r2, [pc, #72]	; (8001938 <HAL_InitTick+0xb0>)
 80018ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80018f0:	4b10      	ldr	r3, [pc, #64]	; (8001934 <HAL_InitTick+0xac>)
 80018f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018f8:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <HAL_InitTick+0xac>)
 80018fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <HAL_InitTick+0xac>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_InitTick+0xac>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800190a:	480a      	ldr	r0, [pc, #40]	; (8001934 <HAL_InitTick+0xac>)
 800190c:	f005 fa63 	bl	8006dd6 <HAL_TIM_Base_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d104      	bne.n	8001920 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001916:	4807      	ldr	r0, [pc, #28]	; (8001934 <HAL_InitTick+0xac>)
 8001918:	f005 fabe 	bl	8006e98 <HAL_TIM_Base_Start_IT>
 800191c:	4603      	mov	r3, r0
 800191e:	e000      	b.n	8001922 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
}
 8001922:	4618      	mov	r0, r3
 8001924:	3738      	adds	r7, #56	; 0x38
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	58024400 	.word	0x58024400
 8001930:	431bde83 	.word	0x431bde83
 8001934:	2400512c 	.word	0x2400512c
 8001938:	40001000 	.word	0x40001000

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <MemManage_Handler+0x4>

08001956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <UsageFault_Handler+0x4>

08001962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <TIM6_DAC_IRQHandler+0x10>)
 8001976:	f005 fac5 	bl	8006f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2400512c 	.word	0x2400512c

08001984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001988:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <SystemInit+0xec>)
 800198a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198e:	4a38      	ldr	r2, [pc, #224]	; (8001a70 <SystemInit+0xec>)
 8001990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001998:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <SystemInit+0xf0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 030f 	and.w	r3, r3, #15
 80019a0:	2b06      	cmp	r3, #6
 80019a2:	d807      	bhi.n	80019b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019a4:	4b33      	ldr	r3, [pc, #204]	; (8001a74 <SystemInit+0xf0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f023 030f 	bic.w	r3, r3, #15
 80019ac:	4a31      	ldr	r2, [pc, #196]	; (8001a74 <SystemInit+0xf0>)
 80019ae:	f043 0307 	orr.w	r3, r3, #7
 80019b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019b4:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <SystemInit+0xf4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a2f      	ldr	r2, [pc, #188]	; (8001a78 <SystemInit+0xf4>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019c0:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <SystemInit+0xf4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019c6:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <SystemInit+0xf4>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	492b      	ldr	r1, [pc, #172]	; (8001a78 <SystemInit+0xf4>)
 80019cc:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <SystemInit+0xf8>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019d2:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <SystemInit+0xf0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	2b07      	cmp	r3, #7
 80019dc:	d907      	bls.n	80019ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019de:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <SystemInit+0xf0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 030f 	bic.w	r3, r3, #15
 80019e6:	4a23      	ldr	r2, [pc, #140]	; (8001a74 <SystemInit+0xf0>)
 80019e8:	f043 0307 	orr.w	r3, r3, #7
 80019ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <SystemInit+0xf4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <SystemInit+0xf4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <SystemInit+0xf4>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <SystemInit+0xf4>)
 8001a02:	4a1f      	ldr	r2, [pc, #124]	; (8001a80 <SystemInit+0xfc>)
 8001a04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <SystemInit+0xf4>)
 8001a08:	4a1e      	ldr	r2, [pc, #120]	; (8001a84 <SystemInit+0x100>)
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <SystemInit+0xf4>)
 8001a0e:	4a1e      	ldr	r2, [pc, #120]	; (8001a88 <SystemInit+0x104>)
 8001a10:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a12:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <SystemInit+0xf4>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a18:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <SystemInit+0xf4>)
 8001a1a:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <SystemInit+0x104>)
 8001a1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <SystemInit+0xf4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <SystemInit+0xf4>)
 8001a26:	4a18      	ldr	r2, [pc, #96]	; (8001a88 <SystemInit+0x104>)
 8001a28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <SystemInit+0xf4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <SystemInit+0xf4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <SystemInit+0xf4>)
 8001a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <SystemInit+0xf4>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <SystemInit+0x108>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <SystemInit+0x10c>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a4e:	d202      	bcs.n	8001a56 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <SystemInit+0x110>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <SystemInit+0x114>)
 8001a58:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a5c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <SystemInit+0xec>)
 8001a60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a64:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00
 8001a74:	52002000 	.word	0x52002000
 8001a78:	58024400 	.word	0x58024400
 8001a7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a80:	02020200 	.word	0x02020200
 8001a84:	01ff0000 	.word	0x01ff0000
 8001a88:	01010280 	.word	0x01010280
 8001a8c:	5c001000 	.word	0x5c001000
 8001a90:	ffff0000 	.word	0xffff0000
 8001a94:	51008108 	.word	0x51008108
 8001a98:	52004000 	.word	0x52004000

08001a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001aa0:	f7ff ff70 	bl	8001984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001aa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001aa6:	e003      	b.n	8001ab0 <LoopCopyDataInit>

08001aa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001aaa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001aac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001aae:	3104      	adds	r1, #4

08001ab0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ab0:	480a      	ldr	r0, [pc, #40]	; (8001adc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001ab4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ab6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ab8:	d3f6      	bcc.n	8001aa8 <CopyDataInit>
  ldr  r2, =_sbss
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001abc:	e002      	b.n	8001ac4 <LoopFillZerobss>

08001abe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001abe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ac0:	f842 3b04 	str.w	r3, [r2], #4

08001ac4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001ac6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ac8:	d3f9      	bcc.n	8001abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aca:	f009 fdb7 	bl	800b63c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ace:	f7fe fd87 	bl	80005e0 <main>
  bx  lr    
 8001ad2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ad4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001ad8:	0800c8b4 	.word	0x0800c8b4
  ldr  r0, =_sdata
 8001adc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001ae0:	24000014 	.word	0x24000014
  ldr  r2, =_sbss
 8001ae4:	240000d4 	.word	0x240000d4
  ldr  r3, = _ebss
 8001ae8:	240051bc 	.word	0x240051bc

08001aec <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aec:	e7fe      	b.n	8001aec <ADC3_IRQHandler>
	...

08001af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af6:	2003      	movs	r0, #3
 8001af8:	f000 f945 	bl	8001d86 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001afc:	f002 fbaa 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8001b00:	4601      	mov	r1, r0
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_Init+0x68>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	4a13      	ldr	r2, [pc, #76]	; (8001b5c <HAL_Init+0x6c>)
 8001b0e:	5cd3      	ldrb	r3, [r2, r3]
 8001b10:	f003 031f 	and.w	r3, r3, #31
 8001b14:	fa21 f303 	lsr.w	r3, r1, r3
 8001b18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_Init+0x68>)
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <HAL_Init+0x6c>)
 8001b24:	5cd3      	ldrb	r3, [r2, r3]
 8001b26:	f003 031f 	and.w	r3, r3, #31
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b30:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <HAL_Init+0x70>)
 8001b32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b34:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <HAL_Init+0x74>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff fea4 	bl	8001888 <HAL_InitTick>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e002      	b.n	8001b50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4a:	f7ff fc11 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	58024400 	.word	0x58024400
 8001b5c:	0800c87c 	.word	0x0800c87c
 8001b60:	24000004 	.word	0x24000004
 8001b64:	24000000 	.word	0x24000000

08001b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_IncTick+0x20>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x24>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <HAL_IncTick+0x24>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	2400000c 	.word	0x2400000c
 8001b8c:	24005178 	.word	0x24005178

08001b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return uwTick;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_GetTick+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	24005178 	.word	0x24005178

08001ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff ffee 	bl	8001b90 <HAL_GetTick>
 8001bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	d005      	beq.n	8001bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_Delay+0x40>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bce:	bf00      	nop
 8001bd0:	f7ff ffde 	bl	8001b90 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d8f7      	bhi.n	8001bd0 <HAL_Delay+0x28>
  {
  }
}
 8001be0:	bf00      	nop
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	2400000c 	.word	0x2400000c

08001bec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <HAL_GetREVID+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	0c1b      	lsrs	r3, r3, #16
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	5c001000 	.word	0x5c001000

08001c04 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001c14:	4904      	ldr	r1, [pc, #16]	; (8001c28 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	58000400 	.word	0x58000400

08001c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <__NVIC_SetPriorityGrouping+0x40>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5a:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <__NVIC_SetPriorityGrouping+0x40>)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	60d3      	str	r3, [r2, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00
 8001c70:	05fa0000 	.word	0x05fa0000

08001c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <__NVIC_GetPriorityGrouping+0x18>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	f003 0307 	and.w	r3, r3, #7
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	db0b      	blt.n	8001cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	f003 021f 	and.w	r2, r3, #31
 8001ca8:	4907      	ldr	r1, [pc, #28]	; (8001cc8 <__NVIC_EnableIRQ+0x38>)
 8001caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cae:	095b      	lsrs	r3, r3, #5
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000e100 	.word	0xe000e100

08001ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db0a      	blt.n	8001cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	490c      	ldr	r1, [pc, #48]	; (8001d18 <__NVIC_SetPriority+0x4c>)
 8001ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf4:	e00a      	b.n	8001d0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4908      	ldr	r1, [pc, #32]	; (8001d1c <__NVIC_SetPriority+0x50>)
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3b04      	subs	r3, #4
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	440b      	add	r3, r1
 8001d0a:	761a      	strb	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f1c3 0307 	rsb	r3, r3, #7
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	bf28      	it	cs
 8001d3e:	2304      	movcs	r3, #4
 8001d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d902      	bls.n	8001d50 <NVIC_EncodePriority+0x30>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b03      	subs	r3, #3
 8001d4e:	e000      	b.n	8001d52 <NVIC_EncodePriority+0x32>
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	401a      	ands	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43d9      	mvns	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	4313      	orrs	r3, r2
         );
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ff4c 	bl	8001c2c <__NVIC_SetPriorityGrouping>
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001daa:	f7ff ff63 	bl	8001c74 <__NVIC_GetPriorityGrouping>
 8001dae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	68b9      	ldr	r1, [r7, #8]
 8001db4:	6978      	ldr	r0, [r7, #20]
 8001db6:	f7ff ffb3 	bl	8001d20 <NVIC_EncodePriority>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff82 	bl	8001ccc <__NVIC_SetPriority>
}
 8001dc8:	bf00      	nop
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff56 	bl	8001c90 <__NVIC_EnableIRQ>
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e0c6      	b.n	8001f8c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d102      	bne.n	8001e0c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff facc 	bl	80013a4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2223      	movs	r2, #35	; 0x23
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e12:	4b60      	ldr	r3, [pc, #384]	; (8001f94 <HAL_ETH_Init+0x1a8>)
 8001e14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e18:	4a5e      	ldr	r2, [pc, #376]	; (8001f94 <HAL_ETH_Init+0x1a8>)
 8001e1a:	f043 0302 	orr.w	r3, r3, #2
 8001e1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e22:	4b5c      	ldr	r3, [pc, #368]	; (8001f94 <HAL_ETH_Init+0x1a8>)
 8001e24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7a1b      	ldrb	r3, [r3, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d103      	bne.n	8001e40 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f7ff fee3 	bl	8001c04 <HAL_SYSCFG_ETHInterfaceSelect>
 8001e3e:	e003      	b.n	8001e48 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001e40:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001e44:	f7ff fede 	bl	8001c04 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e60:	f7ff fe96 	bl	8001b90 <HAL_GetTick>
 8001e64:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001e66:	e00f      	b.n	8001e88 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001e68:	f7ff fe92 	bl	8001b90 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e76:	d907      	bls.n	8001e88 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	22e0      	movs	r2, #224	; 0xe0
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e081      	b.n	8001f8c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1e6      	bne.n	8001e68 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fac0 	bl	8002420 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001ea0:	f002 fb4a 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b3c      	ldr	r3, [pc, #240]	; (8001f98 <HAL_ETH_Init+0x1ac>)
 8001ea8:	fba3 2302 	umull	r2, r3, r3, r2
 8001eac:	0c9a      	lsrs	r2, r3, #18
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	3a01      	subs	r2, #1
 8001eb4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 fa13 	bl	80022e4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ed4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ed8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d007      	beq.n	8001ef6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	22e0      	movs	r2, #224	; 0xe0
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e04a      	b.n	8001f8c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	f241 1308 	movw	r3, #4360	; 0x1108
 8001efe:	4413      	add	r3, r2
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <HAL_ETH_Init+0x1b0>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6952      	ldr	r2, [r2, #20]
 8001f0a:	0052      	lsls	r2, r2, #1
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	6809      	ldr	r1, [r1, #0]
 8001f10:	431a      	orrs	r2, r3
 8001f12:	f241 1308 	movw	r3, #4360	; 0x1108
 8001f16:	440b      	add	r3, r1
 8001f18:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fad8 	bl	80024d0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fb1c 	bl	800255e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	3305      	adds	r3, #5
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	021a      	lsls	r2, r3, #8
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	3304      	adds	r3, #4
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	3303      	adds	r3, #3
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	061a      	lsls	r2, r3, #24
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	3302      	adds	r3, #2
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	041b      	lsls	r3, r3, #16
 8001f58:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f64:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f72:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2210      	movs	r2, #16
 8001f82:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2210      	movs	r2, #16
 8001f88:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	58024400 	.word	0x58024400
 8001f98:	431bde83 	.word	0x431bde83
 8001f9c:	ffff8001 	.word	0xffff8001

08001fa0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001fb2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	791b      	ldrb	r3, [r3, #4]
 8001fb8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001fba:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	7b1b      	ldrb	r3, [r3, #12]
 8001fc0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001fc2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	7b5b      	ldrb	r3, [r3, #13]
 8001fc8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001fca:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	7b9b      	ldrb	r3, [r3, #14]
 8001fd0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001fd2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	7bdb      	ldrb	r3, [r3, #15]
 8001fd8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001fda:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	7c12      	ldrb	r2, [r2, #16]
 8001fe0:	2a00      	cmp	r2, #0
 8001fe2:	d102      	bne.n	8001fea <ETH_SetMACConfig+0x4a>
 8001fe4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001fe8:	e000      	b.n	8001fec <ETH_SetMACConfig+0x4c>
 8001fea:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001fec:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	7c52      	ldrb	r2, [r2, #17]
 8001ff2:	2a00      	cmp	r2, #0
 8001ff4:	d102      	bne.n	8001ffc <ETH_SetMACConfig+0x5c>
 8001ff6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ffa:	e000      	b.n	8001ffe <ETH_SetMACConfig+0x5e>
 8001ffc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001ffe:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	7c9b      	ldrb	r3, [r3, #18]
 8002004:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002006:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800200c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002012:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	7f1b      	ldrb	r3, [r3, #28]
 8002018:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800201a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	7f5b      	ldrb	r3, [r3, #29]
 8002020:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002022:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	7f92      	ldrb	r2, [r2, #30]
 8002028:	2a00      	cmp	r2, #0
 800202a:	d102      	bne.n	8002032 <ETH_SetMACConfig+0x92>
 800202c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002030:	e000      	b.n	8002034 <ETH_SetMACConfig+0x94>
 8002032:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002034:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	7fdb      	ldrb	r3, [r3, #31]
 800203a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800203c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002044:	2a00      	cmp	r2, #0
 8002046:	d102      	bne.n	800204e <ETH_SetMACConfig+0xae>
 8002048:	f44f 7280 	mov.w	r2, #256	; 0x100
 800204c:	e000      	b.n	8002050 <ETH_SetMACConfig+0xb0>
 800204e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002050:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002056:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800205e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002060:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b56      	ldr	r3, [pc, #344]	; (80021cc <ETH_SetMACConfig+0x22c>)
 8002072:	4013      	ands	r3, r2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	68f9      	ldr	r1, [r7, #12]
 800207a:	430b      	orrs	r3, r1
 800207c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002082:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800208a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800208c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002094:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002096:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800209e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80020a0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80020a8:	2a00      	cmp	r2, #0
 80020aa:	d102      	bne.n	80020b2 <ETH_SetMACConfig+0x112>
 80020ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020b0:	e000      	b.n	80020b4 <ETH_SetMACConfig+0x114>
 80020b2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80020b4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	4b42      	ldr	r3, [pc, #264]	; (80021d0 <ETH_SetMACConfig+0x230>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	68f9      	ldr	r1, [r7, #12]
 80020ce:	430b      	orrs	r3, r1
 80020d0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020d8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80020de:	4313      	orrs	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	4b3a      	ldr	r3, [pc, #232]	; (80021d4 <ETH_SetMACConfig+0x234>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	430b      	orrs	r3, r1
 80020f4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80020fc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002102:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800210a:	2a00      	cmp	r2, #0
 800210c:	d101      	bne.n	8002112 <ETH_SetMACConfig+0x172>
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	e000      	b.n	8002114 <ETH_SetMACConfig+0x174>
 8002112:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002114:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800211c:	4313      	orrs	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002126:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800212a:	4013      	ands	r3, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	68f9      	ldr	r1, [r7, #12]
 8002132:	430b      	orrs	r3, r1
 8002134:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800213c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002144:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002152:	f023 0103 	bic.w	r1, r3, #3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	430a      	orrs	r2, r1
 800215e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800216a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002186:	2a00      	cmp	r2, #0
 8002188:	d101      	bne.n	800218e <ETH_SetMACConfig+0x1ee>
 800218a:	2240      	movs	r2, #64	; 0x40
 800218c:	e000      	b.n	8002190 <ETH_SetMACConfig+0x1f0>
 800218e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002190:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002198:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800219a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80021a2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80021b0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	00048083 	.word	0x00048083
 80021d0:	c0f88000 	.word	0xc0f88000
 80021d4:	fffffef0 	.word	0xfffffef0

080021d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <ETH_SetDMAConfig+0xf8>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	6809      	ldr	r1, [r1, #0]
 80021f8:	431a      	orrs	r2, r3
 80021fa:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80021fe:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	791b      	ldrb	r3, [r3, #4]
 8002204:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800220a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	7b1b      	ldrb	r3, [r3, #12]
 8002210:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002212:	4313      	orrs	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	f241 0304 	movw	r3, #4100	; 0x1004
 800221e:	4413      	add	r3, r2
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <ETH_SetDMAConfig+0xfc>)
 8002224:	4013      	ands	r3, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6811      	ldr	r1, [r2, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	431a      	orrs	r2, r3
 800222e:	f241 0304 	movw	r3, #4100	; 0x1004
 8002232:	440b      	add	r3, r1
 8002234:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	7b5b      	ldrb	r3, [r3, #13]
 800223a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002240:	4313      	orrs	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <ETH_SetDMAConfig+0x100>)
 8002250:	4013      	ands	r3, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6811      	ldr	r1, [r2, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	431a      	orrs	r2, r3
 800225a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800225e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	7d1b      	ldrb	r3, [r3, #20]
 8002268:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800226a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	7f5b      	ldrb	r3, [r3, #29]
 8002270:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	f241 1304 	movw	r3, #4356	; 0x1104
 800227e:	4413      	add	r3, r2
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4b16      	ldr	r3, [pc, #88]	; (80022dc <ETH_SetDMAConfig+0x104>)
 8002284:	4013      	ands	r3, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6811      	ldr	r1, [r2, #0]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	431a      	orrs	r2, r3
 800228e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002292:	440b      	add	r3, r1
 8002294:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	7f1b      	ldrb	r3, [r3, #28]
 800229a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	f241 1308 	movw	r3, #4360	; 0x1108
 80022ac:	4413      	add	r3, r2
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <ETH_SetDMAConfig+0x108>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6811      	ldr	r1, [r2, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	f241 1308 	movw	r3, #4360	; 0x1108
 80022c0:	440b      	add	r3, r1
 80022c2:	601a      	str	r2, [r3, #0]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	ffff87fd 	.word	0xffff87fd
 80022d4:	ffff2ffe 	.word	0xffff2ffe
 80022d8:	fffec000 	.word	0xfffec000
 80022dc:	ffc0efef 	.word	0xffc0efef
 80022e0:	7fc0ffff 	.word	0x7fc0ffff

080022e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b0a4      	sub	sp, #144	; 0x90
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022f2:	2300      	movs	r3, #0
 80022f4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002302:	2301      	movs	r3, #1
 8002304:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800230e:	2301      	movs	r3, #1
 8002310:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002314:	2300      	movs	r3, #0
 8002316:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800231a:	2301      	movs	r3, #1
 800231c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002324:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002326:	2300      	movs	r3, #0
 8002328:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800232c:	2300      	movs	r3, #0
 800232e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800233c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002340:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002342:	2300      	movs	r3, #0
 8002344:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002348:	2300      	movs	r3, #0
 800234a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800234c:	2301      	movs	r3, #1
 800234e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002352:	2300      	movs	r3, #0
 8002354:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002358:	2300      	movs	r3, #0
 800235a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800235e:	2300      	movs	r3, #0
 8002360:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002362:	2300      	movs	r3, #0
 8002364:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002366:	2300      	movs	r3, #0
 8002368:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800236a:	2300      	movs	r3, #0
 800236c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002376:	2301      	movs	r3, #1
 8002378:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800237c:	2320      	movs	r3, #32
 800237e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002382:	2301      	movs	r3, #1
 8002384:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800238e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002394:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002398:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80023a0:	2302      	movs	r3, #2
 80023a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80023b8:	2301      	movs	r3, #1
 80023ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80023be:	2300      	movs	r3, #0
 80023c0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80023c2:	2301      	movs	r3, #1
 80023c4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80023c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023cc:	4619      	mov	r1, r3
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff fde6 	bl	8001fa0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80023d4:	2301      	movs	r3, #1
 80023d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80023d8:	2301      	movs	r3, #1
 80023da:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80023dc:	2300      	movs	r3, #0
 80023de:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002404:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800240a:	f107 0308 	add.w	r3, r7, #8
 800240e:	4619      	mov	r1, r3
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff fee1 	bl	80021d8 <ETH_SetDMAConfig>
}
 8002416:	bf00      	nop
 8002418:	3790      	adds	r7, #144	; 0x90
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002430:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002438:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800243a:	f002 f87d 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 800243e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4a1e      	ldr	r2, [pc, #120]	; (80024bc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d908      	bls.n	800245a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	4a1d      	ldr	r2, [pc, #116]	; (80024c0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d804      	bhi.n	800245a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	e027      	b.n	80024aa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	4a18      	ldr	r2, [pc, #96]	; (80024c0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d908      	bls.n	8002474 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	4a17      	ldr	r2, [pc, #92]	; (80024c4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d804      	bhi.n	8002474 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	e01a      	b.n	80024aa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4a13      	ldr	r2, [pc, #76]	; (80024c4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d903      	bls.n	8002484 <ETH_MAC_MDIO_ClkConfig+0x64>
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d911      	bls.n	80024a8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4a10      	ldr	r2, [pc, #64]	; (80024c8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d908      	bls.n	800249e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4a0f      	ldr	r2, [pc, #60]	; (80024cc <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d804      	bhi.n	800249e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e005      	b.n	80024aa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	e000      	b.n	80024aa <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80024a8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	01312cff 	.word	0x01312cff
 80024c0:	02160ebf 	.word	0x02160ebf
 80024c4:	039386ff 	.word	0x039386ff
 80024c8:	05f5e0ff 	.word	0x05f5e0ff
 80024cc:	08f0d17f 	.word	0x08f0d17f

080024d0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	e01d      	b.n	800251a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68d9      	ldr	r1, [r3, #12]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4613      	mov	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4413      	add	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	440b      	add	r3, r1
 80024ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2200      	movs	r2, #0
 80024fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2200      	movs	r2, #0
 8002506:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	3206      	adds	r2, #6
 8002510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	3301      	adds	r3, #1
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d9de      	bls.n	80024de <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	f241 132c 	movw	r3, #4396	; 0x112c
 800252e:	4413      	add	r3, r2
 8002530:	2203      	movs	r2, #3
 8002532:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68d9      	ldr	r1, [r3, #12]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	f241 1314 	movw	r3, #4372	; 0x1114
 8002540:	4413      	add	r3, r2
 8002542:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002550:	601a      	str	r2, [r3, #0]
}
 8002552:	bf00      	nop
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800255e:	b480      	push	{r7}
 8002560:	b085      	sub	sp, #20
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	e024      	b.n	80025b6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6919      	ldr	r1, [r3, #16]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4613      	mov	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	440b      	add	r3, r1
 800257c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2200      	movs	r2, #0
 8002588:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2200      	movs	r2, #0
 80025a0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	330a      	adds	r3, #10
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3301      	adds	r3, #1
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d9d7      	bls.n	800256c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	f241 1330 	movw	r3, #4400	; 0x1130
 80025e2:	4413      	add	r3, r2
 80025e4:	2203      	movs	r2, #3
 80025e6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6919      	ldr	r1, [r3, #16]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	f241 131c 	movw	r3, #4380	; 0x111c
 80025f4:	4413      	add	r3, r2
 80025f6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	f241 1328 	movw	r3, #4392	; 0x1128
 8002608:	4413      	add	r3, r2
 800260a:	6019      	str	r1, [r3, #0]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002626:	4b89      	ldr	r3, [pc, #548]	; (800284c <HAL_GPIO_Init+0x234>)
 8002628:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800262a:	e194      	b.n	8002956 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	2101      	movs	r1, #1
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 8186 	beq.w	8002950 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d00b      	beq.n	8002664 <HAL_GPIO_Init+0x4c>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d007      	beq.n	8002664 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002658:	2b11      	cmp	r3, #17
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b12      	cmp	r3, #18
 8002662:	d130      	bne.n	80026c6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800269a:	2201      	movs	r2, #1
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	f003 0201 	and.w	r2, r3, #1
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	2203      	movs	r2, #3
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0xee>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b12      	cmp	r3, #18
 8002704:	d123      	bne.n	800274e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	08da      	lsrs	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3208      	adds	r2, #8
 800270e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	220f      	movs	r2, #15
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	08da      	lsrs	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3208      	adds	r2, #8
 8002748:	69b9      	ldr	r1, [r7, #24]
 800274a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	2203      	movs	r2, #3
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0203 	and.w	r2, r3, #3
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80e0 	beq.w	8002950 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002790:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <HAL_GPIO_Init+0x238>)
 8002792:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002796:	4a2e      	ldr	r2, [pc, #184]	; (8002850 <HAL_GPIO_Init+0x238>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80027a0:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <HAL_GPIO_Init+0x238>)
 80027a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ae:	4a29      	ldr	r2, [pc, #164]	; (8002854 <HAL_GPIO_Init+0x23c>)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	089b      	lsrs	r3, r3, #2
 80027b4:	3302      	adds	r3, #2
 80027b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	220f      	movs	r2, #15
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a20      	ldr	r2, [pc, #128]	; (8002858 <HAL_GPIO_Init+0x240>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d052      	beq.n	8002880 <HAL_GPIO_Init+0x268>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a1f      	ldr	r2, [pc, #124]	; (800285c <HAL_GPIO_Init+0x244>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d031      	beq.n	8002846 <HAL_GPIO_Init+0x22e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a1e      	ldr	r2, [pc, #120]	; (8002860 <HAL_GPIO_Init+0x248>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d02b      	beq.n	8002842 <HAL_GPIO_Init+0x22a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <HAL_GPIO_Init+0x24c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d025      	beq.n	800283e <HAL_GPIO_Init+0x226>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <HAL_GPIO_Init+0x250>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01f      	beq.n	800283a <HAL_GPIO_Init+0x222>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a1b      	ldr	r2, [pc, #108]	; (800286c <HAL_GPIO_Init+0x254>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d019      	beq.n	8002836 <HAL_GPIO_Init+0x21e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1a      	ldr	r2, [pc, #104]	; (8002870 <HAL_GPIO_Init+0x258>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <HAL_GPIO_Init+0x21a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a19      	ldr	r2, [pc, #100]	; (8002874 <HAL_GPIO_Init+0x25c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00d      	beq.n	800282e <HAL_GPIO_Init+0x216>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a18      	ldr	r2, [pc, #96]	; (8002878 <HAL_GPIO_Init+0x260>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d007      	beq.n	800282a <HAL_GPIO_Init+0x212>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a17      	ldr	r2, [pc, #92]	; (800287c <HAL_GPIO_Init+0x264>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d101      	bne.n	8002826 <HAL_GPIO_Init+0x20e>
 8002822:	2309      	movs	r3, #9
 8002824:	e02d      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 8002826:	230a      	movs	r3, #10
 8002828:	e02b      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 800282a:	2308      	movs	r3, #8
 800282c:	e029      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 800282e:	2307      	movs	r3, #7
 8002830:	e027      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 8002832:	2306      	movs	r3, #6
 8002834:	e025      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 8002836:	2305      	movs	r3, #5
 8002838:	e023      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 800283a:	2304      	movs	r3, #4
 800283c:	e021      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 800283e:	2303      	movs	r3, #3
 8002840:	e01f      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 8002842:	2302      	movs	r3, #2
 8002844:	e01d      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 8002846:	2301      	movs	r3, #1
 8002848:	e01b      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 800284a:	bf00      	nop
 800284c:	58000080 	.word	0x58000080
 8002850:	58024400 	.word	0x58024400
 8002854:	58000400 	.word	0x58000400
 8002858:	58020000 	.word	0x58020000
 800285c:	58020400 	.word	0x58020400
 8002860:	58020800 	.word	0x58020800
 8002864:	58020c00 	.word	0x58020c00
 8002868:	58021000 	.word	0x58021000
 800286c:	58021400 	.word	0x58021400
 8002870:	58021800 	.word	0x58021800
 8002874:	58021c00 	.word	0x58021c00
 8002878:	58022000 	.word	0x58022000
 800287c:	58022400 	.word	0x58022400
 8002880:	2300      	movs	r3, #0
 8002882:	69fa      	ldr	r2, [r7, #28]
 8002884:	f002 0203 	and.w	r2, r2, #3
 8002888:	0092      	lsls	r2, r2, #2
 800288a:	4093      	lsls	r3, r2
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002892:	4938      	ldr	r1, [pc, #224]	; (8002974 <HAL_GPIO_Init+0x35c>)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	089b      	lsrs	r3, r3, #2
 8002898:	3302      	adds	r3, #2
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800291a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002948:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	3301      	adds	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	f47f ae63 	bne.w	800262c <HAL_GPIO_Init+0x14>
  }
}
 8002966:	bf00      	nop
 8002968:	3724      	adds	r7, #36	; 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	58000400 	.word	0x58000400

08002978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	807b      	strh	r3, [r7, #2]
 8002984:	4613      	mov	r3, r2
 8002986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002988:	787b      	ldrb	r3, [r7, #1]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800298e:	887a      	ldrh	r2, [r7, #2]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002994:	e003      	b.n	800299e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002996:	887b      	ldrh	r3, [r7, #2]
 8002998:	041a      	lsls	r2, r3, #16
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	619a      	str	r2, [r3, #24]
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	887b      	ldrh	r3, [r7, #2]
 80029bc:	401a      	ands	r2, r3
 80029be:	887b      	ldrh	r3, [r7, #2]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d104      	bne.n	80029ce <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029c4:	887b      	ldrh	r3, [r7, #2]
 80029c6:	041a      	lsls	r2, r3, #16
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80029cc:	e002      	b.n	80029d4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	619a      	str	r2, [r3, #24]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e07f      	b.n	8002af2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe fd9a 	bl	8001540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2224      	movs	r2, #36	; 0x24
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d107      	bne.n	8002a5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	e006      	b.n	8002a68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d104      	bne.n	8002a7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HAL_I2C_Init+0x11c>)
 8002a86:	430b      	orrs	r3, r1
 8002a88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	ea42 0103 	orr.w	r1, r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	021a      	lsls	r2, r3, #8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69d9      	ldr	r1, [r3, #28]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1a      	ldr	r2, [r3, #32]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	02008000 	.word	0x02008000

08002b00 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	f040 80f5 	bne.w	8002d08 <HAL_I2C_Slave_Transmit+0x208>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <HAL_I2C_Slave_Transmit+0x2a>
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d105      	bne.n	8002b36 <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e0e9      	b.n	8002d0a <HAL_I2C_Slave_Transmit+0x20a>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_I2C_Slave_Transmit+0x44>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e0e2      	b.n	8002d0a <HAL_I2C_Slave_Transmit+0x20a>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b4c:	f7ff f820 	bl	8001b90 <HAL_GetTick>
 8002b50:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2221      	movs	r2, #33	; 0x21
 8002b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	88fa      	ldrh	r2, [r7, #6]
 8002b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b88:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2200      	movs	r2, #0
 8002b92:	2108      	movs	r1, #8
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f9df 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d009      	beq.n	8002bb4 <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bae:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0aa      	b.n	8002d0a <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2208      	movs	r2, #8
 8002bba:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d118      	bne.n	8002bf6 <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2108      	movs	r1, #8
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 f9c2 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002be8:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e08d      	b.n	8002d0a <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f9a8 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d02d      	beq.n	8002c6a <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c1c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e073      	b.n	8002d0a <HAL_I2C_Slave_Transmit+0x20a>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	6839      	ldr	r1, [r7, #0]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f9d6 	bl	8002fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c40:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e061      	b.n	8002d0a <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	781a      	ldrb	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1d6      	bne.n	8002c22 <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	6839      	ldr	r1, [r7, #0]
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f9ed 	bl	8003058 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d011      	beq.n	8002ca8 <HAL_I2C_Slave_Transmit+0x1a8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c92:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d103      	bne.n	8002ca4 <HAL_I2C_Slave_Transmit+0x1a4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	645a      	str	r2, [r3, #68]	; 0x44
 8002ca2:	e001      	b.n	8002ca8 <HAL_I2C_Slave_Transmit+0x1a8>
      }
      else
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e030      	b.n	8002d0a <HAL_I2C_Slave_Transmit+0x20a>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2220      	movs	r2, #32
 8002cae:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f94b 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d009      	beq.n	8002cdc <HAL_I2C_Slave_Transmit+0x1dc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cd6:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e016      	b.n	8002d0a <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	e000      	b.n	8002d0a <HAL_I2C_Slave_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002d08:	2302      	movs	r3, #2
  }
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b088      	sub	sp, #32
 8002d16:	af02      	add	r7, sp, #8
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	f040 80eb 	bne.w	8002f06 <HAL_I2C_Slave_Receive+0x1f4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <HAL_I2C_Slave_Receive+0x2a>
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d105      	bne.n	8002d48 <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0df      	b.n	8002f08 <HAL_I2C_Slave_Receive+0x1f6>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_I2C_Slave_Receive+0x44>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e0d8      	b.n	8002f08 <HAL_I2C_Slave_Receive+0x1f6>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d5e:	f7fe ff17 	bl	8001b90 <HAL_GetTick>
 8002d62:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2222      	movs	r2, #34	; 0x22
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	88fa      	ldrh	r2, [r7, #6]
 8002d84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d9a:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2200      	movs	r2, #0
 8002da4:	2108      	movs	r1, #8
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f8d6 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d009      	beq.n	8002dc6 <HAL_I2C_Slave_Receive+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dc0:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e0a0      	b.n	8002f08 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2208      	movs	r2, #8
 8002dcc:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f8bc 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d048      	beq.n	8002e78 <HAL_I2C_Slave_Receive+0x166>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002df4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e086      	b.n	8002f08 <HAL_I2C_Slave_Receive+0x1f6>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	6839      	ldr	r1, [r7, #0]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f966 	bl	80030d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d023      	beq.n	8002e52 <HAL_I2C_Slave_Receive+0x140>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e18:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d112      	bne.n	8002e4e <HAL_I2C_Slave_Receive+0x13c>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
        }

        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e05a      	b.n	8002f08 <HAL_I2C_Slave_Receive+0x1f6>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1bb      	bne.n	8002dfa <HAL_I2C_Slave_Receive+0xe8>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	6839      	ldr	r1, [r7, #0]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f8e6 	bl	8003058 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d009      	beq.n	8002ea6 <HAL_I2C_Slave_Receive+0x194>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ea0:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e030      	b.n	8002f08 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f84c 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <HAL_I2C_Slave_Receive+0x1c8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ed4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e016      	b.n	8002f08 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ee8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2220      	movs	r2, #32
 8002eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e000      	b.n	8002f08 <HAL_I2C_Slave_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
  }
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d103      	bne.n	8002f2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d007      	beq.n	8002f4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	619a      	str	r2, [r3, #24]
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f68:	e022      	b.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d01e      	beq.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f72:	f7fe fe0d 	bl	8001b90 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d113      	bne.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e00f      	b.n	8002fd0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2301      	moveq	r3, #1
 8002fc2:	2300      	movne	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d0cd      	beq.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fe4:	e02c      	b.n	8003040 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f8dc 	bl	80031a8 <I2C_IsAcknowledgeFailed>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e02a      	b.n	8003050 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d01e      	beq.n	8003040 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003002:	f7fe fdc5 	bl	8001b90 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	429a      	cmp	r2, r3
 8003010:	d302      	bcc.n	8003018 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d113      	bne.n	8003040 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301c:	f043 0220 	orr.w	r2, r3, #32
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e007      	b.n	8003050 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b02      	cmp	r3, #2
 800304c:	d1cb      	bne.n	8002fe6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003064:	e028      	b.n	80030b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f89c 	bl	80031a8 <I2C_IsAcknowledgeFailed>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e026      	b.n	80030c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307a:	f7fe fd89 	bl	8001b90 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	429a      	cmp	r2, r3
 8003088:	d302      	bcc.n	8003090 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d113      	bne.n	80030b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	f043 0220 	orr.w	r2, r3, #32
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e007      	b.n	80030c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	d1cf      	bne.n	8003066 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030dc:	e055      	b.n	800318a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f860 	bl	80031a8 <I2C_IsAcknowledgeFailed>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e053      	b.n	800319a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d129      	bne.n	8003154 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b04      	cmp	r3, #4
 800310c:	d105      	bne.n	800311a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e03f      	b.n	800319a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2220      	movs	r2, #32
 8003120:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800312e:	400b      	ands	r3, r1
 8003130:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e022      	b.n	800319a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003154:	f7fe fd1c 	bl	8001b90 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	429a      	cmp	r2, r3
 8003162:	d302      	bcc.n	800316a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10f      	bne.n	800318a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	f043 0220 	orr.w	r2, r3, #32
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e007      	b.n	800319a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b04      	cmp	r3, #4
 8003196:	d1a2      	bne.n	80030de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	fe00e800 	.word	0xfe00e800

080031a8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b10      	cmp	r3, #16
 80031c0:	d151      	bne.n	8003266 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031c2:	e022      	b.n	800320a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ca:	d01e      	beq.n	800320a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031cc:	f7fe fce0 	bl	8001b90 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d302      	bcc.n	80031e2 <I2C_IsAcknowledgeFailed+0x3a>
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d113      	bne.n	800320a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f043 0220 	orr.w	r2, r3, #32
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e02e      	b.n	8003268 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b20      	cmp	r3, #32
 8003216:	d1d5      	bne.n	80031c4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2210      	movs	r2, #16
 800321e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2220      	movs	r2, #32
 8003226:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f7ff fe71 	bl	8002f10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6859      	ldr	r1, [r3, #4]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <I2C_IsAcknowledgeFailed+0xc8>)
 800323a:	400b      	ands	r3, r1
 800323c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	f043 0204 	orr.w	r2, r3, #4
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	fe00e800 	.word	0xfe00e800

08003274 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b20      	cmp	r3, #32
 8003288:	d138      	bne.n	80032fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003294:	2302      	movs	r3, #2
 8003296:	e032      	b.n	80032fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2224      	movs	r2, #36	; 0x24
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6819      	ldr	r1, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	e000      	b.n	80032fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032fc:	2302      	movs	r3, #2
  }
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b20      	cmp	r3, #32
 800331e:	d139      	bne.n	8003394 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800332a:	2302      	movs	r3, #2
 800332c:	e033      	b.n	8003396 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2224      	movs	r2, #36	; 0x24
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0201 	bic.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800335c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4313      	orrs	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	e000      	b.n	8003396 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003394:	2302      	movs	r3, #2
  }
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033a4:	b08f      	sub	sp, #60	; 0x3c
 80033a6:	af0a      	add	r7, sp, #40	; 0x28
 80033a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e116      	b.n	80035e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fe fa02 	bl	80017d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2203      	movs	r2, #3
 80033d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f005 f95e 	bl	80086b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	687e      	ldr	r6, [r7, #4]
 8003400:	466d      	mov	r5, sp
 8003402:	f106 0410 	add.w	r4, r6, #16
 8003406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003408:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800340a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800340c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800340e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003412:	e885 0003 	stmia.w	r5, {r0, r1}
 8003416:	1d33      	adds	r3, r6, #4
 8003418:	cb0e      	ldmia	r3, {r1, r2, r3}
 800341a:	6838      	ldr	r0, [r7, #0]
 800341c:	f005 f8e8 	bl	80085f0 <USB_CoreInit>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2202      	movs	r2, #2
 800342a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e0d7      	b.n	80035e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2100      	movs	r1, #0
 8003438:	4618      	mov	r0, r3
 800343a:	f005 f94c 	bl	80086d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800343e:	2300      	movs	r3, #0
 8003440:	73fb      	strb	r3, [r7, #15]
 8003442:	e04a      	b.n	80034da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	333d      	adds	r3, #61	; 0x3d
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	333c      	adds	r3, #60	; 0x3c
 8003468:	7bfa      	ldrb	r2, [r7, #15]
 800346a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800346c:	7bfa      	ldrb	r2, [r7, #15]
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	b298      	uxth	r0, r3
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	3342      	adds	r3, #66	; 0x42
 8003480:	4602      	mov	r2, r0
 8003482:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003484:	7bfa      	ldrb	r2, [r7, #15]
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	333f      	adds	r3, #63	; 0x3f
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003498:	7bfa      	ldrb	r2, [r7, #15]
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	3344      	adds	r3, #68	; 0x44
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	3348      	adds	r3, #72	; 0x48
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034c0:	7bfa      	ldrb	r2, [r7, #15]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	3350      	adds	r3, #80	; 0x50
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	3301      	adds	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
 80034da:	7bfa      	ldrb	r2, [r7, #15]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d3af      	bcc.n	8003444 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e4:	2300      	movs	r3, #0
 80034e6:	73fb      	strb	r3, [r7, #15]
 80034e8:	e044      	b.n	8003574 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003542:	7bfa      	ldrb	r2, [r7, #15]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003558:	7bfa      	ldrb	r2, [r7, #15]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	3301      	adds	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
 8003574:	7bfa      	ldrb	r2, [r7, #15]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	429a      	cmp	r2, r3
 800357c:	d3b5      	bcc.n	80034ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	687e      	ldr	r6, [r7, #4]
 8003586:	466d      	mov	r5, sp
 8003588:	f106 0410 	add.w	r4, r6, #16
 800358c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800358e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003594:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003598:	e885 0003 	stmia.w	r5, {r0, r1}
 800359c:	1d33      	adds	r3, r6, #4
 800359e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035a0:	6838      	ldr	r0, [r7, #0]
 80035a2:	f005 f8c3 	bl	800872c <USB_DevInit>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e014      	b.n	80035e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d102      	bne.n	80035d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f80b 	bl	80035ec <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f005 fa65 	bl	8008aaa <USB_DevDisconnect>

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080035ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_PCDEx_ActivateLPM+0x44>)
 800361c:	4313      	orrs	r3, r2
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	10000003 	.word	0x10000003

08003634 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800363c:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <HAL_PWREx_ConfigSupply+0x70>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b04      	cmp	r3, #4
 8003646:	d00a      	beq.n	800365e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003648:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <HAL_PWREx_ConfigSupply+0x70>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	429a      	cmp	r2, r3
 8003654:	d001      	beq.n	800365a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e01f      	b.n	800369a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	e01d      	b.n	800369a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800365e:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <HAL_PWREx_ConfigSupply+0x70>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f023 0207 	bic.w	r2, r3, #7
 8003666:	490f      	ldr	r1, [pc, #60]	; (80036a4 <HAL_PWREx_ConfigSupply+0x70>)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4313      	orrs	r3, r2
 800366c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800366e:	f7fe fa8f 	bl	8001b90 <HAL_GetTick>
 8003672:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003674:	e009      	b.n	800368a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003676:	f7fe fa8b 	bl	8001b90 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003684:	d901      	bls.n	800368a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e007      	b.n	800369a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_PWREx_ConfigSupply+0x70>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003696:	d1ee      	bne.n	8003676 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	58024800 	.word	0x58024800

080036a8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80036b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b6:	60d3      	str	r3, [r2, #12]
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	58024800 	.word	0x58024800

080036c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08c      	sub	sp, #48	; 0x30
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e3ff      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 8087 	beq.w	80037f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e8:	4b99      	ldr	r3, [pc, #612]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036f2:	4b97      	ldr	r3, [pc, #604]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d007      	beq.n	800370e <HAL_RCC_OscConfig+0x46>
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	2b18      	cmp	r3, #24
 8003702:	d110      	bne.n	8003726 <HAL_RCC_OscConfig+0x5e>
 8003704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d10b      	bne.n	8003726 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370e:	4b90      	ldr	r3, [pc, #576]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d06c      	beq.n	80037f4 <HAL_RCC_OscConfig+0x12c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d168      	bne.n	80037f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e3d9      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372e:	d106      	bne.n	800373e <HAL_RCC_OscConfig+0x76>
 8003730:	4b87      	ldr	r3, [pc, #540]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a86      	ldr	r2, [pc, #536]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	e02e      	b.n	800379c <HAL_RCC_OscConfig+0xd4>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10c      	bne.n	8003760 <HAL_RCC_OscConfig+0x98>
 8003746:	4b82      	ldr	r3, [pc, #520]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a81      	ldr	r2, [pc, #516]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 800374c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	4b7f      	ldr	r3, [pc, #508]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a7e      	ldr	r2, [pc, #504]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	e01d      	b.n	800379c <HAL_RCC_OscConfig+0xd4>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003768:	d10c      	bne.n	8003784 <HAL_RCC_OscConfig+0xbc>
 800376a:	4b79      	ldr	r3, [pc, #484]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a78      	ldr	r2, [pc, #480]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	4b76      	ldr	r3, [pc, #472]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a75      	ldr	r2, [pc, #468]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 800377c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e00b      	b.n	800379c <HAL_RCC_OscConfig+0xd4>
 8003784:	4b72      	ldr	r3, [pc, #456]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a71      	ldr	r2, [pc, #452]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 800378a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	4b6f      	ldr	r3, [pc, #444]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a6e      	ldr	r2, [pc, #440]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800379a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d013      	beq.n	80037cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7fe f9f4 	bl	8001b90 <HAL_GetTick>
 80037a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ac:	f7fe f9f0 	bl	8001b90 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	; 0x64
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e38d      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037be:	4b64      	ldr	r3, [pc, #400]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0xe4>
 80037ca:	e014      	b.n	80037f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe f9e0 	bl	8001b90 <HAL_GetTick>
 80037d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d4:	f7fe f9dc 	bl	8001b90 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	; 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e379      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037e6:	4b5a      	ldr	r3, [pc, #360]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x10c>
 80037f2:	e000      	b.n	80037f6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 80ae 	beq.w	8003960 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003804:	4b52      	ldr	r3, [pc, #328]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800380c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800380e:	4b50      	ldr	r3, [pc, #320]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <HAL_RCC_OscConfig+0x162>
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	2b18      	cmp	r3, #24
 800381e:	d13a      	bne.n	8003896 <HAL_RCC_OscConfig+0x1ce>
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d135      	bne.n	8003896 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800382a:	4b49      	ldr	r3, [pc, #292]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <HAL_RCC_OscConfig+0x17a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e34b      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003842:	f7fe f9d3 	bl	8001bec <HAL_GetREVID>
 8003846:	4602      	mov	r2, r0
 8003848:	f241 0303 	movw	r3, #4099	; 0x1003
 800384c:	429a      	cmp	r2, r3
 800384e:	d817      	bhi.n	8003880 <HAL_RCC_OscConfig+0x1b8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d108      	bne.n	800386a <HAL_RCC_OscConfig+0x1a2>
 8003858:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003860:	4a3b      	ldr	r2, [pc, #236]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003866:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003868:	e07a      	b.n	8003960 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386a:	4b39      	ldr	r3, [pc, #228]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	031b      	lsls	r3, r3, #12
 8003878:	4935      	ldr	r1, [pc, #212]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 800387a:	4313      	orrs	r3, r2
 800387c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800387e:	e06f      	b.n	8003960 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003880:	4b33      	ldr	r3, [pc, #204]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	061b      	lsls	r3, r3, #24
 800388e:	4930      	ldr	r1, [pc, #192]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003894:	e064      	b.n	8003960 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d045      	beq.n	800392a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800389e:	4b2c      	ldr	r3, [pc, #176]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 0219 	bic.w	r2, r3, #25
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	4929      	ldr	r1, [pc, #164]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fe f96e 	bl	8001b90 <HAL_GetTick>
 80038b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038b8:	f7fe f96a 	bl	8001b90 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e307      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038ca:	4b21      	ldr	r3, [pc, #132]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d6:	f7fe f989 	bl	8001bec <HAL_GetREVID>
 80038da:	4602      	mov	r2, r0
 80038dc:	f241 0303 	movw	r3, #4099	; 0x1003
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d817      	bhi.n	8003914 <HAL_RCC_OscConfig+0x24c>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	2b40      	cmp	r3, #64	; 0x40
 80038ea:	d108      	bne.n	80038fe <HAL_RCC_OscConfig+0x236>
 80038ec:	4b18      	ldr	r3, [pc, #96]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80038f4:	4a16      	ldr	r2, [pc, #88]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 80038f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038fa:	6053      	str	r3, [r2, #4]
 80038fc:	e030      	b.n	8003960 <HAL_RCC_OscConfig+0x298>
 80038fe:	4b14      	ldr	r3, [pc, #80]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	031b      	lsls	r3, r3, #12
 800390c:	4910      	ldr	r1, [pc, #64]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 800390e:	4313      	orrs	r3, r2
 8003910:	604b      	str	r3, [r1, #4]
 8003912:	e025      	b.n	8003960 <HAL_RCC_OscConfig+0x298>
 8003914:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	061b      	lsls	r3, r3, #24
 8003922:	490b      	ldr	r1, [pc, #44]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]
 8003928:	e01a      	b.n	8003960 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a08      	ldr	r2, [pc, #32]	; (8003950 <HAL_RCC_OscConfig+0x288>)
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003936:	f7fe f92b 	bl	8001b90 <HAL_GetTick>
 800393a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800393c:	e00a      	b.n	8003954 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800393e:	f7fe f927 	bl	8001b90 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d903      	bls.n	8003954 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e2c4      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
 8003950:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003954:	4ba4      	ldr	r3, [pc, #656]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1ee      	bne.n	800393e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80a9 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800396e:	4b9e      	ldr	r3, [pc, #632]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003976:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003978:	4b9b      	ldr	r3, [pc, #620]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b08      	cmp	r3, #8
 8003982:	d007      	beq.n	8003994 <HAL_RCC_OscConfig+0x2cc>
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2b18      	cmp	r3, #24
 8003988:	d13a      	bne.n	8003a00 <HAL_RCC_OscConfig+0x338>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d135      	bne.n	8003a00 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003994:	4b94      	ldr	r3, [pc, #592]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_RCC_OscConfig+0x2e4>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	2b80      	cmp	r3, #128	; 0x80
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e296      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039ac:	f7fe f91e 	bl	8001bec <HAL_GetREVID>
 80039b0:	4602      	mov	r2, r0
 80039b2:	f241 0303 	movw	r3, #4099	; 0x1003
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d817      	bhi.n	80039ea <HAL_RCC_OscConfig+0x322>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d108      	bne.n	80039d4 <HAL_RCC_OscConfig+0x30c>
 80039c2:	4b89      	ldr	r3, [pc, #548]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80039ca:	4a87      	ldr	r2, [pc, #540]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 80039cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039d0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039d2:	e075      	b.n	8003ac0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039d4:	4b84      	ldr	r3, [pc, #528]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	069b      	lsls	r3, r3, #26
 80039e2:	4981      	ldr	r1, [pc, #516]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039e8:	e06a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039ea:	4b7f      	ldr	r3, [pc, #508]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	061b      	lsls	r3, r3, #24
 80039f8:	497b      	ldr	r1, [pc, #492]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039fe:	e05f      	b.n	8003ac0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d042      	beq.n	8003a8e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a08:	4b77      	ldr	r3, [pc, #476]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a76      	ldr	r2, [pc, #472]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a14:	f7fe f8bc 	bl	8001b90 <HAL_GetTick>
 8003a18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a1c:	f7fe f8b8 	bl	8001b90 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e255      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a2e:	4b6e      	ldr	r3, [pc, #440]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a3a:	f7fe f8d7 	bl	8001bec <HAL_GetREVID>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	f241 0303 	movw	r3, #4099	; 0x1003
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d817      	bhi.n	8003a78 <HAL_RCC_OscConfig+0x3b0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d108      	bne.n	8003a62 <HAL_RCC_OscConfig+0x39a>
 8003a50:	4b65      	ldr	r3, [pc, #404]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a58:	4a63      	ldr	r2, [pc, #396]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003a5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a5e:	6053      	str	r3, [r2, #4]
 8003a60:	e02e      	b.n	8003ac0 <HAL_RCC_OscConfig+0x3f8>
 8003a62:	4b61      	ldr	r3, [pc, #388]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	069b      	lsls	r3, r3, #26
 8003a70:	495d      	ldr	r1, [pc, #372]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	604b      	str	r3, [r1, #4]
 8003a76:	e023      	b.n	8003ac0 <HAL_RCC_OscConfig+0x3f8>
 8003a78:	4b5b      	ldr	r3, [pc, #364]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	061b      	lsls	r3, r3, #24
 8003a86:	4958      	ldr	r1, [pc, #352]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60cb      	str	r3, [r1, #12]
 8003a8c:	e018      	b.n	8003ac0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a8e:	4b56      	ldr	r3, [pc, #344]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a55      	ldr	r2, [pc, #340]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9a:	f7fe f879 	bl	8001b90 <HAL_GetTick>
 8003a9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003aa2:	f7fe f875 	bl	8001b90 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e212      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ab4:	4b4c      	ldr	r3, [pc, #304]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f0      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d036      	beq.n	8003b3a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d019      	beq.n	8003b08 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad4:	4b44      	ldr	r3, [pc, #272]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad8:	4a43      	ldr	r2, [pc, #268]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003ada:	f043 0301 	orr.w	r3, r3, #1
 8003ade:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae0:	f7fe f856 	bl	8001b90 <HAL_GetTick>
 8003ae4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae8:	f7fe f852 	bl	8001b90 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e1ef      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003afa:	4b3b      	ldr	r3, [pc, #236]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x420>
 8003b06:	e018      	b.n	8003b3a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b08:	4b37      	ldr	r3, [pc, #220]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0c:	4a36      	ldr	r2, [pc, #216]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fe f83c 	bl	8001b90 <HAL_GetTick>
 8003b18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1c:	f7fe f838 	bl	8001b90 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e1d5      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b2e:	4b2e      	ldr	r3, [pc, #184]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d036      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d019      	beq.n	8003b82 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b4e:	4b26      	ldr	r3, [pc, #152]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a25      	ldr	r2, [pc, #148]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003b54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b5a:	f7fe f819 	bl	8001b90 <HAL_GetTick>
 8003b5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b62:	f7fe f815 	bl	8001b90 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e1b2      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b74:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x49a>
 8003b80:	e018      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b82:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003b88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b8e:	f7fd ffff 	bl	8001b90 <HAL_GetTick>
 8003b92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b96:	f7fd fffb 	bl	8001b90 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e198      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ba8:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <HAL_RCC_OscConfig+0x520>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f0      	bne.n	8003b96 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 8085 	beq.w	8003ccc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <HAL_RCC_OscConfig+0x524>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a09      	ldr	r2, [pc, #36]	; (8003bec <HAL_RCC_OscConfig+0x524>)
 8003bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bce:	f7fd ffdf 	bl	8001b90 <HAL_GetTick>
 8003bd2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bd4:	e00c      	b.n	8003bf0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003bd6:	f7fd ffdb 	bl	8001b90 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b64      	cmp	r3, #100	; 0x64
 8003be2:	d905      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e178      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
 8003be8:	58024400 	.word	0x58024400
 8003bec:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bf0:	4b96      	ldr	r3, [pc, #600]	; (8003e4c <HAL_RCC_OscConfig+0x784>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ec      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d106      	bne.n	8003c12 <HAL_RCC_OscConfig+0x54a>
 8003c04:	4b92      	ldr	r3, [pc, #584]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	4a91      	ldr	r2, [pc, #580]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c10:	e02d      	b.n	8003c6e <HAL_RCC_OscConfig+0x5a6>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x56c>
 8003c1a:	4b8d      	ldr	r3, [pc, #564]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	4a8c      	ldr	r2, [pc, #560]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	6713      	str	r3, [r2, #112]	; 0x70
 8003c26:	4b8a      	ldr	r3, [pc, #552]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	4a89      	ldr	r2, [pc, #548]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003c2c:	f023 0304 	bic.w	r3, r3, #4
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70
 8003c32:	e01c      	b.n	8003c6e <HAL_RCC_OscConfig+0x5a6>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b05      	cmp	r3, #5
 8003c3a:	d10c      	bne.n	8003c56 <HAL_RCC_OscConfig+0x58e>
 8003c3c:	4b84      	ldr	r3, [pc, #528]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c40:	4a83      	ldr	r2, [pc, #524]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003c42:	f043 0304 	orr.w	r3, r3, #4
 8003c46:	6713      	str	r3, [r2, #112]	; 0x70
 8003c48:	4b81      	ldr	r3, [pc, #516]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	4a80      	ldr	r2, [pc, #512]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6713      	str	r3, [r2, #112]	; 0x70
 8003c54:	e00b      	b.n	8003c6e <HAL_RCC_OscConfig+0x5a6>
 8003c56:	4b7e      	ldr	r3, [pc, #504]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5a:	4a7d      	ldr	r2, [pc, #500]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	6713      	str	r3, [r2, #112]	; 0x70
 8003c62:	4b7b      	ldr	r3, [pc, #492]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	4a7a      	ldr	r2, [pc, #488]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003c68:	f023 0304 	bic.w	r3, r3, #4
 8003c6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d015      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c76:	f7fd ff8b 	bl	8001b90 <HAL_GetTick>
 8003c7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fd ff87 	bl	8001b90 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e122      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c94:	4b6e      	ldr	r3, [pc, #440]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0ee      	beq.n	8003c7e <HAL_RCC_OscConfig+0x5b6>
 8003ca0:	e014      	b.n	8003ccc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca2:	f7fd ff75 	bl	8001b90 <HAL_GetTick>
 8003ca6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ca8:	e00a      	b.n	8003cc0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003caa:	f7fd ff71 	bl	8001b90 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e10c      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cc0:	4b63      	ldr	r3, [pc, #396]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1ee      	bne.n	8003caa <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8101 	beq.w	8003ed8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003cd6:	4b5e      	ldr	r3, [pc, #376]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cde:	2b18      	cmp	r3, #24
 8003ce0:	f000 80bc 	beq.w	8003e5c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	f040 8095 	bne.w	8003e18 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cee:	4b58      	ldr	r3, [pc, #352]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a57      	ldr	r2, [pc, #348]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003cf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfa:	f7fd ff49 	bl	8001b90 <HAL_GetTick>
 8003cfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d02:	f7fd ff45 	bl	8001b90 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e0e2      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d14:	4b4e      	ldr	r3, [pc, #312]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f0      	bne.n	8003d02 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d20:	4b4b      	ldr	r3, [pc, #300]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d24:	4b4b      	ldr	r3, [pc, #300]	; (8003e54 <HAL_RCC_OscConfig+0x78c>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d30:	0112      	lsls	r2, r2, #4
 8003d32:	430a      	orrs	r2, r1
 8003d34:	4946      	ldr	r1, [pc, #280]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	628b      	str	r3, [r1, #40]	; 0x28
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	025b      	lsls	r3, r3, #9
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	3b01      	subs	r3, #1
 8003d56:	041b      	lsls	r3, r3, #16
 8003d58:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d62:	3b01      	subs	r3, #1
 8003d64:	061b      	lsls	r3, r3, #24
 8003d66:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d6a:	4939      	ldr	r1, [pc, #228]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003d70:	4b37      	ldr	r3, [pc, #220]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	4a36      	ldr	r2, [pc, #216]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d7c:	4b34      	ldr	r3, [pc, #208]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d80:	4b35      	ldr	r3, [pc, #212]	; (8003e58 <HAL_RCC_OscConfig+0x790>)
 8003d82:	4013      	ands	r3, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d88:	00d2      	lsls	r2, r2, #3
 8003d8a:	4931      	ldr	r1, [pc, #196]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d90:	4b2f      	ldr	r3, [pc, #188]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	f023 020c 	bic.w	r2, r3, #12
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	492c      	ldr	r1, [pc, #176]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003da2:	4b2b      	ldr	r3, [pc, #172]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	f023 0202 	bic.w	r2, r3, #2
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	4928      	ldr	r1, [pc, #160]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003db4:	4b26      	ldr	r3, [pc, #152]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	4a25      	ldr	r2, [pc, #148]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc0:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	4a22      	ldr	r2, [pc, #136]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003dcc:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	4a1f      	ldr	r2, [pc, #124]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003dd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de4:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a19      	ldr	r2, [pc, #100]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fd fece 	bl	8001b90 <HAL_GetTick>
 8003df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df8:	f7fd feca 	bl	8001b90 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e067      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e0a:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0x730>
 8003e16:	e05f      	b.n	8003ed8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e18:	4b0d      	ldr	r3, [pc, #52]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a0c      	ldr	r2, [pc, #48]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e24:	f7fd feb4 	bl	8001b90 <HAL_GetTick>
 8003e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e2c:	f7fd feb0 	bl	8001b90 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e04d      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e3e:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <HAL_RCC_OscConfig+0x788>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0x764>
 8003e4a:	e045      	b.n	8003ed8 <HAL_RCC_OscConfig+0x810>
 8003e4c:	58024800 	.word	0x58024800
 8003e50:	58024400 	.word	0x58024400
 8003e54:	fffffc0c 	.word	0xfffffc0c
 8003e58:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e5c:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <HAL_RCC_OscConfig+0x81c>)
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e62:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <HAL_RCC_OscConfig+0x81c>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d031      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f003 0203 	and.w	r2, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d12a      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d122      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d11a      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	0a5b      	lsrs	r3, r3, #9
 8003ea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eaa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d111      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	0c1b      	lsrs	r3, r3, #16
 8003eb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d108      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	0e1b      	lsrs	r3, r3, #24
 8003ec6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ece:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3730      	adds	r7, #48	; 0x30
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	58024400 	.word	0x58024400

08003ee8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e19c      	b.n	8004236 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003efc:	4b8a      	ldr	r3, [pc, #552]	; (8004128 <HAL_RCC_ClockConfig+0x240>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d910      	bls.n	8003f2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0a:	4b87      	ldr	r3, [pc, #540]	; (8004128 <HAL_RCC_ClockConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 020f 	bic.w	r2, r3, #15
 8003f12:	4985      	ldr	r1, [pc, #532]	; (8004128 <HAL_RCC_ClockConfig+0x240>)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1a:	4b83      	ldr	r3, [pc, #524]	; (8004128 <HAL_RCC_ClockConfig+0x240>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e184      	b.n	8004236 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d010      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	4b7b      	ldr	r3, [pc, #492]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d908      	bls.n	8003f5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f48:	4b78      	ldr	r3, [pc, #480]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	4975      	ldr	r1, [pc, #468]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d010      	beq.n	8003f88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695a      	ldr	r2, [r3, #20]
 8003f6a:	4b70      	ldr	r3, [pc, #448]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d908      	bls.n	8003f88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f76:	4b6d      	ldr	r3, [pc, #436]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	496a      	ldr	r1, [pc, #424]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d010      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699a      	ldr	r2, [r3, #24]
 8003f98:	4b64      	ldr	r3, [pc, #400]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d908      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003fa4:	4b61      	ldr	r3, [pc, #388]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	495e      	ldr	r1, [pc, #376]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d010      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69da      	ldr	r2, [r3, #28]
 8003fc6:	4b59      	ldr	r3, [pc, #356]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d908      	bls.n	8003fe4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003fd2:	4b56      	ldr	r3, [pc, #344]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	4953      	ldr	r1, [pc, #332]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d010      	beq.n	8004012 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	4b4d      	ldr	r3, [pc, #308]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d908      	bls.n	8004012 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004000:	4b4a      	ldr	r3, [pc, #296]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f023 020f 	bic.w	r2, r3, #15
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	4947      	ldr	r1, [pc, #284]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 800400e:	4313      	orrs	r3, r2
 8004010:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d055      	beq.n	80040ca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800401e:	4b43      	ldr	r3, [pc, #268]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	4940      	ldr	r1, [pc, #256]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 800402c:	4313      	orrs	r3, r2
 800402e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d107      	bne.n	8004048 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004038:	4b3c      	ldr	r3, [pc, #240]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d121      	bne.n	8004088 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0f6      	b.n	8004236 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b03      	cmp	r3, #3
 800404e:	d107      	bne.n	8004060 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004050:	4b36      	ldr	r3, [pc, #216]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d115      	bne.n	8004088 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e0ea      	b.n	8004236 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d107      	bne.n	8004078 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004068:	4b30      	ldr	r3, [pc, #192]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d109      	bne.n	8004088 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0de      	b.n	8004236 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004078:	4b2c      	ldr	r3, [pc, #176]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0d6      	b.n	8004236 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004088:	4b28      	ldr	r3, [pc, #160]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f023 0207 	bic.w	r2, r3, #7
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	4925      	ldr	r1, [pc, #148]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8004096:	4313      	orrs	r3, r2
 8004098:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409a:	f7fd fd79 	bl	8001b90 <HAL_GetTick>
 800409e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a0:	e00a      	b.n	80040b8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a2:	f7fd fd75 	bl	8001b90 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e0be      	b.n	8004236 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b8:	4b1c      	ldr	r3, [pc, #112]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d1eb      	bne.n	80040a2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d010      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	4b14      	ldr	r3, [pc, #80]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d208      	bcs.n	80040f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e6:	4b11      	ldr	r3, [pc, #68]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f023 020f 	bic.w	r2, r3, #15
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	490e      	ldr	r1, [pc, #56]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_RCC_ClockConfig+0x240>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d214      	bcs.n	8004130 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b08      	ldr	r3, [pc, #32]	; (8004128 <HAL_RCC_ClockConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 020f 	bic.w	r2, r3, #15
 800410e:	4906      	ldr	r1, [pc, #24]	; (8004128 <HAL_RCC_ClockConfig+0x240>)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	4b04      	ldr	r3, [pc, #16]	; (8004128 <HAL_RCC_ClockConfig+0x240>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d005      	beq.n	8004130 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e086      	b.n	8004236 <HAL_RCC_ClockConfig+0x34e>
 8004128:	52002000 	.word	0x52002000
 800412c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d010      	beq.n	800415e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	4b3f      	ldr	r3, [pc, #252]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004148:	429a      	cmp	r2, r3
 800414a:	d208      	bcs.n	800415e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800414c:	4b3c      	ldr	r3, [pc, #240]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	4939      	ldr	r1, [pc, #228]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 800415a:	4313      	orrs	r3, r2
 800415c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d010      	beq.n	800418c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	4b34      	ldr	r3, [pc, #208]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004176:	429a      	cmp	r2, r3
 8004178:	d208      	bcs.n	800418c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800417a:	4b31      	ldr	r3, [pc, #196]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	492e      	ldr	r1, [pc, #184]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 8004188:	4313      	orrs	r3, r2
 800418a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b00      	cmp	r3, #0
 8004196:	d010      	beq.n	80041ba <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699a      	ldr	r2, [r3, #24]
 800419c:	4b28      	ldr	r3, [pc, #160]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d208      	bcs.n	80041ba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041a8:	4b25      	ldr	r3, [pc, #148]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	4922      	ldr	r1, [pc, #136]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d010      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69da      	ldr	r2, [r3, #28]
 80041ca:	4b1d      	ldr	r3, [pc, #116]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d208      	bcs.n	80041e8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80041d6:	4b1a      	ldr	r3, [pc, #104]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	4917      	ldr	r1, [pc, #92]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041e8:	f000 f834 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 80041ec:	4601      	mov	r1, r0
 80041ee:	4b14      	ldr	r3, [pc, #80]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	0a1b      	lsrs	r3, r3, #8
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	4a12      	ldr	r2, [pc, #72]	; (8004244 <HAL_RCC_ClockConfig+0x35c>)
 80041fa:	5cd3      	ldrb	r3, [r2, r3]
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	fa21 f303 	lsr.w	r3, r1, r3
 8004204:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004206:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <HAL_RCC_ClockConfig+0x35c>)
 8004210:	5cd3      	ldrb	r3, [r2, r3]
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
 800421c:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <HAL_RCC_ClockConfig+0x360>)
 800421e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004220:	4a0a      	ldr	r2, [pc, #40]	; (800424c <HAL_RCC_ClockConfig+0x364>)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004226:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <HAL_RCC_ClockConfig+0x368>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7fd fb2c 	bl	8001888 <HAL_InitTick>
 8004230:	4603      	mov	r3, r0
 8004232:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004234:	7bfb      	ldrb	r3, [r7, #15]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	58024400 	.word	0x58024400
 8004244:	0800c87c 	.word	0x0800c87c
 8004248:	24000004 	.word	0x24000004
 800424c:	24000000 	.word	0x24000000
 8004250:	24000008 	.word	0x24000008

08004254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004254:	b480      	push	{r7}
 8004256:	b089      	sub	sp, #36	; 0x24
 8004258:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800425a:	4baf      	ldr	r3, [pc, #700]	; (8004518 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004262:	2b18      	cmp	r3, #24
 8004264:	f200 814e 	bhi.w	8004504 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004268:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <HAL_RCC_GetSysClockFreq+0x1c>)
 800426a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426e:	bf00      	nop
 8004270:	080042d5 	.word	0x080042d5
 8004274:	08004505 	.word	0x08004505
 8004278:	08004505 	.word	0x08004505
 800427c:	08004505 	.word	0x08004505
 8004280:	08004505 	.word	0x08004505
 8004284:	08004505 	.word	0x08004505
 8004288:	08004505 	.word	0x08004505
 800428c:	08004505 	.word	0x08004505
 8004290:	080042fb 	.word	0x080042fb
 8004294:	08004505 	.word	0x08004505
 8004298:	08004505 	.word	0x08004505
 800429c:	08004505 	.word	0x08004505
 80042a0:	08004505 	.word	0x08004505
 80042a4:	08004505 	.word	0x08004505
 80042a8:	08004505 	.word	0x08004505
 80042ac:	08004505 	.word	0x08004505
 80042b0:	08004301 	.word	0x08004301
 80042b4:	08004505 	.word	0x08004505
 80042b8:	08004505 	.word	0x08004505
 80042bc:	08004505 	.word	0x08004505
 80042c0:	08004505 	.word	0x08004505
 80042c4:	08004505 	.word	0x08004505
 80042c8:	08004505 	.word	0x08004505
 80042cc:	08004505 	.word	0x08004505
 80042d0:	08004307 	.word	0x08004307
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042d4:	4b90      	ldr	r3, [pc, #576]	; (8004518 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d009      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042e0:	4b8d      	ldr	r3, [pc, #564]	; (8004518 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	08db      	lsrs	r3, r3, #3
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	4a8c      	ldr	r2, [pc, #560]	; (800451c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
 80042f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80042f2:	e10a      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042f4:	4b89      	ldr	r3, [pc, #548]	; (800451c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80042f6:	61bb      	str	r3, [r7, #24]
    break;
 80042f8:	e107      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80042fa:	4b89      	ldr	r3, [pc, #548]	; (8004520 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80042fc:	61bb      	str	r3, [r7, #24]
    break;
 80042fe:	e104      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004300:	4b88      	ldr	r3, [pc, #544]	; (8004524 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004302:	61bb      	str	r3, [r7, #24]
    break;
 8004304:	e101      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004306:	4b84      	ldr	r3, [pc, #528]	; (8004518 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004310:	4b81      	ldr	r3, [pc, #516]	; (8004518 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	091b      	lsrs	r3, r3, #4
 8004316:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800431a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800431c:	4b7e      	ldr	r3, [pc, #504]	; (8004518 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004326:	4b7c      	ldr	r3, [pc, #496]	; (8004518 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432a:	08db      	lsrs	r3, r3, #3
 800432c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	fb02 f303 	mul.w	r3, r2, r3
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80da 	beq.w	80044fe <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d05a      	beq.n	8004406 <HAL_RCC_GetSysClockFreq+0x1b2>
 8004350:	2b01      	cmp	r3, #1
 8004352:	d302      	bcc.n	800435a <HAL_RCC_GetSysClockFreq+0x106>
 8004354:	2b02      	cmp	r3, #2
 8004356:	d078      	beq.n	800444a <HAL_RCC_GetSysClockFreq+0x1f6>
 8004358:	e099      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800435a:	4b6f      	ldr	r3, [pc, #444]	; (8004518 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0320 	and.w	r3, r3, #32
 8004362:	2b00      	cmp	r3, #0
 8004364:	d02d      	beq.n	80043c2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004366:	4b6c      	ldr	r3, [pc, #432]	; (8004518 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	08db      	lsrs	r3, r3, #3
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	4a6a      	ldr	r2, [pc, #424]	; (800451c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004372:	fa22 f303 	lsr.w	r3, r2, r3
 8004376:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	ee07 3a90 	vmov	s15, r3
 8004388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004390:	4b61      	ldr	r3, [pc, #388]	; (8004518 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004398:	ee07 3a90 	vmov	s15, r3
 800439c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80043a4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004528 <HAL_RCC_GetSysClockFreq+0x2d4>
 80043a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043bc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80043c0:	e087      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	ee07 3a90 	vmov	s15, r3
 80043c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043cc:	eddf 6a57 	vldr	s13, [pc, #348]	; 800452c <HAL_RCC_GetSysClockFreq+0x2d8>
 80043d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043d4:	4b50      	ldr	r3, [pc, #320]	; (8004518 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043dc:	ee07 3a90 	vmov	s15, r3
 80043e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80043e8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004528 <HAL_RCC_GetSysClockFreq+0x2d4>
 80043ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004400:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004404:	e065      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	ee07 3a90 	vmov	s15, r3
 800440c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004410:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004530 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004418:	4b3f      	ldr	r3, [pc, #252]	; (8004518 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004420:	ee07 3a90 	vmov	s15, r3
 8004424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004428:	ed97 6a02 	vldr	s12, [r7, #8]
 800442c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004528 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004438:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800443c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004444:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004448:	e043      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	ee07 3a90 	vmov	s15, r3
 8004450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004454:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004534 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800445c:	4b2e      	ldr	r3, [pc, #184]	; (8004518 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004464:	ee07 3a90 	vmov	s15, r3
 8004468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004470:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004528 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800447c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004488:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800448c:	e021      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	ee07 3a90 	vmov	s15, r3
 8004494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004498:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004530 <HAL_RCC_GetSysClockFreq+0x2dc>
 800449c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044a0:	4b1d      	ldr	r3, [pc, #116]	; (8004518 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a8:	ee07 3a90 	vmov	s15, r3
 80044ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80044b4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004528 <HAL_RCC_GetSysClockFreq+0x2d4>
 80044b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044d0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80044d2:	4b11      	ldr	r3, [pc, #68]	; (8004518 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	0a5b      	lsrs	r3, r3, #9
 80044d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044dc:	3301      	adds	r3, #1
 80044de:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80044ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044f6:	ee17 3a90 	vmov	r3, s15
 80044fa:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80044fc:	e005      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	61bb      	str	r3, [r7, #24]
    break;
 8004502:	e002      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004504:	4b06      	ldr	r3, [pc, #24]	; (8004520 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004506:	61bb      	str	r3, [r7, #24]
    break;
 8004508:	bf00      	nop
  }

  return sysclockfreq;
 800450a:	69bb      	ldr	r3, [r7, #24]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3724      	adds	r7, #36	; 0x24
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	58024400 	.word	0x58024400
 800451c:	03d09000 	.word	0x03d09000
 8004520:	003d0900 	.word	0x003d0900
 8004524:	007a1200 	.word	0x007a1200
 8004528:	46000000 	.word	0x46000000
 800452c:	4c742400 	.word	0x4c742400
 8004530:	4a742400 	.word	0x4a742400
 8004534:	4af42400 	.word	0x4af42400

08004538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800453e:	f7ff fe89 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8004542:	4601      	mov	r1, r0
 8004544:	4b10      	ldr	r3, [pc, #64]	; (8004588 <HAL_RCC_GetHCLKFreq+0x50>)
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	0a1b      	lsrs	r3, r3, #8
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	4a0f      	ldr	r2, [pc, #60]	; (800458c <HAL_RCC_GetHCLKFreq+0x54>)
 8004550:	5cd3      	ldrb	r3, [r2, r3]
 8004552:	f003 031f 	and.w	r3, r3, #31
 8004556:	fa21 f303 	lsr.w	r3, r1, r3
 800455a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <HAL_RCC_GetHCLKFreq+0x50>)
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	4a09      	ldr	r2, [pc, #36]	; (800458c <HAL_RCC_GetHCLKFreq+0x54>)
 8004566:	5cd3      	ldrb	r3, [r2, r3]
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	fa22 f303 	lsr.w	r3, r2, r3
 8004572:	4a07      	ldr	r2, [pc, #28]	; (8004590 <HAL_RCC_GetHCLKFreq+0x58>)
 8004574:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004576:	4a07      	ldr	r2, [pc, #28]	; (8004594 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800457c:	4b04      	ldr	r3, [pc, #16]	; (8004590 <HAL_RCC_GetHCLKFreq+0x58>)
 800457e:	681b      	ldr	r3, [r3, #0]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	58024400 	.word	0x58024400
 800458c:	0800c87c 	.word	0x0800c87c
 8004590:	24000004 	.word	0x24000004
 8004594:	24000000 	.word	0x24000000

08004598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800459c:	f7ff ffcc 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 80045a0:	4601      	mov	r1, r0
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	091b      	lsrs	r3, r3, #4
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	4a04      	ldr	r2, [pc, #16]	; (80045c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045ae:	5cd3      	ldrb	r3, [r2, r3]
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	58024400 	.word	0x58024400
 80045c0:	0800c87c 	.word	0x0800c87c

080045c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80045c8:	f7ff ffb6 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 80045cc:	4601      	mov	r1, r0
 80045ce:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	4a04      	ldr	r2, [pc, #16]	; (80045ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80045da:	5cd3      	ldrb	r3, [r2, r3]
 80045dc:	f003 031f 	and.w	r3, r3, #31
 80045e0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	58024400 	.word	0x58024400
 80045ec:	0800c87c 	.word	0x0800c87c

080045f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	223f      	movs	r2, #63	; 0x3f
 80045fe:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004600:	4b1a      	ldr	r3, [pc, #104]	; (800466c <HAL_RCC_GetClockConfig+0x7c>)
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f003 0207 	and.w	r2, r3, #7
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800460c:	4b17      	ldr	r3, [pc, #92]	; (800466c <HAL_RCC_GetClockConfig+0x7c>)
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004618:	4b14      	ldr	r3, [pc, #80]	; (800466c <HAL_RCC_GetClockConfig+0x7c>)
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	f003 020f 	and.w	r2, r3, #15
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004624:	4b11      	ldr	r3, [pc, #68]	; (800466c <HAL_RCC_GetClockConfig+0x7c>)
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004630:	4b0e      	ldr	r3, [pc, #56]	; (800466c <HAL_RCC_GetClockConfig+0x7c>)
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HAL_RCC_GetClockConfig+0x7c>)
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004648:	4b08      	ldr	r3, [pc, #32]	; (800466c <HAL_RCC_GetClockConfig+0x7c>)
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <HAL_RCC_GetClockConfig+0x80>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 020f 	and.w	r2, r3, #15
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	601a      	str	r2, [r3, #0]
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	58024400 	.word	0x58024400
 8004670:	52002000 	.word	0x52002000

08004674 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800467c:	2300      	movs	r3, #0
 800467e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004680:	2300      	movs	r3, #0
 8004682:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d03d      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004694:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004698:	d013      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800469a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469e:	d802      	bhi.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80046a4:	e01f      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80046a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046aa:	d013      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80046ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046b0:	d01c      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x78>
 80046b2:	e018      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b4:	4baf      	ldr	r3, [pc, #700]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	4aae      	ldr	r2, [pc, #696]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80046ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046c0:	e015      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3304      	adds	r3, #4
 80046c6:	2102      	movs	r1, #2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f001 f96f 	bl	80059ac <RCCEx_PLL2_Config>
 80046ce:	4603      	mov	r3, r0
 80046d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046d2:	e00c      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3324      	adds	r3, #36	; 0x24
 80046d8:	2102      	movs	r1, #2
 80046da:	4618      	mov	r0, r3
 80046dc:	f001 fa18 	bl	8005b10 <RCCEx_PLL3_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046e4:	e003      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	75fb      	strb	r3, [r7, #23]
      break;
 80046ea:	e000      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80046ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046f4:	4b9f      	ldr	r3, [pc, #636]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80046f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004700:	499c      	ldr	r1, [pc, #624]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004702:	4313      	orrs	r3, r2
 8004704:	650b      	str	r3, [r1, #80]	; 0x50
 8004706:	e001      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004708:	7dfb      	ldrb	r3, [r7, #23]
 800470a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d03d      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471c:	2b04      	cmp	r3, #4
 800471e:	d826      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004720:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004726:	bf00      	nop
 8004728:	0800473d 	.word	0x0800473d
 800472c:	0800474b 	.word	0x0800474b
 8004730:	0800475d 	.word	0x0800475d
 8004734:	08004775 	.word	0x08004775
 8004738:	08004775 	.word	0x08004775
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800473c:	4b8d      	ldr	r3, [pc, #564]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	4a8c      	ldr	r2, [pc, #560]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004746:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004748:	e015      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	2100      	movs	r1, #0
 8004750:	4618      	mov	r0, r3
 8004752:	f001 f92b 	bl	80059ac <RCCEx_PLL2_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800475a:	e00c      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3324      	adds	r3, #36	; 0x24
 8004760:	2100      	movs	r1, #0
 8004762:	4618      	mov	r0, r3
 8004764:	f001 f9d4 	bl	8005b10 <RCCEx_PLL3_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800476c:	e003      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	75fb      	strb	r3, [r7, #23]
      break;
 8004772:	e000      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004776:	7dfb      	ldrb	r3, [r7, #23]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d109      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800477c:	4b7d      	ldr	r3, [pc, #500]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800477e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004780:	f023 0207 	bic.w	r2, r3, #7
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004788:	497a      	ldr	r1, [pc, #488]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800478a:	4313      	orrs	r3, r2
 800478c:	650b      	str	r3, [r1, #80]	; 0x50
 800478e:	e001      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004790:	7dfb      	ldrb	r3, [r7, #23]
 8004792:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800479c:	2b00      	cmp	r3, #0
 800479e:	d03e      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a4:	2b80      	cmp	r3, #128	; 0x80
 80047a6:	d01c      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80047a8:	2b80      	cmp	r3, #128	; 0x80
 80047aa:	d804      	bhi.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80047b0:	2b40      	cmp	r3, #64	; 0x40
 80047b2:	d00d      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80047b4:	e01e      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80047b6:	2bc0      	cmp	r3, #192	; 0xc0
 80047b8:	d01f      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x186>
 80047ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047be:	d01e      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80047c0:	e018      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c2:	4b6c      	ldr	r3, [pc, #432]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	4a6b      	ldr	r2, [pc, #428]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80047ce:	e017      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3304      	adds	r3, #4
 80047d4:	2100      	movs	r1, #0
 80047d6:	4618      	mov	r0, r3
 80047d8:	f001 f8e8 	bl	80059ac <RCCEx_PLL2_Config>
 80047dc:	4603      	mov	r3, r0
 80047de:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80047e0:	e00e      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3324      	adds	r3, #36	; 0x24
 80047e6:	2100      	movs	r1, #0
 80047e8:	4618      	mov	r0, r3
 80047ea:	f001 f991 	bl	8005b10 <RCCEx_PLL3_Config>
 80047ee:	4603      	mov	r3, r0
 80047f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80047f2:	e005      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	75fb      	strb	r3, [r7, #23]
      break;
 80047f8:	e002      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80047fa:	bf00      	nop
 80047fc:	e000      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80047fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004800:	7dfb      	ldrb	r3, [r7, #23]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004806:	4b5b      	ldr	r3, [pc, #364]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004812:	4958      	ldr	r1, [pc, #352]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004814:	4313      	orrs	r3, r2
 8004816:	650b      	str	r3, [r1, #80]	; 0x50
 8004818:	e001      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481a:	7dfb      	ldrb	r3, [r7, #23]
 800481c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004826:	2b00      	cmp	r3, #0
 8004828:	d044      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004830:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004834:	d01f      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800483a:	d805      	bhi.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004840:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004844:	d00e      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004846:	e01f      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004848:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800484c:	d01f      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800484e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004852:	d01e      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004854:	e018      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004856:	4b47      	ldr	r3, [pc, #284]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	4a46      	ldr	r2, [pc, #280]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800485c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004860:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004862:	e017      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3304      	adds	r3, #4
 8004868:	2100      	movs	r1, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f001 f89e 	bl	80059ac <RCCEx_PLL2_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004874:	e00e      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3324      	adds	r3, #36	; 0x24
 800487a:	2100      	movs	r1, #0
 800487c:	4618      	mov	r0, r3
 800487e:	f001 f947 	bl	8005b10 <RCCEx_PLL3_Config>
 8004882:	4603      	mov	r3, r0
 8004884:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004886:	e005      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	75fb      	strb	r3, [r7, #23]
      break;
 800488c:	e002      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800488e:	bf00      	nop
 8004890:	e000      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004892:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004894:	7dfb      	ldrb	r3, [r7, #23]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10a      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800489a:	4b36      	ldr	r3, [pc, #216]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800489c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048a8:	4932      	ldr	r1, [pc, #200]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	658b      	str	r3, [r1, #88]	; 0x58
 80048ae:	e001      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b0:	7dfb      	ldrb	r3, [r7, #23]
 80048b2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d044      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048ca:	d01f      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x298>
 80048cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048d0:	d805      	bhi.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x278>
 80048d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048da:	d00e      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80048dc:	e01f      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80048de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048e2:	d01f      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80048e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048e8:	d01e      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80048ea:	e018      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ec:	4b21      	ldr	r3, [pc, #132]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	4a20      	ldr	r2, [pc, #128]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048f8:	e017      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3304      	adds	r3, #4
 80048fe:	2100      	movs	r1, #0
 8004900:	4618      	mov	r0, r3
 8004902:	f001 f853 	bl	80059ac <RCCEx_PLL2_Config>
 8004906:	4603      	mov	r3, r0
 8004908:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800490a:	e00e      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3324      	adds	r3, #36	; 0x24
 8004910:	2100      	movs	r1, #0
 8004912:	4618      	mov	r0, r3
 8004914:	f001 f8fc 	bl	8005b10 <RCCEx_PLL3_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800491c:	e005      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	75fb      	strb	r3, [r7, #23]
      break;
 8004922:	e002      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004924:	bf00      	nop
 8004926:	e000      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800492a:	7dfb      	ldrb	r3, [r7, #23]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004930:	4b10      	ldr	r3, [pc, #64]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004934:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800493e:	490d      	ldr	r1, [pc, #52]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004940:	4313      	orrs	r3, r2
 8004942:	658b      	str	r3, [r1, #88]	; 0x58
 8004944:	e001      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004946:	7dfb      	ldrb	r3, [r7, #23]
 8004948:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d035      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800495a:	2b10      	cmp	r3, #16
 800495c:	d00c      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800495e:	2b10      	cmp	r3, #16
 8004960:	d802      	bhi.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01b      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004966:	e017      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004968:	2b20      	cmp	r3, #32
 800496a:	d00c      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800496c:	2b30      	cmp	r3, #48	; 0x30
 800496e:	d018      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004970:	e012      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004972:	bf00      	nop
 8004974:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004978:	4baf      	ldr	r3, [pc, #700]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	4aae      	ldr	r2, [pc, #696]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800497e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004982:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004984:	e00e      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3304      	adds	r3, #4
 800498a:	2102      	movs	r1, #2
 800498c:	4618      	mov	r0, r3
 800498e:	f001 f80d 	bl	80059ac <RCCEx_PLL2_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004996:	e005      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	75fb      	strb	r3, [r7, #23]
      break;
 800499c:	e002      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800499e:	bf00      	nop
 80049a0:	e000      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80049a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049a4:	7dfb      	ldrb	r3, [r7, #23]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d109      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80049aa:	4ba3      	ldr	r3, [pc, #652]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80049ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b6:	49a0      	ldr	r1, [pc, #640]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80049bc:	e001      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049be:	7dfb      	ldrb	r3, [r7, #23]
 80049c0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d042      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d6:	d01f      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80049d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049dc:	d805      	bhi.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80049e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e6:	d00e      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80049e8:	e01f      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80049ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049ee:	d01f      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80049f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049f4:	d01e      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80049f6:	e018      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f8:	4b8f      	ldr	r3, [pc, #572]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	4a8e      	ldr	r2, [pc, #568]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80049fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a04:	e017      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 ffcd 	bl	80059ac <RCCEx_PLL2_Config>
 8004a12:	4603      	mov	r3, r0
 8004a14:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a16:	e00e      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3324      	adds	r3, #36	; 0x24
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f001 f876 	bl	8005b10 <RCCEx_PLL3_Config>
 8004a24:	4603      	mov	r3, r0
 8004a26:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a28:	e005      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a2e:	e002      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004a30:	bf00      	nop
 8004a32:	e000      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004a3c:	4b7e      	ldr	r3, [pc, #504]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a40:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a48:	497b      	ldr	r1, [pc, #492]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	650b      	str	r3, [r1, #80]	; 0x50
 8004a4e:	e001      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a50:	7dfb      	ldrb	r3, [r7, #23]
 8004a52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d042      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a68:	d01b      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004a6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a6e:	d805      	bhi.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d022      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a78:	d00a      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004a7a:	e01b      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004a7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a80:	d01d      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004a82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a86:	d01c      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004a88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a8c:	d01b      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004a8e:	e011      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3304      	adds	r3, #4
 8004a94:	2101      	movs	r1, #1
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 ff88 	bl	80059ac <RCCEx_PLL2_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004aa0:	e012      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3324      	adds	r3, #36	; 0x24
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f001 f831 	bl	8005b10 <RCCEx_PLL3_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004ab2:	e009      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab8:	e006      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004aba:	bf00      	nop
 8004abc:	e004      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004abe:	bf00      	nop
 8004ac0:	e002      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004ac2:	bf00      	nop
 8004ac4:	e000      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004ac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ace:	4b5a      	ldr	r3, [pc, #360]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ada:	4957      	ldr	r1, [pc, #348]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	650b      	str	r3, [r1, #80]	; 0x50
 8004ae0:	e001      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae2:	7dfb      	ldrb	r3, [r7, #23]
 8004ae4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d044      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004afc:	d01b      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004afe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b02:	d805      	bhi.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d022      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004b08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b0c:	d00a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004b0e:	e01b      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b14:	d01d      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004b16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b1a:	d01c      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004b1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b20:	d01b      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004b22:	e011      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3304      	adds	r3, #4
 8004b28:	2101      	movs	r1, #1
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 ff3e 	bl	80059ac <RCCEx_PLL2_Config>
 8004b30:	4603      	mov	r3, r0
 8004b32:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b34:	e012      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3324      	adds	r3, #36	; 0x24
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 ffe7 	bl	8005b10 <RCCEx_PLL3_Config>
 8004b42:	4603      	mov	r3, r0
 8004b44:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b46:	e009      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b4c:	e006      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004b4e:	bf00      	nop
 8004b50:	e004      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004b52:	bf00      	nop
 8004b54:	e002      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004b56:	bf00      	nop
 8004b58:	e000      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004b5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b62:	4b35      	ldr	r3, [pc, #212]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b66:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b70:	4931      	ldr	r1, [pc, #196]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	658b      	str	r3, [r1, #88]	; 0x58
 8004b76:	e001      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d02d      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b90:	d005      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b96:	d009      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d013      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004b9c:	e00f      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b9e:	4b26      	ldr	r3, [pc, #152]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	4a25      	ldr	r2, [pc, #148]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004baa:	e00c      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fefa 	bl	80059ac <RCCEx_PLL2_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004bbc:	e003      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bc6:	7dfb      	ldrb	r3, [r7, #23]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d109      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bcc:	4b1a      	ldr	r3, [pc, #104]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bd8:	4917      	ldr	r1, [pc, #92]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	650b      	str	r3, [r1, #80]	; 0x50
 8004bde:	e001      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be0:	7dfb      	ldrb	r3, [r7, #23]
 8004be2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d035      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	d81b      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004bf8:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfe:	bf00      	nop
 8004c00:	08004c3d 	.word	0x08004c3d
 8004c04:	08004c11 	.word	0x08004c11
 8004c08:	08004c1f 	.word	0x08004c1f
 8004c0c:	08004c3d 	.word	0x08004c3d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c10:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	4a08      	ldr	r2, [pc, #32]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c1c:	e00f      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3304      	adds	r3, #4
 8004c22:	2102      	movs	r1, #2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fec1 	bl	80059ac <RCCEx_PLL2_Config>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c2e:	e006      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	75fb      	strb	r3, [r7, #23]
      break;
 8004c34:	e003      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004c36:	bf00      	nop
 8004c38:	58024400 	.word	0x58024400
      break;
 8004c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d109      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c44:	4bba      	ldr	r3, [pc, #744]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c48:	f023 0203 	bic.w	r2, r3, #3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c50:	49b7      	ldr	r1, [pc, #732]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c56:	e001      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c58:	7dfb      	ldrb	r3, [r7, #23]
 8004c5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8086 	beq.w	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c6a:	4bb2      	ldr	r3, [pc, #712]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4ab1      	ldr	r2, [pc, #708]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c76:	f7fc ff8b 	bl	8001b90 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c7c:	e009      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c7e:	f7fc ff87 	bl	8001b90 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b64      	cmp	r3, #100	; 0x64
 8004c8a:	d902      	bls.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	75fb      	strb	r3, [r7, #23]
        break;
 8004c90:	e005      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c92:	4ba8      	ldr	r3, [pc, #672]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0ef      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d166      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ca4:	4ba2      	ldr	r3, [pc, #648]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ca6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cae:	4053      	eors	r3, r2
 8004cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d013      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cb8:	4b9d      	ldr	r3, [pc, #628]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cc2:	4b9b      	ldr	r3, [pc, #620]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc6:	4a9a      	ldr	r2, [pc, #616]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ccc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cce:	4b98      	ldr	r3, [pc, #608]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd2:	4a97      	ldr	r2, [pc, #604]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004cda:	4a95      	ldr	r2, [pc, #596]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cea:	d115      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cec:	f7fc ff50 	bl	8001b90 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cf2:	e00b      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf4:	f7fc ff4c 	bl	8001b90 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d902      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	75fb      	strb	r3, [r7, #23]
            break;
 8004d0a:	e005      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d0c:	4b88      	ldr	r3, [pc, #544]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0ed      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d126      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d2c:	d10d      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004d2e:	4b80      	ldr	r3, [pc, #512]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d3c:	0919      	lsrs	r1, r3, #4
 8004d3e:	4b7e      	ldr	r3, [pc, #504]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004d40:	400b      	ands	r3, r1
 8004d42:	497b      	ldr	r1, [pc, #492]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	610b      	str	r3, [r1, #16]
 8004d48:	e005      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004d4a:	4b79      	ldr	r3, [pc, #484]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	4a78      	ldr	r2, [pc, #480]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d54:	6113      	str	r3, [r2, #16]
 8004d56:	4b76      	ldr	r3, [pc, #472]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d64:	4972      	ldr	r1, [pc, #456]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	670b      	str	r3, [r1, #112]	; 0x70
 8004d6a:	e004      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d6c:	7dfb      	ldrb	r3, [r7, #23]
 8004d6e:	75bb      	strb	r3, [r7, #22]
 8004d70:	e001      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
 8004d74:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d07d      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d86:	2b28      	cmp	r3, #40	; 0x28
 8004d88:	d866      	bhi.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004d8a:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004e5f 	.word	0x08004e5f
 8004d94:	08004e59 	.word	0x08004e59
 8004d98:	08004e59 	.word	0x08004e59
 8004d9c:	08004e59 	.word	0x08004e59
 8004da0:	08004e59 	.word	0x08004e59
 8004da4:	08004e59 	.word	0x08004e59
 8004da8:	08004e59 	.word	0x08004e59
 8004dac:	08004e59 	.word	0x08004e59
 8004db0:	08004e35 	.word	0x08004e35
 8004db4:	08004e59 	.word	0x08004e59
 8004db8:	08004e59 	.word	0x08004e59
 8004dbc:	08004e59 	.word	0x08004e59
 8004dc0:	08004e59 	.word	0x08004e59
 8004dc4:	08004e59 	.word	0x08004e59
 8004dc8:	08004e59 	.word	0x08004e59
 8004dcc:	08004e59 	.word	0x08004e59
 8004dd0:	08004e47 	.word	0x08004e47
 8004dd4:	08004e59 	.word	0x08004e59
 8004dd8:	08004e59 	.word	0x08004e59
 8004ddc:	08004e59 	.word	0x08004e59
 8004de0:	08004e59 	.word	0x08004e59
 8004de4:	08004e59 	.word	0x08004e59
 8004de8:	08004e59 	.word	0x08004e59
 8004dec:	08004e59 	.word	0x08004e59
 8004df0:	08004e5f 	.word	0x08004e5f
 8004df4:	08004e59 	.word	0x08004e59
 8004df8:	08004e59 	.word	0x08004e59
 8004dfc:	08004e59 	.word	0x08004e59
 8004e00:	08004e59 	.word	0x08004e59
 8004e04:	08004e59 	.word	0x08004e59
 8004e08:	08004e59 	.word	0x08004e59
 8004e0c:	08004e59 	.word	0x08004e59
 8004e10:	08004e5f 	.word	0x08004e5f
 8004e14:	08004e59 	.word	0x08004e59
 8004e18:	08004e59 	.word	0x08004e59
 8004e1c:	08004e59 	.word	0x08004e59
 8004e20:	08004e59 	.word	0x08004e59
 8004e24:	08004e59 	.word	0x08004e59
 8004e28:	08004e59 	.word	0x08004e59
 8004e2c:	08004e59 	.word	0x08004e59
 8004e30:	08004e5f 	.word	0x08004e5f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3304      	adds	r3, #4
 8004e38:	2101      	movs	r1, #1
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fdb6 	bl	80059ac <RCCEx_PLL2_Config>
 8004e40:	4603      	mov	r3, r0
 8004e42:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e44:	e00c      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3324      	adds	r3, #36	; 0x24
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fe5f 	bl	8005b10 <RCCEx_PLL3_Config>
 8004e52:	4603      	mov	r3, r0
 8004e54:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e56:	e003      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e5c:	e000      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8004e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e60:	7dfb      	ldrb	r3, [r7, #23]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e66:	4b32      	ldr	r3, [pc, #200]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e72:	492f      	ldr	r1, [pc, #188]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	654b      	str	r3, [r1, #84]	; 0x54
 8004e78:	e001      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7a:	7dfb      	ldrb	r3, [r7, #23]
 8004e7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d037      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8e:	2b05      	cmp	r3, #5
 8004e90:	d820      	bhi.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004e92:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004edb 	.word	0x08004edb
 8004e9c:	08004eb1 	.word	0x08004eb1
 8004ea0:	08004ec3 	.word	0x08004ec3
 8004ea4:	08004edb 	.word	0x08004edb
 8004ea8:	08004edb 	.word	0x08004edb
 8004eac:	08004edb 	.word	0x08004edb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fd78 	bl	80059ac <RCCEx_PLL2_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004ec0:	e00c      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3324      	adds	r3, #36	; 0x24
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fe21 	bl	8005b10 <RCCEx_PLL3_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004ed2:	e003      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ed8:	e000      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d109      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ee2:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee6:	f023 0207 	bic.w	r2, r3, #7
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eee:	4910      	ldr	r1, [pc, #64]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	654b      	str	r3, [r1, #84]	; 0x54
 8004ef4:	e001      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
 8004ef8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d040      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0c:	2b05      	cmp	r3, #5
 8004f0e:	d827      	bhi.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004f10:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8004f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f16:	bf00      	nop
 8004f18:	08004f67 	.word	0x08004f67
 8004f1c:	08004f3d 	.word	0x08004f3d
 8004f20:	08004f4f 	.word	0x08004f4f
 8004f24:	08004f67 	.word	0x08004f67
 8004f28:	08004f67 	.word	0x08004f67
 8004f2c:	08004f67 	.word	0x08004f67
 8004f30:	58024400 	.word	0x58024400
 8004f34:	58024800 	.word	0x58024800
 8004f38:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	2101      	movs	r1, #1
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fd32 	bl	80059ac <RCCEx_PLL2_Config>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f4c:	e00c      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3324      	adds	r3, #36	; 0x24
 8004f52:	2101      	movs	r1, #1
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fddb 	bl	8005b10 <RCCEx_PLL3_Config>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f5e:	e003      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	75fb      	strb	r3, [r7, #23]
      break;
 8004f64:	e000      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004f66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10a      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f6e:	4bb2      	ldr	r3, [pc, #712]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f72:	f023 0207 	bic.w	r2, r3, #7
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	49ae      	ldr	r1, [pc, #696]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	658b      	str	r3, [r1, #88]	; 0x58
 8004f82:	e001      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f84:	7dfb      	ldrb	r3, [r7, #23]
 8004f86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0320 	and.w	r3, r3, #32
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d044      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f9e:	d01b      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa4:	d805      	bhi.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d022      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fae:	d00a      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004fb0:	e01b      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb6:	d01d      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fbc:	d01c      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004fbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fc2:	d01b      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004fc4:	e011      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	2100      	movs	r1, #0
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fced 	bl	80059ac <RCCEx_PLL2_Config>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004fd6:	e012      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3324      	adds	r3, #36	; 0x24
 8004fdc:	2102      	movs	r1, #2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fd96 	bl	8005b10 <RCCEx_PLL3_Config>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004fe8:	e009      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	75fb      	strb	r3, [r7, #23]
      break;
 8004fee:	e006      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004ff0:	bf00      	nop
 8004ff2:	e004      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004ff4:	bf00      	nop
 8004ff6:	e002      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004ff8:	bf00      	nop
 8004ffa:	e000      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10a      	bne.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005004:	4b8c      	ldr	r3, [pc, #560]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005008:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005012:	4989      	ldr	r1, [pc, #548]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005014:	4313      	orrs	r3, r2
 8005016:	654b      	str	r3, [r1, #84]	; 0x54
 8005018:	e001      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501a:	7dfb      	ldrb	r3, [r7, #23]
 800501c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d044      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005034:	d01b      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800503a:	d805      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800503c:	2b00      	cmp	r3, #0
 800503e:	d022      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005044:	d00a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005046:	e01b      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504c:	d01d      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800504e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005052:	d01c      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005054:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005058:	d01b      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800505a:	e011      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3304      	adds	r3, #4
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fca2 	bl	80059ac <RCCEx_PLL2_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800506c:	e012      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3324      	adds	r3, #36	; 0x24
 8005072:	2102      	movs	r1, #2
 8005074:	4618      	mov	r0, r3
 8005076:	f000 fd4b 	bl	8005b10 <RCCEx_PLL3_Config>
 800507a:	4603      	mov	r3, r0
 800507c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800507e:	e009      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	75fb      	strb	r3, [r7, #23]
      break;
 8005084:	e006      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005086:	bf00      	nop
 8005088:	e004      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800508a:	bf00      	nop
 800508c:	e002      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800508e:	bf00      	nop
 8005090:	e000      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005092:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005094:	7dfb      	ldrb	r3, [r7, #23]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10a      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800509a:	4b67      	ldr	r3, [pc, #412]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800509c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050a8:	4963      	ldr	r1, [pc, #396]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	658b      	str	r3, [r1, #88]	; 0x58
 80050ae:	e001      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b0:	7dfb      	ldrb	r3, [r7, #23]
 80050b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d044      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ca:	d01b      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80050cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050d0:	d805      	bhi.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d022      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80050d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050da:	d00a      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80050dc:	e01b      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80050de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e2:	d01d      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80050e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050e8:	d01c      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80050ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050ee:	d01b      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80050f0:	e011      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3304      	adds	r3, #4
 80050f6:	2100      	movs	r1, #0
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fc57 	bl	80059ac <RCCEx_PLL2_Config>
 80050fe:	4603      	mov	r3, r0
 8005100:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005102:	e012      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3324      	adds	r3, #36	; 0x24
 8005108:	2102      	movs	r1, #2
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fd00 	bl	8005b10 <RCCEx_PLL3_Config>
 8005110:	4603      	mov	r3, r0
 8005112:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005114:	e009      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	75fb      	strb	r3, [r7, #23]
      break;
 800511a:	e006      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800511c:	bf00      	nop
 800511e:	e004      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005120:	bf00      	nop
 8005122:	e002      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005124:	bf00      	nop
 8005126:	e000      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005128:	bf00      	nop
    }

    if(ret == HAL_OK)
 800512a:	7dfb      	ldrb	r3, [r7, #23]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10a      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005130:	4b41      	ldr	r3, [pc, #260]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005134:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800513e:	493e      	ldr	r1, [pc, #248]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005140:	4313      	orrs	r3, r2
 8005142:	658b      	str	r3, [r1, #88]	; 0x58
 8005144:	e001      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005146:	7dfb      	ldrb	r3, [r7, #23]
 8005148:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	2b00      	cmp	r3, #0
 8005154:	d01a      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800515c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005160:	d10a      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3324      	adds	r3, #36	; 0x24
 8005166:	2102      	movs	r1, #2
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fcd1 	bl	8005b10 <RCCEx_PLL3_Config>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005178:	4b2f      	ldr	r3, [pc, #188]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800517a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005186:	492c      	ldr	r1, [pc, #176]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005188:	4313      	orrs	r3, r2
 800518a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	2b00      	cmp	r3, #0
 8005196:	d01a      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800519e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a2:	d10a      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3324      	adds	r3, #36	; 0x24
 80051a8:	2102      	movs	r1, #2
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fcb0 	bl	8005b10 <RCCEx_PLL3_Config>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051ba:	4b1f      	ldr	r3, [pc, #124]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80051bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051c8:	491b      	ldr	r1, [pc, #108]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d032      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e4:	d00d      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80051e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ea:	d016      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d111      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3304      	adds	r3, #4
 80051f4:	2100      	movs	r1, #0
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fbd8 	bl	80059ac <RCCEx_PLL2_Config>
 80051fc:	4603      	mov	r3, r0
 80051fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005200:	e00c      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3324      	adds	r3, #36	; 0x24
 8005206:	2102      	movs	r1, #2
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fc81 	bl	8005b10 <RCCEx_PLL3_Config>
 800520e:	4603      	mov	r3, r0
 8005210:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005212:	e003      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	75fb      	strb	r3, [r7, #23]
      break;
 8005218:	e000      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800521a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800521c:	7dfb      	ldrb	r3, [r7, #23]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10c      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005222:	4b05      	ldr	r3, [pc, #20]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005226:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005230:	4901      	ldr	r1, [pc, #4]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005232:	4313      	orrs	r3, r2
 8005234:	658b      	str	r3, [r1, #88]	; 0x58
 8005236:	e003      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005238:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523c:	7dfb      	ldrb	r3, [r7, #23]
 800523e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d02f      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005256:	d00c      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005258:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800525c:	d015      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800525e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005262:	d10f      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005264:	4b79      	ldr	r3, [pc, #484]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	4a78      	ldr	r2, [pc, #480]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800526a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800526e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005270:	e00c      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3324      	adds	r3, #36	; 0x24
 8005276:	2101      	movs	r1, #1
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fc49 	bl	8005b10 <RCCEx_PLL3_Config>
 800527e:	4603      	mov	r3, r0
 8005280:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005282:	e003      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	75fb      	strb	r3, [r7, #23]
      break;
 8005288:	e000      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800528a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800528c:	7dfb      	ldrb	r3, [r7, #23]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005292:	4b6e      	ldr	r3, [pc, #440]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005296:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052a0:	496a      	ldr	r1, [pc, #424]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	654b      	str	r3, [r1, #84]	; 0x54
 80052a6:	e001      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
 80052aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d029      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80052c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c4:	d007      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80052c6:	e00f      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c8:	4b60      	ldr	r3, [pc, #384]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	4a5f      	ldr	r2, [pc, #380]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052d4:	e00b      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3304      	adds	r3, #4
 80052da:	2102      	movs	r1, #2
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fb65 	bl	80059ac <RCCEx_PLL2_Config>
 80052e2:	4603      	mov	r3, r0
 80052e4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052e6:	e002      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	75fb      	strb	r3, [r7, #23]
      break;
 80052ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d109      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80052f4:	4b55      	ldr	r3, [pc, #340]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005300:	4952      	ldr	r1, [pc, #328]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005302:	4313      	orrs	r3, r2
 8005304:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005306:	e001      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005308:	7dfb      	ldrb	r3, [r7, #23]
 800530a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3324      	adds	r3, #36	; 0x24
 800531c:	2102      	movs	r1, #2
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fbf6 	bl	8005b10 <RCCEx_PLL3_Config>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d02f      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800533e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005342:	d00c      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005348:	d802      	bhi.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d011      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800534e:	e00d      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005354:	d00f      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800535a:	d00e      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800535c:	e006      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800535e:	4b3b      	ldr	r3, [pc, #236]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	4a3a      	ldr	r2, [pc, #232]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005368:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800536a:	e007      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	75fb      	strb	r3, [r7, #23]
      break;
 8005370:	e004      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005372:	bf00      	nop
 8005374:	e002      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005376:	bf00      	nop
 8005378:	e000      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800537a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800537c:	7dfb      	ldrb	r3, [r7, #23]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d109      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005382:	4b32      	ldr	r3, [pc, #200]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005386:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800538e:	492f      	ldr	r1, [pc, #188]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005390:	4313      	orrs	r3, r2
 8005392:	654b      	str	r3, [r1, #84]	; 0x54
 8005394:	e001      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005396:	7dfb      	ldrb	r3, [r7, #23]
 8005398:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d008      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053a6:	4b29      	ldr	r3, [pc, #164]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80053a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b2:	4926      	ldr	r1, [pc, #152]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d009      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80053c4:	4b21      	ldr	r3, [pc, #132]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80053d2:	491e      	ldr	r1, [pc, #120]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d008      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053e4:	4b19      	ldr	r3, [pc, #100]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80053e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053f0:	4916      	ldr	r1, [pc, #88]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00d      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005402:	4b12      	ldr	r3, [pc, #72]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	4a11      	ldr	r2, [pc, #68]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005408:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800540c:	6113      	str	r3, [r2, #16]
 800540e:	4b0f      	ldr	r3, [pc, #60]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005410:	691a      	ldr	r2, [r3, #16]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005418:	490c      	ldr	r1, [pc, #48]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800541a:	4313      	orrs	r3, r2
 800541c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	da08      	bge.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005426:	4b09      	ldr	r3, [pc, #36]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005432:	4906      	ldr	r1, [pc, #24]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005434:	4313      	orrs	r3, r2
 8005436:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005438:	7dbb      	ldrb	r3, [r7, #22]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	e000      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	58024400 	.word	0x58024400

08005450 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005454:	f7ff f870 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 8005458:	4601      	mov	r1, r0
 800545a:	4b06      	ldr	r3, [pc, #24]	; (8005474 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	091b      	lsrs	r3, r3, #4
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	4a04      	ldr	r2, [pc, #16]	; (8005478 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005466:	5cd3      	ldrb	r3, [r2, r3]
 8005468:	f003 031f 	and.w	r3, r3, #31
 800546c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005470:	4618      	mov	r0, r3
 8005472:	bd80      	pop	{r7, pc}
 8005474:	58024400 	.word	0x58024400
 8005478:	0800c87c 	.word	0x0800c87c

0800547c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800547c:	b480      	push	{r7}
 800547e:	b089      	sub	sp, #36	; 0x24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005484:	4b9d      	ldr	r3, [pc, #628]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005488:	f003 0303 	and.w	r3, r3, #3
 800548c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800548e:	4b9b      	ldr	r3, [pc, #620]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	0b1b      	lsrs	r3, r3, #12
 8005494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005498:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800549a:	4b98      	ldr	r3, [pc, #608]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800549c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549e:	091b      	lsrs	r3, r3, #4
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80054a6:	4b95      	ldr	r3, [pc, #596]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80054a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054aa:	08db      	lsrs	r3, r3, #3
 80054ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	fb02 f303 	mul.w	r3, r2, r3
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 810a 	beq.w	80056de <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d05a      	beq.n	8005586 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d302      	bcc.n	80054da <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d078      	beq.n	80055ca <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80054d8:	e099      	b.n	800560e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054da:	4b88      	ldr	r3, [pc, #544]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d02d      	beq.n	8005542 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054e6:	4b85      	ldr	r3, [pc, #532]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	08db      	lsrs	r3, r3, #3
 80054ec:	f003 0303 	and.w	r3, r3, #3
 80054f0:	4a83      	ldr	r2, [pc, #524]	; (8005700 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80054f2:	fa22 f303 	lsr.w	r3, r2, r3
 80054f6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	ee07 3a90 	vmov	s15, r3
 8005508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005510:	4b7a      	ldr	r3, [pc, #488]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005518:	ee07 3a90 	vmov	s15, r3
 800551c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005520:	ed97 6a03 	vldr	s12, [r7, #12]
 8005524:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005704 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005528:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800552c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005530:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005534:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005540:	e087      	b.n	8005652 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	ee07 3a90 	vmov	s15, r3
 8005548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005554:	4b69      	ldr	r3, [pc, #420]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555c:	ee07 3a90 	vmov	s15, r3
 8005560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005564:	ed97 6a03 	vldr	s12, [r7, #12]
 8005568:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005704 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800556c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005570:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005578:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800557c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005580:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005584:	e065      	b.n	8005652 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	ee07 3a90 	vmov	s15, r3
 800558c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005590:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800570c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005598:	4b58      	ldr	r3, [pc, #352]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a0:	ee07 3a90 	vmov	s15, r3
 80055a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ac:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005704 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80055b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055c8:	e043      	b.n	8005652 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	ee07 3a90 	vmov	s15, r3
 80055d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80055d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055dc:	4b47      	ldr	r3, [pc, #284]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80055de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e4:	ee07 3a90 	vmov	s15, r3
 80055e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80055f0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005704 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80055f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005608:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800560c:	e021      	b.n	8005652 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	ee07 3a90 	vmov	s15, r3
 8005614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005618:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800570c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800561c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005620:	4b36      	ldr	r3, [pc, #216]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005628:	ee07 3a90 	vmov	s15, r3
 800562c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005630:	ed97 6a03 	vldr	s12, [r7, #12]
 8005634:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005704 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005638:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800563c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005640:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005644:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800564c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005650:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005652:	4b2a      	ldr	r3, [pc, #168]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	0a5b      	lsrs	r3, r3, #9
 8005658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800565c:	ee07 3a90 	vmov	s15, r3
 8005660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005664:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005668:	ee37 7a87 	vadd.f32	s14, s15, s14
 800566c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005678:	ee17 2a90 	vmov	r2, s15
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005680:	4b1e      	ldr	r3, [pc, #120]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005684:	0c1b      	lsrs	r3, r3, #16
 8005686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005692:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005696:	ee37 7a87 	vadd.f32	s14, s15, s14
 800569a:	edd7 6a07 	vldr	s13, [r7, #28]
 800569e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056a6:	ee17 2a90 	vmov	r2, s15
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80056ae:	4b13      	ldr	r3, [pc, #76]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	0e1b      	lsrs	r3, r3, #24
 80056b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056b8:	ee07 3a90 	vmov	s15, r3
 80056bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80056cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056d4:	ee17 2a90 	vmov	r2, s15
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80056dc:	e008      	b.n	80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	609a      	str	r2, [r3, #8]
}
 80056f0:	bf00      	nop
 80056f2:	3724      	adds	r7, #36	; 0x24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	58024400 	.word	0x58024400
 8005700:	03d09000 	.word	0x03d09000
 8005704:	46000000 	.word	0x46000000
 8005708:	4c742400 	.word	0x4c742400
 800570c:	4a742400 	.word	0x4a742400
 8005710:	4af42400 	.word	0x4af42400

08005714 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005714:	b480      	push	{r7}
 8005716:	b089      	sub	sp, #36	; 0x24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800571c:	4b9d      	ldr	r3, [pc, #628]	; (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005720:	f003 0303 	and.w	r3, r3, #3
 8005724:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005726:	4b9b      	ldr	r3, [pc, #620]	; (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	0d1b      	lsrs	r3, r3, #20
 800572c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005730:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005732:	4b98      	ldr	r3, [pc, #608]	; (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005736:	0a1b      	lsrs	r3, r3, #8
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800573e:	4b95      	ldr	r3, [pc, #596]	; (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005742:	08db      	lsrs	r3, r3, #3
 8005744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	fb02 f303 	mul.w	r3, r2, r3
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005756:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 810a 	beq.w	8005976 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d05a      	beq.n	800581e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005768:	2b01      	cmp	r3, #1
 800576a:	d302      	bcc.n	8005772 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800576c:	2b02      	cmp	r3, #2
 800576e:	d078      	beq.n	8005862 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005770:	e099      	b.n	80058a6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005772:	4b88      	ldr	r3, [pc, #544]	; (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0320 	and.w	r3, r3, #32
 800577a:	2b00      	cmp	r3, #0
 800577c:	d02d      	beq.n	80057da <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800577e:	4b85      	ldr	r3, [pc, #532]	; (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	08db      	lsrs	r3, r3, #3
 8005784:	f003 0303 	and.w	r3, r3, #3
 8005788:	4a83      	ldr	r2, [pc, #524]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800578a:	fa22 f303 	lsr.w	r3, r2, r3
 800578e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	ee07 3a90 	vmov	s15, r3
 80057a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057a8:	4b7a      	ldr	r3, [pc, #488]	; (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b0:	ee07 3a90 	vmov	s15, r3
 80057b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80057bc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800599c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80057c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057d8:	e087      	b.n	80058ea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	ee07 3a90 	vmov	s15, r3
 80057e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80057e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ec:	4b69      	ldr	r3, [pc, #420]	; (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f4:	ee07 3a90 	vmov	s15, r3
 80057f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005800:	eddf 5a66 	vldr	s11, [pc, #408]	; 800599c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005804:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005808:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800580c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005818:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800581c:	e065      	b.n	80058ea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	ee07 3a90 	vmov	s15, r3
 8005824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005828:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800582c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005830:	4b58      	ldr	r3, [pc, #352]	; (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005838:	ee07 3a90 	vmov	s15, r3
 800583c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005840:	ed97 6a03 	vldr	s12, [r7, #12]
 8005844:	eddf 5a55 	vldr	s11, [pc, #340]	; 800599c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005848:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005850:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005854:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005860:	e043      	b.n	80058ea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	ee07 3a90 	vmov	s15, r3
 8005868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005874:	4b47      	ldr	r3, [pc, #284]	; (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587c:	ee07 3a90 	vmov	s15, r3
 8005880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005884:	ed97 6a03 	vldr	s12, [r7, #12]
 8005888:	eddf 5a44 	vldr	s11, [pc, #272]	; 800599c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800588c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005890:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005894:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058a4:	e021      	b.n	80058ea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	ee07 3a90 	vmov	s15, r3
 80058ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80058b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058b8:	4b36      	ldr	r3, [pc, #216]	; (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c0:	ee07 3a90 	vmov	s15, r3
 80058c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80058cc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800599c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80058d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058e8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80058ea:	4b2a      	ldr	r3, [pc, #168]	; (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	0a5b      	lsrs	r3, r3, #9
 80058f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f4:	ee07 3a90 	vmov	s15, r3
 80058f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005900:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005904:	edd7 6a07 	vldr	s13, [r7, #28]
 8005908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800590c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005910:	ee17 2a90 	vmov	r2, s15
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005918:	4b1e      	ldr	r3, [pc, #120]	; (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	0c1b      	lsrs	r3, r3, #16
 800591e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800592e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005932:	edd7 6a07 	vldr	s13, [r7, #28]
 8005936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800593a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800593e:	ee17 2a90 	vmov	r2, s15
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005946:	4b13      	ldr	r3, [pc, #76]	; (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	0e1b      	lsrs	r3, r3, #24
 800594c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005950:	ee07 3a90 	vmov	s15, r3
 8005954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800595c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005960:	edd7 6a07 	vldr	s13, [r7, #28]
 8005964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800596c:	ee17 2a90 	vmov	r2, s15
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005974:	e008      	b.n	8005988 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	609a      	str	r2, [r3, #8]
}
 8005988:	bf00      	nop
 800598a:	3724      	adds	r7, #36	; 0x24
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	58024400 	.word	0x58024400
 8005998:	03d09000 	.word	0x03d09000
 800599c:	46000000 	.word	0x46000000
 80059a0:	4c742400 	.word	0x4c742400
 80059a4:	4a742400 	.word	0x4a742400
 80059a8:	4af42400 	.word	0x4af42400

080059ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059ba:	4b53      	ldr	r3, [pc, #332]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 80059bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	d101      	bne.n	80059ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e099      	b.n	8005afe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80059ca:	4b4f      	ldr	r3, [pc, #316]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a4e      	ldr	r2, [pc, #312]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 80059d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059d6:	f7fc f8db 	bl	8001b90 <HAL_GetTick>
 80059da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059dc:	e008      	b.n	80059f0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80059de:	f7fc f8d7 	bl	8001b90 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e086      	b.n	8005afe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059f0:	4b45      	ldr	r3, [pc, #276]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1f0      	bne.n	80059de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80059fc:	4b42      	ldr	r3, [pc, #264]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	031b      	lsls	r3, r3, #12
 8005a0a:	493f      	ldr	r1, [pc, #252]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	628b      	str	r3, [r1, #40]	; 0x28
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	025b      	lsls	r3, r3, #9
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	041b      	lsls	r3, r3, #16
 8005a2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a32:	431a      	orrs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	061b      	lsls	r3, r3, #24
 8005a3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a40:	4931      	ldr	r1, [pc, #196]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005a46:	4b30      	ldr	r3, [pc, #192]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	492d      	ldr	r1, [pc, #180]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a58:	4b2b      	ldr	r3, [pc, #172]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	f023 0220 	bic.w	r2, r3, #32
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	4928      	ldr	r1, [pc, #160]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a6a:	4b27      	ldr	r3, [pc, #156]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	4a26      	ldr	r2, [pc, #152]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005a70:	f023 0310 	bic.w	r3, r3, #16
 8005a74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a76:	4b24      	ldr	r3, [pc, #144]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a7a:	4b24      	ldr	r3, [pc, #144]	; (8005b0c <RCCEx_PLL2_Config+0x160>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	69d2      	ldr	r2, [r2, #28]
 8005a82:	00d2      	lsls	r2, r2, #3
 8005a84:	4920      	ldr	r1, [pc, #128]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a8a:	4b1f      	ldr	r3, [pc, #124]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	4a1e      	ldr	r2, [pc, #120]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005a90:	f043 0310 	orr.w	r3, r3, #16
 8005a94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d106      	bne.n	8005aaa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a9c:	4b1a      	ldr	r3, [pc, #104]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa0:	4a19      	ldr	r2, [pc, #100]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005aa2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005aa8:	e00f      	b.n	8005aca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d106      	bne.n	8005abe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005ab0:	4b15      	ldr	r3, [pc, #84]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	4a14      	ldr	r2, [pc, #80]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005abc:	e005      	b.n	8005aca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005abe:	4b12      	ldr	r3, [pc, #72]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac2:	4a11      	ldr	r2, [pc, #68]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ac8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005aca:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a0e      	ldr	r2, [pc, #56]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005ad0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ad4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad6:	f7fc f85b 	bl	8001b90 <HAL_GetTick>
 8005ada:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005adc:	e008      	b.n	8005af0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005ade:	f7fc f857 	bl	8001b90 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d901      	bls.n	8005af0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e006      	b.n	8005afe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005af0:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <RCCEx_PLL2_Config+0x15c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0f0      	beq.n	8005ade <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	58024400 	.word	0x58024400
 8005b0c:	ffff0007 	.word	0xffff0007

08005b10 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b1e:	4b53      	ldr	r3, [pc, #332]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d101      	bne.n	8005b2e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e099      	b.n	8005c62 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b2e:	4b4f      	ldr	r3, [pc, #316]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a4e      	ldr	r2, [pc, #312]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b3a:	f7fc f829 	bl	8001b90 <HAL_GetTick>
 8005b3e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b40:	e008      	b.n	8005b54 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b42:	f7fc f825 	bl	8001b90 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e086      	b.n	8005c62 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b54:	4b45      	ldr	r3, [pc, #276]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1f0      	bne.n	8005b42 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005b60:	4b42      	ldr	r3, [pc, #264]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	051b      	lsls	r3, r3, #20
 8005b6e:	493f      	ldr	r1, [pc, #252]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	628b      	str	r3, [r1, #40]	; 0x28
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	025b      	lsls	r3, r3, #9
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	041b      	lsls	r3, r3, #16
 8005b92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	061b      	lsls	r3, r3, #24
 8005ba0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ba4:	4931      	ldr	r1, [pc, #196]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005baa:	4b30      	ldr	r3, [pc, #192]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	492d      	ldr	r1, [pc, #180]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005bbc:	4b2b      	ldr	r3, [pc, #172]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	4928      	ldr	r1, [pc, #160]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005bce:	4b27      	ldr	r3, [pc, #156]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	4a26      	ldr	r2, [pc, #152]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005bda:	4b24      	ldr	r3, [pc, #144]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bde:	4b24      	ldr	r3, [pc, #144]	; (8005c70 <RCCEx_PLL3_Config+0x160>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	69d2      	ldr	r2, [r2, #28]
 8005be6:	00d2      	lsls	r2, r2, #3
 8005be8:	4920      	ldr	r1, [pc, #128]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005bee:	4b1f      	ldr	r3, [pc, #124]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	4a1e      	ldr	r2, [pc, #120]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d106      	bne.n	8005c0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005c00:	4b1a      	ldr	r3, [pc, #104]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	4a19      	ldr	r2, [pc, #100]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005c06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c0c:	e00f      	b.n	8005c2e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d106      	bne.n	8005c22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005c14:	4b15      	ldr	r3, [pc, #84]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c18:	4a14      	ldr	r2, [pc, #80]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005c1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c20:	e005      	b.n	8005c2e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c22:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c26:	4a11      	ldr	r2, [pc, #68]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005c28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c2e:	4b0f      	ldr	r3, [pc, #60]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a0e      	ldr	r2, [pc, #56]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c3a:	f7fb ffa9 	bl	8001b90 <HAL_GetTick>
 8005c3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c40:	e008      	b.n	8005c54 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c42:	f7fb ffa5 	bl	8001b90 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d901      	bls.n	8005c54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e006      	b.n	8005c62 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c54:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <RCCEx_PLL3_Config+0x15c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0f0      	beq.n	8005c42 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	58024400 	.word	0x58024400
 8005c70:	ffff0007 	.word	0xffff0007

08005c74 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e0e2      	b.n	8005e50 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a70      	ldr	r2, [pc, #448]	; (8005e58 <HAL_SPI_Init+0x1e4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00f      	beq.n	8005cba <HAL_SPI_Init+0x46>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a6f      	ldr	r2, [pc, #444]	; (8005e5c <HAL_SPI_Init+0x1e8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00a      	beq.n	8005cba <HAL_SPI_Init+0x46>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a6d      	ldr	r2, [pc, #436]	; (8005e60 <HAL_SPI_Init+0x1ec>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d005      	beq.n	8005cba <HAL_SPI_Init+0x46>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	2b0f      	cmp	r3, #15
 8005cb4:	d901      	bls.n	8005cba <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e0ca      	b.n	8005e50 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f001 f870 	bl	8006da0 <SPI_GetPacketSize>
 8005cc0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a64      	ldr	r2, [pc, #400]	; (8005e58 <HAL_SPI_Init+0x1e4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00c      	beq.n	8005ce6 <HAL_SPI_Init+0x72>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a62      	ldr	r2, [pc, #392]	; (8005e5c <HAL_SPI_Init+0x1e8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d007      	beq.n	8005ce6 <HAL_SPI_Init+0x72>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a61      	ldr	r2, [pc, #388]	; (8005e60 <HAL_SPI_Init+0x1ec>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d002      	beq.n	8005ce6 <HAL_SPI_Init+0x72>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	d811      	bhi.n	8005d0a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005cea:	4a5b      	ldr	r2, [pc, #364]	; (8005e58 <HAL_SPI_Init+0x1e4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d009      	beq.n	8005d04 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a59      	ldr	r2, [pc, #356]	; (8005e5c <HAL_SPI_Init+0x1e8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d004      	beq.n	8005d04 <HAL_SPI_Init+0x90>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a58      	ldr	r2, [pc, #352]	; (8005e60 <HAL_SPI_Init+0x1ec>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d104      	bne.n	8005d0e <HAL_SPI_Init+0x9a>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b10      	cmp	r3, #16
 8005d08:	d901      	bls.n	8005d0e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e0a0      	b.n	8005e50 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fb fc56 	bl	80015d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0201 	bic.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d48:	d110      	bne.n	8005d6c <HAL_SPI_Init+0xf8>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d52:	d10b      	bne.n	8005d6c <HAL_SPI_Init+0xf8>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d107      	bne.n	8005d6c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d6a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	69da      	ldr	r2, [r3, #28]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	431a      	orrs	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7e:	ea42 0103 	orr.w	r1, r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	431a      	orrs	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dcc:	ea42 0103 	orr.w	r1, r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d113      	bne.n	8005e0c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005df6:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e0a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0201 	bic.w	r2, r2, #1
 8005e1a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	40013000 	.word	0x40013000
 8005e5c:	40003800 	.word	0x40003800
 8005e60:	40003c00 	.word	0x40003c00

08005e64 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08a      	sub	sp, #40	; 0x28
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	603b      	str	r3, [r7, #0]
 8005e70:	4613      	mov	r3, r2
 8005e72:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3320      	adds	r3, #32
 8005e7a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_SPI_Transmit+0x2a>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e1d7      	b.n	800623e <HAL_SPI_Transmit+0x3da>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e96:	f7fb fe7b 	bl	8001b90 <HAL_GetTick>
 8005e9a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d007      	beq.n	8005eb8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005eb4:	7efb      	ldrb	r3, [r7, #27]
 8005eb6:	e1c2      	b.n	800623e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <HAL_SPI_Transmit+0x60>
 8005ebe:	88fb      	ldrh	r3, [r7, #6]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d107      	bne.n	8005ed4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005ed0:	7efb      	ldrb	r3, [r7, #27]
 8005ed2:	e1b4      	b.n	800623e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2203      	movs	r2, #3
 8005ed8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	88fa      	ldrh	r2, [r7, #6]
 8005eee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	88fa      	ldrh	r2, [r7, #6]
 8005ef6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005f24:	d107      	bne.n	8005f36 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f34:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	4b96      	ldr	r3, [pc, #600]	; (8006198 <HAL_SPI_Transmit+0x334>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	88f9      	ldrh	r1, [r7, #6]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	6812      	ldr	r2, [r2, #0]
 8005f46:	430b      	orrs	r3, r1
 8005f48:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f042 0201 	orr.w	r2, r2, #1
 8005f58:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f62:	d107      	bne.n	8005f74 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	2b0f      	cmp	r3, #15
 8005f7a:	d947      	bls.n	800600c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005f7c:	e03f      	b.n	8005ffe <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d114      	bne.n	8005fb6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6812      	ldr	r2, [r2, #0]
 8005f96:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f9c:	1d1a      	adds	r2, r3, #4
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	3b01      	subs	r3, #1
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005fb4:	e023      	b.n	8005ffe <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fb6:	f7fb fdeb 	bl	8001b90 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d803      	bhi.n	8005fce <HAL_SPI_Transmit+0x16a>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fcc:	d102      	bne.n	8005fd4 <HAL_SPI_Transmit+0x170>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d114      	bne.n	8005ffe <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 fe15 	bl	8006c04 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fe8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e11f      	b.n	800623e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006004:	b29b      	uxth	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1b9      	bne.n	8005f7e <HAL_SPI_Transmit+0x11a>
 800600a:	e0f2      	b.n	80061f2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	2b07      	cmp	r3, #7
 8006012:	f240 80e7 	bls.w	80061e4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006016:	e05d      	b.n	80060d4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b02      	cmp	r3, #2
 8006024:	d132      	bne.n	800608c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800602c:	b29b      	uxth	r3, r3
 800602e:	2b01      	cmp	r3, #1
 8006030:	d918      	bls.n	8006064 <HAL_SPI_Transmit+0x200>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d014      	beq.n	8006064 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6812      	ldr	r2, [r2, #0]
 8006044:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604a:	1d1a      	adds	r2, r3, #4
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006056:	b29b      	uxth	r3, r3
 8006058:	3b02      	subs	r3, #2
 800605a:	b29a      	uxth	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006062:	e037      	b.n	80060d4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006068:	881a      	ldrh	r2, [r3, #0]
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006072:	1c9a      	adds	r2, r3, #2
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800608a:	e023      	b.n	80060d4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800608c:	f7fb fd80 	bl	8001b90 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d803      	bhi.n	80060a4 <HAL_SPI_Transmit+0x240>
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a2:	d102      	bne.n	80060aa <HAL_SPI_Transmit+0x246>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d114      	bne.n	80060d4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 fdaa 	bl	8006c04 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e0b4      	b.n	800623e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d19b      	bne.n	8006018 <HAL_SPI_Transmit+0x1b4>
 80060e0:	e087      	b.n	80061f2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d155      	bne.n	800619c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d918      	bls.n	800612e <HAL_SPI_Transmit+0x2ca>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006100:	2b40      	cmp	r3, #64	; 0x40
 8006102:	d914      	bls.n	800612e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6812      	ldr	r2, [r2, #0]
 800610e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006114:	1d1a      	adds	r2, r3, #4
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006120:	b29b      	uxth	r3, r3
 8006122:	3b04      	subs	r3, #4
 8006124:	b29a      	uxth	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800612c:	e05a      	b.n	80061e4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b01      	cmp	r3, #1
 8006138:	d917      	bls.n	800616a <HAL_SPI_Transmit+0x306>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d013      	beq.n	800616a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006146:	881a      	ldrh	r2, [r3, #0]
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006150:	1c9a      	adds	r2, r3, #2
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b02      	subs	r3, #2
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006168:	e03c      	b.n	80061e4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3320      	adds	r3, #32
 8006174:	7812      	ldrb	r2, [r2, #0]
 8006176:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006194:	e026      	b.n	80061e4 <HAL_SPI_Transmit+0x380>
 8006196:	bf00      	nop
 8006198:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800619c:	f7fb fcf8 	bl	8001b90 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d803      	bhi.n	80061b4 <HAL_SPI_Transmit+0x350>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d102      	bne.n	80061ba <HAL_SPI_Transmit+0x356>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d114      	bne.n	80061e4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 fd22 	bl	8006c04 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e02c      	b.n	800623e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f47f af78 	bne.w	80060e2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2200      	movs	r2, #0
 80061fa:	2108      	movs	r1, #8
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 fda1 	bl	8006d44 <SPI_WaitOnFlagUntilTimeout>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d007      	beq.n	8006218 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800620e:	f043 0220 	orr.w	r2, r3, #32
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 fcf3 	bl	8006c04 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e000      	b.n	800623e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800623c:	7efb      	ldrb	r3, [r7, #27]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3720      	adds	r7, #32
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop

08006248 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08a      	sub	sp, #40	; 0x28
 800624c:	af02      	add	r7, sp, #8
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	603b      	str	r3, [r7, #0]
 8006254:	4613      	mov	r3, r2
 8006256:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3330      	adds	r3, #48	; 0x30
 8006262:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800626c:	d112      	bne.n	8006294 <HAL_SPI_Receive+0x4c>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10e      	bne.n	8006294 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2204      	movs	r2, #4
 800627a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800627e:	88fa      	ldrh	r2, [r7, #6]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	4613      	mov	r3, r2
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	68b9      	ldr	r1, [r7, #8]
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 f9ce 	bl	800662c <HAL_SPI_TransmitReceive>
 8006290:	4603      	mov	r3, r0
 8006292:	e1c7      	b.n	8006624 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800629a:	2b01      	cmp	r3, #1
 800629c:	d101      	bne.n	80062a2 <HAL_SPI_Receive+0x5a>
 800629e:	2302      	movs	r3, #2
 80062a0:	e1c0      	b.n	8006624 <HAL_SPI_Receive+0x3dc>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062aa:	f7fb fc71 	bl	8001b90 <HAL_GetTick>
 80062ae:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d007      	beq.n	80062cc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80062bc:	2302      	movs	r3, #2
 80062be:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80062c8:	7ffb      	ldrb	r3, [r7, #31]
 80062ca:	e1ab      	b.n	8006624 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <HAL_SPI_Receive+0x90>
 80062d2:	88fb      	ldrh	r3, [r7, #6]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d107      	bne.n	80062e8 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80062e4:	7ffb      	ldrb	r3, [r7, #31]
 80062e6:	e19d      	b.n	8006624 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2204      	movs	r2, #4
 80062ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	88fa      	ldrh	r2, [r7, #6]
 8006302:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	88fa      	ldrh	r2, [r7, #6]
 800630a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006338:	d107      	bne.n	800634a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006348:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	4b94      	ldr	r3, [pc, #592]	; (80065a4 <HAL_SPI_Receive+0x35c>)
 8006352:	4013      	ands	r3, r2
 8006354:	88f9      	ldrh	r1, [r7, #6]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	6812      	ldr	r2, [r2, #0]
 800635a:	430b      	orrs	r3, r1
 800635c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f042 0201 	orr.w	r2, r2, #1
 800636c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006376:	d107      	bne.n	8006388 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006386:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	2b0f      	cmp	r3, #15
 800638e:	d948      	bls.n	8006422 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006390:	e040      	b.n	8006414 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	695a      	ldr	r2, [r3, #20]
 8006398:	f248 0308 	movw	r3, #32776	; 0x8008
 800639c:	4013      	ands	r3, r2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d014      	beq.n	80063cc <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80063ac:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063b2:	1d1a      	adds	r2, r3, #4
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80063be:	b29b      	uxth	r3, r3
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80063ca:	e023      	b.n	8006414 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063cc:	f7fb fbe0 	bl	8001b90 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d803      	bhi.n	80063e4 <HAL_SPI_Receive+0x19c>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e2:	d102      	bne.n	80063ea <HAL_SPI_Receive+0x1a2>
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d114      	bne.n	8006414 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 fc0a 	bl	8006c04 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e107      	b.n	8006624 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800641a:	b29b      	uxth	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1b8      	bne.n	8006392 <HAL_SPI_Receive+0x14a>
 8006420:	e0ed      	b.n	80065fe <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	2b07      	cmp	r3, #7
 8006428:	f240 80e2 	bls.w	80065f0 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800642c:	e05b      	b.n	80064e6 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d030      	beq.n	800649e <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d014      	beq.n	8006474 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006452:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006454:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800645a:	1d1a      	adds	r2, r3, #4
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006466:	b29b      	uxth	r3, r3
 8006468:	3b02      	subs	r3, #2
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006472:	e038      	b.n	80064e6 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	8812      	ldrh	r2, [r2, #0]
 800647c:	b292      	uxth	r2, r2
 800647e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006484:	1c9a      	adds	r2, r3, #2
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800649c:	e023      	b.n	80064e6 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800649e:	f7fb fb77 	bl	8001b90 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d803      	bhi.n	80064b6 <HAL_SPI_Receive+0x26e>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b4:	d102      	bne.n	80064bc <HAL_SPI_Receive+0x274>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d114      	bne.n	80064e6 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 fba1 	bl	8006c04 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e09e      	b.n	8006624 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d19d      	bne.n	800642e <HAL_SPI_Receive+0x1e6>
 80064f2:	e084      	b.n	80065fe <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d052      	beq.n	80065a8 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d014      	beq.n	800653a <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006518:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800651a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006520:	1d1a      	adds	r2, r3, #4
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800652c:	b29b      	uxth	r3, r3
 800652e:	3b04      	subs	r3, #4
 8006530:	b29a      	uxth	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006538:	e05a      	b.n	80065f0 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8006544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006548:	d914      	bls.n	8006574 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	8812      	ldrh	r2, [r2, #0]
 8006552:	b292      	uxth	r2, r2
 8006554:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800655a:	1c9a      	adds	r2, r3, #2
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006566:	b29b      	uxth	r3, r3
 8006568:	3b02      	subs	r3, #2
 800656a:	b29a      	uxth	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006572:	e03d      	b.n	80065f0 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006580:	7812      	ldrb	r2, [r2, #0]
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80065a2:	e025      	b.n	80065f0 <HAL_SPI_Receive+0x3a8>
 80065a4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065a8:	f7fb faf2 	bl	8001b90 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d803      	bhi.n	80065c0 <HAL_SPI_Receive+0x378>
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065be:	d102      	bne.n	80065c6 <HAL_SPI_Receive+0x37e>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d114      	bne.n	80065f0 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 fb1c 	bl	8006c04 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e019      	b.n	8006624 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f47f af7b 	bne.w	80064f4 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 fb00 	bl	8006c04 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 8006622:	7ffb      	ldrb	r3, [r7, #31]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3720      	adds	r7, #32
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08e      	sub	sp, #56	; 0x38
 8006630:	af02      	add	r7, sp, #8
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3320      	adds	r3, #32
 8006646:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3330      	adds	r3, #48	; 0x30
 800664e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <HAL_SPI_TransmitReceive+0x32>
 800665a:	2302      	movs	r3, #2
 800665c:	e2ce      	b.n	8006bfc <HAL_SPI_TransmitReceive+0x5d0>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006666:	f7fb fa93 	bl	8001b90 <HAL_GetTick>
 800666a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800666c:	887b      	ldrh	r3, [r7, #2]
 800666e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006670:	887b      	ldrh	r3, [r7, #2]
 8006672:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800667a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006682:	7efb      	ldrb	r3, [r7, #27]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d014      	beq.n	80066b2 <HAL_SPI_TransmitReceive+0x86>
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800668e:	d106      	bne.n	800669e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d102      	bne.n	800669e <HAL_SPI_TransmitReceive+0x72>
 8006698:	7efb      	ldrb	r3, [r7, #27]
 800669a:	2b04      	cmp	r3, #4
 800669c:	d009      	beq.n	80066b2 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800669e:	2302      	movs	r3, #2
 80066a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80066ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066b0:	e2a4      	b.n	8006bfc <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <HAL_SPI_TransmitReceive+0x98>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <HAL_SPI_TransmitReceive+0x98>
 80066be:	887b      	ldrh	r3, [r7, #2]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d109      	bne.n	80066d8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80066d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066d6:	e291      	b.n	8006bfc <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d003      	beq.n	80066ec <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2205      	movs	r2, #5
 80066e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	887a      	ldrh	r2, [r7, #2]
 80066fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	887a      	ldrh	r2, [r7, #2]
 8006706:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	887a      	ldrh	r2, [r7, #2]
 8006714:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	887a      	ldrh	r2, [r7, #2]
 800671c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	4b9f      	ldr	r3, [pc, #636]	; (80069b0 <HAL_SPI_TransmitReceive+0x384>)
 8006734:	4013      	ands	r3, r2
 8006736:	8879      	ldrh	r1, [r7, #2]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	6812      	ldr	r2, [r2, #0]
 800673c:	430b      	orrs	r3, r1
 800673e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0201 	orr.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006758:	d107      	bne.n	800676a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006768:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	2b0f      	cmp	r3, #15
 8006770:	d970      	bls.n	8006854 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006772:	e068      	b.n	8006846 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b02      	cmp	r3, #2
 8006780:	d11a      	bne.n	80067b8 <HAL_SPI_TransmitReceive+0x18c>
 8006782:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006784:	2b00      	cmp	r3, #0
 8006786:	d017      	beq.n	80067b8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6812      	ldr	r2, [r2, #0]
 8006792:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006798:	1d1a      	adds	r2, r3, #4
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80067b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	695a      	ldr	r2, [r3, #20]
 80067be:	f248 0308 	movw	r3, #32776	; 0x8008
 80067c2:	4013      	ands	r3, r2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d01a      	beq.n	80067fe <HAL_SPI_TransmitReceive+0x1d2>
 80067c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d017      	beq.n	80067fe <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80067d8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067de:	1d1a      	adds	r2, r3, #4
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	3b01      	subs	r3, #1
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067fc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067fe:	f7fb f9c7 	bl	8001b90 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800680a:	429a      	cmp	r2, r3
 800680c:	d803      	bhi.n	8006816 <HAL_SPI_TransmitReceive+0x1ea>
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006814:	d102      	bne.n	800681c <HAL_SPI_TransmitReceive+0x1f0>
 8006816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006818:	2b00      	cmp	r3, #0
 800681a:	d114      	bne.n	8006846 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f9f1 	bl	8006c04 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006830:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e1da      	b.n	8006bfc <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006846:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006848:	2b00      	cmp	r3, #0
 800684a:	d193      	bne.n	8006774 <HAL_SPI_TransmitReceive+0x148>
 800684c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800684e:	2b00      	cmp	r3, #0
 8006850:	d190      	bne.n	8006774 <HAL_SPI_TransmitReceive+0x148>
 8006852:	e1ac      	b.n	8006bae <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	2b07      	cmp	r3, #7
 800685a:	f240 81a0 	bls.w	8006b9e <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800685e:	e0a9      	b.n	80069b4 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b02      	cmp	r3, #2
 800686c:	d139      	bne.n	80068e2 <HAL_SPI_TransmitReceive+0x2b6>
 800686e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006870:	2b00      	cmp	r3, #0
 8006872:	d036      	beq.n	80068e2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006874:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006876:	2b01      	cmp	r3, #1
 8006878:	d91c      	bls.n	80068b4 <HAL_SPI_TransmitReceive+0x288>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687e:	2b00      	cmp	r3, #0
 8006880:	d018      	beq.n	80068b4 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6812      	ldr	r2, [r2, #0]
 800688c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006892:	1d1a      	adds	r2, r3, #4
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800689e:	b29b      	uxth	r3, r3
 80068a0:	3b02      	subs	r3, #2
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80068b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80068b2:	e016      	b.n	80068e2 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b8:	881a      	ldrh	r2, [r3, #0]
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c2:	1c9a      	adds	r2, r3, #2
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80068e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d03a      	beq.n	8006966 <HAL_SPI_TransmitReceive+0x33a>
 80068f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d037      	beq.n	8006966 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d018      	beq.n	8006936 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800690c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800690e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006914:	1d1a      	adds	r2, r3, #4
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006920:	b29b      	uxth	r3, r3
 8006922:	3b02      	subs	r3, #2
 8006924:	b29a      	uxth	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006932:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006934:	e017      	b.n	8006966 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800693a:	6a3a      	ldr	r2, [r7, #32]
 800693c:	8812      	ldrh	r2, [r2, #0]
 800693e:	b292      	uxth	r2, r2
 8006940:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006946:	1c9a      	adds	r2, r3, #2
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006952:	b29b      	uxth	r3, r3
 8006954:	3b01      	subs	r3, #1
 8006956:	b29a      	uxth	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006964:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006966:	f7fb f913 	bl	8001b90 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006972:	429a      	cmp	r2, r3
 8006974:	d803      	bhi.n	800697e <HAL_SPI_TransmitReceive+0x352>
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697c:	d102      	bne.n	8006984 <HAL_SPI_TransmitReceive+0x358>
 800697e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006980:	2b00      	cmp	r3, #0
 8006982:	d117      	bne.n	80069b4 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 f93d 	bl	8006c04 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006998:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e126      	b.n	8006bfc <HAL_SPI_TransmitReceive+0x5d0>
 80069ae:	bf00      	nop
 80069b0:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80069b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f47f af52 	bne.w	8006860 <HAL_SPI_TransmitReceive+0x234>
 80069bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f47f af4e 	bne.w	8006860 <HAL_SPI_TransmitReceive+0x234>
 80069c4:	e0f3      	b.n	8006bae <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d15a      	bne.n	8006a8a <HAL_SPI_TransmitReceive+0x45e>
 80069d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d057      	beq.n	8006a8a <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80069da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d91c      	bls.n	8006a1a <HAL_SPI_TransmitReceive+0x3ee>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e4:	2b40      	cmp	r3, #64	; 0x40
 80069e6:	d918      	bls.n	8006a1a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6812      	ldr	r2, [r2, #0]
 80069f2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f8:	1d1a      	adds	r2, r3, #4
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b04      	subs	r3, #4
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a16:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006a18:	e037      	b.n	8006a8a <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006a1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d91b      	bls.n	8006a58 <HAL_SPI_TransmitReceive+0x42c>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d017      	beq.n	8006a58 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a2c:	881a      	ldrh	r2, [r3, #0]
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a36:	1c9a      	adds	r2, r3, #2
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3b02      	subs	r3, #2
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a54:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006a56:	e018      	b.n	8006a8a <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3320      	adds	r3, #32
 8006a62:	7812      	ldrb	r2, [r2, #0]
 8006a64:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a6a:	1c5a      	adds	r2, r3, #1
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a88:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d05e      	beq.n	8006b56 <HAL_SPI_TransmitReceive+0x52a>
 8006a98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d05b      	beq.n	8006b56 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d018      	beq.n	8006ade <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ab4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006ab6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006abc:	1d1a      	adds	r2, r3, #4
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	3b04      	subs	r3, #4
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006ada:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006adc:	e03b      	b.n	8006b56 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8006ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aec:	d918      	bls.n	8006b20 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006af2:	6a3a      	ldr	r2, [r7, #32]
 8006af4:	8812      	ldrh	r2, [r2, #0]
 8006af6:	b292      	uxth	r2, r2
 8006af8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006afe:	1c9a      	adds	r2, r3, #2
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	3b02      	subs	r3, #2
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b1c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006b1e:	e01a      	b.n	8006b56 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b2c:	7812      	ldrb	r2, [r2, #0]
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	3b01      	subs	r3, #1
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b54:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b56:	f7fb f81b 	bl	8001b90 <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d803      	bhi.n	8006b6e <HAL_SPI_TransmitReceive+0x542>
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6c:	d102      	bne.n	8006b74 <HAL_SPI_TransmitReceive+0x548>
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d114      	bne.n	8006b9e <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 f845 	bl	8006c04 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e02e      	b.n	8006bfc <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006b9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f47f af10 	bne.w	80069c6 <HAL_SPI_TransmitReceive+0x39a>
 8006ba6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f47f af0c 	bne.w	80069c6 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2108      	movs	r1, #8
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f8c3 	bl	8006d44 <SPI_WaitOnFlagUntilTimeout>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d007      	beq.n	8006bd4 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bca:	f043 0220 	orr.w	r2, r3, #32
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 f815 	bl	8006c04 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e001      	b.n	8006bfc <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8006bf8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3730      	adds	r7, #48	; 0x30
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	699a      	ldr	r2, [r3, #24]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f042 0208 	orr.w	r2, r2, #8
 8006c22:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699a      	ldr	r2, [r3, #24]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0210 	orr.w	r2, r2, #16
 8006c32:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0201 	bic.w	r2, r2, #1
 8006c42:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6919      	ldr	r1, [r3, #16]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	4b3c      	ldr	r3, [pc, #240]	; (8006d40 <SPI_CloseTransfer+0x13c>)
 8006c50:	400b      	ands	r3, r1
 8006c52:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689a      	ldr	r2, [r3, #8]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006c62:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d014      	beq.n	8006c9a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f003 0320 	and.w	r3, r3, #32
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00f      	beq.n	8006c9a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	699a      	ldr	r2, [r3, #24]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f042 0220 	orr.w	r2, r2, #32
 8006c98:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d014      	beq.n	8006cd0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00f      	beq.n	8006cd0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cb6:	f043 0204 	orr.w	r2, r3, #4
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699a      	ldr	r2, [r3, #24]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00f      	beq.n	8006cfa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ce0:	f043 0201 	orr.w	r2, r3, #1
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	699a      	ldr	r2, [r3, #24]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00f      	beq.n	8006d24 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d0a:	f043 0208 	orr.w	r2, r3, #8
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d22:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006d34:	bf00      	nop
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	fffffc90 	.word	0xfffffc90

08006d44 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	603b      	str	r3, [r7, #0]
 8006d50:	4613      	mov	r3, r2
 8006d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006d54:	e010      	b.n	8006d78 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d56:	f7fa ff1b 	bl	8001b90 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d803      	bhi.n	8006d6e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d102      	bne.n	8006d74 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e00f      	b.n	8006d98 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	695a      	ldr	r2, [r3, #20]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	4013      	ands	r3, r2
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	bf0c      	ite	eq
 8006d88:	2301      	moveq	r3, #1
 8006d8a:	2300      	movne	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	79fb      	ldrb	r3, [r7, #7]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d0df      	beq.n	8006d56 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dac:	095b      	lsrs	r3, r3, #5
 8006dae:	3301      	adds	r3, #1
 8006db0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	3301      	adds	r3, #1
 8006db8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	3307      	adds	r3, #7
 8006dbe:	08db      	lsrs	r3, r3, #3
 8006dc0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	fb02 f303 	mul.w	r3, r2, r3
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b082      	sub	sp, #8
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e049      	b.n	8006e7c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d106      	bne.n	8006e02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f841 	bl	8006e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2202      	movs	r2, #2
 8006e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3304      	adds	r3, #4
 8006e12:	4619      	mov	r1, r3
 8006e14:	4610      	mov	r0, r2
 8006e16:	f000 f9bd 	bl	8007194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d001      	beq.n	8006eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e021      	b.n	8006ef4 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68da      	ldr	r2, [r3, #12]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0201 	orr.w	r2, r2, #1
 8006ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689a      	ldr	r2, [r3, #8]
 8006ece:	4b0c      	ldr	r3, [pc, #48]	; (8006f00 <HAL_TIM_Base_Start_IT+0x68>)
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b06      	cmp	r3, #6
 8006ed8:	d00b      	beq.n	8006ef2 <HAL_TIM_Base_Start_IT+0x5a>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee0:	d007      	beq.n	8006ef2 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f042 0201 	orr.w	r2, r2, #1
 8006ef0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	00010007 	.word	0x00010007

08006f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d122      	bne.n	8006f60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d11b      	bne.n	8006f60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f06f 0202 	mvn.w	r2, #2
 8006f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	f003 0303 	and.w	r3, r3, #3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f905 	bl	8007156 <HAL_TIM_IC_CaptureCallback>
 8006f4c:	e005      	b.n	8006f5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f8f7 	bl	8007142 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f908 	bl	800716a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d122      	bne.n	8006fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	d11b      	bne.n	8006fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f06f 0204 	mvn.w	r2, #4
 8006f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2202      	movs	r2, #2
 8006f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f8db 	bl	8007156 <HAL_TIM_IC_CaptureCallback>
 8006fa0:	e005      	b.n	8006fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f8cd 	bl	8007142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f8de 	bl	800716a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	f003 0308 	and.w	r3, r3, #8
 8006fbe:	2b08      	cmp	r3, #8
 8006fc0:	d122      	bne.n	8007008 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f003 0308 	and.w	r3, r3, #8
 8006fcc:	2b08      	cmp	r3, #8
 8006fce:	d11b      	bne.n	8007008 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f06f 0208 	mvn.w	r2, #8
 8006fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2204      	movs	r2, #4
 8006fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	f003 0303 	and.w	r3, r3, #3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f8b1 	bl	8007156 <HAL_TIM_IC_CaptureCallback>
 8006ff4:	e005      	b.n	8007002 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f8a3 	bl	8007142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f8b4 	bl	800716a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f003 0310 	and.w	r3, r3, #16
 8007012:	2b10      	cmp	r3, #16
 8007014:	d122      	bne.n	800705c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f003 0310 	and.w	r3, r3, #16
 8007020:	2b10      	cmp	r3, #16
 8007022:	d11b      	bne.n	800705c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f06f 0210 	mvn.w	r2, #16
 800702c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2208      	movs	r2, #8
 8007032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f887 	bl	8007156 <HAL_TIM_IC_CaptureCallback>
 8007048:	e005      	b.n	8007056 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f879 	bl	8007142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f88a 	bl	800716a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b01      	cmp	r3, #1
 8007068:	d10e      	bne.n	8007088 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b01      	cmp	r3, #1
 8007076:	d107      	bne.n	8007088 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f06f 0201 	mvn.w	r2, #1
 8007080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7fa f95a 	bl	800133c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007092:	2b80      	cmp	r3, #128	; 0x80
 8007094:	d10e      	bne.n	80070b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a0:	2b80      	cmp	r3, #128	; 0x80
 80070a2:	d107      	bne.n	80070b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f914 	bl	80072dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c2:	d10e      	bne.n	80070e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ce:	2b80      	cmp	r3, #128	; 0x80
 80070d0:	d107      	bne.n	80070e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80070da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f907 	bl	80072f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ec:	2b40      	cmp	r3, #64	; 0x40
 80070ee:	d10e      	bne.n	800710e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fa:	2b40      	cmp	r3, #64	; 0x40
 80070fc:	d107      	bne.n	800710e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f838 	bl	800717e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	f003 0320 	and.w	r3, r3, #32
 8007118:	2b20      	cmp	r3, #32
 800711a:	d10e      	bne.n	800713a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	2b20      	cmp	r3, #32
 8007128:	d107      	bne.n	800713a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f06f 0220 	mvn.w	r2, #32
 8007132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f8c7 	bl	80072c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800714a:	bf00      	nop
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
	...

08007194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a40      	ldr	r2, [pc, #256]	; (80072a8 <TIM_Base_SetConfig+0x114>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d013      	beq.n	80071d4 <TIM_Base_SetConfig+0x40>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b2:	d00f      	beq.n	80071d4 <TIM_Base_SetConfig+0x40>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a3d      	ldr	r2, [pc, #244]	; (80072ac <TIM_Base_SetConfig+0x118>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d00b      	beq.n	80071d4 <TIM_Base_SetConfig+0x40>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a3c      	ldr	r2, [pc, #240]	; (80072b0 <TIM_Base_SetConfig+0x11c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d007      	beq.n	80071d4 <TIM_Base_SetConfig+0x40>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a3b      	ldr	r2, [pc, #236]	; (80072b4 <TIM_Base_SetConfig+0x120>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d003      	beq.n	80071d4 <TIM_Base_SetConfig+0x40>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a3a      	ldr	r2, [pc, #232]	; (80072b8 <TIM_Base_SetConfig+0x124>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d108      	bne.n	80071e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a2f      	ldr	r2, [pc, #188]	; (80072a8 <TIM_Base_SetConfig+0x114>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d01f      	beq.n	800722e <TIM_Base_SetConfig+0x9a>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f4:	d01b      	beq.n	800722e <TIM_Base_SetConfig+0x9a>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a2c      	ldr	r2, [pc, #176]	; (80072ac <TIM_Base_SetConfig+0x118>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d017      	beq.n	800722e <TIM_Base_SetConfig+0x9a>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a2b      	ldr	r2, [pc, #172]	; (80072b0 <TIM_Base_SetConfig+0x11c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d013      	beq.n	800722e <TIM_Base_SetConfig+0x9a>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a2a      	ldr	r2, [pc, #168]	; (80072b4 <TIM_Base_SetConfig+0x120>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d00f      	beq.n	800722e <TIM_Base_SetConfig+0x9a>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a29      	ldr	r2, [pc, #164]	; (80072b8 <TIM_Base_SetConfig+0x124>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00b      	beq.n	800722e <TIM_Base_SetConfig+0x9a>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a28      	ldr	r2, [pc, #160]	; (80072bc <TIM_Base_SetConfig+0x128>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d007      	beq.n	800722e <TIM_Base_SetConfig+0x9a>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a27      	ldr	r2, [pc, #156]	; (80072c0 <TIM_Base_SetConfig+0x12c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d003      	beq.n	800722e <TIM_Base_SetConfig+0x9a>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a26      	ldr	r2, [pc, #152]	; (80072c4 <TIM_Base_SetConfig+0x130>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d108      	bne.n	8007240 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4313      	orrs	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	689a      	ldr	r2, [r3, #8]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a10      	ldr	r2, [pc, #64]	; (80072a8 <TIM_Base_SetConfig+0x114>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d00f      	beq.n	800728c <TIM_Base_SetConfig+0xf8>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a12      	ldr	r2, [pc, #72]	; (80072b8 <TIM_Base_SetConfig+0x124>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d00b      	beq.n	800728c <TIM_Base_SetConfig+0xf8>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a11      	ldr	r2, [pc, #68]	; (80072bc <TIM_Base_SetConfig+0x128>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d007      	beq.n	800728c <TIM_Base_SetConfig+0xf8>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a10      	ldr	r2, [pc, #64]	; (80072c0 <TIM_Base_SetConfig+0x12c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d003      	beq.n	800728c <TIM_Base_SetConfig+0xf8>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a0f      	ldr	r2, [pc, #60]	; (80072c4 <TIM_Base_SetConfig+0x130>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d103      	bne.n	8007294 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	615a      	str	r2, [r3, #20]
}
 800729a:	bf00      	nop
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	40010000 	.word	0x40010000
 80072ac:	40000400 	.word	0x40000400
 80072b0:	40000800 	.word	0x40000800
 80072b4:	40000c00 	.word	0x40000c00
 80072b8:	40010400 	.word	0x40010400
 80072bc:	40014000 	.word	0x40014000
 80072c0:	40014400 	.word	0x40014400
 80072c4:	40014800 	.word	0x40014800

080072c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e042      	b.n	800739c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800731c:	2b00      	cmp	r3, #0
 800731e:	d106      	bne.n	800732e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7fa f99d 	bl	8001668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2224      	movs	r2, #36	; 0x24
 8007332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0201 	bic.w	r2, r2, #1
 8007344:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f91a 	bl	8007580 <UART_SetConfig>
 800734c:	4603      	mov	r3, r0
 800734e:	2b01      	cmp	r3, #1
 8007350:	d101      	bne.n	8007356 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e022      	b.n	800739c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 febe 	bl	80080e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685a      	ldr	r2, [r3, #4]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007382:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f042 0201 	orr.w	r2, r2, #1
 8007392:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 ff45 	bl	8008224 <UART_CheckIdleState>
 800739a:	4603      	mov	r3, r0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e04a      	b.n	800744c <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d106      	bne.n	80073ce <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7fa f94d 	bl	8001668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2224      	movs	r2, #36	; 0x24
 80073d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0201 	bic.w	r2, r2, #1
 80073e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f8ca 	bl	8007580 <UART_SetConfig>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d101      	bne.n	80073f6 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e02a      	b.n	800744c <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fe6e 	bl	80080e0 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689a      	ldr	r2, [r3, #8]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8007422:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689a      	ldr	r2, [r3, #8]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0208 	orr.w	r2, r2, #8
 8007432:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 feed 	bl	8008224 <UART_CheckIdleState>
 800744a:	4603      	mov	r3, r0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08a      	sub	sp, #40	; 0x28
 8007458:	af02      	add	r7, sp, #8
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	603b      	str	r3, [r7, #0]
 8007460:	4613      	mov	r3, r2
 8007462:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800746a:	2b20      	cmp	r3, #32
 800746c:	f040 8083 	bne.w	8007576 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <HAL_UART_Transmit+0x28>
 8007476:	88fb      	ldrh	r3, [r7, #6]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e07b      	b.n	8007578 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_UART_Transmit+0x3a>
 800748a:	2302      	movs	r3, #2
 800748c:	e074      	b.n	8007578 <HAL_UART_Transmit+0x124>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2221      	movs	r2, #33	; 0x21
 80074a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80074a6:	f7fa fb73 	bl	8001b90 <HAL_GetTick>
 80074aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	88fa      	ldrh	r2, [r7, #6]
 80074b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	88fa      	ldrh	r2, [r7, #6]
 80074b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074c4:	d108      	bne.n	80074d8 <HAL_UART_Transmit+0x84>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d104      	bne.n	80074d8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80074ce:	2300      	movs	r3, #0
 80074d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	61bb      	str	r3, [r7, #24]
 80074d6:	e003      	b.n	80074e0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074dc:	2300      	movs	r3, #0
 80074de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80074e8:	e02c      	b.n	8007544 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2200      	movs	r2, #0
 80074f2:	2180      	movs	r1, #128	; 0x80
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 fedd 	bl	80082b4 <UART_WaitOnFlagUntilTimeout>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e039      	b.n	8007578 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10b      	bne.n	8007522 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	461a      	mov	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007518:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	3302      	adds	r3, #2
 800751e:	61bb      	str	r3, [r7, #24]
 8007520:	e007      	b.n	8007532 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	781a      	ldrb	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	3301      	adds	r3, #1
 8007530:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007538:	b29b      	uxth	r3, r3
 800753a:	3b01      	subs	r3, #1
 800753c:	b29a      	uxth	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800754a:	b29b      	uxth	r3, r3
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1cc      	bne.n	80074ea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	2200      	movs	r2, #0
 8007558:	2140      	movs	r1, #64	; 0x40
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 feaa 	bl	80082b4 <UART_WaitOnFlagUntilTimeout>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e006      	b.n	8007578 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2220      	movs	r2, #32
 800756e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	e000      	b.n	8007578 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007576:	2302      	movs	r3, #2
  }
}
 8007578:	4618      	mov	r0, r3
 800757a:	3720      	adds	r7, #32
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007580:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007584:	b08e      	sub	sp, #56	; 0x38
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	431a      	orrs	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075ae:	4313      	orrs	r3, r2
 80075b0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	4bc1      	ldr	r3, [pc, #772]	; (80078c0 <UART_SetConfig+0x340>)
 80075ba:	4013      	ands	r3, r2
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	6812      	ldr	r2, [r2, #0]
 80075c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075c2:	430b      	orrs	r3, r1
 80075c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68da      	ldr	r2, [r3, #12]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4ab7      	ldr	r2, [pc, #732]	; (80078c4 <UART_SetConfig+0x344>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d004      	beq.n	80075f6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075f2:	4313      	orrs	r3, r2
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	4bb2      	ldr	r3, [pc, #712]	; (80078c8 <UART_SetConfig+0x348>)
 80075fe:	4013      	ands	r3, r2
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6812      	ldr	r2, [r2, #0]
 8007604:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007606:	430b      	orrs	r3, r1
 8007608:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	f023 010f 	bic.w	r1, r3, #15
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	430a      	orrs	r2, r1
 800761e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4aa9      	ldr	r2, [pc, #676]	; (80078cc <UART_SetConfig+0x34c>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d177      	bne.n	800771a <UART_SetConfig+0x19a>
 800762a:	4ba9      	ldr	r3, [pc, #676]	; (80078d0 <UART_SetConfig+0x350>)
 800762c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007632:	2b28      	cmp	r3, #40	; 0x28
 8007634:	d86c      	bhi.n	8007710 <UART_SetConfig+0x190>
 8007636:	a201      	add	r2, pc, #4	; (adr r2, 800763c <UART_SetConfig+0xbc>)
 8007638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763c:	080076e1 	.word	0x080076e1
 8007640:	08007711 	.word	0x08007711
 8007644:	08007711 	.word	0x08007711
 8007648:	08007711 	.word	0x08007711
 800764c:	08007711 	.word	0x08007711
 8007650:	08007711 	.word	0x08007711
 8007654:	08007711 	.word	0x08007711
 8007658:	08007711 	.word	0x08007711
 800765c:	080076e9 	.word	0x080076e9
 8007660:	08007711 	.word	0x08007711
 8007664:	08007711 	.word	0x08007711
 8007668:	08007711 	.word	0x08007711
 800766c:	08007711 	.word	0x08007711
 8007670:	08007711 	.word	0x08007711
 8007674:	08007711 	.word	0x08007711
 8007678:	08007711 	.word	0x08007711
 800767c:	080076f1 	.word	0x080076f1
 8007680:	08007711 	.word	0x08007711
 8007684:	08007711 	.word	0x08007711
 8007688:	08007711 	.word	0x08007711
 800768c:	08007711 	.word	0x08007711
 8007690:	08007711 	.word	0x08007711
 8007694:	08007711 	.word	0x08007711
 8007698:	08007711 	.word	0x08007711
 800769c:	080076f9 	.word	0x080076f9
 80076a0:	08007711 	.word	0x08007711
 80076a4:	08007711 	.word	0x08007711
 80076a8:	08007711 	.word	0x08007711
 80076ac:	08007711 	.word	0x08007711
 80076b0:	08007711 	.word	0x08007711
 80076b4:	08007711 	.word	0x08007711
 80076b8:	08007711 	.word	0x08007711
 80076bc:	08007701 	.word	0x08007701
 80076c0:	08007711 	.word	0x08007711
 80076c4:	08007711 	.word	0x08007711
 80076c8:	08007711 	.word	0x08007711
 80076cc:	08007711 	.word	0x08007711
 80076d0:	08007711 	.word	0x08007711
 80076d4:	08007711 	.word	0x08007711
 80076d8:	08007711 	.word	0x08007711
 80076dc:	08007709 	.word	0x08007709
 80076e0:	2301      	movs	r3, #1
 80076e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076e6:	e233      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80076e8:	2304      	movs	r3, #4
 80076ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ee:	e22f      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80076f0:	2308      	movs	r3, #8
 80076f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076f6:	e22b      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80076f8:	2310      	movs	r3, #16
 80076fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076fe:	e227      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007700:	2320      	movs	r3, #32
 8007702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007706:	e223      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007708:	2340      	movs	r3, #64	; 0x40
 800770a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800770e:	e21f      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007710:	2380      	movs	r3, #128	; 0x80
 8007712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007716:	bf00      	nop
 8007718:	e21a      	b.n	8007b50 <UART_SetConfig+0x5d0>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a6d      	ldr	r2, [pc, #436]	; (80078d4 <UART_SetConfig+0x354>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d132      	bne.n	800778a <UART_SetConfig+0x20a>
 8007724:	4b6a      	ldr	r3, [pc, #424]	; (80078d0 <UART_SetConfig+0x350>)
 8007726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007728:	f003 0307 	and.w	r3, r3, #7
 800772c:	2b05      	cmp	r3, #5
 800772e:	d827      	bhi.n	8007780 <UART_SetConfig+0x200>
 8007730:	a201      	add	r2, pc, #4	; (adr r2, 8007738 <UART_SetConfig+0x1b8>)
 8007732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007736:	bf00      	nop
 8007738:	08007751 	.word	0x08007751
 800773c:	08007759 	.word	0x08007759
 8007740:	08007761 	.word	0x08007761
 8007744:	08007769 	.word	0x08007769
 8007748:	08007771 	.word	0x08007771
 800774c:	08007779 	.word	0x08007779
 8007750:	2300      	movs	r3, #0
 8007752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007756:	e1fb      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007758:	2304      	movs	r3, #4
 800775a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800775e:	e1f7      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007760:	2308      	movs	r3, #8
 8007762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007766:	e1f3      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007768:	2310      	movs	r3, #16
 800776a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800776e:	e1ef      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007770:	2320      	movs	r3, #32
 8007772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007776:	e1eb      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007778:	2340      	movs	r3, #64	; 0x40
 800777a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800777e:	e1e7      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007780:	2380      	movs	r3, #128	; 0x80
 8007782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007786:	bf00      	nop
 8007788:	e1e2      	b.n	8007b50 <UART_SetConfig+0x5d0>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a52      	ldr	r2, [pc, #328]	; (80078d8 <UART_SetConfig+0x358>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d132      	bne.n	80077fa <UART_SetConfig+0x27a>
 8007794:	4b4e      	ldr	r3, [pc, #312]	; (80078d0 <UART_SetConfig+0x350>)
 8007796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007798:	f003 0307 	and.w	r3, r3, #7
 800779c:	2b05      	cmp	r3, #5
 800779e:	d827      	bhi.n	80077f0 <UART_SetConfig+0x270>
 80077a0:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <UART_SetConfig+0x228>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	080077c1 	.word	0x080077c1
 80077ac:	080077c9 	.word	0x080077c9
 80077b0:	080077d1 	.word	0x080077d1
 80077b4:	080077d9 	.word	0x080077d9
 80077b8:	080077e1 	.word	0x080077e1
 80077bc:	080077e9 	.word	0x080077e9
 80077c0:	2300      	movs	r3, #0
 80077c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077c6:	e1c3      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80077c8:	2304      	movs	r3, #4
 80077ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ce:	e1bf      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80077d0:	2308      	movs	r3, #8
 80077d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077d6:	e1bb      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80077d8:	2310      	movs	r3, #16
 80077da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077de:	e1b7      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80077e0:	2320      	movs	r3, #32
 80077e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077e6:	e1b3      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80077e8:	2340      	movs	r3, #64	; 0x40
 80077ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ee:	e1af      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80077f0:	2380      	movs	r3, #128	; 0x80
 80077f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077f6:	bf00      	nop
 80077f8:	e1aa      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a37      	ldr	r2, [pc, #220]	; (80078dc <UART_SetConfig+0x35c>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d132      	bne.n	800786a <UART_SetConfig+0x2ea>
 8007804:	4b32      	ldr	r3, [pc, #200]	; (80078d0 <UART_SetConfig+0x350>)
 8007806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007808:	f003 0307 	and.w	r3, r3, #7
 800780c:	2b05      	cmp	r3, #5
 800780e:	d827      	bhi.n	8007860 <UART_SetConfig+0x2e0>
 8007810:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <UART_SetConfig+0x298>)
 8007812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007816:	bf00      	nop
 8007818:	08007831 	.word	0x08007831
 800781c:	08007839 	.word	0x08007839
 8007820:	08007841 	.word	0x08007841
 8007824:	08007849 	.word	0x08007849
 8007828:	08007851 	.word	0x08007851
 800782c:	08007859 	.word	0x08007859
 8007830:	2300      	movs	r3, #0
 8007832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007836:	e18b      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007838:	2304      	movs	r3, #4
 800783a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800783e:	e187      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007840:	2308      	movs	r3, #8
 8007842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007846:	e183      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007848:	2310      	movs	r3, #16
 800784a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800784e:	e17f      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007850:	2320      	movs	r3, #32
 8007852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007856:	e17b      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007858:	2340      	movs	r3, #64	; 0x40
 800785a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800785e:	e177      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007860:	2380      	movs	r3, #128	; 0x80
 8007862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007866:	bf00      	nop
 8007868:	e172      	b.n	8007b50 <UART_SetConfig+0x5d0>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a1c      	ldr	r2, [pc, #112]	; (80078e0 <UART_SetConfig+0x360>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d144      	bne.n	80078fe <UART_SetConfig+0x37e>
 8007874:	4b16      	ldr	r3, [pc, #88]	; (80078d0 <UART_SetConfig+0x350>)
 8007876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007878:	f003 0307 	and.w	r3, r3, #7
 800787c:	2b05      	cmp	r3, #5
 800787e:	d839      	bhi.n	80078f4 <UART_SetConfig+0x374>
 8007880:	a201      	add	r2, pc, #4	; (adr r2, 8007888 <UART_SetConfig+0x308>)
 8007882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007886:	bf00      	nop
 8007888:	080078a1 	.word	0x080078a1
 800788c:	080078a9 	.word	0x080078a9
 8007890:	080078b1 	.word	0x080078b1
 8007894:	080078b9 	.word	0x080078b9
 8007898:	080078e5 	.word	0x080078e5
 800789c:	080078ed 	.word	0x080078ed
 80078a0:	2300      	movs	r3, #0
 80078a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078a6:	e153      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80078a8:	2304      	movs	r3, #4
 80078aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078ae:	e14f      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80078b0:	2308      	movs	r3, #8
 80078b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078b6:	e14b      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80078b8:	2310      	movs	r3, #16
 80078ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078be:	e147      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80078c0:	cfff69f3 	.word	0xcfff69f3
 80078c4:	58000c00 	.word	0x58000c00
 80078c8:	11fff4ff 	.word	0x11fff4ff
 80078cc:	40011000 	.word	0x40011000
 80078d0:	58024400 	.word	0x58024400
 80078d4:	40004400 	.word	0x40004400
 80078d8:	40004800 	.word	0x40004800
 80078dc:	40004c00 	.word	0x40004c00
 80078e0:	40005000 	.word	0x40005000
 80078e4:	2320      	movs	r3, #32
 80078e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078ea:	e131      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80078ec:	2340      	movs	r3, #64	; 0x40
 80078ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078f2:	e12d      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80078f4:	2380      	movs	r3, #128	; 0x80
 80078f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078fa:	bf00      	nop
 80078fc:	e128      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4ab6      	ldr	r2, [pc, #728]	; (8007bdc <UART_SetConfig+0x65c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d178      	bne.n	80079fa <UART_SetConfig+0x47a>
 8007908:	4bb5      	ldr	r3, [pc, #724]	; (8007be0 <UART_SetConfig+0x660>)
 800790a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800790c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007910:	2b28      	cmp	r3, #40	; 0x28
 8007912:	d86d      	bhi.n	80079f0 <UART_SetConfig+0x470>
 8007914:	a201      	add	r2, pc, #4	; (adr r2, 800791c <UART_SetConfig+0x39c>)
 8007916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791a:	bf00      	nop
 800791c:	080079c1 	.word	0x080079c1
 8007920:	080079f1 	.word	0x080079f1
 8007924:	080079f1 	.word	0x080079f1
 8007928:	080079f1 	.word	0x080079f1
 800792c:	080079f1 	.word	0x080079f1
 8007930:	080079f1 	.word	0x080079f1
 8007934:	080079f1 	.word	0x080079f1
 8007938:	080079f1 	.word	0x080079f1
 800793c:	080079c9 	.word	0x080079c9
 8007940:	080079f1 	.word	0x080079f1
 8007944:	080079f1 	.word	0x080079f1
 8007948:	080079f1 	.word	0x080079f1
 800794c:	080079f1 	.word	0x080079f1
 8007950:	080079f1 	.word	0x080079f1
 8007954:	080079f1 	.word	0x080079f1
 8007958:	080079f1 	.word	0x080079f1
 800795c:	080079d1 	.word	0x080079d1
 8007960:	080079f1 	.word	0x080079f1
 8007964:	080079f1 	.word	0x080079f1
 8007968:	080079f1 	.word	0x080079f1
 800796c:	080079f1 	.word	0x080079f1
 8007970:	080079f1 	.word	0x080079f1
 8007974:	080079f1 	.word	0x080079f1
 8007978:	080079f1 	.word	0x080079f1
 800797c:	080079d9 	.word	0x080079d9
 8007980:	080079f1 	.word	0x080079f1
 8007984:	080079f1 	.word	0x080079f1
 8007988:	080079f1 	.word	0x080079f1
 800798c:	080079f1 	.word	0x080079f1
 8007990:	080079f1 	.word	0x080079f1
 8007994:	080079f1 	.word	0x080079f1
 8007998:	080079f1 	.word	0x080079f1
 800799c:	080079e1 	.word	0x080079e1
 80079a0:	080079f1 	.word	0x080079f1
 80079a4:	080079f1 	.word	0x080079f1
 80079a8:	080079f1 	.word	0x080079f1
 80079ac:	080079f1 	.word	0x080079f1
 80079b0:	080079f1 	.word	0x080079f1
 80079b4:	080079f1 	.word	0x080079f1
 80079b8:	080079f1 	.word	0x080079f1
 80079bc:	080079e9 	.word	0x080079e9
 80079c0:	2301      	movs	r3, #1
 80079c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079c6:	e0c3      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80079c8:	2304      	movs	r3, #4
 80079ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079ce:	e0bf      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80079d0:	2308      	movs	r3, #8
 80079d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079d6:	e0bb      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80079d8:	2310      	movs	r3, #16
 80079da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079de:	e0b7      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80079e0:	2320      	movs	r3, #32
 80079e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079e6:	e0b3      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80079e8:	2340      	movs	r3, #64	; 0x40
 80079ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079ee:	e0af      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80079f0:	2380      	movs	r3, #128	; 0x80
 80079f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079f6:	bf00      	nop
 80079f8:	e0aa      	b.n	8007b50 <UART_SetConfig+0x5d0>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a79      	ldr	r2, [pc, #484]	; (8007be4 <UART_SetConfig+0x664>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d132      	bne.n	8007a6a <UART_SetConfig+0x4ea>
 8007a04:	4b76      	ldr	r3, [pc, #472]	; (8007be0 <UART_SetConfig+0x660>)
 8007a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a08:	f003 0307 	and.w	r3, r3, #7
 8007a0c:	2b05      	cmp	r3, #5
 8007a0e:	d827      	bhi.n	8007a60 <UART_SetConfig+0x4e0>
 8007a10:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <UART_SetConfig+0x498>)
 8007a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a16:	bf00      	nop
 8007a18:	08007a31 	.word	0x08007a31
 8007a1c:	08007a39 	.word	0x08007a39
 8007a20:	08007a41 	.word	0x08007a41
 8007a24:	08007a49 	.word	0x08007a49
 8007a28:	08007a51 	.word	0x08007a51
 8007a2c:	08007a59 	.word	0x08007a59
 8007a30:	2300      	movs	r3, #0
 8007a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a36:	e08b      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007a38:	2304      	movs	r3, #4
 8007a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a3e:	e087      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007a40:	2308      	movs	r3, #8
 8007a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a46:	e083      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007a48:	2310      	movs	r3, #16
 8007a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a4e:	e07f      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007a50:	2320      	movs	r3, #32
 8007a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a56:	e07b      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007a58:	2340      	movs	r3, #64	; 0x40
 8007a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a5e:	e077      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007a60:	2380      	movs	r3, #128	; 0x80
 8007a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a66:	bf00      	nop
 8007a68:	e072      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a5e      	ldr	r2, [pc, #376]	; (8007be8 <UART_SetConfig+0x668>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d132      	bne.n	8007ada <UART_SetConfig+0x55a>
 8007a74:	4b5a      	ldr	r3, [pc, #360]	; (8007be0 <UART_SetConfig+0x660>)
 8007a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	2b05      	cmp	r3, #5
 8007a7e:	d827      	bhi.n	8007ad0 <UART_SetConfig+0x550>
 8007a80:	a201      	add	r2, pc, #4	; (adr r2, 8007a88 <UART_SetConfig+0x508>)
 8007a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a86:	bf00      	nop
 8007a88:	08007aa1 	.word	0x08007aa1
 8007a8c:	08007aa9 	.word	0x08007aa9
 8007a90:	08007ab1 	.word	0x08007ab1
 8007a94:	08007ab9 	.word	0x08007ab9
 8007a98:	08007ac1 	.word	0x08007ac1
 8007a9c:	08007ac9 	.word	0x08007ac9
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aa6:	e053      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007aa8:	2304      	movs	r3, #4
 8007aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aae:	e04f      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007ab0:	2308      	movs	r3, #8
 8007ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ab6:	e04b      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007ab8:	2310      	movs	r3, #16
 8007aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007abe:	e047      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007ac0:	2320      	movs	r3, #32
 8007ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ac6:	e043      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007ac8:	2340      	movs	r3, #64	; 0x40
 8007aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ace:	e03f      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007ad0:	2380      	movs	r3, #128	; 0x80
 8007ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ad6:	bf00      	nop
 8007ad8:	e03a      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a43      	ldr	r2, [pc, #268]	; (8007bec <UART_SetConfig+0x66c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d132      	bne.n	8007b4a <UART_SetConfig+0x5ca>
 8007ae4:	4b3e      	ldr	r3, [pc, #248]	; (8007be0 <UART_SetConfig+0x660>)
 8007ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae8:	f003 0307 	and.w	r3, r3, #7
 8007aec:	2b05      	cmp	r3, #5
 8007aee:	d827      	bhi.n	8007b40 <UART_SetConfig+0x5c0>
 8007af0:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <UART_SetConfig+0x578>)
 8007af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af6:	bf00      	nop
 8007af8:	08007b11 	.word	0x08007b11
 8007afc:	08007b19 	.word	0x08007b19
 8007b00:	08007b21 	.word	0x08007b21
 8007b04:	08007b29 	.word	0x08007b29
 8007b08:	08007b31 	.word	0x08007b31
 8007b0c:	08007b39 	.word	0x08007b39
 8007b10:	2302      	movs	r3, #2
 8007b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b16:	e01b      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007b18:	2304      	movs	r3, #4
 8007b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b1e:	e017      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007b20:	2308      	movs	r3, #8
 8007b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b26:	e013      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007b28:	2310      	movs	r3, #16
 8007b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b2e:	e00f      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007b30:	2320      	movs	r3, #32
 8007b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b36:	e00b      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007b38:	2340      	movs	r3, #64	; 0x40
 8007b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b3e:	e007      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007b40:	2380      	movs	r3, #128	; 0x80
 8007b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b46:	bf00      	nop
 8007b48:	e002      	b.n	8007b50 <UART_SetConfig+0x5d0>
 8007b4a:	2380      	movs	r3, #128	; 0x80
 8007b4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a25      	ldr	r2, [pc, #148]	; (8007bec <UART_SetConfig+0x66c>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	f040 80b8 	bne.w	8007ccc <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	d019      	beq.n	8007b98 <UART_SetConfig+0x618>
 8007b64:	2b08      	cmp	r3, #8
 8007b66:	dc04      	bgt.n	8007b72 <UART_SetConfig+0x5f2>
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d009      	beq.n	8007b80 <UART_SetConfig+0x600>
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	d00b      	beq.n	8007b88 <UART_SetConfig+0x608>
 8007b70:	e042      	b.n	8007bf8 <UART_SetConfig+0x678>
 8007b72:	2b20      	cmp	r3, #32
 8007b74:	d02b      	beq.n	8007bce <UART_SetConfig+0x64e>
 8007b76:	2b40      	cmp	r3, #64	; 0x40
 8007b78:	d02c      	beq.n	8007bd4 <UART_SetConfig+0x654>
 8007b7a:	2b10      	cmp	r3, #16
 8007b7c:	d014      	beq.n	8007ba8 <UART_SetConfig+0x628>
 8007b7e:	e03b      	b.n	8007bf8 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007b80:	f7fd fc66 	bl	8005450 <HAL_RCCEx_GetD3PCLK1Freq>
 8007b84:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007b86:	e03d      	b.n	8007c04 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b88:	f107 0314 	add.w	r3, r7, #20
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fd fc75 	bl	800547c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b96:	e035      	b.n	8007c04 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b98:	f107 0308 	add.w	r3, r7, #8
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fd fdb9 	bl	8005714 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ba6:	e02d      	b.n	8007c04 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ba8:	4b0d      	ldr	r3, [pc, #52]	; (8007be0 <UART_SetConfig+0x660>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0320 	and.w	r3, r3, #32
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d009      	beq.n	8007bc8 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007bb4:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <UART_SetConfig+0x660>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	08db      	lsrs	r3, r3, #3
 8007bba:	f003 0303 	and.w	r3, r3, #3
 8007bbe:	4a0c      	ldr	r2, [pc, #48]	; (8007bf0 <UART_SetConfig+0x670>)
 8007bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007bc6:	e01d      	b.n	8007c04 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8007bc8:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <UART_SetConfig+0x670>)
 8007bca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bcc:	e01a      	b.n	8007c04 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007bce:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <UART_SetConfig+0x674>)
 8007bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bd2:	e017      	b.n	8007c04 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bda:	e013      	b.n	8007c04 <UART_SetConfig+0x684>
 8007bdc:	40011400 	.word	0x40011400
 8007be0:	58024400 	.word	0x58024400
 8007be4:	40007800 	.word	0x40007800
 8007be8:	40007c00 	.word	0x40007c00
 8007bec:	58000c00 	.word	0x58000c00
 8007bf0:	03d09000 	.word	0x03d09000
 8007bf4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007c02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 824d 	beq.w	80080a6 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	4aad      	ldr	r2, [pc, #692]	; (8007ec8 <UART_SetConfig+0x948>)
 8007c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c16:	461a      	mov	r2, r3
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c1e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	4613      	mov	r3, r2
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	4413      	add	r3, r2
 8007c2a:	6a3a      	ldr	r2, [r7, #32]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d305      	bcc.n	8007c3c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c36:	6a3a      	ldr	r2, [r7, #32]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d903      	bls.n	8007c44 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007c42:	e230      	b.n	80080a6 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c46:	4618      	mov	r0, r3
 8007c48:	f04f 0100 	mov.w	r1, #0
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c50:	4a9d      	ldr	r2, [pc, #628]	; (8007ec8 <UART_SetConfig+0x948>)
 8007c52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	f04f 0400 	mov.w	r4, #0
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	4623      	mov	r3, r4
 8007c60:	f7f8 fb3e 	bl	80002e0 <__aeabi_uldivmod>
 8007c64:	4603      	mov	r3, r0
 8007c66:	460c      	mov	r4, r1
 8007c68:	4619      	mov	r1, r3
 8007c6a:	4622      	mov	r2, r4
 8007c6c:	f04f 0300 	mov.w	r3, #0
 8007c70:	f04f 0400 	mov.w	r4, #0
 8007c74:	0214      	lsls	r4, r2, #8
 8007c76:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007c7a:	020b      	lsls	r3, r1, #8
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	6852      	ldr	r2, [r2, #4]
 8007c80:	0852      	lsrs	r2, r2, #1
 8007c82:	4611      	mov	r1, r2
 8007c84:	f04f 0200 	mov.w	r2, #0
 8007c88:	eb13 0b01 	adds.w	fp, r3, r1
 8007c8c:	eb44 0c02 	adc.w	ip, r4, r2
 8007c90:	4658      	mov	r0, fp
 8007c92:	4661      	mov	r1, ip
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f04f 0400 	mov.w	r4, #0
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	4623      	mov	r3, r4
 8007ca0:	f7f8 fb1e 	bl	80002e0 <__aeabi_uldivmod>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cb0:	d308      	bcc.n	8007cc4 <UART_SetConfig+0x744>
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cb8:	d204      	bcs.n	8007cc4 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cc0:	60da      	str	r2, [r3, #12]
 8007cc2:	e1f0      	b.n	80080a6 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007cca:	e1ec      	b.n	80080a6 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cd4:	f040 8100 	bne.w	8007ed8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8007cd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007cdc:	2b40      	cmp	r3, #64	; 0x40
 8007cde:	f200 80b7 	bhi.w	8007e50 <UART_SetConfig+0x8d0>
 8007ce2:	a201      	add	r2, pc, #4	; (adr r2, 8007ce8 <UART_SetConfig+0x768>)
 8007ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce8:	08007ded 	.word	0x08007ded
 8007cec:	08007df5 	.word	0x08007df5
 8007cf0:	08007e51 	.word	0x08007e51
 8007cf4:	08007e51 	.word	0x08007e51
 8007cf8:	08007dfd 	.word	0x08007dfd
 8007cfc:	08007e51 	.word	0x08007e51
 8007d00:	08007e51 	.word	0x08007e51
 8007d04:	08007e51 	.word	0x08007e51
 8007d08:	08007e0d 	.word	0x08007e0d
 8007d0c:	08007e51 	.word	0x08007e51
 8007d10:	08007e51 	.word	0x08007e51
 8007d14:	08007e51 	.word	0x08007e51
 8007d18:	08007e51 	.word	0x08007e51
 8007d1c:	08007e51 	.word	0x08007e51
 8007d20:	08007e51 	.word	0x08007e51
 8007d24:	08007e51 	.word	0x08007e51
 8007d28:	08007e1d 	.word	0x08007e1d
 8007d2c:	08007e51 	.word	0x08007e51
 8007d30:	08007e51 	.word	0x08007e51
 8007d34:	08007e51 	.word	0x08007e51
 8007d38:	08007e51 	.word	0x08007e51
 8007d3c:	08007e51 	.word	0x08007e51
 8007d40:	08007e51 	.word	0x08007e51
 8007d44:	08007e51 	.word	0x08007e51
 8007d48:	08007e51 	.word	0x08007e51
 8007d4c:	08007e51 	.word	0x08007e51
 8007d50:	08007e51 	.word	0x08007e51
 8007d54:	08007e51 	.word	0x08007e51
 8007d58:	08007e51 	.word	0x08007e51
 8007d5c:	08007e51 	.word	0x08007e51
 8007d60:	08007e51 	.word	0x08007e51
 8007d64:	08007e51 	.word	0x08007e51
 8007d68:	08007e43 	.word	0x08007e43
 8007d6c:	08007e51 	.word	0x08007e51
 8007d70:	08007e51 	.word	0x08007e51
 8007d74:	08007e51 	.word	0x08007e51
 8007d78:	08007e51 	.word	0x08007e51
 8007d7c:	08007e51 	.word	0x08007e51
 8007d80:	08007e51 	.word	0x08007e51
 8007d84:	08007e51 	.word	0x08007e51
 8007d88:	08007e51 	.word	0x08007e51
 8007d8c:	08007e51 	.word	0x08007e51
 8007d90:	08007e51 	.word	0x08007e51
 8007d94:	08007e51 	.word	0x08007e51
 8007d98:	08007e51 	.word	0x08007e51
 8007d9c:	08007e51 	.word	0x08007e51
 8007da0:	08007e51 	.word	0x08007e51
 8007da4:	08007e51 	.word	0x08007e51
 8007da8:	08007e51 	.word	0x08007e51
 8007dac:	08007e51 	.word	0x08007e51
 8007db0:	08007e51 	.word	0x08007e51
 8007db4:	08007e51 	.word	0x08007e51
 8007db8:	08007e51 	.word	0x08007e51
 8007dbc:	08007e51 	.word	0x08007e51
 8007dc0:	08007e51 	.word	0x08007e51
 8007dc4:	08007e51 	.word	0x08007e51
 8007dc8:	08007e51 	.word	0x08007e51
 8007dcc:	08007e51 	.word	0x08007e51
 8007dd0:	08007e51 	.word	0x08007e51
 8007dd4:	08007e51 	.word	0x08007e51
 8007dd8:	08007e51 	.word	0x08007e51
 8007ddc:	08007e51 	.word	0x08007e51
 8007de0:	08007e51 	.word	0x08007e51
 8007de4:	08007e51 	.word	0x08007e51
 8007de8:	08007e49 	.word	0x08007e49
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dec:	f7fc fbd4 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 8007df0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007df2:	e033      	b.n	8007e5c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007df4:	f7fc fbe6 	bl	80045c4 <HAL_RCC_GetPCLK2Freq>
 8007df8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007dfa:	e02f      	b.n	8007e5c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dfc:	f107 0314 	add.w	r3, r7, #20
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fd fb3b 	bl	800547c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e0a:	e027      	b.n	8007e5c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e0c:	f107 0308 	add.w	r3, r7, #8
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fd fc7f 	bl	8005714 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e1a:	e01f      	b.n	8007e5c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e1c:	4b2b      	ldr	r3, [pc, #172]	; (8007ecc <UART_SetConfig+0x94c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0320 	and.w	r3, r3, #32
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d009      	beq.n	8007e3c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e28:	4b28      	ldr	r3, [pc, #160]	; (8007ecc <UART_SetConfig+0x94c>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	08db      	lsrs	r3, r3, #3
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	4a27      	ldr	r2, [pc, #156]	; (8007ed0 <UART_SetConfig+0x950>)
 8007e34:	fa22 f303 	lsr.w	r3, r2, r3
 8007e38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e3a:	e00f      	b.n	8007e5c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8007e3c:	4b24      	ldr	r3, [pc, #144]	; (8007ed0 <UART_SetConfig+0x950>)
 8007e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e40:	e00c      	b.n	8007e5c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e42:	4b24      	ldr	r3, [pc, #144]	; (8007ed4 <UART_SetConfig+0x954>)
 8007e44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e46:	e009      	b.n	8007e5c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e4e:	e005      	b.n	8007e5c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007e5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 8121 	beq.w	80080a6 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	4a17      	ldr	r2, [pc, #92]	; (8007ec8 <UART_SetConfig+0x948>)
 8007e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e72:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e76:	005a      	lsls	r2, r3, #1
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	085b      	lsrs	r3, r3, #1
 8007e7e:	441a      	add	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8e:	2b0f      	cmp	r3, #15
 8007e90:	d916      	bls.n	8007ec0 <UART_SetConfig+0x940>
 8007e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e98:	d212      	bcs.n	8007ec0 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	f023 030f 	bic.w	r3, r3, #15
 8007ea2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	085b      	lsrs	r3, r3, #1
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007ebc:	60da      	str	r2, [r3, #12]
 8007ebe:	e0f2      	b.n	80080a6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007ec6:	e0ee      	b.n	80080a6 <UART_SetConfig+0xb26>
 8007ec8:	0800c88c 	.word	0x0800c88c
 8007ecc:	58024400 	.word	0x58024400
 8007ed0:	03d09000 	.word	0x03d09000
 8007ed4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ed8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007edc:	2b40      	cmp	r3, #64	; 0x40
 8007ede:	f200 80b7 	bhi.w	8008050 <UART_SetConfig+0xad0>
 8007ee2:	a201      	add	r2, pc, #4	; (adr r2, 8007ee8 <UART_SetConfig+0x968>)
 8007ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee8:	08007fed 	.word	0x08007fed
 8007eec:	08007ff5 	.word	0x08007ff5
 8007ef0:	08008051 	.word	0x08008051
 8007ef4:	08008051 	.word	0x08008051
 8007ef8:	08007ffd 	.word	0x08007ffd
 8007efc:	08008051 	.word	0x08008051
 8007f00:	08008051 	.word	0x08008051
 8007f04:	08008051 	.word	0x08008051
 8007f08:	0800800d 	.word	0x0800800d
 8007f0c:	08008051 	.word	0x08008051
 8007f10:	08008051 	.word	0x08008051
 8007f14:	08008051 	.word	0x08008051
 8007f18:	08008051 	.word	0x08008051
 8007f1c:	08008051 	.word	0x08008051
 8007f20:	08008051 	.word	0x08008051
 8007f24:	08008051 	.word	0x08008051
 8007f28:	0800801d 	.word	0x0800801d
 8007f2c:	08008051 	.word	0x08008051
 8007f30:	08008051 	.word	0x08008051
 8007f34:	08008051 	.word	0x08008051
 8007f38:	08008051 	.word	0x08008051
 8007f3c:	08008051 	.word	0x08008051
 8007f40:	08008051 	.word	0x08008051
 8007f44:	08008051 	.word	0x08008051
 8007f48:	08008051 	.word	0x08008051
 8007f4c:	08008051 	.word	0x08008051
 8007f50:	08008051 	.word	0x08008051
 8007f54:	08008051 	.word	0x08008051
 8007f58:	08008051 	.word	0x08008051
 8007f5c:	08008051 	.word	0x08008051
 8007f60:	08008051 	.word	0x08008051
 8007f64:	08008051 	.word	0x08008051
 8007f68:	08008043 	.word	0x08008043
 8007f6c:	08008051 	.word	0x08008051
 8007f70:	08008051 	.word	0x08008051
 8007f74:	08008051 	.word	0x08008051
 8007f78:	08008051 	.word	0x08008051
 8007f7c:	08008051 	.word	0x08008051
 8007f80:	08008051 	.word	0x08008051
 8007f84:	08008051 	.word	0x08008051
 8007f88:	08008051 	.word	0x08008051
 8007f8c:	08008051 	.word	0x08008051
 8007f90:	08008051 	.word	0x08008051
 8007f94:	08008051 	.word	0x08008051
 8007f98:	08008051 	.word	0x08008051
 8007f9c:	08008051 	.word	0x08008051
 8007fa0:	08008051 	.word	0x08008051
 8007fa4:	08008051 	.word	0x08008051
 8007fa8:	08008051 	.word	0x08008051
 8007fac:	08008051 	.word	0x08008051
 8007fb0:	08008051 	.word	0x08008051
 8007fb4:	08008051 	.word	0x08008051
 8007fb8:	08008051 	.word	0x08008051
 8007fbc:	08008051 	.word	0x08008051
 8007fc0:	08008051 	.word	0x08008051
 8007fc4:	08008051 	.word	0x08008051
 8007fc8:	08008051 	.word	0x08008051
 8007fcc:	08008051 	.word	0x08008051
 8007fd0:	08008051 	.word	0x08008051
 8007fd4:	08008051 	.word	0x08008051
 8007fd8:	08008051 	.word	0x08008051
 8007fdc:	08008051 	.word	0x08008051
 8007fe0:	08008051 	.word	0x08008051
 8007fe4:	08008051 	.word	0x08008051
 8007fe8:	08008049 	.word	0x08008049
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fec:	f7fc fad4 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 8007ff0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007ff2:	e033      	b.n	800805c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ff4:	f7fc fae6 	bl	80045c4 <HAL_RCC_GetPCLK2Freq>
 8007ff8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007ffa:	e02f      	b.n	800805c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ffc:	f107 0314 	add.w	r3, r7, #20
 8008000:	4618      	mov	r0, r3
 8008002:	f7fd fa3b 	bl	800547c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800800a:	e027      	b.n	800805c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800800c:	f107 0308 	add.w	r3, r7, #8
 8008010:	4618      	mov	r0, r3
 8008012:	f7fd fb7f 	bl	8005714 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800801a:	e01f      	b.n	800805c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800801c:	4b2c      	ldr	r3, [pc, #176]	; (80080d0 <UART_SetConfig+0xb50>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 0320 	and.w	r3, r3, #32
 8008024:	2b00      	cmp	r3, #0
 8008026:	d009      	beq.n	800803c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008028:	4b29      	ldr	r3, [pc, #164]	; (80080d0 <UART_SetConfig+0xb50>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	08db      	lsrs	r3, r3, #3
 800802e:	f003 0303 	and.w	r3, r3, #3
 8008032:	4a28      	ldr	r2, [pc, #160]	; (80080d4 <UART_SetConfig+0xb54>)
 8008034:	fa22 f303 	lsr.w	r3, r2, r3
 8008038:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800803a:	e00f      	b.n	800805c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800803c:	4b25      	ldr	r3, [pc, #148]	; (80080d4 <UART_SetConfig+0xb54>)
 800803e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008040:	e00c      	b.n	800805c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008042:	4b25      	ldr	r3, [pc, #148]	; (80080d8 <UART_SetConfig+0xb58>)
 8008044:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008046:	e009      	b.n	800805c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800804c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800804e:	e005      	b.n	800805c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800805a:	bf00      	nop
    }

    if (pclk != 0U)
 800805c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805e:	2b00      	cmp	r3, #0
 8008060:	d021      	beq.n	80080a6 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	4a1d      	ldr	r2, [pc, #116]	; (80080dc <UART_SetConfig+0xb5c>)
 8008068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800806c:	461a      	mov	r2, r3
 800806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008070:	fbb3 f2f2 	udiv	r2, r3, r2
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	085b      	lsrs	r3, r3, #1
 800807a:	441a      	add	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	fbb2 f3f3 	udiv	r3, r2, r3
 8008084:	b29b      	uxth	r3, r3
 8008086:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	2b0f      	cmp	r3, #15
 800808c:	d908      	bls.n	80080a0 <UART_SetConfig+0xb20>
 800808e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008094:	d204      	bcs.n	80080a0 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800809c:	60da      	str	r2, [r3, #12]
 800809e:	e002      	b.n	80080a6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80080c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3738      	adds	r7, #56	; 0x38
 80080ca:	46bd      	mov	sp, r7
 80080cc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80080d0:	58024400 	.word	0x58024400
 80080d4:	03d09000 	.word	0x03d09000
 80080d8:	003d0900 	.word	0x003d0900
 80080dc:	0800c88c 	.word	0x0800c88c

080080e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00a      	beq.n	800810a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00a      	beq.n	800812c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	430a      	orrs	r2, r1
 800812a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008130:	f003 0304 	and.w	r3, r3, #4
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00a      	beq.n	800814e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	430a      	orrs	r2, r1
 800814c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008152:	f003 0308 	and.w	r3, r3, #8
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00a      	beq.n	8008170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	430a      	orrs	r2, r1
 800816e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008174:	f003 0310 	and.w	r3, r3, #16
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00a      	beq.n	8008192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	430a      	orrs	r2, r1
 8008190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008196:	f003 0320 	and.w	r3, r3, #32
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00a      	beq.n	80081b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	430a      	orrs	r2, r1
 80081b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d01a      	beq.n	80081f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	430a      	orrs	r2, r1
 80081d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081de:	d10a      	bne.n	80081f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00a      	beq.n	8008218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	430a      	orrs	r2, r1
 8008216:	605a      	str	r2, [r3, #4]
  }
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af02      	add	r7, sp, #8
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008234:	f7f9 fcac 	bl	8001b90 <HAL_GetTick>
 8008238:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0308 	and.w	r3, r3, #8
 8008244:	2b08      	cmp	r3, #8
 8008246:	d10e      	bne.n	8008266 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f82c 	bl	80082b4 <UART_WaitOnFlagUntilTimeout>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e022      	b.n	80082ac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0304 	and.w	r3, r3, #4
 8008270:	2b04      	cmp	r3, #4
 8008272:	d10e      	bne.n	8008292 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f816 	bl	80082b4 <UART_WaitOnFlagUntilTimeout>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e00c      	b.n	80082ac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2220      	movs	r2, #32
 8008296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2220      	movs	r2, #32
 800829e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	603b      	str	r3, [r7, #0]
 80082c0:	4613      	mov	r3, r2
 80082c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082c4:	e062      	b.n	800838c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082cc:	d05e      	beq.n	800838c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ce:	f7f9 fc5f 	bl	8001b90 <HAL_GetTick>
 80082d2:	4602      	mov	r2, r0
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d302      	bcc.n	80082e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d11d      	bne.n	8008320 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80082f2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689a      	ldr	r2, [r3, #8]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f022 0201 	bic.w	r2, r2, #1
 8008302:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2220      	movs	r2, #32
 8008308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2220      	movs	r2, #32
 8008310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e045      	b.n	80083ac <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0304 	and.w	r3, r3, #4
 800832a:	2b00      	cmp	r3, #0
 800832c:	d02e      	beq.n	800838c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	69db      	ldr	r3, [r3, #28]
 8008334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800833c:	d126      	bne.n	800838c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008346:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008356:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689a      	ldr	r2, [r3, #8]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f022 0201 	bic.w	r2, r2, #1
 8008366:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2220      	movs	r2, #32
 800836c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2220      	movs	r2, #32
 8008374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2220      	movs	r2, #32
 800837c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e00f      	b.n	80083ac <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	69da      	ldr	r2, [r3, #28]
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	4013      	ands	r3, r2
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	429a      	cmp	r2, r3
 800839a:	bf0c      	ite	eq
 800839c:	2301      	moveq	r3, #1
 800839e:	2300      	movne	r3, #0
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	461a      	mov	r2, r3
 80083a4:	79fb      	ldrb	r3, [r7, #7]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d08d      	beq.n	80082c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d101      	bne.n	80083ca <HAL_UARTEx_DisableFifoMode+0x16>
 80083c6:	2302      	movs	r3, #2
 80083c8:	e027      	b.n	800841a <HAL_UARTEx_DisableFifoMode+0x66>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2224      	movs	r2, #36	; 0x24
 80083d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f022 0201 	bic.w	r2, r2, #1
 80083f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80083f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2220      	movs	r2, #32
 800840c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008436:	2b01      	cmp	r3, #1
 8008438:	d101      	bne.n	800843e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800843a:	2302      	movs	r3, #2
 800843c:	e02d      	b.n	800849a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2224      	movs	r2, #36	; 0x24
 800844a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 0201 	bic.w	r2, r2, #1
 8008464:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f850 	bl	8008520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b084      	sub	sp, #16
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d101      	bne.n	80084ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084b6:	2302      	movs	r3, #2
 80084b8:	e02d      	b.n	8008516 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2224      	movs	r2, #36	; 0x24
 80084c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 0201 	bic.w	r2, r2, #1
 80084e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	683a      	ldr	r2, [r7, #0]
 80084f2:	430a      	orrs	r2, r1
 80084f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f812 	bl	8008520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2220      	movs	r2, #32
 8008508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
	...

08008520 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008520:	b480      	push	{r7}
 8008522:	b089      	sub	sp, #36	; 0x24
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008528:	4a2f      	ldr	r2, [pc, #188]	; (80085e8 <UARTEx_SetNbDataToProcess+0xc8>)
 800852a:	f107 0314 	add.w	r3, r7, #20
 800852e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008532:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008536:	4a2d      	ldr	r2, [pc, #180]	; (80085ec <UARTEx_SetNbDataToProcess+0xcc>)
 8008538:	f107 030c 	add.w	r3, r7, #12
 800853c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008540:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008548:	2b00      	cmp	r3, #0
 800854a:	d108      	bne.n	800855e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800855c:	e03d      	b.n	80085da <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800855e:	2310      	movs	r3, #16
 8008560:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008562:	2310      	movs	r3, #16
 8008564:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	0e5b      	lsrs	r3, r3, #25
 800856e:	b2db      	uxtb	r3, r3
 8008570:	f003 0307 	and.w	r3, r3, #7
 8008574:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	0f5b      	lsrs	r3, r3, #29
 800857e:	b2db      	uxtb	r3, r3
 8008580:	f003 0307 	and.w	r3, r3, #7
 8008584:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008586:	7fbb      	ldrb	r3, [r7, #30]
 8008588:	7f3a      	ldrb	r2, [r7, #28]
 800858a:	f107 0120 	add.w	r1, r7, #32
 800858e:	440a      	add	r2, r1
 8008590:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008594:	fb02 f303 	mul.w	r3, r2, r3
 8008598:	7f3a      	ldrb	r2, [r7, #28]
 800859a:	f107 0120 	add.w	r1, r7, #32
 800859e:	440a      	add	r2, r1
 80085a0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80085a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80085b0:	7ffb      	ldrb	r3, [r7, #31]
 80085b2:	7f7a      	ldrb	r2, [r7, #29]
 80085b4:	f107 0120 	add.w	r1, r7, #32
 80085b8:	440a      	add	r2, r1
 80085ba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80085be:	fb02 f303 	mul.w	r3, r2, r3
 80085c2:	7f7a      	ldrb	r2, [r7, #29]
 80085c4:	f107 0120 	add.w	r1, r7, #32
 80085c8:	440a      	add	r2, r1
 80085ca:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80085ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80085da:	bf00      	nop
 80085dc:	3724      	adds	r7, #36	; 0x24
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	0800b7c4 	.word	0x0800b7c4
 80085ec:	0800b7cc 	.word	0x0800b7cc

080085f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085f0:	b084      	sub	sp, #16
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	f107 001c 	add.w	r0, r7, #28
 80085fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	2b01      	cmp	r3, #1
 8008606:	d120      	bne.n	800864a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	68da      	ldr	r2, [r3, #12]
 8008618:	4b25      	ldr	r3, [pc, #148]	; (80086b0 <USB_CoreInit+0xc0>)
 800861a:	4013      	ands	r3, r2
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800862c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800862e:	2b01      	cmp	r3, #1
 8008630:	d105      	bne.n	800863e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fa4c 	bl	8008adc <USB_CoreReset>
 8008644:	4603      	mov	r3, r0
 8008646:	73fb      	strb	r3, [r7, #15]
 8008648:	e01a      	b.n	8008680 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fa40 	bl	8008adc <USB_CoreReset>
 800865c:	4603      	mov	r3, r0
 800865e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008662:	2b00      	cmp	r3, #0
 8008664:	d106      	bne.n	8008674 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	639a      	str	r2, [r3, #56]	; 0x38
 8008672:	e005      	b.n	8008680 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008678:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008682:	2b01      	cmp	r3, #1
 8008684:	d10b      	bne.n	800869e <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f043 0206 	orr.w	r2, r3, #6
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f043 0220 	orr.w	r2, r3, #32
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800869e:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086aa:	b004      	add	sp, #16
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	ffbdffbf 	.word	0xffbdffbf

080086b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f023 0201 	bic.w	r2, r3, #1
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b082      	sub	sp, #8
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	460b      	mov	r3, r1
 80086e0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d106      	bne.n	8008702 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	60da      	str	r2, [r3, #12]
 8008700:	e00b      	b.n	800871a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008702:	78fb      	ldrb	r3, [r7, #3]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d106      	bne.n	8008716 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	60da      	str	r2, [r3, #12]
 8008714:	e001      	b.n	800871a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e003      	b.n	8008722 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800871a:	2032      	movs	r0, #50	; 0x32
 800871c:	f7f9 fa44 	bl	8001ba8 <HAL_Delay>

  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
	...

0800872c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800872c:	b084      	sub	sp, #16
 800872e:	b580      	push	{r7, lr}
 8008730:	b086      	sub	sp, #24
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800873a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008746:	2300      	movs	r3, #0
 8008748:	613b      	str	r3, [r7, #16]
 800874a:	e009      	b.n	8008760 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	3340      	adds	r3, #64	; 0x40
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	2200      	movs	r2, #0
 8008758:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	3301      	adds	r3, #1
 800875e:	613b      	str	r3, [r7, #16]
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	2b0e      	cmp	r3, #14
 8008764:	d9f2      	bls.n	800874c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008768:	2b00      	cmp	r3, #0
 800876a:	d11c      	bne.n	80087a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800877a:	f043 0302 	orr.w	r3, r3, #2
 800877e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008784:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	e005      	b.n	80087b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087b8:	461a      	mov	r2, r3
 80087ba:	2300      	movs	r3, #0
 80087bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c4:	4619      	mov	r1, r3
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087cc:	461a      	mov	r2, r3
 80087ce:	680b      	ldr	r3, [r1, #0]
 80087d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d10c      	bne.n	80087f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80087d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d104      	bne.n	80087e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80087de:	2100      	movs	r1, #0
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f949 	bl	8008a78 <USB_SetDevSpeed>
 80087e6:	e008      	b.n	80087fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80087e8:	2101      	movs	r1, #1
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f944 	bl	8008a78 <USB_SetDevSpeed>
 80087f0:	e003      	b.n	80087fa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80087f2:	2103      	movs	r1, #3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f93f 	bl	8008a78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087fa:	2110      	movs	r1, #16
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f8f3 	bl	80089e8 <USB_FlushTxFifo>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d001      	beq.n	800880c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f911 	bl	8008a34 <USB_FlushRxFifo>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008822:	461a      	mov	r2, r3
 8008824:	2300      	movs	r3, #0
 8008826:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800882e:	461a      	mov	r2, r3
 8008830:	2300      	movs	r3, #0
 8008832:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800883a:	461a      	mov	r2, r3
 800883c:	2300      	movs	r3, #0
 800883e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008840:	2300      	movs	r3, #0
 8008842:	613b      	str	r3, [r7, #16]
 8008844:	e043      	b.n	80088ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	015a      	lsls	r2, r3, #5
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	4413      	add	r3, r2
 800884e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008858:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800885c:	d118      	bne.n	8008890 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10a      	bne.n	800887a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008870:	461a      	mov	r2, r3
 8008872:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	e013      	b.n	80088a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	015a      	lsls	r2, r3, #5
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	4413      	add	r3, r2
 8008882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008886:	461a      	mov	r2, r3
 8008888:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800888c:	6013      	str	r3, [r2, #0]
 800888e:	e008      	b.n	80088a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	015a      	lsls	r2, r3, #5
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	4413      	add	r3, r2
 8008898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800889c:	461a      	mov	r2, r3
 800889e:	2300      	movs	r3, #0
 80088a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	015a      	lsls	r2, r3, #5
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	4413      	add	r3, r2
 80088aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ae:	461a      	mov	r2, r3
 80088b0:	2300      	movs	r3, #0
 80088b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	015a      	lsls	r2, r3, #5
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c0:	461a      	mov	r2, r3
 80088c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	3301      	adds	r3, #1
 80088cc:	613b      	str	r3, [r7, #16]
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d3b7      	bcc.n	8008846 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088d6:	2300      	movs	r3, #0
 80088d8:	613b      	str	r3, [r7, #16]
 80088da:	e043      	b.n	8008964 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088f2:	d118      	bne.n	8008926 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10a      	bne.n	8008910 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	4413      	add	r3, r2
 8008902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008906:	461a      	mov	r2, r3
 8008908:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	e013      	b.n	8008938 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891c:	461a      	mov	r2, r3
 800891e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008922:	6013      	str	r3, [r2, #0]
 8008924:	e008      	b.n	8008938 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	015a      	lsls	r2, r3, #5
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	4413      	add	r3, r2
 800892e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008932:	461a      	mov	r2, r3
 8008934:	2300      	movs	r3, #0
 8008936:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	4413      	add	r3, r2
 8008940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008944:	461a      	mov	r2, r3
 8008946:	2300      	movs	r3, #0
 8008948:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4413      	add	r3, r2
 8008952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008956:	461a      	mov	r2, r3
 8008958:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800895c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	3301      	adds	r3, #1
 8008962:	613b      	str	r3, [r7, #16]
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	429a      	cmp	r2, r3
 800896a:	d3b7      	bcc.n	80088dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800897a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800897e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800898c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800898e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008990:	2b00      	cmp	r3, #0
 8008992:	d105      	bne.n	80089a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	f043 0210 	orr.w	r2, r3, #16
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	699a      	ldr	r2, [r3, #24]
 80089a4:	4b0e      	ldr	r3, [pc, #56]	; (80089e0 <USB_DevInit+0x2b4>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80089ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d005      	beq.n	80089be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	f043 0208 	orr.w	r2, r3, #8
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80089be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d105      	bne.n	80089d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	699a      	ldr	r2, [r3, #24]
 80089c8:	4b06      	ldr	r3, [pc, #24]	; (80089e4 <USB_DevInit+0x2b8>)
 80089ca:	4313      	orrs	r3, r2
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80089d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3718      	adds	r7, #24
 80089d6:	46bd      	mov	sp, r7
 80089d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089dc:	b004      	add	sp, #16
 80089de:	4770      	bx	lr
 80089e0:	803c3800 	.word	0x803c3800
 80089e4:	40000004 	.word	0x40000004

080089e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	019b      	lsls	r3, r3, #6
 80089fa:	f043 0220 	orr.w	r2, r3, #32
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	3301      	adds	r3, #1
 8008a06:	60fb      	str	r3, [r7, #12]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	4a09      	ldr	r2, [pc, #36]	; (8008a30 <USB_FlushTxFifo+0x48>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d901      	bls.n	8008a14 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e006      	b.n	8008a22 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	f003 0320 	and.w	r3, r3, #32
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	d0f0      	beq.n	8008a02 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3714      	adds	r7, #20
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	00030d40 	.word	0x00030d40

08008a34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2210      	movs	r2, #16
 8008a44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	60fb      	str	r3, [r7, #12]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	4a09      	ldr	r2, [pc, #36]	; (8008a74 <USB_FlushRxFifo+0x40>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d901      	bls.n	8008a58 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e006      	b.n	8008a66 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	f003 0310 	and.w	r3, r3, #16
 8008a60:	2b10      	cmp	r3, #16
 8008a62:	d0f0      	beq.n	8008a46 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	00030d40 	.word	0x00030d40

08008a78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	78fb      	ldrb	r3, [r7, #3]
 8008a92:	68f9      	ldr	r1, [r7, #12]
 8008a94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b084      	sub	sp, #16
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ac4:	f043 0302 	orr.w	r3, r3, #2
 8008ac8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008aca:	2003      	movs	r0, #3
 8008acc:	f7f9 f86c 	bl	8001ba8 <HAL_Delay>

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
	...

08008adc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3301      	adds	r3, #1
 8008aec:	60fb      	str	r3, [r7, #12]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	4a13      	ldr	r2, [pc, #76]	; (8008b40 <USB_CoreReset+0x64>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d901      	bls.n	8008afa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e01b      	b.n	8008b32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	daf2      	bge.n	8008ae8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	f043 0201 	orr.w	r2, r3, #1
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	3301      	adds	r3, #1
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	4a09      	ldr	r2, [pc, #36]	; (8008b40 <USB_CoreReset+0x64>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d901      	bls.n	8008b24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e006      	b.n	8008b32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	f003 0301 	and.w	r3, r3, #1
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d0f0      	beq.n	8008b12 <USB_CoreReset+0x36>

  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3714      	adds	r7, #20
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	00030d40 	.word	0x00030d40

08008b44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008b44:	b480      	push	{r7}
 8008b46:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008b48:	bf00      	nop
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
	...

08008b54 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b5a:	f3ef 8305 	mrs	r3, IPSR
 8008b5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10f      	bne.n	8008b86 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b66:	f3ef 8310 	mrs	r3, PRIMASK
 8008b6a:	607b      	str	r3, [r7, #4]
  return(result);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d105      	bne.n	8008b7e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b72:	f3ef 8311 	mrs	r3, BASEPRI
 8008b76:	603b      	str	r3, [r7, #0]
  return(result);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d007      	beq.n	8008b8e <osKernelInitialize+0x3a>
 8008b7e:	4b0e      	ldr	r3, [pc, #56]	; (8008bb8 <osKernelInitialize+0x64>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d103      	bne.n	8008b8e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008b86:	f06f 0305 	mvn.w	r3, #5
 8008b8a:	60fb      	str	r3, [r7, #12]
 8008b8c:	e00c      	b.n	8008ba8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008b8e:	4b0a      	ldr	r3, [pc, #40]	; (8008bb8 <osKernelInitialize+0x64>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d105      	bne.n	8008ba2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008b96:	4b08      	ldr	r3, [pc, #32]	; (8008bb8 <osKernelInitialize+0x64>)
 8008b98:	2201      	movs	r2, #1
 8008b9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	e002      	b.n	8008ba8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	240000f0 	.word	0x240000f0

08008bbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bc2:	f3ef 8305 	mrs	r3, IPSR
 8008bc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008bc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10f      	bne.n	8008bee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bce:	f3ef 8310 	mrs	r3, PRIMASK
 8008bd2:	607b      	str	r3, [r7, #4]
  return(result);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d105      	bne.n	8008be6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008bda:	f3ef 8311 	mrs	r3, BASEPRI
 8008bde:	603b      	str	r3, [r7, #0]
  return(result);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d007      	beq.n	8008bf6 <osKernelStart+0x3a>
 8008be6:	4b0f      	ldr	r3, [pc, #60]	; (8008c24 <osKernelStart+0x68>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d103      	bne.n	8008bf6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8008bee:	f06f 0305 	mvn.w	r3, #5
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	e010      	b.n	8008c18 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008bf6:	4b0b      	ldr	r3, [pc, #44]	; (8008c24 <osKernelStart+0x68>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d109      	bne.n	8008c12 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008bfe:	f7ff ffa1 	bl	8008b44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008c02:	4b08      	ldr	r3, [pc, #32]	; (8008c24 <osKernelStart+0x68>)
 8008c04:	2202      	movs	r2, #2
 8008c06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008c08:	f001 f898 	bl	8009d3c <vTaskStartScheduler>
      stat = osOK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	e002      	b.n	8008c18 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008c12:	f04f 33ff 	mov.w	r3, #4294967295
 8008c16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008c18:	68fb      	ldr	r3, [r7, #12]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	240000f0 	.word	0x240000f0

08008c28 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c2e:	f3ef 8305 	mrs	r3, IPSR
 8008c32:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c34:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10f      	bne.n	8008c5a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8008c3e:	607b      	str	r3, [r7, #4]
  return(result);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d105      	bne.n	8008c52 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c46:	f3ef 8311 	mrs	r3, BASEPRI
 8008c4a:	603b      	str	r3, [r7, #0]
  return(result);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d007      	beq.n	8008c62 <osKernelGetTickCount+0x3a>
 8008c52:	4b08      	ldr	r3, [pc, #32]	; (8008c74 <osKernelGetTickCount+0x4c>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d103      	bne.n	8008c62 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8008c5a:	f001 f98d 	bl	8009f78 <xTaskGetTickCountFromISR>
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	e002      	b.n	8008c68 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8008c62:	f001 f979 	bl	8009f58 <xTaskGetTickCount>
 8008c66:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8008c68:	68fb      	ldr	r3, [r7, #12]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	240000f0 	.word	0x240000f0

08008c78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b090      	sub	sp, #64	; 0x40
 8008c7c:	af04      	add	r7, sp, #16
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008c84:	2300      	movs	r3, #0
 8008c86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c88:	f3ef 8305 	mrs	r3, IPSR
 8008c8c:	61fb      	str	r3, [r7, #28]
  return(result);
 8008c8e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f040 808f 	bne.w	8008db4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c96:	f3ef 8310 	mrs	r3, PRIMASK
 8008c9a:	61bb      	str	r3, [r7, #24]
  return(result);
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d105      	bne.n	8008cae <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ca2:	f3ef 8311 	mrs	r3, BASEPRI
 8008ca6:	617b      	str	r3, [r7, #20]
  return(result);
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <osThreadNew+0x3e>
 8008cae:	4b44      	ldr	r3, [pc, #272]	; (8008dc0 <osThreadNew+0x148>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d07e      	beq.n	8008db4 <osThreadNew+0x13c>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d07b      	beq.n	8008db4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008cbc:	2380      	movs	r3, #128	; 0x80
 8008cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008cc0:	2318      	movs	r3, #24
 8008cc2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ccc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d045      	beq.n	8008d60 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <osThreadNew+0x6a>
        name = attr->name;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d002      	beq.n	8008cf0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d008      	beq.n	8008d08 <osThreadNew+0x90>
 8008cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf8:	2b38      	cmp	r3, #56	; 0x38
 8008cfa:	d805      	bhi.n	8008d08 <osThreadNew+0x90>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <osThreadNew+0x94>
        return (NULL);
 8008d08:	2300      	movs	r3, #0
 8008d0a:	e054      	b.n	8008db6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	695b      	ldr	r3, [r3, #20]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d003      	beq.n	8008d1c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	089b      	lsrs	r3, r3, #2
 8008d1a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00e      	beq.n	8008d42 <osThreadNew+0xca>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	2b5b      	cmp	r3, #91	; 0x5b
 8008d2a:	d90a      	bls.n	8008d42 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d006      	beq.n	8008d42 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <osThreadNew+0xca>
        mem = 1;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	623b      	str	r3, [r7, #32]
 8008d40:	e010      	b.n	8008d64 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d10c      	bne.n	8008d64 <osThreadNew+0xec>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d108      	bne.n	8008d64 <osThreadNew+0xec>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d104      	bne.n	8008d64 <osThreadNew+0xec>
          mem = 0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	623b      	str	r3, [r7, #32]
 8008d5e:	e001      	b.n	8008d64 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008d64:	6a3b      	ldr	r3, [r7, #32]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d110      	bne.n	8008d8c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d72:	9202      	str	r2, [sp, #8]
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f000 fe09 	bl	8009998 <xTaskCreateStatic>
 8008d86:	4603      	mov	r3, r0
 8008d88:	613b      	str	r3, [r7, #16]
 8008d8a:	e013      	b.n	8008db4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d110      	bne.n	8008db4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	f107 0310 	add.w	r3, r7, #16
 8008d9a:	9301      	str	r3, [sp, #4]
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f000 fe51 	bl	8009a4c <xTaskCreate>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d001      	beq.n	8008db4 <osThreadNew+0x13c>
          hTask = NULL;
 8008db0:	2300      	movs	r3, #0
 8008db2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008db4:	693b      	ldr	r3, [r7, #16]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3730      	adds	r7, #48	; 0x30
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	240000f0 	.word	0x240000f0

08008dc4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dcc:	f3ef 8305 	mrs	r3, IPSR
 8008dd0:	613b      	str	r3, [r7, #16]
  return(result);
 8008dd2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10f      	bne.n	8008df8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8008ddc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d105      	bne.n	8008df0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008de4:	f3ef 8311 	mrs	r3, BASEPRI
 8008de8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d007      	beq.n	8008e00 <osDelay+0x3c>
 8008df0:	4b0a      	ldr	r3, [pc, #40]	; (8008e1c <osDelay+0x58>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d103      	bne.n	8008e00 <osDelay+0x3c>
    stat = osErrorISR;
 8008df8:	f06f 0305 	mvn.w	r3, #5
 8008dfc:	617b      	str	r3, [r7, #20]
 8008dfe:	e007      	b.n	8008e10 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d002      	beq.n	8008e10 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 ff62 	bl	8009cd4 <vTaskDelay>
    }
  }

  return (stat);
 8008e10:	697b      	ldr	r3, [r7, #20]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	240000f0 	.word	0x240000f0

08008e20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	4a07      	ldr	r2, [pc, #28]	; (8008e4c <vApplicationGetIdleTaskMemory+0x2c>)
 8008e30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	4a06      	ldr	r2, [pc, #24]	; (8008e50 <vApplicationGetIdleTaskMemory+0x30>)
 8008e36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2280      	movs	r2, #128	; 0x80
 8008e3c:	601a      	str	r2, [r3, #0]
}
 8008e3e:	bf00      	nop
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	240000f4 	.word	0x240000f4
 8008e50:	24000150 	.word	0x24000150

08008e54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4a07      	ldr	r2, [pc, #28]	; (8008e80 <vApplicationGetTimerTaskMemory+0x2c>)
 8008e64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	4a06      	ldr	r2, [pc, #24]	; (8008e84 <vApplicationGetTimerTaskMemory+0x30>)
 8008e6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e72:	601a      	str	r2, [r3, #0]
}
 8008e74:	bf00      	nop
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	24000350 	.word	0x24000350
 8008e84:	240003ac 	.word	0x240003ac

08008e88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f103 0208 	add.w	r2, r3, #8
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f103 0208 	add.w	r2, r3, #8
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f103 0208 	add.w	r2, r3, #8
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008ed6:	bf00      	nop
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b085      	sub	sp, #20
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	689a      	ldr	r2, [r3, #8]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	1c5a      	adds	r2, r3, #1
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	601a      	str	r2, [r3, #0]
}
 8008f1e:	bf00      	nop
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	b085      	sub	sp, #20
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f40:	d103      	bne.n	8008f4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	60fb      	str	r3, [r7, #12]
 8008f48:	e00c      	b.n	8008f64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	3308      	adds	r3, #8
 8008f4e:	60fb      	str	r3, [r7, #12]
 8008f50:	e002      	b.n	8008f58 <vListInsert+0x2e>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	60fb      	str	r3, [r7, #12]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d2f6      	bcs.n	8008f52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	1c5a      	adds	r2, r3, #1
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	601a      	str	r2, [r3, #0]
}
 8008f90:	bf00      	nop
 8008f92:	3714      	adds	r7, #20
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	6892      	ldr	r2, [r2, #8]
 8008fb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	6852      	ldr	r2, [r2, #4]
 8008fbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d103      	bne.n	8008fd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	689a      	ldr	r2, [r3, #8]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	1e5a      	subs	r2, r3, #1
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3714      	adds	r7, #20
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d109      	bne.n	8009018 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	60bb      	str	r3, [r7, #8]
 8009016:	e7fe      	b.n	8009016 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009018:	f002 f820 	bl	800b05c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009024:	68f9      	ldr	r1, [r7, #12]
 8009026:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009028:	fb01 f303 	mul.w	r3, r1, r3
 800902c:	441a      	add	r2, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009048:	3b01      	subs	r3, #1
 800904a:	68f9      	ldr	r1, [r7, #12]
 800904c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800904e:	fb01 f303 	mul.w	r3, r1, r3
 8009052:	441a      	add	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	22ff      	movs	r2, #255	; 0xff
 800905c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	22ff      	movs	r2, #255	; 0xff
 8009064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d114      	bne.n	8009098 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d01a      	beq.n	80090ac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3310      	adds	r3, #16
 800907a:	4618      	mov	r0, r3
 800907c:	f001 f8f0 	bl	800a260 <xTaskRemoveFromEventList>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d012      	beq.n	80090ac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009086:	4b0d      	ldr	r3, [pc, #52]	; (80090bc <xQueueGenericReset+0xcc>)
 8009088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	e009      	b.n	80090ac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3310      	adds	r3, #16
 800909c:	4618      	mov	r0, r3
 800909e:	f7ff fef3 	bl	8008e88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	3324      	adds	r3, #36	; 0x24
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff feee 	bl	8008e88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090ac:	f002 f804 	bl	800b0b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090b0:	2301      	movs	r3, #1
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	e000ed04 	.word	0xe000ed04

080090c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b08e      	sub	sp, #56	; 0x38
 80090c4:	af02      	add	r7, sp, #8
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
 80090cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d109      	bne.n	80090e8 <xQueueGenericCreateStatic+0x28>
 80090d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80090e6:	e7fe      	b.n	80090e6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d109      	bne.n	8009102 <xQueueGenericCreateStatic+0x42>
 80090ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009100:	e7fe      	b.n	8009100 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <xQueueGenericCreateStatic+0x4e>
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d001      	beq.n	8009112 <xQueueGenericCreateStatic+0x52>
 800910e:	2301      	movs	r3, #1
 8009110:	e000      	b.n	8009114 <xQueueGenericCreateStatic+0x54>
 8009112:	2300      	movs	r3, #0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d109      	bne.n	800912c <xQueueGenericCreateStatic+0x6c>
 8009118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911c:	f383 8811 	msr	BASEPRI, r3
 8009120:	f3bf 8f6f 	isb	sy
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	623b      	str	r3, [r7, #32]
 800912a:	e7fe      	b.n	800912a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d102      	bne.n	8009138 <xQueueGenericCreateStatic+0x78>
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <xQueueGenericCreateStatic+0x7c>
 8009138:	2301      	movs	r3, #1
 800913a:	e000      	b.n	800913e <xQueueGenericCreateStatic+0x7e>
 800913c:	2300      	movs	r3, #0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d109      	bne.n	8009156 <xQueueGenericCreateStatic+0x96>
 8009142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009146:	f383 8811 	msr	BASEPRI, r3
 800914a:	f3bf 8f6f 	isb	sy
 800914e:	f3bf 8f4f 	dsb	sy
 8009152:	61fb      	str	r3, [r7, #28]
 8009154:	e7fe      	b.n	8009154 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009156:	2350      	movs	r3, #80	; 0x50
 8009158:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2b50      	cmp	r3, #80	; 0x50
 800915e:	d009      	beq.n	8009174 <xQueueGenericCreateStatic+0xb4>
 8009160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	61bb      	str	r3, [r7, #24]
 8009172:	e7fe      	b.n	8009172 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009174:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800917a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00d      	beq.n	800919c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009188:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800918c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918e:	9300      	str	r3, [sp, #0]
 8009190:	4613      	mov	r3, r2
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	68b9      	ldr	r1, [r7, #8]
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f000 f805 	bl	80091a6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800919c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800919e:	4618      	mov	r0, r3
 80091a0:	3730      	adds	r7, #48	; 0x30
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b084      	sub	sp, #16
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	60f8      	str	r0, [r7, #12]
 80091ae:	60b9      	str	r1, [r7, #8]
 80091b0:	607a      	str	r2, [r7, #4]
 80091b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d103      	bne.n	80091c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	69ba      	ldr	r2, [r7, #24]
 80091be:	601a      	str	r2, [r3, #0]
 80091c0:	e002      	b.n	80091c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80091d4:	2101      	movs	r1, #1
 80091d6:	69b8      	ldr	r0, [r7, #24]
 80091d8:	f7ff ff0a 	bl	8008ff0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	78fa      	ldrb	r2, [r7, #3]
 80091e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80091e4:	bf00      	nop
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b08e      	sub	sp, #56	; 0x38
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
 80091f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80091fa:	2300      	movs	r3, #0
 80091fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009204:	2b00      	cmp	r3, #0
 8009206:	d109      	bne.n	800921c <xQueueGenericSend+0x30>
 8009208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	62bb      	str	r3, [r7, #40]	; 0x28
 800921a:	e7fe      	b.n	800921a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d103      	bne.n	800922a <xQueueGenericSend+0x3e>
 8009222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009226:	2b00      	cmp	r3, #0
 8009228:	d101      	bne.n	800922e <xQueueGenericSend+0x42>
 800922a:	2301      	movs	r3, #1
 800922c:	e000      	b.n	8009230 <xQueueGenericSend+0x44>
 800922e:	2300      	movs	r3, #0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d109      	bne.n	8009248 <xQueueGenericSend+0x5c>
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	627b      	str	r3, [r7, #36]	; 0x24
 8009246:	e7fe      	b.n	8009246 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2b02      	cmp	r3, #2
 800924c:	d103      	bne.n	8009256 <xQueueGenericSend+0x6a>
 800924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009252:	2b01      	cmp	r3, #1
 8009254:	d101      	bne.n	800925a <xQueueGenericSend+0x6e>
 8009256:	2301      	movs	r3, #1
 8009258:	e000      	b.n	800925c <xQueueGenericSend+0x70>
 800925a:	2300      	movs	r3, #0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d109      	bne.n	8009274 <xQueueGenericSend+0x88>
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	623b      	str	r3, [r7, #32]
 8009272:	e7fe      	b.n	8009272 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009274:	f001 f9aa 	bl	800a5cc <xTaskGetSchedulerState>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d102      	bne.n	8009284 <xQueueGenericSend+0x98>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <xQueueGenericSend+0x9c>
 8009284:	2301      	movs	r3, #1
 8009286:	e000      	b.n	800928a <xQueueGenericSend+0x9e>
 8009288:	2300      	movs	r3, #0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d109      	bne.n	80092a2 <xQueueGenericSend+0xb6>
 800928e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009292:	f383 8811 	msr	BASEPRI, r3
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	f3bf 8f4f 	dsb	sy
 800929e:	61fb      	str	r3, [r7, #28]
 80092a0:	e7fe      	b.n	80092a0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092a2:	f001 fedb 	bl	800b05c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d302      	bcc.n	80092b8 <xQueueGenericSend+0xcc>
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d129      	bne.n	800930c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092b8:	683a      	ldr	r2, [r7, #0]
 80092ba:	68b9      	ldr	r1, [r7, #8]
 80092bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092be:	f000 f9ff 	bl	80096c0 <prvCopyDataToQueue>
 80092c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d010      	beq.n	80092ee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ce:	3324      	adds	r3, #36	; 0x24
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 ffc5 	bl	800a260 <xTaskRemoveFromEventList>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d013      	beq.n	8009304 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80092dc:	4b3f      	ldr	r3, [pc, #252]	; (80093dc <xQueueGenericSend+0x1f0>)
 80092de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	e00a      	b.n	8009304 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80092ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d007      	beq.n	8009304 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80092f4:	4b39      	ldr	r3, [pc, #228]	; (80093dc <xQueueGenericSend+0x1f0>)
 80092f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009304:	f001 fed8 	bl	800b0b8 <vPortExitCritical>
				return pdPASS;
 8009308:	2301      	movs	r3, #1
 800930a:	e063      	b.n	80093d4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d103      	bne.n	800931a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009312:	f001 fed1 	bl	800b0b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009316:	2300      	movs	r3, #0
 8009318:	e05c      	b.n	80093d4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800931a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931c:	2b00      	cmp	r3, #0
 800931e:	d106      	bne.n	800932e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009320:	f107 0314 	add.w	r3, r7, #20
 8009324:	4618      	mov	r0, r3
 8009326:	f000 fffd 	bl	800a324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800932a:	2301      	movs	r3, #1
 800932c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800932e:	f001 fec3 	bl	800b0b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009332:	f000 fd67 	bl	8009e04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009336:	f001 fe91 	bl	800b05c <vPortEnterCritical>
 800933a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009340:	b25b      	sxtb	r3, r3
 8009342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009346:	d103      	bne.n	8009350 <xQueueGenericSend+0x164>
 8009348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009356:	b25b      	sxtb	r3, r3
 8009358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935c:	d103      	bne.n	8009366 <xQueueGenericSend+0x17a>
 800935e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009360:	2200      	movs	r2, #0
 8009362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009366:	f001 fea7 	bl	800b0b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800936a:	1d3a      	adds	r2, r7, #4
 800936c:	f107 0314 	add.w	r3, r7, #20
 8009370:	4611      	mov	r1, r2
 8009372:	4618      	mov	r0, r3
 8009374:	f000 ffec 	bl	800a350 <xTaskCheckForTimeOut>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d124      	bne.n	80093c8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800937e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009380:	f000 fa96 	bl	80098b0 <prvIsQueueFull>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d018      	beq.n	80093bc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800938a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938c:	3310      	adds	r3, #16
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	4611      	mov	r1, r2
 8009392:	4618      	mov	r0, r3
 8009394:	f000 ff16 	bl	800a1c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800939a:	f000 fa21 	bl	80097e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800939e:	f000 fd3f 	bl	8009e20 <xTaskResumeAll>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f47f af7c 	bne.w	80092a2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80093aa:	4b0c      	ldr	r3, [pc, #48]	; (80093dc <xQueueGenericSend+0x1f0>)
 80093ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093b0:	601a      	str	r2, [r3, #0]
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	e772      	b.n	80092a2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80093bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093be:	f000 fa0f 	bl	80097e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093c2:	f000 fd2d 	bl	8009e20 <xTaskResumeAll>
 80093c6:	e76c      	b.n	80092a2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80093c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093ca:	f000 fa09 	bl	80097e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093ce:	f000 fd27 	bl	8009e20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80093d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3738      	adds	r7, #56	; 0x38
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	e000ed04 	.word	0xe000ed04

080093e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b08e      	sub	sp, #56	; 0x38
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80093f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d109      	bne.n	800940c <xQueueGenericSendFromISR+0x2c>
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	627b      	str	r3, [r7, #36]	; 0x24
 800940a:	e7fe      	b.n	800940a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d103      	bne.n	800941a <xQueueGenericSendFromISR+0x3a>
 8009412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <xQueueGenericSendFromISR+0x3e>
 800941a:	2301      	movs	r3, #1
 800941c:	e000      	b.n	8009420 <xQueueGenericSendFromISR+0x40>
 800941e:	2300      	movs	r3, #0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d109      	bne.n	8009438 <xQueueGenericSendFromISR+0x58>
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	623b      	str	r3, [r7, #32]
 8009436:	e7fe      	b.n	8009436 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2b02      	cmp	r3, #2
 800943c:	d103      	bne.n	8009446 <xQueueGenericSendFromISR+0x66>
 800943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009442:	2b01      	cmp	r3, #1
 8009444:	d101      	bne.n	800944a <xQueueGenericSendFromISR+0x6a>
 8009446:	2301      	movs	r3, #1
 8009448:	e000      	b.n	800944c <xQueueGenericSendFromISR+0x6c>
 800944a:	2300      	movs	r3, #0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d109      	bne.n	8009464 <xQueueGenericSendFromISR+0x84>
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	61fb      	str	r3, [r7, #28]
 8009462:	e7fe      	b.n	8009462 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009464:	f001 fed6 	bl	800b214 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009468:	f3ef 8211 	mrs	r2, BASEPRI
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	61ba      	str	r2, [r7, #24]
 800947e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009480:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009482:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800948c:	429a      	cmp	r2, r3
 800948e:	d302      	bcc.n	8009496 <xQueueGenericSendFromISR+0xb6>
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	2b02      	cmp	r3, #2
 8009494:	d12c      	bne.n	80094f0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800949c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094a0:	683a      	ldr	r2, [r7, #0]
 80094a2:	68b9      	ldr	r1, [r7, #8]
 80094a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094a6:	f000 f90b 	bl	80096c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80094aa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80094ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b2:	d112      	bne.n	80094da <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d016      	beq.n	80094ea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094be:	3324      	adds	r3, #36	; 0x24
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 fecd 	bl	800a260 <xTaskRemoveFromEventList>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00e      	beq.n	80094ea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00b      	beq.n	80094ea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	601a      	str	r2, [r3, #0]
 80094d8:	e007      	b.n	80094ea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80094da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80094de:	3301      	adds	r3, #1
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	b25a      	sxtb	r2, r3
 80094e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80094ea:	2301      	movs	r3, #1
 80094ec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80094ee:	e001      	b.n	80094f4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80094f0:	2300      	movs	r3, #0
 80094f2:	637b      	str	r3, [r7, #52]	; 0x34
 80094f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009500:	4618      	mov	r0, r3
 8009502:	3738      	adds	r7, #56	; 0x38
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08c      	sub	sp, #48	; 0x30
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009514:	2300      	movs	r3, #0
 8009516:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951e:	2b00      	cmp	r3, #0
 8009520:	d109      	bne.n	8009536 <xQueueReceive+0x2e>
	__asm volatile
 8009522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009526:	f383 8811 	msr	BASEPRI, r3
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	623b      	str	r3, [r7, #32]
 8009534:	e7fe      	b.n	8009534 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d103      	bne.n	8009544 <xQueueReceive+0x3c>
 800953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <xQueueReceive+0x40>
 8009544:	2301      	movs	r3, #1
 8009546:	e000      	b.n	800954a <xQueueReceive+0x42>
 8009548:	2300      	movs	r3, #0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d109      	bne.n	8009562 <xQueueReceive+0x5a>
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	61fb      	str	r3, [r7, #28]
 8009560:	e7fe      	b.n	8009560 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009562:	f001 f833 	bl	800a5cc <xTaskGetSchedulerState>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d102      	bne.n	8009572 <xQueueReceive+0x6a>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <xQueueReceive+0x6e>
 8009572:	2301      	movs	r3, #1
 8009574:	e000      	b.n	8009578 <xQueueReceive+0x70>
 8009576:	2300      	movs	r3, #0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d109      	bne.n	8009590 <xQueueReceive+0x88>
 800957c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	61bb      	str	r3, [r7, #24]
 800958e:	e7fe      	b.n	800958e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009590:	f001 fd64 	bl	800b05c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009598:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	2b00      	cmp	r3, #0
 800959e:	d01f      	beq.n	80095e0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80095a0:	68b9      	ldr	r1, [r7, #8]
 80095a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095a4:	f000 f8f6 	bl	8009794 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80095a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095aa:	1e5a      	subs	r2, r3, #1
 80095ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00f      	beq.n	80095d8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ba:	3310      	adds	r3, #16
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 fe4f 	bl	800a260 <xTaskRemoveFromEventList>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d007      	beq.n	80095d8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80095c8:	4b3c      	ldr	r3, [pc, #240]	; (80096bc <xQueueReceive+0x1b4>)
 80095ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ce:	601a      	str	r2, [r3, #0]
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80095d8:	f001 fd6e 	bl	800b0b8 <vPortExitCritical>
				return pdPASS;
 80095dc:	2301      	movs	r3, #1
 80095de:	e069      	b.n	80096b4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d103      	bne.n	80095ee <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095e6:	f001 fd67 	bl	800b0b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80095ea:	2300      	movs	r3, #0
 80095ec:	e062      	b.n	80096b4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d106      	bne.n	8009602 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095f4:	f107 0310 	add.w	r3, r7, #16
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 fe93 	bl	800a324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095fe:	2301      	movs	r3, #1
 8009600:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009602:	f001 fd59 	bl	800b0b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009606:	f000 fbfd 	bl	8009e04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800960a:	f001 fd27 	bl	800b05c <vPortEnterCritical>
 800960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009610:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009614:	b25b      	sxtb	r3, r3
 8009616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800961a:	d103      	bne.n	8009624 <xQueueReceive+0x11c>
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961e:	2200      	movs	r2, #0
 8009620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800962a:	b25b      	sxtb	r3, r3
 800962c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009630:	d103      	bne.n	800963a <xQueueReceive+0x132>
 8009632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009634:	2200      	movs	r2, #0
 8009636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800963a:	f001 fd3d 	bl	800b0b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800963e:	1d3a      	adds	r2, r7, #4
 8009640:	f107 0310 	add.w	r3, r7, #16
 8009644:	4611      	mov	r1, r2
 8009646:	4618      	mov	r0, r3
 8009648:	f000 fe82 	bl	800a350 <xTaskCheckForTimeOut>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d123      	bne.n	800969a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009654:	f000 f916 	bl	8009884 <prvIsQueueEmpty>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d017      	beq.n	800968e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800965e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009660:	3324      	adds	r3, #36	; 0x24
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	4611      	mov	r1, r2
 8009666:	4618      	mov	r0, r3
 8009668:	f000 fdac 	bl	800a1c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800966c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800966e:	f000 f8b7 	bl	80097e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009672:	f000 fbd5 	bl	8009e20 <xTaskResumeAll>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d189      	bne.n	8009590 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800967c:	4b0f      	ldr	r3, [pc, #60]	; (80096bc <xQueueReceive+0x1b4>)
 800967e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	f3bf 8f6f 	isb	sy
 800968c:	e780      	b.n	8009590 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800968e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009690:	f000 f8a6 	bl	80097e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009694:	f000 fbc4 	bl	8009e20 <xTaskResumeAll>
 8009698:	e77a      	b.n	8009590 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800969a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800969c:	f000 f8a0 	bl	80097e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096a0:	f000 fbbe 	bl	8009e20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096a6:	f000 f8ed 	bl	8009884 <prvIsQueueEmpty>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f43f af6f 	beq.w	8009590 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80096b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3730      	adds	r7, #48	; 0x30
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	e000ed04 	.word	0xe000ed04

080096c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80096cc:	2300      	movs	r3, #0
 80096ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10d      	bne.n	80096fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d14d      	bne.n	8009782 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f000 ff8c 	bl	800a608 <xTaskPriorityDisinherit>
 80096f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	609a      	str	r2, [r3, #8]
 80096f8:	e043      	b.n	8009782 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d119      	bne.n	8009734 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6858      	ldr	r0, [r3, #4]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009708:	461a      	mov	r2, r3
 800970a:	68b9      	ldr	r1, [r7, #8]
 800970c:	f001 ffba 	bl	800b684 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009718:	441a      	add	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	685a      	ldr	r2, [r3, #4]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	429a      	cmp	r2, r3
 8009728:	d32b      	bcc.n	8009782 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	605a      	str	r2, [r3, #4]
 8009732:	e026      	b.n	8009782 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	68d8      	ldr	r0, [r3, #12]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973c:	461a      	mov	r2, r3
 800973e:	68b9      	ldr	r1, [r7, #8]
 8009740:	f001 ffa0 	bl	800b684 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	68da      	ldr	r2, [r3, #12]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974c:	425b      	negs	r3, r3
 800974e:	441a      	add	r2, r3
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	68da      	ldr	r2, [r3, #12]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	429a      	cmp	r2, r3
 800975e:	d207      	bcs.n	8009770 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	689a      	ldr	r2, [r3, #8]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009768:	425b      	negs	r3, r3
 800976a:	441a      	add	r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2b02      	cmp	r3, #2
 8009774:	d105      	bne.n	8009782 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d002      	beq.n	8009782 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	3b01      	subs	r3, #1
 8009780:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	1c5a      	adds	r2, r3, #1
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800978a:	697b      	ldr	r3, [r7, #20]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3718      	adds	r7, #24
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d018      	beq.n	80097d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ae:	441a      	add	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	68da      	ldr	r2, [r3, #12]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d303      	bcc.n	80097c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68d9      	ldr	r1, [r3, #12]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d0:	461a      	mov	r2, r3
 80097d2:	6838      	ldr	r0, [r7, #0]
 80097d4:	f001 ff56 	bl	800b684 <memcpy>
	}
}
 80097d8:	bf00      	nop
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80097e8:	f001 fc38 	bl	800b05c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097f4:	e011      	b.n	800981a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d012      	beq.n	8009824 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	3324      	adds	r3, #36	; 0x24
 8009802:	4618      	mov	r0, r3
 8009804:	f000 fd2c 	bl	800a260 <xTaskRemoveFromEventList>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800980e:	f000 fdff 	bl	800a410 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009812:	7bfb      	ldrb	r3, [r7, #15]
 8009814:	3b01      	subs	r3, #1
 8009816:	b2db      	uxtb	r3, r3
 8009818:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800981a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800981e:	2b00      	cmp	r3, #0
 8009820:	dce9      	bgt.n	80097f6 <prvUnlockQueue+0x16>
 8009822:	e000      	b.n	8009826 <prvUnlockQueue+0x46>
					break;
 8009824:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	22ff      	movs	r2, #255	; 0xff
 800982a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800982e:	f001 fc43 	bl	800b0b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009832:	f001 fc13 	bl	800b05c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800983c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800983e:	e011      	b.n	8009864 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d012      	beq.n	800986e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	3310      	adds	r3, #16
 800984c:	4618      	mov	r0, r3
 800984e:	f000 fd07 	bl	800a260 <xTaskRemoveFromEventList>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d001      	beq.n	800985c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009858:	f000 fdda 	bl	800a410 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800985c:	7bbb      	ldrb	r3, [r7, #14]
 800985e:	3b01      	subs	r3, #1
 8009860:	b2db      	uxtb	r3, r3
 8009862:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009864:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009868:	2b00      	cmp	r3, #0
 800986a:	dce9      	bgt.n	8009840 <prvUnlockQueue+0x60>
 800986c:	e000      	b.n	8009870 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800986e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	22ff      	movs	r2, #255	; 0xff
 8009874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009878:	f001 fc1e 	bl	800b0b8 <vPortExitCritical>
}
 800987c:	bf00      	nop
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800988c:	f001 fbe6 	bl	800b05c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009894:	2b00      	cmp	r3, #0
 8009896:	d102      	bne.n	800989e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009898:	2301      	movs	r3, #1
 800989a:	60fb      	str	r3, [r7, #12]
 800989c:	e001      	b.n	80098a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800989e:	2300      	movs	r3, #0
 80098a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80098a2:	f001 fc09 	bl	800b0b8 <vPortExitCritical>

	return xReturn;
 80098a6:	68fb      	ldr	r3, [r7, #12]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80098b8:	f001 fbd0 	bl	800b05c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d102      	bne.n	80098ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80098c8:	2301      	movs	r3, #1
 80098ca:	60fb      	str	r3, [r7, #12]
 80098cc:	e001      	b.n	80098d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80098ce:	2300      	movs	r3, #0
 80098d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80098d2:	f001 fbf1 	bl	800b0b8 <vPortExitCritical>

	return xReturn;
 80098d6:	68fb      	ldr	r3, [r7, #12]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098ea:	2300      	movs	r3, #0
 80098ec:	60fb      	str	r3, [r7, #12]
 80098ee:	e014      	b.n	800991a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80098f0:	4a0e      	ldr	r2, [pc, #56]	; (800992c <vQueueAddToRegistry+0x4c>)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10b      	bne.n	8009914 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80098fc:	490b      	ldr	r1, [pc, #44]	; (800992c <vQueueAddToRegistry+0x4c>)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009906:	4a09      	ldr	r2, [pc, #36]	; (800992c <vQueueAddToRegistry+0x4c>)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	00db      	lsls	r3, r3, #3
 800990c:	4413      	add	r3, r2
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009912:	e005      	b.n	8009920 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	3301      	adds	r3, #1
 8009918:	60fb      	str	r3, [r7, #12]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2b07      	cmp	r3, #7
 800991e:	d9e7      	bls.n	80098f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009920:	bf00      	nop
 8009922:	3714      	adds	r7, #20
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	2400517c 	.word	0x2400517c

08009930 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009940:	f001 fb8c 	bl	800b05c <vPortEnterCritical>
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800994a:	b25b      	sxtb	r3, r3
 800994c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009950:	d103      	bne.n	800995a <vQueueWaitForMessageRestricted+0x2a>
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	2200      	movs	r2, #0
 8009956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009960:	b25b      	sxtb	r3, r3
 8009962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009966:	d103      	bne.n	8009970 <vQueueWaitForMessageRestricted+0x40>
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009970:	f001 fba2 	bl	800b0b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009978:	2b00      	cmp	r3, #0
 800997a:	d106      	bne.n	800998a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	3324      	adds	r3, #36	; 0x24
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	68b9      	ldr	r1, [r7, #8]
 8009984:	4618      	mov	r0, r3
 8009986:	f000 fc41 	bl	800a20c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800998a:	6978      	ldr	r0, [r7, #20]
 800998c:	f7ff ff28 	bl	80097e0 <prvUnlockQueue>
	}
 8009990:	bf00      	nop
 8009992:	3718      	adds	r7, #24
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009998:	b580      	push	{r7, lr}
 800999a:	b08e      	sub	sp, #56	; 0x38
 800999c:	af04      	add	r7, sp, #16
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
 80099a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80099a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d109      	bne.n	80099c0 <xTaskCreateStatic+0x28>
 80099ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b0:	f383 8811 	msr	BASEPRI, r3
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	623b      	str	r3, [r7, #32]
 80099be:	e7fe      	b.n	80099be <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80099c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d109      	bne.n	80099da <xTaskCreateStatic+0x42>
 80099c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	61fb      	str	r3, [r7, #28]
 80099d8:	e7fe      	b.n	80099d8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80099da:	235c      	movs	r3, #92	; 0x5c
 80099dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	2b5c      	cmp	r3, #92	; 0x5c
 80099e2:	d009      	beq.n	80099f8 <xTaskCreateStatic+0x60>
 80099e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	61bb      	str	r3, [r7, #24]
 80099f6:	e7fe      	b.n	80099f6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80099f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80099fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d01e      	beq.n	8009a3e <xTaskCreateStatic+0xa6>
 8009a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d01b      	beq.n	8009a3e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a08:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a0e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a12:	2202      	movs	r2, #2
 8009a14:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a18:	2300      	movs	r3, #0
 8009a1a:	9303      	str	r3, [sp, #12]
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1e:	9302      	str	r3, [sp, #8]
 8009a20:	f107 0314 	add.w	r3, r7, #20
 8009a24:	9301      	str	r3, [sp, #4]
 8009a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	68b9      	ldr	r1, [r7, #8]
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f000 f850 	bl	8009ad6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a38:	f000 f8dc 	bl	8009bf4 <prvAddNewTaskToReadyList>
 8009a3c:	e001      	b.n	8009a42 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009a42:	697b      	ldr	r3, [r7, #20]
	}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3728      	adds	r7, #40	; 0x28
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b08c      	sub	sp, #48	; 0x30
 8009a50:	af04      	add	r7, sp, #16
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	603b      	str	r3, [r7, #0]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009a5c:	88fb      	ldrh	r3, [r7, #6]
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	4618      	mov	r0, r3
 8009a62:	f001 fc15 	bl	800b290 <pvPortMalloc>
 8009a66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00e      	beq.n	8009a8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009a6e:	205c      	movs	r0, #92	; 0x5c
 8009a70:	f001 fc0e 	bl	800b290 <pvPortMalloc>
 8009a74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d003      	beq.n	8009a84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	631a      	str	r2, [r3, #48]	; 0x30
 8009a82:	e005      	b.n	8009a90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009a84:	6978      	ldr	r0, [r7, #20]
 8009a86:	f001 fcc5 	bl	800b414 <vPortFree>
 8009a8a:	e001      	b.n	8009a90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d017      	beq.n	8009ac6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a9e:	88fa      	ldrh	r2, [r7, #6]
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	9303      	str	r3, [sp, #12]
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	9302      	str	r3, [sp, #8]
 8009aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aaa:	9301      	str	r3, [sp, #4]
 8009aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	68b9      	ldr	r1, [r7, #8]
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f000 f80e 	bl	8009ad6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009aba:	69f8      	ldr	r0, [r7, #28]
 8009abc:	f000 f89a 	bl	8009bf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	61bb      	str	r3, [r7, #24]
 8009ac4:	e002      	b.n	8009acc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8009aca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009acc:	69bb      	ldr	r3, [r7, #24]
	}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3720      	adds	r7, #32
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b088      	sub	sp, #32
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	60f8      	str	r0, [r7, #12]
 8009ade:	60b9      	str	r1, [r7, #8]
 8009ae0:	607a      	str	r2, [r7, #4]
 8009ae2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	461a      	mov	r2, r3
 8009aee:	21a5      	movs	r1, #165	; 0xa5
 8009af0:	f001 fdd3 	bl	800b69a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009af8:	6879      	ldr	r1, [r7, #4]
 8009afa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009afe:	440b      	add	r3, r1
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	f023 0307 	bic.w	r3, r3, #7
 8009b0c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	f003 0307 	and.w	r3, r3, #7
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d009      	beq.n	8009b2c <prvInitialiseNewTask+0x56>
 8009b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	617b      	str	r3, [r7, #20]
 8009b2a:	e7fe      	b.n	8009b2a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d01f      	beq.n	8009b72 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b32:	2300      	movs	r3, #0
 8009b34:	61fb      	str	r3, [r7, #28]
 8009b36:	e012      	b.n	8009b5e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b38:	68ba      	ldr	r2, [r7, #8]
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	7819      	ldrb	r1, [r3, #0]
 8009b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	4413      	add	r3, r2
 8009b46:	3334      	adds	r3, #52	; 0x34
 8009b48:	460a      	mov	r2, r1
 8009b4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	4413      	add	r3, r2
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d006      	beq.n	8009b66 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	61fb      	str	r3, [r7, #28]
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	2b0f      	cmp	r3, #15
 8009b62:	d9e9      	bls.n	8009b38 <prvInitialiseNewTask+0x62>
 8009b64:	e000      	b.n	8009b68 <prvInitialiseNewTask+0x92>
			{
				break;
 8009b66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b70:	e003      	b.n	8009b7a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7c:	2b37      	cmp	r3, #55	; 0x37
 8009b7e:	d901      	bls.n	8009b84 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b80:	2337      	movs	r3, #55	; 0x37
 8009b82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b92:	2200      	movs	r2, #0
 8009b94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b98:	3304      	adds	r3, #4
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7ff f994 	bl	8008ec8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba2:	3318      	adds	r3, #24
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7ff f98f 	bl	8008ec8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009bce:	683a      	ldr	r2, [r7, #0]
 8009bd0:	68f9      	ldr	r1, [r7, #12]
 8009bd2:	69b8      	ldr	r0, [r7, #24]
 8009bd4:	f001 f91e 	bl	800ae14 <pxPortInitialiseStack>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bdc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d002      	beq.n	8009bea <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009be8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bea:	bf00      	nop
 8009bec:	3720      	adds	r7, #32
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
	...

08009bf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009bfc:	f001 fa2e 	bl	800b05c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009c00:	4b2d      	ldr	r3, [pc, #180]	; (8009cb8 <prvAddNewTaskToReadyList+0xc4>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3301      	adds	r3, #1
 8009c06:	4a2c      	ldr	r2, [pc, #176]	; (8009cb8 <prvAddNewTaskToReadyList+0xc4>)
 8009c08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c0a:	4b2c      	ldr	r3, [pc, #176]	; (8009cbc <prvAddNewTaskToReadyList+0xc8>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d109      	bne.n	8009c26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c12:	4a2a      	ldr	r2, [pc, #168]	; (8009cbc <prvAddNewTaskToReadyList+0xc8>)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c18:	4b27      	ldr	r3, [pc, #156]	; (8009cb8 <prvAddNewTaskToReadyList+0xc4>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d110      	bne.n	8009c42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c20:	f000 fc1a 	bl	800a458 <prvInitialiseTaskLists>
 8009c24:	e00d      	b.n	8009c42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c26:	4b26      	ldr	r3, [pc, #152]	; (8009cc0 <prvAddNewTaskToReadyList+0xcc>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d109      	bne.n	8009c42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c2e:	4b23      	ldr	r3, [pc, #140]	; (8009cbc <prvAddNewTaskToReadyList+0xc8>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d802      	bhi.n	8009c42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c3c:	4a1f      	ldr	r2, [pc, #124]	; (8009cbc <prvAddNewTaskToReadyList+0xc8>)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c42:	4b20      	ldr	r3, [pc, #128]	; (8009cc4 <prvAddNewTaskToReadyList+0xd0>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	3301      	adds	r3, #1
 8009c48:	4a1e      	ldr	r2, [pc, #120]	; (8009cc4 <prvAddNewTaskToReadyList+0xd0>)
 8009c4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c4c:	4b1d      	ldr	r3, [pc, #116]	; (8009cc4 <prvAddNewTaskToReadyList+0xd0>)
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c58:	4b1b      	ldr	r3, [pc, #108]	; (8009cc8 <prvAddNewTaskToReadyList+0xd4>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d903      	bls.n	8009c68 <prvAddNewTaskToReadyList+0x74>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c64:	4a18      	ldr	r2, [pc, #96]	; (8009cc8 <prvAddNewTaskToReadyList+0xd4>)
 8009c66:	6013      	str	r3, [r2, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	4413      	add	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4a15      	ldr	r2, [pc, #84]	; (8009ccc <prvAddNewTaskToReadyList+0xd8>)
 8009c76:	441a      	add	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	4610      	mov	r0, r2
 8009c80:	f7ff f92f 	bl	8008ee2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009c84:	f001 fa18 	bl	800b0b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009c88:	4b0d      	ldr	r3, [pc, #52]	; (8009cc0 <prvAddNewTaskToReadyList+0xcc>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00e      	beq.n	8009cae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c90:	4b0a      	ldr	r3, [pc, #40]	; (8009cbc <prvAddNewTaskToReadyList+0xc8>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d207      	bcs.n	8009cae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009c9e:	4b0c      	ldr	r3, [pc, #48]	; (8009cd0 <prvAddNewTaskToReadyList+0xdc>)
 8009ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cae:	bf00      	nop
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	24000c80 	.word	0x24000c80
 8009cbc:	240007ac 	.word	0x240007ac
 8009cc0:	24000c8c 	.word	0x24000c8c
 8009cc4:	24000c9c 	.word	0x24000c9c
 8009cc8:	24000c88 	.word	0x24000c88
 8009ccc:	240007b0 	.word	0x240007b0
 8009cd0:	e000ed04 	.word	0xe000ed04

08009cd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d016      	beq.n	8009d14 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ce6:	4b13      	ldr	r3, [pc, #76]	; (8009d34 <vTaskDelay+0x60>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d009      	beq.n	8009d02 <vTaskDelay+0x2e>
 8009cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	60bb      	str	r3, [r7, #8]
 8009d00:	e7fe      	b.n	8009d00 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009d02:	f000 f87f 	bl	8009e04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009d06:	2100      	movs	r1, #0
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 fce9 	bl	800a6e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009d0e:	f000 f887 	bl	8009e20 <xTaskResumeAll>
 8009d12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d107      	bne.n	8009d2a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009d1a:	4b07      	ldr	r3, [pc, #28]	; (8009d38 <vTaskDelay+0x64>)
 8009d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d20:	601a      	str	r2, [r3, #0]
 8009d22:	f3bf 8f4f 	dsb	sy
 8009d26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d2a:	bf00      	nop
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	24000ca8 	.word	0x24000ca8
 8009d38:	e000ed04 	.word	0xe000ed04

08009d3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b08a      	sub	sp, #40	; 0x28
 8009d40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d42:	2300      	movs	r3, #0
 8009d44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d46:	2300      	movs	r3, #0
 8009d48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d4a:	463a      	mov	r2, r7
 8009d4c:	1d39      	adds	r1, r7, #4
 8009d4e:	f107 0308 	add.w	r3, r7, #8
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7ff f864 	bl	8008e20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	9202      	str	r2, [sp, #8]
 8009d60:	9301      	str	r3, [sp, #4]
 8009d62:	2300      	movs	r3, #0
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	2300      	movs	r3, #0
 8009d68:	460a      	mov	r2, r1
 8009d6a:	4920      	ldr	r1, [pc, #128]	; (8009dec <vTaskStartScheduler+0xb0>)
 8009d6c:	4820      	ldr	r0, [pc, #128]	; (8009df0 <vTaskStartScheduler+0xb4>)
 8009d6e:	f7ff fe13 	bl	8009998 <xTaskCreateStatic>
 8009d72:	4602      	mov	r2, r0
 8009d74:	4b1f      	ldr	r3, [pc, #124]	; (8009df4 <vTaskStartScheduler+0xb8>)
 8009d76:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d78:	4b1e      	ldr	r3, [pc, #120]	; (8009df4 <vTaskStartScheduler+0xb8>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d80:	2301      	movs	r3, #1
 8009d82:	617b      	str	r3, [r7, #20]
 8009d84:	e001      	b.n	8009d8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d86:	2300      	movs	r3, #0
 8009d88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d102      	bne.n	8009d96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009d90:	f000 fcfa 	bl	800a788 <xTimerCreateTimerTask>
 8009d94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d115      	bne.n	8009dc8 <vTaskStartScheduler+0x8c>
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009dae:	4b12      	ldr	r3, [pc, #72]	; (8009df8 <vTaskStartScheduler+0xbc>)
 8009db0:	f04f 32ff 	mov.w	r2, #4294967295
 8009db4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009db6:	4b11      	ldr	r3, [pc, #68]	; (8009dfc <vTaskStartScheduler+0xc0>)
 8009db8:	2201      	movs	r2, #1
 8009dba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009dbc:	4b10      	ldr	r3, [pc, #64]	; (8009e00 <vTaskStartScheduler+0xc4>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009dc2:	f001 f8ad 	bl	800af20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009dc6:	e00d      	b.n	8009de4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dce:	d109      	bne.n	8009de4 <vTaskStartScheduler+0xa8>
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	60fb      	str	r3, [r7, #12]
 8009de2:	e7fe      	b.n	8009de2 <vTaskStartScheduler+0xa6>
}
 8009de4:	bf00      	nop
 8009de6:	3718      	adds	r7, #24
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	0800b7d4 	.word	0x0800b7d4
 8009df0:	0800a429 	.word	0x0800a429
 8009df4:	24000ca4 	.word	0x24000ca4
 8009df8:	24000ca0 	.word	0x24000ca0
 8009dfc:	24000c8c 	.word	0x24000c8c
 8009e00:	24000c84 	.word	0x24000c84

08009e04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e04:	b480      	push	{r7}
 8009e06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009e08:	4b04      	ldr	r3, [pc, #16]	; (8009e1c <vTaskSuspendAll+0x18>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	4a03      	ldr	r2, [pc, #12]	; (8009e1c <vTaskSuspendAll+0x18>)
 8009e10:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009e12:	bf00      	nop
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	24000ca8 	.word	0x24000ca8

08009e20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e26:	2300      	movs	r3, #0
 8009e28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e2e:	4b41      	ldr	r3, [pc, #260]	; (8009f34 <xTaskResumeAll+0x114>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d109      	bne.n	8009e4a <xTaskResumeAll+0x2a>
 8009e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	603b      	str	r3, [r7, #0]
 8009e48:	e7fe      	b.n	8009e48 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e4a:	f001 f907 	bl	800b05c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e4e:	4b39      	ldr	r3, [pc, #228]	; (8009f34 <xTaskResumeAll+0x114>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	3b01      	subs	r3, #1
 8009e54:	4a37      	ldr	r2, [pc, #220]	; (8009f34 <xTaskResumeAll+0x114>)
 8009e56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e58:	4b36      	ldr	r3, [pc, #216]	; (8009f34 <xTaskResumeAll+0x114>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d162      	bne.n	8009f26 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e60:	4b35      	ldr	r3, [pc, #212]	; (8009f38 <xTaskResumeAll+0x118>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d05e      	beq.n	8009f26 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e68:	e02f      	b.n	8009eca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e6a:	4b34      	ldr	r3, [pc, #208]	; (8009f3c <xTaskResumeAll+0x11c>)
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	3318      	adds	r3, #24
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7ff f890 	bl	8008f9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3304      	adds	r3, #4
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7ff f88b 	bl	8008f9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e8a:	4b2d      	ldr	r3, [pc, #180]	; (8009f40 <xTaskResumeAll+0x120>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d903      	bls.n	8009e9a <xTaskResumeAll+0x7a>
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e96:	4a2a      	ldr	r2, [pc, #168]	; (8009f40 <xTaskResumeAll+0x120>)
 8009e98:	6013      	str	r3, [r2, #0]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	4a27      	ldr	r2, [pc, #156]	; (8009f44 <xTaskResumeAll+0x124>)
 8009ea8:	441a      	add	r2, r3
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3304      	adds	r3, #4
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	f7ff f816 	bl	8008ee2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eba:	4b23      	ldr	r3, [pc, #140]	; (8009f48 <xTaskResumeAll+0x128>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d302      	bcc.n	8009eca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009ec4:	4b21      	ldr	r3, [pc, #132]	; (8009f4c <xTaskResumeAll+0x12c>)
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009eca:	4b1c      	ldr	r3, [pc, #112]	; (8009f3c <xTaskResumeAll+0x11c>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1cb      	bne.n	8009e6a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ed8:	f000 fb58 	bl	800a58c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009edc:	4b1c      	ldr	r3, [pc, #112]	; (8009f50 <xTaskResumeAll+0x130>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d010      	beq.n	8009f0a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ee8:	f000 f858 	bl	8009f9c <xTaskIncrementTick>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009ef2:	4b16      	ldr	r3, [pc, #88]	; (8009f4c <xTaskResumeAll+0x12c>)
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	3b01      	subs	r3, #1
 8009efc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d1f1      	bne.n	8009ee8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009f04:	4b12      	ldr	r3, [pc, #72]	; (8009f50 <xTaskResumeAll+0x130>)
 8009f06:	2200      	movs	r2, #0
 8009f08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f0a:	4b10      	ldr	r3, [pc, #64]	; (8009f4c <xTaskResumeAll+0x12c>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d009      	beq.n	8009f26 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f12:	2301      	movs	r3, #1
 8009f14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f16:	4b0f      	ldr	r3, [pc, #60]	; (8009f54 <xTaskResumeAll+0x134>)
 8009f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f26:	f001 f8c7 	bl	800b0b8 <vPortExitCritical>

	return xAlreadyYielded;
 8009f2a:	68bb      	ldr	r3, [r7, #8]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	24000ca8 	.word	0x24000ca8
 8009f38:	24000c80 	.word	0x24000c80
 8009f3c:	24000c40 	.word	0x24000c40
 8009f40:	24000c88 	.word	0x24000c88
 8009f44:	240007b0 	.word	0x240007b0
 8009f48:	240007ac 	.word	0x240007ac
 8009f4c:	24000c94 	.word	0x24000c94
 8009f50:	24000c90 	.word	0x24000c90
 8009f54:	e000ed04 	.word	0xe000ed04

08009f58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009f5e:	4b05      	ldr	r3, [pc, #20]	; (8009f74 <xTaskGetTickCount+0x1c>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009f64:	687b      	ldr	r3, [r7, #4]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	370c      	adds	r7, #12
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	24000c84 	.word	0x24000c84

08009f78 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f7e:	f001 f949 	bl	800b214 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009f82:	2300      	movs	r3, #0
 8009f84:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009f86:	4b04      	ldr	r3, [pc, #16]	; (8009f98 <xTaskGetTickCountFromISR+0x20>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f8c:	683b      	ldr	r3, [r7, #0]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	24000c84 	.word	0x24000c84

08009f9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fa6:	4b4e      	ldr	r3, [pc, #312]	; (800a0e0 <xTaskIncrementTick+0x144>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f040 8088 	bne.w	800a0c0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009fb0:	4b4c      	ldr	r3, [pc, #304]	; (800a0e4 <xTaskIncrementTick+0x148>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009fb8:	4a4a      	ldr	r2, [pc, #296]	; (800a0e4 <xTaskIncrementTick+0x148>)
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d11f      	bne.n	800a004 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009fc4:	4b48      	ldr	r3, [pc, #288]	; (800a0e8 <xTaskIncrementTick+0x14c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d009      	beq.n	8009fe2 <xTaskIncrementTick+0x46>
 8009fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	603b      	str	r3, [r7, #0]
 8009fe0:	e7fe      	b.n	8009fe0 <xTaskIncrementTick+0x44>
 8009fe2:	4b41      	ldr	r3, [pc, #260]	; (800a0e8 <xTaskIncrementTick+0x14c>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	60fb      	str	r3, [r7, #12]
 8009fe8:	4b40      	ldr	r3, [pc, #256]	; (800a0ec <xTaskIncrementTick+0x150>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a3e      	ldr	r2, [pc, #248]	; (800a0e8 <xTaskIncrementTick+0x14c>)
 8009fee:	6013      	str	r3, [r2, #0]
 8009ff0:	4a3e      	ldr	r2, [pc, #248]	; (800a0ec <xTaskIncrementTick+0x150>)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6013      	str	r3, [r2, #0]
 8009ff6:	4b3e      	ldr	r3, [pc, #248]	; (800a0f0 <xTaskIncrementTick+0x154>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	4a3c      	ldr	r2, [pc, #240]	; (800a0f0 <xTaskIncrementTick+0x154>)
 8009ffe:	6013      	str	r3, [r2, #0]
 800a000:	f000 fac4 	bl	800a58c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a004:	4b3b      	ldr	r3, [pc, #236]	; (800a0f4 <xTaskIncrementTick+0x158>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	693a      	ldr	r2, [r7, #16]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d349      	bcc.n	800a0a2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a00e:	4b36      	ldr	r3, [pc, #216]	; (800a0e8 <xTaskIncrementTick+0x14c>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d104      	bne.n	800a022 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a018:	4b36      	ldr	r3, [pc, #216]	; (800a0f4 <xTaskIncrementTick+0x158>)
 800a01a:	f04f 32ff 	mov.w	r2, #4294967295
 800a01e:	601a      	str	r2, [r3, #0]
					break;
 800a020:	e03f      	b.n	800a0a2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a022:	4b31      	ldr	r3, [pc, #196]	; (800a0e8 <xTaskIncrementTick+0x14c>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a032:	693a      	ldr	r2, [r7, #16]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	429a      	cmp	r2, r3
 800a038:	d203      	bcs.n	800a042 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a03a:	4a2e      	ldr	r2, [pc, #184]	; (800a0f4 <xTaskIncrementTick+0x158>)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a040:	e02f      	b.n	800a0a2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	3304      	adds	r3, #4
 800a046:	4618      	mov	r0, r3
 800a048:	f7fe ffa8 	bl	8008f9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a050:	2b00      	cmp	r3, #0
 800a052:	d004      	beq.n	800a05e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	3318      	adds	r3, #24
 800a058:	4618      	mov	r0, r3
 800a05a:	f7fe ff9f 	bl	8008f9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a062:	4b25      	ldr	r3, [pc, #148]	; (800a0f8 <xTaskIncrementTick+0x15c>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	429a      	cmp	r2, r3
 800a068:	d903      	bls.n	800a072 <xTaskIncrementTick+0xd6>
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06e:	4a22      	ldr	r2, [pc, #136]	; (800a0f8 <xTaskIncrementTick+0x15c>)
 800a070:	6013      	str	r3, [r2, #0]
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a076:	4613      	mov	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4a1f      	ldr	r2, [pc, #124]	; (800a0fc <xTaskIncrementTick+0x160>)
 800a080:	441a      	add	r2, r3
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	3304      	adds	r3, #4
 800a086:	4619      	mov	r1, r3
 800a088:	4610      	mov	r0, r2
 800a08a:	f7fe ff2a 	bl	8008ee2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a092:	4b1b      	ldr	r3, [pc, #108]	; (800a100 <xTaskIncrementTick+0x164>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a098:	429a      	cmp	r2, r3
 800a09a:	d3b8      	bcc.n	800a00e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a09c:	2301      	movs	r3, #1
 800a09e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0a0:	e7b5      	b.n	800a00e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a0a2:	4b17      	ldr	r3, [pc, #92]	; (800a100 <xTaskIncrementTick+0x164>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a8:	4914      	ldr	r1, [pc, #80]	; (800a0fc <xTaskIncrementTick+0x160>)
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	440b      	add	r3, r1
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d907      	bls.n	800a0ca <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	617b      	str	r3, [r7, #20]
 800a0be:	e004      	b.n	800a0ca <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a0c0:	4b10      	ldr	r3, [pc, #64]	; (800a104 <xTaskIncrementTick+0x168>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	4a0f      	ldr	r2, [pc, #60]	; (800a104 <xTaskIncrementTick+0x168>)
 800a0c8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a0ca:	4b0f      	ldr	r3, [pc, #60]	; (800a108 <xTaskIncrementTick+0x16c>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a0d6:	697b      	ldr	r3, [r7, #20]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3718      	adds	r7, #24
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	24000ca8 	.word	0x24000ca8
 800a0e4:	24000c84 	.word	0x24000c84
 800a0e8:	24000c38 	.word	0x24000c38
 800a0ec:	24000c3c 	.word	0x24000c3c
 800a0f0:	24000c98 	.word	0x24000c98
 800a0f4:	24000ca0 	.word	0x24000ca0
 800a0f8:	24000c88 	.word	0x24000c88
 800a0fc:	240007b0 	.word	0x240007b0
 800a100:	240007ac 	.word	0x240007ac
 800a104:	24000c90 	.word	0x24000c90
 800a108:	24000c94 	.word	0x24000c94

0800a10c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a112:	4b27      	ldr	r3, [pc, #156]	; (800a1b0 <vTaskSwitchContext+0xa4>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a11a:	4b26      	ldr	r3, [pc, #152]	; (800a1b4 <vTaskSwitchContext+0xa8>)
 800a11c:	2201      	movs	r2, #1
 800a11e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a120:	e040      	b.n	800a1a4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a122:	4b24      	ldr	r3, [pc, #144]	; (800a1b4 <vTaskSwitchContext+0xa8>)
 800a124:	2200      	movs	r2, #0
 800a126:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a128:	4b23      	ldr	r3, [pc, #140]	; (800a1b8 <vTaskSwitchContext+0xac>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	60fb      	str	r3, [r7, #12]
 800a12e:	e00f      	b.n	800a150 <vTaskSwitchContext+0x44>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d109      	bne.n	800a14a <vTaskSwitchContext+0x3e>
 800a136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	607b      	str	r3, [r7, #4]
 800a148:	e7fe      	b.n	800a148 <vTaskSwitchContext+0x3c>
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	3b01      	subs	r3, #1
 800a14e:	60fb      	str	r3, [r7, #12]
 800a150:	491a      	ldr	r1, [pc, #104]	; (800a1bc <vTaskSwitchContext+0xb0>)
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	4613      	mov	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4413      	add	r3, r2
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	440b      	add	r3, r1
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d0e5      	beq.n	800a130 <vTaskSwitchContext+0x24>
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	4613      	mov	r3, r2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4413      	add	r3, r2
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4a13      	ldr	r2, [pc, #76]	; (800a1bc <vTaskSwitchContext+0xb0>)
 800a170:	4413      	add	r3, r2
 800a172:	60bb      	str	r3, [r7, #8]
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	605a      	str	r2, [r3, #4]
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	685a      	ldr	r2, [r3, #4]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	3308      	adds	r3, #8
 800a186:	429a      	cmp	r2, r3
 800a188:	d104      	bne.n	800a194 <vTaskSwitchContext+0x88>
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	685a      	ldr	r2, [r3, #4]
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	605a      	str	r2, [r3, #4]
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	4a09      	ldr	r2, [pc, #36]	; (800a1c0 <vTaskSwitchContext+0xb4>)
 800a19c:	6013      	str	r3, [r2, #0]
 800a19e:	4a06      	ldr	r2, [pc, #24]	; (800a1b8 <vTaskSwitchContext+0xac>)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6013      	str	r3, [r2, #0]
}
 800a1a4:	bf00      	nop
 800a1a6:	3714      	adds	r7, #20
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr
 800a1b0:	24000ca8 	.word	0x24000ca8
 800a1b4:	24000c94 	.word	0x24000c94
 800a1b8:	24000c88 	.word	0x24000c88
 800a1bc:	240007b0 	.word	0x240007b0
 800a1c0:	240007ac 	.word	0x240007ac

0800a1c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d109      	bne.n	800a1e8 <vTaskPlaceOnEventList+0x24>
 800a1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d8:	f383 8811 	msr	BASEPRI, r3
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	60fb      	str	r3, [r7, #12]
 800a1e6:	e7fe      	b.n	800a1e6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1e8:	4b07      	ldr	r3, [pc, #28]	; (800a208 <vTaskPlaceOnEventList+0x44>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	3318      	adds	r3, #24
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7fe fe9a 	bl	8008f2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1f6:	2101      	movs	r1, #1
 800a1f8:	6838      	ldr	r0, [r7, #0]
 800a1fa:	f000 fa71 	bl	800a6e0 <prvAddCurrentTaskToDelayedList>
}
 800a1fe:	bf00      	nop
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	240007ac 	.word	0x240007ac

0800a20c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d109      	bne.n	800a232 <vTaskPlaceOnEventListRestricted+0x26>
 800a21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	617b      	str	r3, [r7, #20]
 800a230:	e7fe      	b.n	800a230 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a232:	4b0a      	ldr	r3, [pc, #40]	; (800a25c <vTaskPlaceOnEventListRestricted+0x50>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	3318      	adds	r3, #24
 800a238:	4619      	mov	r1, r3
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f7fe fe51 	bl	8008ee2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d002      	beq.n	800a24c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a246:	f04f 33ff 	mov.w	r3, #4294967295
 800a24a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a24c:	6879      	ldr	r1, [r7, #4]
 800a24e:	68b8      	ldr	r0, [r7, #8]
 800a250:	f000 fa46 	bl	800a6e0 <prvAddCurrentTaskToDelayedList>
	}
 800a254:	bf00      	nop
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	240007ac 	.word	0x240007ac

0800a260 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b086      	sub	sp, #24
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d109      	bne.n	800a28a <xTaskRemoveFromEventList+0x2a>
 800a276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	60fb      	str	r3, [r7, #12]
 800a288:	e7fe      	b.n	800a288 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	3318      	adds	r3, #24
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fe fe84 	bl	8008f9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a294:	4b1d      	ldr	r3, [pc, #116]	; (800a30c <xTaskRemoveFromEventList+0xac>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d11d      	bne.n	800a2d8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	3304      	adds	r3, #4
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7fe fe7b 	bl	8008f9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2aa:	4b19      	ldr	r3, [pc, #100]	; (800a310 <xTaskRemoveFromEventList+0xb0>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d903      	bls.n	800a2ba <xTaskRemoveFromEventList+0x5a>
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b6:	4a16      	ldr	r2, [pc, #88]	; (800a310 <xTaskRemoveFromEventList+0xb0>)
 800a2b8:	6013      	str	r3, [r2, #0]
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2be:	4613      	mov	r3, r2
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	4413      	add	r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	4a13      	ldr	r2, [pc, #76]	; (800a314 <xTaskRemoveFromEventList+0xb4>)
 800a2c8:	441a      	add	r2, r3
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	f7fe fe06 	bl	8008ee2 <vListInsertEnd>
 800a2d6:	e005      	b.n	800a2e4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	3318      	adds	r3, #24
 800a2dc:	4619      	mov	r1, r3
 800a2de:	480e      	ldr	r0, [pc, #56]	; (800a318 <xTaskRemoveFromEventList+0xb8>)
 800a2e0:	f7fe fdff 	bl	8008ee2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e8:	4b0c      	ldr	r3, [pc, #48]	; (800a31c <xTaskRemoveFromEventList+0xbc>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d905      	bls.n	800a2fe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a2f6:	4b0a      	ldr	r3, [pc, #40]	; (800a320 <xTaskRemoveFromEventList+0xc0>)
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	601a      	str	r2, [r3, #0]
 800a2fc:	e001      	b.n	800a302 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a2fe:	2300      	movs	r3, #0
 800a300:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a302:	697b      	ldr	r3, [r7, #20]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3718      	adds	r7, #24
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	24000ca8 	.word	0x24000ca8
 800a310:	24000c88 	.word	0x24000c88
 800a314:	240007b0 	.word	0x240007b0
 800a318:	24000c40 	.word	0x24000c40
 800a31c:	240007ac 	.word	0x240007ac
 800a320:	24000c94 	.word	0x24000c94

0800a324 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a32c:	4b06      	ldr	r3, [pc, #24]	; (800a348 <vTaskInternalSetTimeOutState+0x24>)
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a334:	4b05      	ldr	r3, [pc, #20]	; (800a34c <vTaskInternalSetTimeOutState+0x28>)
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	605a      	str	r2, [r3, #4]
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr
 800a348:	24000c98 	.word	0x24000c98
 800a34c:	24000c84 	.word	0x24000c84

0800a350 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b088      	sub	sp, #32
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d109      	bne.n	800a374 <xTaskCheckForTimeOut+0x24>
 800a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	613b      	str	r3, [r7, #16]
 800a372:	e7fe      	b.n	800a372 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d109      	bne.n	800a38e <xTaskCheckForTimeOut+0x3e>
 800a37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37e:	f383 8811 	msr	BASEPRI, r3
 800a382:	f3bf 8f6f 	isb	sy
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	60fb      	str	r3, [r7, #12]
 800a38c:	e7fe      	b.n	800a38c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a38e:	f000 fe65 	bl	800b05c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a392:	4b1d      	ldr	r3, [pc, #116]	; (800a408 <xTaskCheckForTimeOut+0xb8>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	69ba      	ldr	r2, [r7, #24]
 800a39e:	1ad3      	subs	r3, r2, r3
 800a3a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3aa:	d102      	bne.n	800a3b2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	61fb      	str	r3, [r7, #28]
 800a3b0:	e023      	b.n	800a3fa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	4b15      	ldr	r3, [pc, #84]	; (800a40c <xTaskCheckForTimeOut+0xbc>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d007      	beq.n	800a3ce <xTaskCheckForTimeOut+0x7e>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	69ba      	ldr	r2, [r7, #24]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d302      	bcc.n	800a3ce <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	61fb      	str	r3, [r7, #28]
 800a3cc:	e015      	b.n	800a3fa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	697a      	ldr	r2, [r7, #20]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d20b      	bcs.n	800a3f0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	1ad2      	subs	r2, r2, r3
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7ff ff9d 	bl	800a324 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	61fb      	str	r3, [r7, #28]
 800a3ee:	e004      	b.n	800a3fa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a3fa:	f000 fe5d 	bl	800b0b8 <vPortExitCritical>

	return xReturn;
 800a3fe:	69fb      	ldr	r3, [r7, #28]
}
 800a400:	4618      	mov	r0, r3
 800a402:	3720      	adds	r7, #32
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	24000c84 	.word	0x24000c84
 800a40c:	24000c98 	.word	0x24000c98

0800a410 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a410:	b480      	push	{r7}
 800a412:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a414:	4b03      	ldr	r3, [pc, #12]	; (800a424 <vTaskMissedYield+0x14>)
 800a416:	2201      	movs	r2, #1
 800a418:	601a      	str	r2, [r3, #0]
}
 800a41a:	bf00      	nop
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr
 800a424:	24000c94 	.word	0x24000c94

0800a428 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a430:	f000 f852 	bl	800a4d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a434:	4b06      	ldr	r3, [pc, #24]	; (800a450 <prvIdleTask+0x28>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d9f9      	bls.n	800a430 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a43c:	4b05      	ldr	r3, [pc, #20]	; (800a454 <prvIdleTask+0x2c>)
 800a43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a44c:	e7f0      	b.n	800a430 <prvIdleTask+0x8>
 800a44e:	bf00      	nop
 800a450:	240007b0 	.word	0x240007b0
 800a454:	e000ed04 	.word	0xe000ed04

0800a458 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a45e:	2300      	movs	r3, #0
 800a460:	607b      	str	r3, [r7, #4]
 800a462:	e00c      	b.n	800a47e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	4613      	mov	r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4413      	add	r3, r2
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	4a12      	ldr	r2, [pc, #72]	; (800a4b8 <prvInitialiseTaskLists+0x60>)
 800a470:	4413      	add	r3, r2
 800a472:	4618      	mov	r0, r3
 800a474:	f7fe fd08 	bl	8008e88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	3301      	adds	r3, #1
 800a47c:	607b      	str	r3, [r7, #4]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2b37      	cmp	r3, #55	; 0x37
 800a482:	d9ef      	bls.n	800a464 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a484:	480d      	ldr	r0, [pc, #52]	; (800a4bc <prvInitialiseTaskLists+0x64>)
 800a486:	f7fe fcff 	bl	8008e88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a48a:	480d      	ldr	r0, [pc, #52]	; (800a4c0 <prvInitialiseTaskLists+0x68>)
 800a48c:	f7fe fcfc 	bl	8008e88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a490:	480c      	ldr	r0, [pc, #48]	; (800a4c4 <prvInitialiseTaskLists+0x6c>)
 800a492:	f7fe fcf9 	bl	8008e88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a496:	480c      	ldr	r0, [pc, #48]	; (800a4c8 <prvInitialiseTaskLists+0x70>)
 800a498:	f7fe fcf6 	bl	8008e88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a49c:	480b      	ldr	r0, [pc, #44]	; (800a4cc <prvInitialiseTaskLists+0x74>)
 800a49e:	f7fe fcf3 	bl	8008e88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a4a2:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <prvInitialiseTaskLists+0x78>)
 800a4a4:	4a05      	ldr	r2, [pc, #20]	; (800a4bc <prvInitialiseTaskLists+0x64>)
 800a4a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a4a8:	4b0a      	ldr	r3, [pc, #40]	; (800a4d4 <prvInitialiseTaskLists+0x7c>)
 800a4aa:	4a05      	ldr	r2, [pc, #20]	; (800a4c0 <prvInitialiseTaskLists+0x68>)
 800a4ac:	601a      	str	r2, [r3, #0]
}
 800a4ae:	bf00      	nop
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	240007b0 	.word	0x240007b0
 800a4bc:	24000c10 	.word	0x24000c10
 800a4c0:	24000c24 	.word	0x24000c24
 800a4c4:	24000c40 	.word	0x24000c40
 800a4c8:	24000c54 	.word	0x24000c54
 800a4cc:	24000c6c 	.word	0x24000c6c
 800a4d0:	24000c38 	.word	0x24000c38
 800a4d4:	24000c3c 	.word	0x24000c3c

0800a4d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a4de:	e019      	b.n	800a514 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a4e0:	f000 fdbc 	bl	800b05c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4e4:	4b0f      	ldr	r3, [pc, #60]	; (800a524 <prvCheckTasksWaitingTermination+0x4c>)
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	3304      	adds	r3, #4
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7fe fd53 	bl	8008f9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a4f6:	4b0c      	ldr	r3, [pc, #48]	; (800a528 <prvCheckTasksWaitingTermination+0x50>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	4a0a      	ldr	r2, [pc, #40]	; (800a528 <prvCheckTasksWaitingTermination+0x50>)
 800a4fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a500:	4b0a      	ldr	r3, [pc, #40]	; (800a52c <prvCheckTasksWaitingTermination+0x54>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	3b01      	subs	r3, #1
 800a506:	4a09      	ldr	r2, [pc, #36]	; (800a52c <prvCheckTasksWaitingTermination+0x54>)
 800a508:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a50a:	f000 fdd5 	bl	800b0b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f80e 	bl	800a530 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a514:	4b05      	ldr	r3, [pc, #20]	; (800a52c <prvCheckTasksWaitingTermination+0x54>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d1e1      	bne.n	800a4e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a51c:	bf00      	nop
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	24000c54 	.word	0x24000c54
 800a528:	24000c80 	.word	0x24000c80
 800a52c:	24000c68 	.word	0x24000c68

0800a530 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d108      	bne.n	800a554 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a546:	4618      	mov	r0, r3
 800a548:	f000 ff64 	bl	800b414 <vPortFree>
				vPortFree( pxTCB );
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 ff61 	bl	800b414 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a552:	e017      	b.n	800a584 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d103      	bne.n	800a566 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 ff58 	bl	800b414 <vPortFree>
	}
 800a564:	e00e      	b.n	800a584 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d009      	beq.n	800a584 <prvDeleteTCB+0x54>
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	60fb      	str	r3, [r7, #12]
 800a582:	e7fe      	b.n	800a582 <prvDeleteTCB+0x52>
	}
 800a584:	bf00      	nop
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a592:	4b0c      	ldr	r3, [pc, #48]	; (800a5c4 <prvResetNextTaskUnblockTime+0x38>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d104      	bne.n	800a5a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a59c:	4b0a      	ldr	r3, [pc, #40]	; (800a5c8 <prvResetNextTaskUnblockTime+0x3c>)
 800a59e:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a5a4:	e008      	b.n	800a5b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5a6:	4b07      	ldr	r3, [pc, #28]	; (800a5c4 <prvResetNextTaskUnblockTime+0x38>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	4a04      	ldr	r2, [pc, #16]	; (800a5c8 <prvResetNextTaskUnblockTime+0x3c>)
 800a5b6:	6013      	str	r3, [r2, #0]
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr
 800a5c4:	24000c38 	.word	0x24000c38
 800a5c8:	24000ca0 	.word	0x24000ca0

0800a5cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a5d2:	4b0b      	ldr	r3, [pc, #44]	; (800a600 <xTaskGetSchedulerState+0x34>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d102      	bne.n	800a5e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	607b      	str	r3, [r7, #4]
 800a5de:	e008      	b.n	800a5f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5e0:	4b08      	ldr	r3, [pc, #32]	; (800a604 <xTaskGetSchedulerState+0x38>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d102      	bne.n	800a5ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	607b      	str	r3, [r7, #4]
 800a5ec:	e001      	b.n	800a5f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a5f2:	687b      	ldr	r3, [r7, #4]
	}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr
 800a600:	24000c8c 	.word	0x24000c8c
 800a604:	24000ca8 	.word	0x24000ca8

0800a608 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b086      	sub	sp, #24
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a614:	2300      	movs	r3, #0
 800a616:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d054      	beq.n	800a6c8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a61e:	4b2d      	ldr	r3, [pc, #180]	; (800a6d4 <xTaskPriorityDisinherit+0xcc>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	429a      	cmp	r2, r3
 800a626:	d009      	beq.n	800a63c <xTaskPriorityDisinherit+0x34>
 800a628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62c:	f383 8811 	msr	BASEPRI, r3
 800a630:	f3bf 8f6f 	isb	sy
 800a634:	f3bf 8f4f 	dsb	sy
 800a638:	60fb      	str	r3, [r7, #12]
 800a63a:	e7fe      	b.n	800a63a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a640:	2b00      	cmp	r3, #0
 800a642:	d109      	bne.n	800a658 <xTaskPriorityDisinherit+0x50>
 800a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	60bb      	str	r3, [r7, #8]
 800a656:	e7fe      	b.n	800a656 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a65c:	1e5a      	subs	r2, r3, #1
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d02c      	beq.n	800a6c8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a672:	2b00      	cmp	r3, #0
 800a674:	d128      	bne.n	800a6c8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	3304      	adds	r3, #4
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7fe fc8e 	bl	8008f9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a698:	4b0f      	ldr	r3, [pc, #60]	; (800a6d8 <xTaskPriorityDisinherit+0xd0>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d903      	bls.n	800a6a8 <xTaskPriorityDisinherit+0xa0>
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a4:	4a0c      	ldr	r2, [pc, #48]	; (800a6d8 <xTaskPriorityDisinherit+0xd0>)
 800a6a6:	6013      	str	r3, [r2, #0]
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ac:	4613      	mov	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	4413      	add	r3, r2
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	4a09      	ldr	r2, [pc, #36]	; (800a6dc <xTaskPriorityDisinherit+0xd4>)
 800a6b6:	441a      	add	r2, r3
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	3304      	adds	r3, #4
 800a6bc:	4619      	mov	r1, r3
 800a6be:	4610      	mov	r0, r2
 800a6c0:	f7fe fc0f 	bl	8008ee2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a6c8:	697b      	ldr	r3, [r7, #20]
	}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3718      	adds	r7, #24
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	240007ac 	.word	0x240007ac
 800a6d8:	24000c88 	.word	0x24000c88
 800a6dc:	240007b0 	.word	0x240007b0

0800a6e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a6ea:	4b21      	ldr	r3, [pc, #132]	; (800a770 <prvAddCurrentTaskToDelayedList+0x90>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6f0:	4b20      	ldr	r3, [pc, #128]	; (800a774 <prvAddCurrentTaskToDelayedList+0x94>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	3304      	adds	r3, #4
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fe fc50 	bl	8008f9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a702:	d10a      	bne.n	800a71a <prvAddCurrentTaskToDelayedList+0x3a>
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d007      	beq.n	800a71a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a70a:	4b1a      	ldr	r3, [pc, #104]	; (800a774 <prvAddCurrentTaskToDelayedList+0x94>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3304      	adds	r3, #4
 800a710:	4619      	mov	r1, r3
 800a712:	4819      	ldr	r0, [pc, #100]	; (800a778 <prvAddCurrentTaskToDelayedList+0x98>)
 800a714:	f7fe fbe5 	bl	8008ee2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a718:	e026      	b.n	800a768 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4413      	add	r3, r2
 800a720:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a722:	4b14      	ldr	r3, [pc, #80]	; (800a774 <prvAddCurrentTaskToDelayedList+0x94>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68ba      	ldr	r2, [r7, #8]
 800a728:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d209      	bcs.n	800a746 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a732:	4b12      	ldr	r3, [pc, #72]	; (800a77c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	4b0f      	ldr	r3, [pc, #60]	; (800a774 <prvAddCurrentTaskToDelayedList+0x94>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	3304      	adds	r3, #4
 800a73c:	4619      	mov	r1, r3
 800a73e:	4610      	mov	r0, r2
 800a740:	f7fe fbf3 	bl	8008f2a <vListInsert>
}
 800a744:	e010      	b.n	800a768 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a746:	4b0e      	ldr	r3, [pc, #56]	; (800a780 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	4b0a      	ldr	r3, [pc, #40]	; (800a774 <prvAddCurrentTaskToDelayedList+0x94>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	3304      	adds	r3, #4
 800a750:	4619      	mov	r1, r3
 800a752:	4610      	mov	r0, r2
 800a754:	f7fe fbe9 	bl	8008f2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a758:	4b0a      	ldr	r3, [pc, #40]	; (800a784 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68ba      	ldr	r2, [r7, #8]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d202      	bcs.n	800a768 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a762:	4a08      	ldr	r2, [pc, #32]	; (800a784 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	6013      	str	r3, [r2, #0]
}
 800a768:	bf00      	nop
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	24000c84 	.word	0x24000c84
 800a774:	240007ac 	.word	0x240007ac
 800a778:	24000c6c 	.word	0x24000c6c
 800a77c:	24000c3c 	.word	0x24000c3c
 800a780:	24000c38 	.word	0x24000c38
 800a784:	24000ca0 	.word	0x24000ca0

0800a788 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b08a      	sub	sp, #40	; 0x28
 800a78c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a78e:	2300      	movs	r3, #0
 800a790:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a792:	f000 faff 	bl	800ad94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a796:	4b1c      	ldr	r3, [pc, #112]	; (800a808 <xTimerCreateTimerTask+0x80>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d021      	beq.n	800a7e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a7a6:	1d3a      	adds	r2, r7, #4
 800a7a8:	f107 0108 	add.w	r1, r7, #8
 800a7ac:	f107 030c 	add.w	r3, r7, #12
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7fe fb4f 	bl	8008e54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a7b6:	6879      	ldr	r1, [r7, #4]
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	9202      	str	r2, [sp, #8]
 800a7be:	9301      	str	r3, [sp, #4]
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	460a      	mov	r2, r1
 800a7c8:	4910      	ldr	r1, [pc, #64]	; (800a80c <xTimerCreateTimerTask+0x84>)
 800a7ca:	4811      	ldr	r0, [pc, #68]	; (800a810 <xTimerCreateTimerTask+0x88>)
 800a7cc:	f7ff f8e4 	bl	8009998 <xTaskCreateStatic>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	4b10      	ldr	r3, [pc, #64]	; (800a814 <xTimerCreateTimerTask+0x8c>)
 800a7d4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a7d6:	4b0f      	ldr	r3, [pc, #60]	; (800a814 <xTimerCreateTimerTask+0x8c>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d001      	beq.n	800a7e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d109      	bne.n	800a7fc <xTimerCreateTimerTask+0x74>
 800a7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ec:	f383 8811 	msr	BASEPRI, r3
 800a7f0:	f3bf 8f6f 	isb	sy
 800a7f4:	f3bf 8f4f 	dsb	sy
 800a7f8:	613b      	str	r3, [r7, #16]
 800a7fa:	e7fe      	b.n	800a7fa <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a7fc:	697b      	ldr	r3, [r7, #20]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3718      	adds	r7, #24
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	24000cdc 	.word	0x24000cdc
 800a80c:	0800b7dc 	.word	0x0800b7dc
 800a810:	0800a949 	.word	0x0800a949
 800a814:	24000ce0 	.word	0x24000ce0

0800a818 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b08a      	sub	sp, #40	; 0x28
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
 800a824:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a826:	2300      	movs	r3, #0
 800a828:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d109      	bne.n	800a844 <xTimerGenericCommand+0x2c>
 800a830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	623b      	str	r3, [r7, #32]
 800a842:	e7fe      	b.n	800a842 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a844:	4b19      	ldr	r3, [pc, #100]	; (800a8ac <xTimerGenericCommand+0x94>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d02a      	beq.n	800a8a2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	2b05      	cmp	r3, #5
 800a85c:	dc18      	bgt.n	800a890 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a85e:	f7ff feb5 	bl	800a5cc <xTaskGetSchedulerState>
 800a862:	4603      	mov	r3, r0
 800a864:	2b02      	cmp	r3, #2
 800a866:	d109      	bne.n	800a87c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a868:	4b10      	ldr	r3, [pc, #64]	; (800a8ac <xTimerGenericCommand+0x94>)
 800a86a:	6818      	ldr	r0, [r3, #0]
 800a86c:	f107 0110 	add.w	r1, r7, #16
 800a870:	2300      	movs	r3, #0
 800a872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a874:	f7fe fcba 	bl	80091ec <xQueueGenericSend>
 800a878:	6278      	str	r0, [r7, #36]	; 0x24
 800a87a:	e012      	b.n	800a8a2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a87c:	4b0b      	ldr	r3, [pc, #44]	; (800a8ac <xTimerGenericCommand+0x94>)
 800a87e:	6818      	ldr	r0, [r3, #0]
 800a880:	f107 0110 	add.w	r1, r7, #16
 800a884:	2300      	movs	r3, #0
 800a886:	2200      	movs	r2, #0
 800a888:	f7fe fcb0 	bl	80091ec <xQueueGenericSend>
 800a88c:	6278      	str	r0, [r7, #36]	; 0x24
 800a88e:	e008      	b.n	800a8a2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a890:	4b06      	ldr	r3, [pc, #24]	; (800a8ac <xTimerGenericCommand+0x94>)
 800a892:	6818      	ldr	r0, [r3, #0]
 800a894:	f107 0110 	add.w	r1, r7, #16
 800a898:	2300      	movs	r3, #0
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	f7fe fda0 	bl	80093e0 <xQueueGenericSendFromISR>
 800a8a0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3728      	adds	r7, #40	; 0x28
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	24000cdc 	.word	0x24000cdc

0800a8b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b088      	sub	sp, #32
 800a8b4:	af02      	add	r7, sp, #8
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8ba:	4b22      	ldr	r3, [pc, #136]	; (800a944 <prvProcessExpiredTimer+0x94>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	3304      	adds	r3, #4
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7fe fb67 	bl	8008f9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8d4:	f003 0304 	and.w	r3, r3, #4
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d021      	beq.n	800a920 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	699a      	ldr	r2, [r3, #24]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	18d1      	adds	r1, r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	6978      	ldr	r0, [r7, #20]
 800a8ea:	f000 f8d1 	bl	800aa90 <prvInsertTimerInActiveList>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d01e      	beq.n	800a932 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	6978      	ldr	r0, [r7, #20]
 800a900:	f7ff ff8a 	bl	800a818 <xTimerGenericCommand>
 800a904:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d112      	bne.n	800a932 <prvProcessExpiredTimer+0x82>
 800a90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a910:	f383 8811 	msr	BASEPRI, r3
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	f3bf 8f4f 	dsb	sy
 800a91c:	60fb      	str	r3, [r7, #12]
 800a91e:	e7fe      	b.n	800a91e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a926:	f023 0301 	bic.w	r3, r3, #1
 800a92a:	b2da      	uxtb	r2, r3
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	6978      	ldr	r0, [r7, #20]
 800a938:	4798      	blx	r3
}
 800a93a:	bf00      	nop
 800a93c:	3718      	adds	r7, #24
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	24000cd4 	.word	0x24000cd4

0800a948 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a950:	f107 0308 	add.w	r3, r7, #8
 800a954:	4618      	mov	r0, r3
 800a956:	f000 f857 	bl	800aa08 <prvGetNextExpireTime>
 800a95a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	4619      	mov	r1, r3
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f000 f803 	bl	800a96c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a966:	f000 f8d5 	bl	800ab14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a96a:	e7f1      	b.n	800a950 <prvTimerTask+0x8>

0800a96c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a976:	f7ff fa45 	bl	8009e04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a97a:	f107 0308 	add.w	r3, r7, #8
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 f866 	bl	800aa50 <prvSampleTimeNow>
 800a984:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d130      	bne.n	800a9ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10a      	bne.n	800a9a8 <prvProcessTimerOrBlockTask+0x3c>
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	429a      	cmp	r2, r3
 800a998:	d806      	bhi.n	800a9a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a99a:	f7ff fa41 	bl	8009e20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a99e:	68f9      	ldr	r1, [r7, #12]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7ff ff85 	bl	800a8b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a9a6:	e024      	b.n	800a9f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d008      	beq.n	800a9c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a9ae:	4b13      	ldr	r3, [pc, #76]	; (800a9fc <prvProcessTimerOrBlockTask+0x90>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <prvProcessTimerOrBlockTask+0x50>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e000      	b.n	800a9be <prvProcessTimerOrBlockTask+0x52>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a9c0:	4b0f      	ldr	r3, [pc, #60]	; (800aa00 <prvProcessTimerOrBlockTask+0x94>)
 800a9c2:	6818      	ldr	r0, [r3, #0]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	683a      	ldr	r2, [r7, #0]
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	f7fe ffaf 	bl	8009930 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a9d2:	f7ff fa25 	bl	8009e20 <xTaskResumeAll>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10a      	bne.n	800a9f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a9dc:	4b09      	ldr	r3, [pc, #36]	; (800aa04 <prvProcessTimerOrBlockTask+0x98>)
 800a9de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9e2:	601a      	str	r2, [r3, #0]
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	f3bf 8f6f 	isb	sy
}
 800a9ec:	e001      	b.n	800a9f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a9ee:	f7ff fa17 	bl	8009e20 <xTaskResumeAll>
}
 800a9f2:	bf00      	nop
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	24000cd8 	.word	0x24000cd8
 800aa00:	24000cdc 	.word	0x24000cdc
 800aa04:	e000ed04 	.word	0xe000ed04

0800aa08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa10:	4b0e      	ldr	r3, [pc, #56]	; (800aa4c <prvGetNextExpireTime+0x44>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <prvGetNextExpireTime+0x16>
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	e000      	b.n	800aa20 <prvGetNextExpireTime+0x18>
 800aa1e:	2200      	movs	r2, #0
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d105      	bne.n	800aa38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa2c:	4b07      	ldr	r3, [pc, #28]	; (800aa4c <prvGetNextExpireTime+0x44>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	60fb      	str	r3, [r7, #12]
 800aa36:	e001      	b.n	800aa3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	24000cd4 	.word	0x24000cd4

0800aa50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aa58:	f7ff fa7e 	bl	8009f58 <xTaskGetTickCount>
 800aa5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aa5e:	4b0b      	ldr	r3, [pc, #44]	; (800aa8c <prvSampleTimeNow+0x3c>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d205      	bcs.n	800aa74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aa68:	f000 f930 	bl	800accc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	e002      	b.n	800aa7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aa7a:	4a04      	ldr	r2, [pc, #16]	; (800aa8c <prvSampleTimeNow+0x3c>)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aa80:	68fb      	ldr	r3, [r7, #12]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	24000ce4 	.word	0x24000ce4

0800aa90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
 800aa9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d812      	bhi.n	800aadc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	1ad2      	subs	r2, r2, r3
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	699b      	ldr	r3, [r3, #24]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d302      	bcc.n	800aaca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aac4:	2301      	movs	r3, #1
 800aac6:	617b      	str	r3, [r7, #20]
 800aac8:	e01b      	b.n	800ab02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aaca:	4b10      	ldr	r3, [pc, #64]	; (800ab0c <prvInsertTimerInActiveList+0x7c>)
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	3304      	adds	r3, #4
 800aad2:	4619      	mov	r1, r3
 800aad4:	4610      	mov	r0, r2
 800aad6:	f7fe fa28 	bl	8008f2a <vListInsert>
 800aada:	e012      	b.n	800ab02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d206      	bcs.n	800aaf2 <prvInsertTimerInActiveList+0x62>
 800aae4:	68ba      	ldr	r2, [r7, #8]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d302      	bcc.n	800aaf2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aaec:	2301      	movs	r3, #1
 800aaee:	617b      	str	r3, [r7, #20]
 800aaf0:	e007      	b.n	800ab02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aaf2:	4b07      	ldr	r3, [pc, #28]	; (800ab10 <prvInsertTimerInActiveList+0x80>)
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	3304      	adds	r3, #4
 800aafa:	4619      	mov	r1, r3
 800aafc:	4610      	mov	r0, r2
 800aafe:	f7fe fa14 	bl	8008f2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab02:	697b      	ldr	r3, [r7, #20]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3718      	adds	r7, #24
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	24000cd8 	.word	0x24000cd8
 800ab10:	24000cd4 	.word	0x24000cd4

0800ab14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b08e      	sub	sp, #56	; 0x38
 800ab18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab1a:	e0c6      	b.n	800acaa <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	da17      	bge.n	800ab52 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ab22:	1d3b      	adds	r3, r7, #4
 800ab24:	3304      	adds	r3, #4
 800ab26:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ab28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d109      	bne.n	800ab42 <prvProcessReceivedCommands+0x2e>
 800ab2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	61fb      	str	r3, [r7, #28]
 800ab40:	e7fe      	b.n	800ab40 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ab42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab48:	6850      	ldr	r0, [r2, #4]
 800ab4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab4c:	6892      	ldr	r2, [r2, #8]
 800ab4e:	4611      	mov	r1, r2
 800ab50:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f2c0 80a7 	blt.w	800aca8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ab5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab60:	695b      	ldr	r3, [r3, #20]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d004      	beq.n	800ab70 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab68:	3304      	adds	r3, #4
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fe fa16 	bl	8008f9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab70:	463b      	mov	r3, r7
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7ff ff6c 	bl	800aa50 <prvSampleTimeNow>
 800ab78:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2b09      	cmp	r3, #9
 800ab7e:	f200 8094 	bhi.w	800acaa <prvProcessReceivedCommands+0x196>
 800ab82:	a201      	add	r2, pc, #4	; (adr r2, 800ab88 <prvProcessReceivedCommands+0x74>)
 800ab84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab88:	0800abb1 	.word	0x0800abb1
 800ab8c:	0800abb1 	.word	0x0800abb1
 800ab90:	0800abb1 	.word	0x0800abb1
 800ab94:	0800ac23 	.word	0x0800ac23
 800ab98:	0800ac37 	.word	0x0800ac37
 800ab9c:	0800ac7f 	.word	0x0800ac7f
 800aba0:	0800abb1 	.word	0x0800abb1
 800aba4:	0800abb1 	.word	0x0800abb1
 800aba8:	0800ac23 	.word	0x0800ac23
 800abac:	0800ac37 	.word	0x0800ac37
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800abb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abb6:	f043 0301 	orr.w	r3, r3, #1
 800abba:	b2da      	uxtb	r2, r3
 800abbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	18d1      	adds	r1, r2, r3
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abd0:	f7ff ff5e 	bl	800aa90 <prvInsertTimerInActiveList>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d067      	beq.n	800acaa <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abe0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abe8:	f003 0304 	and.w	r3, r3, #4
 800abec:	2b00      	cmp	r3, #0
 800abee:	d05c      	beq.n	800acaa <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800abf0:	68ba      	ldr	r2, [r7, #8]
 800abf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf4:	699b      	ldr	r3, [r3, #24]
 800abf6:	441a      	add	r2, r3
 800abf8:	2300      	movs	r3, #0
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	2300      	movs	r3, #0
 800abfe:	2100      	movs	r1, #0
 800ac00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac02:	f7ff fe09 	bl	800a818 <xTimerGenericCommand>
 800ac06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac08:	6a3b      	ldr	r3, [r7, #32]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d14d      	bne.n	800acaa <prvProcessReceivedCommands+0x196>
 800ac0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac12:	f383 8811 	msr	BASEPRI, r3
 800ac16:	f3bf 8f6f 	isb	sy
 800ac1a:	f3bf 8f4f 	dsb	sy
 800ac1e:	61bb      	str	r3, [r7, #24]
 800ac20:	e7fe      	b.n	800ac20 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac28:	f023 0301 	bic.w	r3, r3, #1
 800ac2c:	b2da      	uxtb	r2, r3
 800ac2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ac34:	e039      	b.n	800acaa <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac3c:	f043 0301 	orr.w	r3, r3, #1
 800ac40:	b2da      	uxtb	r2, r3
 800ac42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d109      	bne.n	800ac6a <prvProcessReceivedCommands+0x156>
 800ac56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5a:	f383 8811 	msr	BASEPRI, r3
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	617b      	str	r3, [r7, #20]
 800ac68:	e7fe      	b.n	800ac68 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ac6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6c:	699a      	ldr	r2, [r3, #24]
 800ac6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac70:	18d1      	adds	r1, r2, r3
 800ac72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac78:	f7ff ff0a 	bl	800aa90 <prvInsertTimerInActiveList>
					break;
 800ac7c:	e015      	b.n	800acaa <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ac7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac84:	f003 0302 	and.w	r3, r3, #2
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d103      	bne.n	800ac94 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800ac8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac8e:	f000 fbc1 	bl	800b414 <vPortFree>
 800ac92:	e00a      	b.n	800acaa <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac9a:	f023 0301 	bic.w	r3, r3, #1
 800ac9e:	b2da      	uxtb	r2, r3
 800aca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aca6:	e000      	b.n	800acaa <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aca8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800acaa:	4b07      	ldr	r3, [pc, #28]	; (800acc8 <prvProcessReceivedCommands+0x1b4>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	1d39      	adds	r1, r7, #4
 800acb0:	2200      	movs	r2, #0
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fe fc28 	bl	8009508 <xQueueReceive>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f47f af2e 	bne.w	800ab1c <prvProcessReceivedCommands+0x8>
	}
}
 800acc0:	bf00      	nop
 800acc2:	3730      	adds	r7, #48	; 0x30
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	24000cdc 	.word	0x24000cdc

0800accc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b088      	sub	sp, #32
 800acd0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800acd2:	e047      	b.n	800ad64 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800acd4:	4b2d      	ldr	r3, [pc, #180]	; (800ad8c <prvSwitchTimerLists+0xc0>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acde:	4b2b      	ldr	r3, [pc, #172]	; (800ad8c <prvSwitchTimerLists+0xc0>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	3304      	adds	r3, #4
 800acec:	4618      	mov	r0, r3
 800acee:	f7fe f955 	bl	8008f9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	6a1b      	ldr	r3, [r3, #32]
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad00:	f003 0304 	and.w	r3, r3, #4
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d02d      	beq.n	800ad64 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	4413      	add	r3, r2
 800ad10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d90e      	bls.n	800ad38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad26:	4b19      	ldr	r3, [pc, #100]	; (800ad8c <prvSwitchTimerLists+0xc0>)
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	4619      	mov	r1, r3
 800ad30:	4610      	mov	r0, r2
 800ad32:	f7fe f8fa 	bl	8008f2a <vListInsert>
 800ad36:	e015      	b.n	800ad64 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad38:	2300      	movs	r3, #0
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	693a      	ldr	r2, [r7, #16]
 800ad40:	2100      	movs	r1, #0
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f7ff fd68 	bl	800a818 <xTimerGenericCommand>
 800ad48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d109      	bne.n	800ad64 <prvSwitchTimerLists+0x98>
 800ad50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad54:	f383 8811 	msr	BASEPRI, r3
 800ad58:	f3bf 8f6f 	isb	sy
 800ad5c:	f3bf 8f4f 	dsb	sy
 800ad60:	603b      	str	r3, [r7, #0]
 800ad62:	e7fe      	b.n	800ad62 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad64:	4b09      	ldr	r3, [pc, #36]	; (800ad8c <prvSwitchTimerLists+0xc0>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1b2      	bne.n	800acd4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ad6e:	4b07      	ldr	r3, [pc, #28]	; (800ad8c <prvSwitchTimerLists+0xc0>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ad74:	4b06      	ldr	r3, [pc, #24]	; (800ad90 <prvSwitchTimerLists+0xc4>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a04      	ldr	r2, [pc, #16]	; (800ad8c <prvSwitchTimerLists+0xc0>)
 800ad7a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ad7c:	4a04      	ldr	r2, [pc, #16]	; (800ad90 <prvSwitchTimerLists+0xc4>)
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	6013      	str	r3, [r2, #0]
}
 800ad82:	bf00      	nop
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	24000cd4 	.word	0x24000cd4
 800ad90:	24000cd8 	.word	0x24000cd8

0800ad94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ad9a:	f000 f95f 	bl	800b05c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ad9e:	4b15      	ldr	r3, [pc, #84]	; (800adf4 <prvCheckForValidListAndQueue+0x60>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d120      	bne.n	800ade8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ada6:	4814      	ldr	r0, [pc, #80]	; (800adf8 <prvCheckForValidListAndQueue+0x64>)
 800ada8:	f7fe f86e 	bl	8008e88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800adac:	4813      	ldr	r0, [pc, #76]	; (800adfc <prvCheckForValidListAndQueue+0x68>)
 800adae:	f7fe f86b 	bl	8008e88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800adb2:	4b13      	ldr	r3, [pc, #76]	; (800ae00 <prvCheckForValidListAndQueue+0x6c>)
 800adb4:	4a10      	ldr	r2, [pc, #64]	; (800adf8 <prvCheckForValidListAndQueue+0x64>)
 800adb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800adb8:	4b12      	ldr	r3, [pc, #72]	; (800ae04 <prvCheckForValidListAndQueue+0x70>)
 800adba:	4a10      	ldr	r2, [pc, #64]	; (800adfc <prvCheckForValidListAndQueue+0x68>)
 800adbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800adbe:	2300      	movs	r3, #0
 800adc0:	9300      	str	r3, [sp, #0]
 800adc2:	4b11      	ldr	r3, [pc, #68]	; (800ae08 <prvCheckForValidListAndQueue+0x74>)
 800adc4:	4a11      	ldr	r2, [pc, #68]	; (800ae0c <prvCheckForValidListAndQueue+0x78>)
 800adc6:	2110      	movs	r1, #16
 800adc8:	200a      	movs	r0, #10
 800adca:	f7fe f979 	bl	80090c0 <xQueueGenericCreateStatic>
 800adce:	4602      	mov	r2, r0
 800add0:	4b08      	ldr	r3, [pc, #32]	; (800adf4 <prvCheckForValidListAndQueue+0x60>)
 800add2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800add4:	4b07      	ldr	r3, [pc, #28]	; (800adf4 <prvCheckForValidListAndQueue+0x60>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d005      	beq.n	800ade8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800addc:	4b05      	ldr	r3, [pc, #20]	; (800adf4 <prvCheckForValidListAndQueue+0x60>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	490b      	ldr	r1, [pc, #44]	; (800ae10 <prvCheckForValidListAndQueue+0x7c>)
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fe fd7c 	bl	80098e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ade8:	f000 f966 	bl	800b0b8 <vPortExitCritical>
}
 800adec:	bf00      	nop
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	24000cdc 	.word	0x24000cdc
 800adf8:	24000cac 	.word	0x24000cac
 800adfc:	24000cc0 	.word	0x24000cc0
 800ae00:	24000cd4 	.word	0x24000cd4
 800ae04:	24000cd8 	.word	0x24000cd8
 800ae08:	24000d88 	.word	0x24000d88
 800ae0c:	24000ce8 	.word	0x24000ce8
 800ae10:	0800b7e4 	.word	0x0800b7e4

0800ae14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	3b04      	subs	r3, #4
 800ae24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ae2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	3b04      	subs	r3, #4
 800ae32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	f023 0201 	bic.w	r2, r3, #1
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	3b04      	subs	r3, #4
 800ae42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ae44:	4a0c      	ldr	r2, [pc, #48]	; (800ae78 <pxPortInitialiseStack+0x64>)
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	3b14      	subs	r3, #20
 800ae4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	3b04      	subs	r3, #4
 800ae5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f06f 0202 	mvn.w	r2, #2
 800ae62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	3b20      	subs	r3, #32
 800ae68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3714      	adds	r7, #20
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr
 800ae78:	0800ae7d 	.word	0x0800ae7d

0800ae7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ae86:	4b11      	ldr	r3, [pc, #68]	; (800aecc <prvTaskExitError+0x50>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8e:	d009      	beq.n	800aea4 <prvTaskExitError+0x28>
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	60fb      	str	r3, [r7, #12]
 800aea2:	e7fe      	b.n	800aea2 <prvTaskExitError+0x26>
 800aea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea8:	f383 8811 	msr	BASEPRI, r3
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	f3bf 8f4f 	dsb	sy
 800aeb4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aeb6:	bf00      	nop
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d0fc      	beq.n	800aeb8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aebe:	bf00      	nop
 800aec0:	3714      	adds	r7, #20
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	24000010 	.word	0x24000010

0800aed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aed0:	4b07      	ldr	r3, [pc, #28]	; (800aef0 <pxCurrentTCBConst2>)
 800aed2:	6819      	ldr	r1, [r3, #0]
 800aed4:	6808      	ldr	r0, [r1, #0]
 800aed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeda:	f380 8809 	msr	PSP, r0
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f04f 0000 	mov.w	r0, #0
 800aee6:	f380 8811 	msr	BASEPRI, r0
 800aeea:	4770      	bx	lr
 800aeec:	f3af 8000 	nop.w

0800aef0 <pxCurrentTCBConst2>:
 800aef0:	240007ac 	.word	0x240007ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aef4:	bf00      	nop
 800aef6:	bf00      	nop

0800aef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aef8:	4808      	ldr	r0, [pc, #32]	; (800af1c <prvPortStartFirstTask+0x24>)
 800aefa:	6800      	ldr	r0, [r0, #0]
 800aefc:	6800      	ldr	r0, [r0, #0]
 800aefe:	f380 8808 	msr	MSP, r0
 800af02:	f04f 0000 	mov.w	r0, #0
 800af06:	f380 8814 	msr	CONTROL, r0
 800af0a:	b662      	cpsie	i
 800af0c:	b661      	cpsie	f
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	df00      	svc	0
 800af18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af1a:	bf00      	nop
 800af1c:	e000ed08 	.word	0xe000ed08

0800af20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800af26:	4b44      	ldr	r3, [pc, #272]	; (800b038 <xPortStartScheduler+0x118>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a44      	ldr	r2, [pc, #272]	; (800b03c <xPortStartScheduler+0x11c>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d109      	bne.n	800af44 <xPortStartScheduler+0x24>
 800af30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af34:	f383 8811 	msr	BASEPRI, r3
 800af38:	f3bf 8f6f 	isb	sy
 800af3c:	f3bf 8f4f 	dsb	sy
 800af40:	613b      	str	r3, [r7, #16]
 800af42:	e7fe      	b.n	800af42 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800af44:	4b3c      	ldr	r3, [pc, #240]	; (800b038 <xPortStartScheduler+0x118>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a3d      	ldr	r2, [pc, #244]	; (800b040 <xPortStartScheduler+0x120>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d109      	bne.n	800af62 <xPortStartScheduler+0x42>
 800af4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af52:	f383 8811 	msr	BASEPRI, r3
 800af56:	f3bf 8f6f 	isb	sy
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	60fb      	str	r3, [r7, #12]
 800af60:	e7fe      	b.n	800af60 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800af62:	4b38      	ldr	r3, [pc, #224]	; (800b044 <xPortStartScheduler+0x124>)
 800af64:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	22ff      	movs	r2, #255	; 0xff
 800af72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af7c:	78fb      	ldrb	r3, [r7, #3]
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800af84:	b2da      	uxtb	r2, r3
 800af86:	4b30      	ldr	r3, [pc, #192]	; (800b048 <xPortStartScheduler+0x128>)
 800af88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800af8a:	4b30      	ldr	r3, [pc, #192]	; (800b04c <xPortStartScheduler+0x12c>)
 800af8c:	2207      	movs	r2, #7
 800af8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af90:	e009      	b.n	800afa6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800af92:	4b2e      	ldr	r3, [pc, #184]	; (800b04c <xPortStartScheduler+0x12c>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	3b01      	subs	r3, #1
 800af98:	4a2c      	ldr	r2, [pc, #176]	; (800b04c <xPortStartScheduler+0x12c>)
 800af9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800af9c:	78fb      	ldrb	r3, [r7, #3]
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	005b      	lsls	r3, r3, #1
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afa6:	78fb      	ldrb	r3, [r7, #3]
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afae:	2b80      	cmp	r3, #128	; 0x80
 800afb0:	d0ef      	beq.n	800af92 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800afb2:	4b26      	ldr	r3, [pc, #152]	; (800b04c <xPortStartScheduler+0x12c>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f1c3 0307 	rsb	r3, r3, #7
 800afba:	2b04      	cmp	r3, #4
 800afbc:	d009      	beq.n	800afd2 <xPortStartScheduler+0xb2>
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	60bb      	str	r3, [r7, #8]
 800afd0:	e7fe      	b.n	800afd0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800afd2:	4b1e      	ldr	r3, [pc, #120]	; (800b04c <xPortStartScheduler+0x12c>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	021b      	lsls	r3, r3, #8
 800afd8:	4a1c      	ldr	r2, [pc, #112]	; (800b04c <xPortStartScheduler+0x12c>)
 800afda:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800afdc:	4b1b      	ldr	r3, [pc, #108]	; (800b04c <xPortStartScheduler+0x12c>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800afe4:	4a19      	ldr	r2, [pc, #100]	; (800b04c <xPortStartScheduler+0x12c>)
 800afe6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	b2da      	uxtb	r2, r3
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aff0:	4b17      	ldr	r3, [pc, #92]	; (800b050 <xPortStartScheduler+0x130>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a16      	ldr	r2, [pc, #88]	; (800b050 <xPortStartScheduler+0x130>)
 800aff6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800affa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800affc:	4b14      	ldr	r3, [pc, #80]	; (800b050 <xPortStartScheduler+0x130>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a13      	ldr	r2, [pc, #76]	; (800b050 <xPortStartScheduler+0x130>)
 800b002:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b006:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b008:	f000 f8d6 	bl	800b1b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b00c:	4b11      	ldr	r3, [pc, #68]	; (800b054 <xPortStartScheduler+0x134>)
 800b00e:	2200      	movs	r2, #0
 800b010:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b012:	f000 f8f5 	bl	800b200 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b016:	4b10      	ldr	r3, [pc, #64]	; (800b058 <xPortStartScheduler+0x138>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a0f      	ldr	r2, [pc, #60]	; (800b058 <xPortStartScheduler+0x138>)
 800b01c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b020:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b022:	f7ff ff69 	bl	800aef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b026:	f7ff f871 	bl	800a10c <vTaskSwitchContext>
	prvTaskExitError();
 800b02a:	f7ff ff27 	bl	800ae7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3718      	adds	r7, #24
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	e000ed00 	.word	0xe000ed00
 800b03c:	410fc271 	.word	0x410fc271
 800b040:	410fc270 	.word	0x410fc270
 800b044:	e000e400 	.word	0xe000e400
 800b048:	24000dd8 	.word	0x24000dd8
 800b04c:	24000ddc 	.word	0x24000ddc
 800b050:	e000ed20 	.word	0xe000ed20
 800b054:	24000010 	.word	0x24000010
 800b058:	e000ef34 	.word	0xe000ef34

0800b05c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b066:	f383 8811 	msr	BASEPRI, r3
 800b06a:	f3bf 8f6f 	isb	sy
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b074:	4b0e      	ldr	r3, [pc, #56]	; (800b0b0 <vPortEnterCritical+0x54>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	3301      	adds	r3, #1
 800b07a:	4a0d      	ldr	r2, [pc, #52]	; (800b0b0 <vPortEnterCritical+0x54>)
 800b07c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b07e:	4b0c      	ldr	r3, [pc, #48]	; (800b0b0 <vPortEnterCritical+0x54>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2b01      	cmp	r3, #1
 800b084:	d10e      	bne.n	800b0a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b086:	4b0b      	ldr	r3, [pc, #44]	; (800b0b4 <vPortEnterCritical+0x58>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d009      	beq.n	800b0a4 <vPortEnterCritical+0x48>
 800b090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	603b      	str	r3, [r7, #0]
 800b0a2:	e7fe      	b.n	800b0a2 <vPortEnterCritical+0x46>
	}
}
 800b0a4:	bf00      	nop
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr
 800b0b0:	24000010 	.word	0x24000010
 800b0b4:	e000ed04 	.word	0xe000ed04

0800b0b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b0be:	4b11      	ldr	r3, [pc, #68]	; (800b104 <vPortExitCritical+0x4c>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d109      	bne.n	800b0da <vPortExitCritical+0x22>
 800b0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ca:	f383 8811 	msr	BASEPRI, r3
 800b0ce:	f3bf 8f6f 	isb	sy
 800b0d2:	f3bf 8f4f 	dsb	sy
 800b0d6:	607b      	str	r3, [r7, #4]
 800b0d8:	e7fe      	b.n	800b0d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b0da:	4b0a      	ldr	r3, [pc, #40]	; (800b104 <vPortExitCritical+0x4c>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	4a08      	ldr	r2, [pc, #32]	; (800b104 <vPortExitCritical+0x4c>)
 800b0e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b0e4:	4b07      	ldr	r3, [pc, #28]	; (800b104 <vPortExitCritical+0x4c>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d104      	bne.n	800b0f6 <vPortExitCritical+0x3e>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b0f6:	bf00      	nop
 800b0f8:	370c      	adds	r7, #12
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr
 800b102:	bf00      	nop
 800b104:	24000010 	.word	0x24000010
	...

0800b110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b110:	f3ef 8009 	mrs	r0, PSP
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	4b15      	ldr	r3, [pc, #84]	; (800b170 <pxCurrentTCBConst>)
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	f01e 0f10 	tst.w	lr, #16
 800b120:	bf08      	it	eq
 800b122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b12a:	6010      	str	r0, [r2, #0]
 800b12c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b130:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b134:	f380 8811 	msr	BASEPRI, r0
 800b138:	f3bf 8f4f 	dsb	sy
 800b13c:	f3bf 8f6f 	isb	sy
 800b140:	f7fe ffe4 	bl	800a10c <vTaskSwitchContext>
 800b144:	f04f 0000 	mov.w	r0, #0
 800b148:	f380 8811 	msr	BASEPRI, r0
 800b14c:	bc09      	pop	{r0, r3}
 800b14e:	6819      	ldr	r1, [r3, #0]
 800b150:	6808      	ldr	r0, [r1, #0]
 800b152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b156:	f01e 0f10 	tst.w	lr, #16
 800b15a:	bf08      	it	eq
 800b15c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b160:	f380 8809 	msr	PSP, r0
 800b164:	f3bf 8f6f 	isb	sy
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop
 800b16c:	f3af 8000 	nop.w

0800b170 <pxCurrentTCBConst>:
 800b170:	240007ac 	.word	0x240007ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b174:	bf00      	nop
 800b176:	bf00      	nop

0800b178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b190:	f7fe ff04 	bl	8009f9c <xTaskIncrementTick>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d003      	beq.n	800b1a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b19a:	4b06      	ldr	r3, [pc, #24]	; (800b1b4 <SysTick_Handler+0x3c>)
 800b19c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1a0:	601a      	str	r2, [r3, #0]
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b1ac:	bf00      	nop
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	e000ed04 	.word	0xe000ed04

0800b1b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b1bc:	4b0b      	ldr	r3, [pc, #44]	; (800b1ec <vPortSetupTimerInterrupt+0x34>)
 800b1be:	2200      	movs	r2, #0
 800b1c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b1c2:	4b0b      	ldr	r3, [pc, #44]	; (800b1f0 <vPortSetupTimerInterrupt+0x38>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b1c8:	4b0a      	ldr	r3, [pc, #40]	; (800b1f4 <vPortSetupTimerInterrupt+0x3c>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a0a      	ldr	r2, [pc, #40]	; (800b1f8 <vPortSetupTimerInterrupt+0x40>)
 800b1ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b1d2:	099b      	lsrs	r3, r3, #6
 800b1d4:	4a09      	ldr	r2, [pc, #36]	; (800b1fc <vPortSetupTimerInterrupt+0x44>)
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b1da:	4b04      	ldr	r3, [pc, #16]	; (800b1ec <vPortSetupTimerInterrupt+0x34>)
 800b1dc:	2207      	movs	r2, #7
 800b1de:	601a      	str	r2, [r3, #0]
}
 800b1e0:	bf00      	nop
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	e000e010 	.word	0xe000e010
 800b1f0:	e000e018 	.word	0xe000e018
 800b1f4:	24000000 	.word	0x24000000
 800b1f8:	10624dd3 	.word	0x10624dd3
 800b1fc:	e000e014 	.word	0xe000e014

0800b200 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b200:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b210 <vPortEnableVFP+0x10>
 800b204:	6801      	ldr	r1, [r0, #0]
 800b206:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b20a:	6001      	str	r1, [r0, #0]
 800b20c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b20e:	bf00      	nop
 800b210:	e000ed88 	.word	0xe000ed88

0800b214 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b21a:	f3ef 8305 	mrs	r3, IPSR
 800b21e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2b0f      	cmp	r3, #15
 800b224:	d913      	bls.n	800b24e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b226:	4a16      	ldr	r2, [pc, #88]	; (800b280 <vPortValidateInterruptPriority+0x6c>)
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	4413      	add	r3, r2
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b230:	4b14      	ldr	r3, [pc, #80]	; (800b284 <vPortValidateInterruptPriority+0x70>)
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	7afa      	ldrb	r2, [r7, #11]
 800b236:	429a      	cmp	r2, r3
 800b238:	d209      	bcs.n	800b24e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23e:	f383 8811 	msr	BASEPRI, r3
 800b242:	f3bf 8f6f 	isb	sy
 800b246:	f3bf 8f4f 	dsb	sy
 800b24a:	607b      	str	r3, [r7, #4]
 800b24c:	e7fe      	b.n	800b24c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b24e:	4b0e      	ldr	r3, [pc, #56]	; (800b288 <vPortValidateInterruptPriority+0x74>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b256:	4b0d      	ldr	r3, [pc, #52]	; (800b28c <vPortValidateInterruptPriority+0x78>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d909      	bls.n	800b272 <vPortValidateInterruptPriority+0x5e>
 800b25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	603b      	str	r3, [r7, #0]
 800b270:	e7fe      	b.n	800b270 <vPortValidateInterruptPriority+0x5c>
	}
 800b272:	bf00      	nop
 800b274:	3714      	adds	r7, #20
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	e000e3f0 	.word	0xe000e3f0
 800b284:	24000dd8 	.word	0x24000dd8
 800b288:	e000ed0c 	.word	0xe000ed0c
 800b28c:	24000ddc 	.word	0x24000ddc

0800b290 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b08a      	sub	sp, #40	; 0x28
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b298:	2300      	movs	r3, #0
 800b29a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b29c:	f7fe fdb2 	bl	8009e04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b2a0:	4b57      	ldr	r3, [pc, #348]	; (800b400 <pvPortMalloc+0x170>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d101      	bne.n	800b2ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b2a8:	f000 f90c 	bl	800b4c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b2ac:	4b55      	ldr	r3, [pc, #340]	; (800b404 <pvPortMalloc+0x174>)
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f040 808c 	bne.w	800b3d2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d01c      	beq.n	800b2fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b2c0:	2208      	movs	r2, #8
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f003 0307 	and.w	r3, r3, #7
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d013      	beq.n	800b2fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f023 0307 	bic.w	r3, r3, #7
 800b2d8:	3308      	adds	r3, #8
 800b2da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f003 0307 	and.w	r3, r3, #7
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d009      	beq.n	800b2fa <pvPortMalloc+0x6a>
 800b2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ea:	f383 8811 	msr	BASEPRI, r3
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f3bf 8f4f 	dsb	sy
 800b2f6:	617b      	str	r3, [r7, #20]
 800b2f8:	e7fe      	b.n	800b2f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d068      	beq.n	800b3d2 <pvPortMalloc+0x142>
 800b300:	4b41      	ldr	r3, [pc, #260]	; (800b408 <pvPortMalloc+0x178>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	429a      	cmp	r2, r3
 800b308:	d863      	bhi.n	800b3d2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b30a:	4b40      	ldr	r3, [pc, #256]	; (800b40c <pvPortMalloc+0x17c>)
 800b30c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b30e:	4b3f      	ldr	r3, [pc, #252]	; (800b40c <pvPortMalloc+0x17c>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b314:	e004      	b.n	800b320 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b318:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	429a      	cmp	r2, r3
 800b328:	d903      	bls.n	800b332 <pvPortMalloc+0xa2>
 800b32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d1f1      	bne.n	800b316 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b332:	4b33      	ldr	r3, [pc, #204]	; (800b400 <pvPortMalloc+0x170>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b338:	429a      	cmp	r2, r3
 800b33a:	d04a      	beq.n	800b3d2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b33c:	6a3b      	ldr	r3, [r7, #32]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2208      	movs	r2, #8
 800b342:	4413      	add	r3, r2
 800b344:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	6a3b      	ldr	r3, [r7, #32]
 800b34c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b350:	685a      	ldr	r2, [r3, #4]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	1ad2      	subs	r2, r2, r3
 800b356:	2308      	movs	r3, #8
 800b358:	005b      	lsls	r3, r3, #1
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d91e      	bls.n	800b39c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b35e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4413      	add	r3, r2
 800b364:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	f003 0307 	and.w	r3, r3, #7
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d009      	beq.n	800b384 <pvPortMalloc+0xf4>
 800b370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	613b      	str	r3, [r7, #16]
 800b382:	e7fe      	b.n	800b382 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b386:	685a      	ldr	r2, [r3, #4]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	1ad2      	subs	r2, r2, r3
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b396:	69b8      	ldr	r0, [r7, #24]
 800b398:	f000 f8f6 	bl	800b588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b39c:	4b1a      	ldr	r3, [pc, #104]	; (800b408 <pvPortMalloc+0x178>)
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	1ad3      	subs	r3, r2, r3
 800b3a6:	4a18      	ldr	r2, [pc, #96]	; (800b408 <pvPortMalloc+0x178>)
 800b3a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b3aa:	4b17      	ldr	r3, [pc, #92]	; (800b408 <pvPortMalloc+0x178>)
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	4b18      	ldr	r3, [pc, #96]	; (800b410 <pvPortMalloc+0x180>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d203      	bcs.n	800b3be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b3b6:	4b14      	ldr	r3, [pc, #80]	; (800b408 <pvPortMalloc+0x178>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a15      	ldr	r2, [pc, #84]	; (800b410 <pvPortMalloc+0x180>)
 800b3bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c0:	685a      	ldr	r2, [r3, #4]
 800b3c2:	4b10      	ldr	r3, [pc, #64]	; (800b404 <pvPortMalloc+0x174>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	431a      	orrs	r2, r3
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b3d2:	f7fe fd25 	bl	8009e20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	f003 0307 	and.w	r3, r3, #7
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d009      	beq.n	800b3f4 <pvPortMalloc+0x164>
 800b3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	60fb      	str	r3, [r7, #12]
 800b3f2:	e7fe      	b.n	800b3f2 <pvPortMalloc+0x162>
	return pvReturn;
 800b3f4:	69fb      	ldr	r3, [r7, #28]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3728      	adds	r7, #40	; 0x28
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	240049e8 	.word	0x240049e8
 800b404:	240049f4 	.word	0x240049f4
 800b408:	240049ec 	.word	0x240049ec
 800b40c:	240049e0 	.word	0x240049e0
 800b410:	240049f0 	.word	0x240049f0

0800b414 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b086      	sub	sp, #24
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d046      	beq.n	800b4b4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b426:	2308      	movs	r3, #8
 800b428:	425b      	negs	r3, r3
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	4413      	add	r3, r2
 800b42e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	685a      	ldr	r2, [r3, #4]
 800b438:	4b20      	ldr	r3, [pc, #128]	; (800b4bc <vPortFree+0xa8>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4013      	ands	r3, r2
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d109      	bne.n	800b456 <vPortFree+0x42>
 800b442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	60fb      	str	r3, [r7, #12]
 800b454:	e7fe      	b.n	800b454 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d009      	beq.n	800b472 <vPortFree+0x5e>
 800b45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b462:	f383 8811 	msr	BASEPRI, r3
 800b466:	f3bf 8f6f 	isb	sy
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	60bb      	str	r3, [r7, #8]
 800b470:	e7fe      	b.n	800b470 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	685a      	ldr	r2, [r3, #4]
 800b476:	4b11      	ldr	r3, [pc, #68]	; (800b4bc <vPortFree+0xa8>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4013      	ands	r3, r2
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d019      	beq.n	800b4b4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d115      	bne.n	800b4b4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	685a      	ldr	r2, [r3, #4]
 800b48c:	4b0b      	ldr	r3, [pc, #44]	; (800b4bc <vPortFree+0xa8>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	43db      	mvns	r3, r3
 800b492:	401a      	ands	r2, r3
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b498:	f7fe fcb4 	bl	8009e04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	685a      	ldr	r2, [r3, #4]
 800b4a0:	4b07      	ldr	r3, [pc, #28]	; (800b4c0 <vPortFree+0xac>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	4a06      	ldr	r2, [pc, #24]	; (800b4c0 <vPortFree+0xac>)
 800b4a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b4aa:	6938      	ldr	r0, [r7, #16]
 800b4ac:	f000 f86c 	bl	800b588 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b4b0:	f7fe fcb6 	bl	8009e20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b4b4:	bf00      	nop
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	240049f4 	.word	0x240049f4
 800b4c0:	240049ec 	.word	0x240049ec

0800b4c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b4ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b4ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b4d0:	4b27      	ldr	r3, [pc, #156]	; (800b570 <prvHeapInit+0xac>)
 800b4d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f003 0307 	and.w	r3, r3, #7
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00c      	beq.n	800b4f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	3307      	adds	r3, #7
 800b4e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f023 0307 	bic.w	r3, r3, #7
 800b4ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	1ad3      	subs	r3, r2, r3
 800b4f2:	4a1f      	ldr	r2, [pc, #124]	; (800b570 <prvHeapInit+0xac>)
 800b4f4:	4413      	add	r3, r2
 800b4f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b4fc:	4a1d      	ldr	r2, [pc, #116]	; (800b574 <prvHeapInit+0xb0>)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b502:	4b1c      	ldr	r3, [pc, #112]	; (800b574 <prvHeapInit+0xb0>)
 800b504:	2200      	movs	r2, #0
 800b506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	68ba      	ldr	r2, [r7, #8]
 800b50c:	4413      	add	r3, r2
 800b50e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b510:	2208      	movs	r2, #8
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	1a9b      	subs	r3, r3, r2
 800b516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f023 0307 	bic.w	r3, r3, #7
 800b51e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	4a15      	ldr	r2, [pc, #84]	; (800b578 <prvHeapInit+0xb4>)
 800b524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b526:	4b14      	ldr	r3, [pc, #80]	; (800b578 <prvHeapInit+0xb4>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2200      	movs	r2, #0
 800b52c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b52e:	4b12      	ldr	r3, [pc, #72]	; (800b578 <prvHeapInit+0xb4>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2200      	movs	r2, #0
 800b534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	1ad2      	subs	r2, r2, r3
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b544:	4b0c      	ldr	r3, [pc, #48]	; (800b578 <prvHeapInit+0xb4>)
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	4a0a      	ldr	r2, [pc, #40]	; (800b57c <prvHeapInit+0xb8>)
 800b552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	4a09      	ldr	r2, [pc, #36]	; (800b580 <prvHeapInit+0xbc>)
 800b55a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b55c:	4b09      	ldr	r3, [pc, #36]	; (800b584 <prvHeapInit+0xc0>)
 800b55e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b562:	601a      	str	r2, [r3, #0]
}
 800b564:	bf00      	nop
 800b566:	3714      	adds	r7, #20
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr
 800b570:	24000de0 	.word	0x24000de0
 800b574:	240049e0 	.word	0x240049e0
 800b578:	240049e8 	.word	0x240049e8
 800b57c:	240049f0 	.word	0x240049f0
 800b580:	240049ec 	.word	0x240049ec
 800b584:	240049f4 	.word	0x240049f4

0800b588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b590:	4b28      	ldr	r3, [pc, #160]	; (800b634 <prvInsertBlockIntoFreeList+0xac>)
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	e002      	b.n	800b59c <prvInsertBlockIntoFreeList+0x14>
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	60fb      	str	r3, [r7, #12]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d8f7      	bhi.n	800b596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	68ba      	ldr	r2, [r7, #8]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d108      	bne.n	800b5ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	685a      	ldr	r2, [r3, #4]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	441a      	add	r2, r3
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	68ba      	ldr	r2, [r7, #8]
 800b5d4:	441a      	add	r2, r3
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d118      	bne.n	800b610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	4b15      	ldr	r3, [pc, #84]	; (800b638 <prvInsertBlockIntoFreeList+0xb0>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d00d      	beq.n	800b606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	685a      	ldr	r2, [r3, #4]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	441a      	add	r2, r3
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	601a      	str	r2, [r3, #0]
 800b604:	e008      	b.n	800b618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b606:	4b0c      	ldr	r3, [pc, #48]	; (800b638 <prvInsertBlockIntoFreeList+0xb0>)
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	601a      	str	r2, [r3, #0]
 800b60e:	e003      	b.n	800b618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d002      	beq.n	800b626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b626:	bf00      	nop
 800b628:	3714      	adds	r7, #20
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	240049e0 	.word	0x240049e0
 800b638:	240049e8 	.word	0x240049e8

0800b63c <__libc_init_array>:
 800b63c:	b570      	push	{r4, r5, r6, lr}
 800b63e:	4e0d      	ldr	r6, [pc, #52]	; (800b674 <__libc_init_array+0x38>)
 800b640:	4c0d      	ldr	r4, [pc, #52]	; (800b678 <__libc_init_array+0x3c>)
 800b642:	1ba4      	subs	r4, r4, r6
 800b644:	10a4      	asrs	r4, r4, #2
 800b646:	2500      	movs	r5, #0
 800b648:	42a5      	cmp	r5, r4
 800b64a:	d109      	bne.n	800b660 <__libc_init_array+0x24>
 800b64c:	4e0b      	ldr	r6, [pc, #44]	; (800b67c <__libc_init_array+0x40>)
 800b64e:	4c0c      	ldr	r4, [pc, #48]	; (800b680 <__libc_init_array+0x44>)
 800b650:	f000 f82c 	bl	800b6ac <_init>
 800b654:	1ba4      	subs	r4, r4, r6
 800b656:	10a4      	asrs	r4, r4, #2
 800b658:	2500      	movs	r5, #0
 800b65a:	42a5      	cmp	r5, r4
 800b65c:	d105      	bne.n	800b66a <__libc_init_array+0x2e>
 800b65e:	bd70      	pop	{r4, r5, r6, pc}
 800b660:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b664:	4798      	blx	r3
 800b666:	3501      	adds	r5, #1
 800b668:	e7ee      	b.n	800b648 <__libc_init_array+0xc>
 800b66a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b66e:	4798      	blx	r3
 800b670:	3501      	adds	r5, #1
 800b672:	e7f2      	b.n	800b65a <__libc_init_array+0x1e>
 800b674:	0800c8ac 	.word	0x0800c8ac
 800b678:	0800c8ac 	.word	0x0800c8ac
 800b67c:	0800c8ac 	.word	0x0800c8ac
 800b680:	0800c8b0 	.word	0x0800c8b0

0800b684 <memcpy>:
 800b684:	b510      	push	{r4, lr}
 800b686:	1e43      	subs	r3, r0, #1
 800b688:	440a      	add	r2, r1
 800b68a:	4291      	cmp	r1, r2
 800b68c:	d100      	bne.n	800b690 <memcpy+0xc>
 800b68e:	bd10      	pop	{r4, pc}
 800b690:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b694:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b698:	e7f7      	b.n	800b68a <memcpy+0x6>

0800b69a <memset>:
 800b69a:	4402      	add	r2, r0
 800b69c:	4603      	mov	r3, r0
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d100      	bne.n	800b6a4 <memset+0xa>
 800b6a2:	4770      	bx	lr
 800b6a4:	f803 1b01 	strb.w	r1, [r3], #1
 800b6a8:	e7f9      	b.n	800b69e <memset+0x4>
	...

0800b6ac <_init>:
 800b6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ae:	bf00      	nop
 800b6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6b2:	bc08      	pop	{r3}
 800b6b4:	469e      	mov	lr, r3
 800b6b6:	4770      	bx	lr

0800b6b8 <_fini>:
 800b6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ba:	bf00      	nop
 800b6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6be:	bc08      	pop	{r3}
 800b6c0:	469e      	mov	lr, r3
 800b6c2:	4770      	bx	lr
