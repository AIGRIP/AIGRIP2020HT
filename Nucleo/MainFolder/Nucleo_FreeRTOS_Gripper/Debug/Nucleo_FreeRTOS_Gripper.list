
Nucleo_FreeRTOS_Gripper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b208  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001190  0800b4a8  0800b4a8  0001b4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c638  0800c638  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  0800c638  0800c638  0001c638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c640  0800c640  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c640  0800c640  0001c640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c644  0800c644  0001c644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800c648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000078  0800c6c0  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000d8  0800c720  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000050ac  24000138  0800c780  00020138  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240051e4  0800c780  000251e4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033de6  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00004bf2  00000000  00000000  00053f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001e18  00000000  00000000  00058b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c50  00000000  00000000  0005a958  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0000596c  00000000  00000000  0005c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00019582  00000000  00000000  00061f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001775f1  00000000  00000000  0007b496  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001f2a87  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008460  00000000  00000000  001f2b04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000138 	.word	0x24000138
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b490 	.word	0x0800b490

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400013c 	.word	0x2400013c
 80002dc:	0800b490 	.word	0x0800b490

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f001 fa3a 	bl	8001afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f852 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fad8 	bl	8000c40 <MX_GPIO_Init>
  MX_ETH_Init();
 8000690:	f000 f912 	bl	80008b8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000694:	f000 fa56 	bl	8000b44 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000698:	f000 faa0 	bl	8000bdc <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 800069c:	f000 f95e 	bl	800095c <MX_SPI4_Init>
  MX_UART7_Init();
 80006a0:	f000 f9b4 	bl	8000a0c <MX_UART7_Init>
  MX_USART2_UART_Init();
 80006a4:	f000 fa00 	bl	8000aa8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2110      	movs	r1, #16
 80006ac:	4813      	ldr	r0, [pc, #76]	; (80006fc <main+0x7c>)
 80006ae:	f002 f969 	bl	8002984 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006b2:	f007 fd73 	bl	800819c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ControlTask */
  ControlTaskHandle = osThreadNew(StartControlTask, NULL, &ControlTask_attributes);
 80006b6:	4a12      	ldr	r2, [pc, #72]	; (8000700 <main+0x80>)
 80006b8:	2100      	movs	r1, #0
 80006ba:	4812      	ldr	r0, [pc, #72]	; (8000704 <main+0x84>)
 80006bc:	f007 fdd8 	bl	8008270 <osThreadNew>
 80006c0:	4602      	mov	r2, r0
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <main+0x88>)
 80006c4:	601a      	str	r2, [r3, #0]

  /* creation of CommBoard */
  CommBoardHandle = osThreadNew(StartCommBoard, NULL, &CommBoard_attributes);
 80006c6:	4a11      	ldr	r2, [pc, #68]	; (800070c <main+0x8c>)
 80006c8:	2100      	movs	r1, #0
 80006ca:	4811      	ldr	r0, [pc, #68]	; (8000710 <main+0x90>)
 80006cc:	f007 fdd0 	bl	8008270 <osThreadNew>
 80006d0:	4602      	mov	r2, r0
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <main+0x94>)
 80006d4:	601a      	str	r2, [r3, #0]

  /* creation of SensorRead */
  SensorReadHandle = osThreadNew(StartSensorRead, NULL, &SensorRead_attributes);
 80006d6:	4a10      	ldr	r2, [pc, #64]	; (8000718 <main+0x98>)
 80006d8:	2100      	movs	r1, #0
 80006da:	4810      	ldr	r0, [pc, #64]	; (800071c <main+0x9c>)
 80006dc:	f007 fdc8 	bl	8008270 <osThreadNew>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <main+0xa0>)
 80006e4:	601a      	str	r2, [r3, #0]

  /* creation of Safety */
  SafetyHandle = osThreadNew(StartSafety, NULL, &Safety_attributes);
 80006e6:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <main+0xa4>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	480f      	ldr	r0, [pc, #60]	; (8000728 <main+0xa8>)
 80006ec:	f007 fdc0 	bl	8008270 <osThreadNew>
 80006f0:	4602      	mov	r2, r0
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <main+0xac>)
 80006f4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006f6:	f007 fd85 	bl	8008204 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <main+0x7a>
 80006fc:	58021000 	.word	0x58021000
 8000700:	0800b54c 	.word	0x0800b54c
 8000704:	080012e5 	.word	0x080012e5
 8000708:	240050a8 	.word	0x240050a8
 800070c:	0800b570 	.word	0x0800b570
 8000710:	08001305 	.word	0x08001305
 8000714:	24004f90 	.word	0x24004f90
 8000718:	0800b594 	.word	0x0800b594
 800071c:	08001325 	.word	0x08001325
 8000720:	24004f8c 	.word	0x24004f8c
 8000724:	0800b5b8 	.word	0x0800b5b8
 8000728:	08001351 	.word	0x08001351
 800072c:	24004f88 	.word	0x24004f88

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b0cc      	sub	sp, #304	; 0x130
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800073a:	224c      	movs	r2, #76	; 0x4c
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f00a faa1 	bl	800ac86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000748:	2220      	movs	r2, #32
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f00a fa9a 	bl	800ac86 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	4618      	mov	r0, r3
 8000758:	23bc      	movs	r3, #188	; 0xbc
 800075a:	461a      	mov	r2, r3
 800075c:	2100      	movs	r1, #0
 800075e:	f00a fa92 	bl	800ac86 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000762:	2002      	movs	r0, #2
 8000764:	f002 fa8a 	bl	8002c7c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	4b4f      	ldr	r3, [pc, #316]	; (80008ac <SystemClock_Config+0x17c>)
 8000770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000772:	4a4e      	ldr	r2, [pc, #312]	; (80008ac <SystemClock_Config+0x17c>)
 8000774:	f023 0301 	bic.w	r3, r3, #1
 8000778:	62d3      	str	r3, [r2, #44]	; 0x2c
 800077a:	4b4c      	ldr	r3, [pc, #304]	; (80008ac <SystemClock_Config+0x17c>)
 800077c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077e:	f003 0201 	and.w	r2, r3, #1
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	4b4a      	ldr	r3, [pc, #296]	; (80008b0 <SystemClock_Config+0x180>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800078e:	4a48      	ldr	r2, [pc, #288]	; (80008b0 <SystemClock_Config+0x180>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000794:	6193      	str	r3, [r2, #24]
 8000796:	4b46      	ldr	r3, [pc, #280]	; (80008b0 <SystemClock_Config+0x180>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007a6:	bf00      	nop
 80007a8:	4b41      	ldr	r3, [pc, #260]	; (80008b0 <SystemClock_Config+0x180>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b4:	d1f8      	bne.n	80007a8 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007b6:	2303      	movs	r3, #3
 80007b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ca:	2340      	movs	r3, #64	; 0x40
 80007cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d6:	2302      	movs	r3, #2
 80007d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007dc:	2301      	movs	r3, #1
 80007de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007e2:	2318      	movs	r3, #24
 80007e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ee:	2304      	movs	r3, #4
 80007f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007fa:	230c      	movs	r3, #12
 80007fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000800:	2300      	movs	r3, #0
 8000802:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000810:	4618      	mov	r0, r3
 8000812:	f002 fa7d 	bl	8002d10 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800081c:	f000 fdba 	bl	8001394 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	233f      	movs	r3, #63	; 0x3f
 8000822:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000826:	2300      	movs	r3, #0
 8000828:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000850:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f002 fe6a 	bl	8003530 <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x136>
  {
    Error_Handler();
 8000862:	f000 fd97 	bl	8001394 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <SystemClock_Config+0x184>)
 800086c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	2200      	movs	r2, #0
 8000874:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	2200      	movs	r2, #0
 800087c:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	4618      	mov	r0, r3
 8000890:	f003 fa14 	bl	8003cbc <HAL_RCCEx_PeriphCLKConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x16e>
  {
    Error_Handler();
 800089a:	f000 fd7b 	bl	8001394 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800089e:	f002 fa27 	bl	8002cf0 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80008a2:	bf00      	nop
 80008a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	58000400 	.word	0x58000400
 80008b0:	58024800 	.word	0x58024800
 80008b4:	00042002 	.word	0x00042002

080008b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <MX_ETH_Init+0x90>)
 80008be:	4a23      	ldr	r2, [pc, #140]	; (800094c <MX_ETH_Init+0x94>)
 80008c0:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <MX_ETH_Init+0x90>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_ETH_Init+0x90>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	3301      	adds	r3, #1
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80008d4:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_ETH_Init+0x90>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	3302      	adds	r3, #2
 80008da:	22e1      	movs	r2, #225	; 0xe1
 80008dc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_ETH_Init+0x90>)
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	3303      	adds	r3, #3
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_ETH_Init+0x90>)
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	3304      	adds	r3, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_ETH_Init+0x90>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	3305      	adds	r3, #5
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_ETH_Init+0x90>)
 80008fe:	2201      	movs	r2, #1
 8000900:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_ETH_Init+0x90>)
 8000904:	4a12      	ldr	r2, [pc, #72]	; (8000950 <MX_ETH_Init+0x98>)
 8000906:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_ETH_Init+0x90>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <MX_ETH_Init+0x9c>)
 800090c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_ETH_Init+0x90>)
 8000910:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000914:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000916:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_ETH_Init+0x90>)
 8000918:	f001 fa6e 	bl	8001df8 <HAL_ETH_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000922:	f000 fd37 	bl	8001394 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000926:	2234      	movs	r2, #52	; 0x34
 8000928:	2100      	movs	r1, #0
 800092a:	480b      	ldr	r0, [pc, #44]	; (8000958 <MX_ETH_Init+0xa0>)
 800092c:	f00a f9ab 	bl	800ac86 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_ETH_Init+0xa0>)
 8000932:	2221      	movs	r2, #33	; 0x21
 8000934:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_ETH_Init+0xa0>)
 8000938:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800093c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_ETH_Init+0xa0>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	240050ac 	.word	0x240050ac
 800094c:	40028000 	.word	0x40028000
 8000950:	240000d8 	.word	0x240000d8
 8000954:	24000078 	.word	0x24000078
 8000958:	2400511c 	.word	0x2400511c

0800095c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000960:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <MX_SPI4_Init+0xa8>)
 8000962:	4a29      	ldr	r2, [pc, #164]	; (8000a08 <MX_SPI4_Init+0xac>)
 8000964:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000966:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <MX_SPI4_Init+0xa8>)
 8000968:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800096c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800096e:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <MX_SPI4_Init+0xa8>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000974:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <MX_SPI4_Init+0xa8>)
 8000976:	2207      	movs	r2, #7
 8000978:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800097a:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <MX_SPI4_Init+0xa8>)
 800097c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000980:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <MX_SPI4_Init+0xa8>)
 8000984:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000988:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_SPI4_Init+0xa8>)
 800098c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000990:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_SPI4_Init+0xa8>)
 8000994:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000998:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_SPI4_Init+0xa8>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_SPI4_Init+0xa8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <MX_SPI4_Init+0xa8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <MX_SPI4_Init+0xa8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_SPI4_Init+0xa8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <MX_SPI4_Init+0xa8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_SPI4_Init+0xa8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_SPI4_Init+0xa8>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_SPI4_Init+0xa8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_SPI4_Init+0xa8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_SPI4_Init+0xa8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_SPI4_Init+0xa8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_SPI4_Init+0xa8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_SPI4_Init+0xa8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_SPI4_Init+0xa8>)
 80009f0:	f004 fc64 	bl	80052bc <HAL_SPI_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80009fa:	f000 fccb 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	24004f94 	.word	0x24004f94
 8000a08:	40013400 	.word	0x40013400

08000a0c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <MX_UART7_Init+0x90>)
 8000a12:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <MX_UART7_Init+0x94>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1000000;
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <MX_UART7_Init+0x90>)
 8000a18:	4a22      	ldr	r2, [pc, #136]	; (8000aa4 <MX_UART7_Init+0x98>)
 8000a1a:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <MX_UART7_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000a22:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <MX_UART7_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000a28:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <MX_UART7_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000a2e:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_UART7_Init+0x90>)
 8000a30:	220c      	movs	r2, #12
 8000a32:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <MX_UART7_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_UART7_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_UART7_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <MX_UART7_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_UART7_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart7) != HAL_OK)
 8000a52:	4812      	ldr	r0, [pc, #72]	; (8000a9c <MX_UART7_Init+0x90>)
 8000a54:	f005 ffca 	bl	80069ec <HAL_HalfDuplex_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 8000a5e:	f000 fc99 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a62:	2100      	movs	r1, #0
 8000a64:	480d      	ldr	r0, [pc, #52]	; (8000a9c <MX_UART7_Init+0x90>)
 8000a66:	f007 f802 	bl	8007a6e <HAL_UARTEx_SetTxFifoThreshold>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 8000a70:	f000 fc90 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a74:	2100      	movs	r1, #0
 8000a76:	4809      	ldr	r0, [pc, #36]	; (8000a9c <MX_UART7_Init+0x90>)
 8000a78:	f007 f837 	bl	8007aea <HAL_UARTEx_SetRxFifoThreshold>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 8000a82:	f000 fc87 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_UART7_Init+0x90>)
 8000a88:	f006 ffb8 	bl	80079fc <HAL_UARTEx_DisableFifoMode>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 8000a92:	f000 fc7f 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	24004a68 	.word	0x24004a68
 8000aa0:	40007800 	.word	0x40007800
 8000aa4:	000f4240 	.word	0x000f4240

08000aa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000aae:	4a23      	ldr	r2, [pc, #140]	; (8000b3c <MX_USART2_UART_Init+0x94>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000ab4:	4a22      	ldr	r2, [pc, #136]	; (8000b40 <MX_USART2_UART_Init+0x98>)
 8000ab6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000acc:	220c      	movs	r2, #12
 8000ace:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000aee:	4812      	ldr	r0, [pc, #72]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000af0:	f005 ff7c 	bl	80069ec <HAL_HalfDuplex_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000afa:	f000 fc4b 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afe:	2100      	movs	r1, #0
 8000b00:	480d      	ldr	r0, [pc, #52]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000b02:	f006 ffb4 	bl	8007a6e <HAL_UARTEx_SetTxFifoThreshold>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8000b0c:	f000 fc42 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b10:	2100      	movs	r1, #0
 8000b12:	4809      	ldr	r0, [pc, #36]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000b14:	f006 ffe9 	bl	8007aea <HAL_UARTEx_SetRxFifoThreshold>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8000b1e:	f000 fc39 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000b24:	f006 ff6a 	bl	80079fc <HAL_UARTEx_DisableFifoMode>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000b2e:	f000 fc31 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2400501c 	.word	0x2400501c
 8000b3c:	40004400 	.word	0x40004400
 8000b40:	000f4240 	.word	0x000f4240

08000b44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b48:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b4a:	4a23      	ldr	r2, [pc, #140]	; (8000bd8 <MX_USART3_UART_Init+0x94>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b8c:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b8e:	f005 fedd 	bl	800694c <HAL_UART_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b98:	f000 fbfc 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000ba0:	f006 ff65 	bl	8007a6e <HAL_UARTEx_SetTxFifoThreshold>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000baa:	f000 fbf3 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000bb2:	f006 ff9a 	bl	8007aea <HAL_UARTEx_SetRxFifoThreshold>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bbc:	f000 fbea 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000bc2:	f006 ff1b 	bl	80079fc <HAL_UARTEx_DisableFifoMode>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bcc:	f000 fbe2 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	24004af4 	.word	0x24004af4
 8000bd8:	40004800 	.word	0x40004800

08000bdc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be2:	4a16      	ldr	r2, [pc, #88]	; (8000c3c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000be4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be8:	2209      	movs	r2, #9
 8000bea:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bee:	2202      	movs	r2, #2
 8000bf0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c24:	f001 fee2 	bl	80029ec <HAL_PCD_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c2e:	f000 fbb1 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	24004b80 	.word	0x24004b80
 8000c3c:	40080000 	.word	0x40080000

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	; 0x38
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c56:	4b69      	ldr	r3, [pc, #420]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	4a67      	ldr	r2, [pc, #412]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000c5e:	f043 0310 	orr.w	r3, r3, #16
 8000c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c66:	4b65      	ldr	r3, [pc, #404]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6c:	f003 0310 	and.w	r3, r3, #16
 8000c70:	623b      	str	r3, [r7, #32]
 8000c72:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c74:	4b61      	ldr	r3, [pc, #388]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	4a60      	ldr	r2, [pc, #384]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000c7c:	f043 0304 	orr.w	r3, r3, #4
 8000c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c84:	4b5d      	ldr	r3, [pc, #372]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	61fb      	str	r3, [r7, #28]
 8000c90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c92:	4b5a      	ldr	r3, [pc, #360]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c98:	4a58      	ldr	r2, [pc, #352]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000c9a:	f043 0320 	orr.w	r3, r3, #32
 8000c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca2:	4b56      	ldr	r3, [pc, #344]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca8:	f003 0320 	and.w	r3, r3, #32
 8000cac:	61bb      	str	r3, [r7, #24]
 8000cae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb0:	4b52      	ldr	r3, [pc, #328]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb6:	4a51      	ldr	r2, [pc, #324]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc0:	4b4e      	ldr	r3, [pc, #312]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b4b      	ldr	r3, [pc, #300]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd4:	4a49      	ldr	r2, [pc, #292]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cde:	4b47      	ldr	r3, [pc, #284]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cec:	4b43      	ldr	r3, [pc, #268]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	4a42      	ldr	r2, [pc, #264]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfc:	4b3f      	ldr	r3, [pc, #252]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0a:	4b3c      	ldr	r3, [pc, #240]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d10:	4a3a      	ldr	r2, [pc, #232]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1a:	4b38      	ldr	r3, [pc, #224]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d20:	f003 0308 	and.w	r3, r3, #8
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d28:	4b34      	ldr	r3, [pc, #208]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2e:	4a33      	ldr	r2, [pc, #204]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d38:	4b30      	ldr	r3, [pc, #192]	; (8000dfc <MX_GPIO_Init+0x1bc>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2112      	movs	r1, #18
 8000d4a:	482d      	ldr	r0, [pc, #180]	; (8000e00 <MX_GPIO_Init+0x1c0>)
 8000d4c:	f001 fe1a 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d56:	482b      	ldr	r0, [pc, #172]	; (8000e04 <MX_GPIO_Init+0x1c4>)
 8000d58:	f001 fe14 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d62:	4829      	ldr	r0, [pc, #164]	; (8000e08 <MX_GPIO_Init+0x1c8>)
 8000d64:	f001 fe0e 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000d68:	2312      	movs	r3, #18
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4820      	ldr	r0, [pc, #128]	; (8000e00 <MX_GPIO_Init+0x1c0>)
 8000d80:	f001 fc50 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d96:	4619      	mov	r1, r3
 8000d98:	481c      	ldr	r0, [pc, #112]	; (8000e0c <MX_GPIO_Init+0x1cc>)
 8000d9a:	f001 fc43 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin;
 8000d9e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db4:	4619      	mov	r1, r3
 8000db6:	4813      	ldr	r0, [pc, #76]	; (8000e04 <MX_GPIO_Init+0x1c4>)
 8000db8:	f001 fc34 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <MX_GPIO_Init+0x1c8>)
 8000dd6:	f001 fc25 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_GPIO_Init+0x1d0>)
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	4619      	mov	r1, r3
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <MX_GPIO_Init+0x1d4>)
 8000dee:	f001 fc19 	bl	8002624 <HAL_GPIO_Init>

}
 8000df2:	bf00      	nop
 8000df4:	3738      	adds	r7, #56	; 0x38
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	58024400 	.word	0x58024400
 8000e00:	58021000 	.word	0x58021000
 8000e04:	58020400 	.word	0x58020400
 8000e08:	58020c00 	.word	0x58020c00
 8000e0c:	58020800 	.word	0x58020800
 8000e10:	11110000 	.word	0x11110000
 8000e14:	58021800 	.word	0x58021800

08000e18 <SPI_E_ReadReg>:

/* USER CODE BEGIN 4 */

void SPI_E_ReadReg(uint8_t *REG_ADDR, uint8_t *readByte )
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  char READ_REG_ADDR;
  READ_REG_ADDR = *REG_ADDR & 0x7F;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2110      	movs	r1, #16
 8000e32:	480f      	ldr	r0, [pc, #60]	; (8000e70 <SPI_E_ReadReg+0x58>)
 8000e34:	f001 fda6 	bl	8002984 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi4,(uint8_t *) &READ_REG_ADDR, 1, 100);
 8000e38:	f107 010f 	add.w	r1, r7, #15
 8000e3c:	2364      	movs	r3, #100	; 0x64
 8000e3e:	2201      	movs	r2, #1
 8000e40:	480c      	ldr	r0, [pc, #48]	; (8000e74 <SPI_E_ReadReg+0x5c>)
 8000e42:	f004 fb33 	bl	80054ac <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi4,(uint8_t *) readByte, 1, 100);
 8000e46:	2364      	movs	r3, #100	; 0x64
 8000e48:	2201      	movs	r2, #1
 8000e4a:	6839      	ldr	r1, [r7, #0]
 8000e4c:	4809      	ldr	r0, [pc, #36]	; (8000e74 <SPI_E_ReadReg+0x5c>)
 8000e4e:	f004 fd1f 	bl	8005890 <HAL_SPI_Receive>

  //HAL_Delay(5);
  osDelay(1);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f007 fab2 	bl	80083bc <osDelay>

  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <SPI_E_ReadReg+0x58>)
 8000e5e:	f001 fd91 	bl	8002984 <HAL_GPIO_WritePin>

  osDelay(1);
 8000e62:	2001      	movs	r0, #1
 8000e64:	f007 faaa 	bl	80083bc <osDelay>

}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	58021000 	.word	0x58021000
 8000e74:	24004f94 	.word	0x24004f94

08000e78 <SPI_E_WriteReg>:

void SPI_E_WriteReg(uint8_t *REG_ADDR, uint8_t *sendByte )
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  char READ_REG_ADDR;
  READ_REG_ADDR = *REG_ADDR | 0x80;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2110      	movs	r1, #16
 8000e92:	480f      	ldr	r0, [pc, #60]	; (8000ed0 <SPI_E_WriteReg+0x58>)
 8000e94:	f001 fd76 	bl	8002984 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi4,(uint8_t *) &READ_REG_ADDR, 1, 100);
 8000e98:	f107 010f 	add.w	r1, r7, #15
 8000e9c:	2364      	movs	r3, #100	; 0x64
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <SPI_E_WriteReg+0x5c>)
 8000ea2:	f004 fb03 	bl	80054ac <HAL_SPI_Transmit>

  HAL_SPI_Transmit(&hspi4,(uint8_t *) sendByte, 1, 100);
 8000ea6:	2364      	movs	r3, #100	; 0x64
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	6839      	ldr	r1, [r7, #0]
 8000eac:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <SPI_E_WriteReg+0x5c>)
 8000eae:	f004 fafd 	bl	80054ac <HAL_SPI_Transmit>

  //HAL_Delay(5);
  osDelay(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f007 fa82 	bl	80083bc <osDelay>

  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2110      	movs	r1, #16
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <SPI_E_WriteReg+0x58>)
 8000ebe:	f001 fd61 	bl	8002984 <HAL_GPIO_WritePin>

  osDelay(1);
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f007 fa7a 	bl	80083bc <osDelay>

}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	58021000 	.word	0x58021000
 8000ed4:	24004f94 	.word	0x24004f94

08000ed8 <startUpMouse>:


void startUpMouse()
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0

  // Memory registers to read and write.
  uint8_t startUpRegAddr[] = {0x3A,0x02,0x03,0x04,0x05,0x06,0x10,0x13,0x13,0x62,0x2A,0x10};
 8000ede:	4a60      	ldr	r2, [pc, #384]	; (8001060 <startUpMouse+0x188>)
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ee6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t sendByte;
  uint8_t readByte;


  // Ensure reset
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2110      	movs	r1, #16
 8000eee:	485d      	ldr	r0, [pc, #372]	; (8001064 <startUpMouse+0x18c>)
 8000ef0:	f001 fd48 	bl	8002984 <HAL_GPIO_WritePin>
  osDelay(1);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f007 fa61 	bl	80083bc <osDelay>
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	2110      	movs	r1, #16
 8000efe:	4859      	ldr	r0, [pc, #356]	; (8001064 <startUpMouse+0x18c>)
 8000f00:	f001 fd40 	bl	8002984 <HAL_GPIO_WritePin>
  osDelay(1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f007 fa59 	bl	80083bc <osDelay>
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	4855      	ldr	r0, [pc, #340]	; (8001064 <startUpMouse+0x18c>)
 8000f10:	f001 fd38 	bl	8002984 <HAL_GPIO_WritePin>
  osDelay(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f007 fa51 	bl	80083bc <osDelay>

  // Start up register
  sendByte = 0x5A;
 8000f1a:	235a      	movs	r3, #90	; 0x5a
 8000f1c:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[0], &sendByte );
 8000f1e:	1dfa      	adds	r2, r7, #7
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	4611      	mov	r1, r2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ffa6 	bl	8000e78 <SPI_E_WriteReg>

  // Must wait 50 milliseconds.
  osDelay(50);
 8000f2c:	2032      	movs	r0, #50	; 0x32
 8000f2e:	f007 fa45 	bl	80083bc <osDelay>
  // Read and discard data.
  SPI_E_ReadReg(&startUpRegAddr[1], &readByte );
 8000f32:	1dba      	adds	r2, r7, #6
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	3301      	adds	r3, #1
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff6b 	bl	8000e18 <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[2], &readByte );
 8000f42:	1dba      	adds	r2, r7, #6
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	3302      	adds	r3, #2
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff63 	bl	8000e18 <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[3], &readByte );
 8000f52:	1dba      	adds	r2, r7, #6
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	3303      	adds	r3, #3
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff5b 	bl	8000e18 <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[4], &readByte );
 8000f62:	1dba      	adds	r2, r7, #6
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	3304      	adds	r3, #4
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff53 	bl	8000e18 <SPI_E_ReadReg>
  SPI_E_ReadReg(&startUpRegAddr[5], &readByte );
 8000f72:	1dba      	adds	r2, r7, #6
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	3305      	adds	r3, #5
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff4b 	bl	8000e18 <SPI_E_ReadReg>

  // Upload SROM data to mouse sensor.

  // Write 0 to Rest_En bit of Config2 register to disable Rest mode.
  sendByte = 0x00;
 8000f82:	2300      	movs	r3, #0
 8000f84:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[6], &sendByte );
 8000f86:	1dfa      	adds	r2, r7, #7
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	3306      	adds	r3, #6
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff71 	bl	8000e78 <SPI_E_WriteReg>

  // Write 0x1d to SROM_Enable register for initializing.
  sendByte = 0x1D;
 8000f96:	231d      	movs	r3, #29
 8000f98:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[7], &sendByte );
 8000f9a:	1dfa      	adds	r2, r7, #7
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	3307      	adds	r3, #7
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff67 	bl	8000e78 <SPI_E_WriteReg>

  // Wait 10 ms
  osDelay(10);
 8000faa:	200a      	movs	r0, #10
 8000fac:	f007 fa06 	bl	80083bc <osDelay>

  // Write 0x18 to SROM_Enable register again to start SROM download.
  sendByte = 0x18;
 8000fb0:	2318      	movs	r3, #24
 8000fb2:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[8], &sendByte );
 8000fb4:	1dfa      	adds	r2, r7, #7
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	3308      	adds	r3, #8
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff5a 	bl	8000e78 <SPI_E_WriteReg>


  // Send the SROM data
  // Select Slave during the whole transfer.
  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	4826      	ldr	r0, [pc, #152]	; (8001064 <startUpMouse+0x18c>)
 8000fca:	f001 fcdb 	bl	8002984 <HAL_GPIO_WritePin>
  // Select SROM_Load_Burst register
  HAL_SPI_Transmit(&hspi4, &startUpRegAddr[9], 1, 100);
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	f103 0109 	add.w	r1, r3, #9
 8000fd6:	2364      	movs	r3, #100	; 0x64
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4823      	ldr	r0, [pc, #140]	; (8001068 <startUpMouse+0x190>)
 8000fdc:	f004 fa66 	bl	80054ac <HAL_SPI_Transmit>


  for(int i=0;i<firmware_length;i++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	e00d      	b.n	8001002 <startUpMouse+0x12a>
  {
	  HAL_SPI_Transmit(&hspi4,(uint8_t *) &firmware_data[i], 1, 100);
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	4a20      	ldr	r2, [pc, #128]	; (800106c <startUpMouse+0x194>)
 8000fea:	1899      	adds	r1, r3, r2
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	2201      	movs	r2, #1
 8000ff0:	481d      	ldr	r0, [pc, #116]	; (8001068 <startUpMouse+0x190>)
 8000ff2:	f004 fa5b 	bl	80054ac <HAL_SPI_Transmit>
	  osDelay(1);
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f007 f9e0 	bl	80083bc <osDelay>
  for(int i=0;i<firmware_length;i++)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3301      	adds	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	f640 73fe 	movw	r3, #4094	; 0xffe
 8001006:	461a      	mov	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	4293      	cmp	r3, r2
 800100c:	dbeb      	blt.n	8000fe6 <startUpMouse+0x10e>
  }

  HAL_GPIO_WritePin( GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2110      	movs	r1, #16
 8001012:	4814      	ldr	r0, [pc, #80]	; (8001064 <startUpMouse+0x18c>)
 8001014:	f001 fcb6 	bl	8002984 <HAL_GPIO_WritePin>

  osDelay(1);
 8001018:	2001      	movs	r0, #1
 800101a:	f007 f9cf 	bl	80083bc <osDelay>

  // Read the SROM_ID (0x2A) register to verify the ID before any other register reads or writes.
  SPI_E_ReadReg(&startUpRegAddr[10], &readByte );
 800101e:	1dba      	adds	r2, r7, #6
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	330a      	adds	r3, #10
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fef5 	bl	8000e18 <SPI_E_ReadReg>

  // Write 0x00 to config2 register for wired mouse design.
  sendByte = 0x00;
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
  SPI_E_WriteReg(&startUpRegAddr[11], &sendByte );
 8001032:	1dfa      	adds	r2, r7, #7
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	330b      	adds	r3, #11
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff1b 	bl	8000e78 <SPI_E_WriteReg>

  // Set Config1
  sendByte = 0x77;
 8001042:	2377      	movs	r3, #119	; 0x77
 8001044:	71fb      	strb	r3, [r7, #7]
  uint8_t conf1Addr = 0x0F;
 8001046:	230f      	movs	r3, #15
 8001048:	717b      	strb	r3, [r7, #5]
  SPI_E_WriteReg(&conf1Addr, &sendByte );
 800104a:	1dfa      	adds	r2, r7, #7
 800104c:	1d7b      	adds	r3, r7, #5
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff11 	bl	8000e78 <SPI_E_WriteReg>


}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	0800b4d4 	.word	0x0800b4d4
 8001064:	58021000 	.word	0x58021000
 8001068:	24004f94 	.word	0x24004f94
 800106c:	0800b5dc 	.word	0x0800b5dc

08001070 <readMouseSensor>:


void readMouseSensor(sensValue *sensorPacket)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

	uint8_t readByte = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	757b      	strb	r3, [r7, #21]
	uint8_t freeze = 0x01;
 800107c:	2301      	movs	r3, #1
 800107e:	753b      	strb	r3, [r7, #20]

	uint8_t motionADR[] = {0x02,0x03,0x04,0x05,0x06};
 8001080:	4a30      	ldr	r2, [pc, #192]	; (8001144 <readMouseSensor+0xd4>)
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	e892 0003 	ldmia.w	r2, {r0, r1}
 800108a:	6018      	str	r0, [r3, #0]
 800108c:	3304      	adds	r3, #4
 800108e:	7019      	strb	r1, [r3, #0]
	uint8_t magnX_L = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	75fb      	strb	r3, [r7, #23]
	uint8_t magnY_L = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	75bb      	strb	r3, [r7, #22]
	// Write the motion address to freeze the current value of delta X and Y.
	SPI_E_WriteReg(&motionADR[0], &freeze );
 8001098:	f107 0214 	add.w	r2, r7, #20
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fee8 	bl	8000e78 <SPI_E_WriteReg>
	// Check if any motion has occurred.
	SPI_E_ReadReg(&motionADR[0], &readByte );
 80010a8:	f107 0215 	add.w	r2, r7, #21
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff feb0 	bl	8000e18 <SPI_E_ReadReg>
	// Save the motion bit.
	sensorPacket->mouseMotion = 0 < (0x80 & readByte);
 80010b8:	7d7b      	ldrb	r3, [r7, #21]
 80010ba:	b25b      	sxtb	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	09db      	lsrs	r3, r3, #7
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	701a      	strb	r2, [r3, #0]


	//Read the delta X registers.
	SPI_E_ReadReg(&motionADR[1], &readByte );
 80010c6:	f107 0215 	add.w	r2, r7, #21
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	3301      	adds	r3, #1
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fea0 	bl	8000e18 <SPI_E_ReadReg>
	magnX_L = (uint8_t) readByte;
 80010d8:	7d7b      	ldrb	r3, [r7, #21]
 80010da:	75fb      	strb	r3, [r7, #23]
	SPI_E_ReadReg(&motionADR[2], &readByte );
 80010dc:	f107 0215 	add.w	r2, r7, #21
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	3302      	adds	r3, #2
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fe95 	bl	8000e18 <SPI_E_ReadReg>

	// Merge the lower and higher bit values of the delta X registers.
	sensorPacket->mouse_D_X = magnX_L | (readByte<<8);
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	7d7b      	ldrb	r3, [r7, #21]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	805a      	strh	r2, [r3, #2]

	//Read the delta X registers.
	SPI_E_ReadReg(&motionADR[3], &readByte );
 8001100:	f107 0215 	add.w	r2, r7, #21
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	3303      	adds	r3, #3
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fe83 	bl	8000e18 <SPI_E_ReadReg>
	magnY_L = (uint8_t) readByte;
 8001112:	7d7b      	ldrb	r3, [r7, #21]
 8001114:	75bb      	strb	r3, [r7, #22]
	SPI_E_ReadReg(&motionADR[4], &readByte );
 8001116:	f107 0215 	add.w	r2, r7, #21
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	3304      	adds	r3, #4
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fe78 	bl	8000e18 <SPI_E_ReadReg>

	// Merge the lower and higher bit values of the delta Y registers.
	sensorPacket->mouse_D_Y = magnY_L | (readByte<<8);
 8001128:	7dbb      	ldrb	r3, [r7, #22]
 800112a:	b21a      	sxth	r2, r3
 800112c:	7d7b      	ldrb	r3, [r7, #21]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b21a      	sxth	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	809a      	strh	r2, [r3, #4]

}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	0800b4e0 	.word	0x0800b4e0

08001148 <plotSensorData>:




void plotSensorData(sensValue *dataToPlot)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b096      	sub	sp, #88	; 0x58
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	466b      	mov	r3, sp
 8001152:	461d      	mov	r5, r3

	// ASCII commands
	char CR = '\r';
 8001154:	230d      	movs	r3, #13
 8001156:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	char NL = '\n';
 800115a:	230a      	movs	r3, #10
 800115c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	char TB = '\t';
 8001160:	2309      	movs	r3, #9
 8001162:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	char MoveBack[] = "\033[F";
 8001166:	4b57      	ldr	r3, [pc, #348]	; (80012c4 <plotSensorData+0x17c>)
 8001168:	643b      	str	r3, [r7, #64]	; 0x40

	//Text to send
	char mouseInfo[] = "Mouse Sensor:\n\r";
 800116a:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <plotSensorData+0x180>)
 800116c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001170:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001172:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char M_D_X[] = "Delta_X ";
 8001176:	4a55      	ldr	r2, [pc, #340]	; (80012cc <plotSensorData+0x184>)
 8001178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117c:	ca07      	ldmia	r2, {r0, r1, r2}
 800117e:	c303      	stmia	r3!, {r0, r1}
 8001180:	701a      	strb	r2, [r3, #0]
	char M_D_Y[] = "Delta_Y ";
 8001182:	4a53      	ldr	r2, [pc, #332]	; (80012d0 <plotSensorData+0x188>)
 8001184:	f107 0318 	add.w	r3, r7, #24
 8001188:	ca07      	ldmia	r2, {r0, r1, r2}
 800118a:	c303      	stmia	r3!, {r0, r1}
 800118c:	701a      	strb	r2, [r3, #0]

	char M_M[] = "Moving";
 800118e:	4a51      	ldr	r2, [pc, #324]	; (80012d4 <plotSensorData+0x18c>)
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001198:	6018      	str	r0, [r3, #0]
 800119a:	3304      	adds	r3, #4
 800119c:	8019      	strh	r1, [r3, #0]
 800119e:	3302      	adds	r3, #2
 80011a0:	0c0a      	lsrs	r2, r1, #16
 80011a2:	701a      	strb	r2, [r3, #0]
	char M_S[] = "Still ";
 80011a4:	4a4c      	ldr	r2, [pc, #304]	; (80012d8 <plotSensorData+0x190>)
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ae:	6018      	str	r0, [r3, #0]
 80011b0:	3304      	adds	r3, #4
 80011b2:	8019      	strh	r1, [r3, #0]
 80011b4:	3302      	adds	r3, #2
 80011b6:	0c0a      	lsrs	r2, r1, #16
 80011b8:	701a      	strb	r2, [r3, #0]


	int arrSize = 8;
 80011ba:	2308      	movs	r3, #8
 80011bc:	653b      	str	r3, [r7, #80]	; 0x50
	char u16charArr[arrSize];
 80011be:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80011c0:	1e43      	subs	r3, r0, #1
 80011c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011c4:	4603      	mov	r3, r0
 80011c6:	4619      	mov	r1, r3
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	f04f 0300 	mov.w	r3, #0
 80011d0:	f04f 0400 	mov.w	r4, #0
 80011d4:	00d4      	lsls	r4, r2, #3
 80011d6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80011da:	00cb      	lsls	r3, r1, #3
 80011dc:	4603      	mov	r3, r0
 80011de:	4619      	mov	r1, r3
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	f04f 0300 	mov.w	r3, #0
 80011e8:	f04f 0400 	mov.w	r4, #0
 80011ec:	00d4      	lsls	r4, r2, #3
 80011ee:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80011f2:	00cb      	lsls	r3, r1, #3
 80011f4:	4603      	mov	r3, r0
 80011f6:	3307      	adds	r3, #7
 80011f8:	08db      	lsrs	r3, r3, #3
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	ebad 0d03 	sub.w	sp, sp, r3
 8001200:	466b      	mov	r3, sp
 8001202:	3300      	adds	r3, #0
 8001204:	64bb      	str	r3, [r7, #72]	; 0x48

	memset(u16charArr,'\0',arrSize);
 8001206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001208:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f009 fd3a 	bl	800ac86 <memset>

	// Send mouse sensor data
	HAL_UART_Transmit(&huart3,(uint8_t *) mouseInfo, sizeof(mouseInfo), 100);
 8001212:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001216:	2364      	movs	r3, #100	; 0x64
 8001218:	2210      	movs	r2, #16
 800121a:	4830      	ldr	r0, [pc, #192]	; (80012dc <plotSensorData+0x194>)
 800121c:	f005 fc3e 	bl	8006a9c <HAL_UART_Transmit>

    // Convert sensor value
	//u16ToString( dataToPlot->mouse_D_X, u16charArr,5);

	sprintf(u16charArr, "%d", dataToPlot->mouse_D_X);
 8001220:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001228:	461a      	mov	r2, r3
 800122a:	492d      	ldr	r1, [pc, #180]	; (80012e0 <plotSensorData+0x198>)
 800122c:	f009 fd34 	bl	800ac98 <siprintf>

	// Send delta X
	HAL_UART_Transmit(&huart3,(uint8_t *) M_D_X, sizeof(M_D_X), 100);
 8001230:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001234:	2364      	movs	r3, #100	; 0x64
 8001236:	2209      	movs	r2, #9
 8001238:	4828      	ldr	r0, [pc, #160]	; (80012dc <plotSensorData+0x194>)
 800123a:	f005 fc2f 	bl	8006a9c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3,(uint8_t *) u16charArr, arrSize, 100);
 800123e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001242:	b29a      	uxth	r2, r3
 8001244:	2364      	movs	r3, #100	; 0x64
 8001246:	4825      	ldr	r0, [pc, #148]	; (80012dc <plotSensorData+0x194>)
 8001248:	f005 fc28 	bl	8006a9c <HAL_UART_Transmit>

    // Convert sensor value
    //u16ToString( dataToPlot->mouse_D_Y, u16charArr,5);
    sprintf(u16charArr, "%d", dataToPlot->mouse_D_Y);
 800124c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001254:	461a      	mov	r2, r3
 8001256:	4922      	ldr	r1, [pc, #136]	; (80012e0 <plotSensorData+0x198>)
 8001258:	f009 fd1e 	bl	800ac98 <siprintf>
    // Send delta Y
    HAL_UART_Transmit(&huart3,(uint8_t *) M_D_Y, sizeof(M_D_Y), 100);
 800125c:	f107 0118 	add.w	r1, r7, #24
 8001260:	2364      	movs	r3, #100	; 0x64
 8001262:	2209      	movs	r2, #9
 8001264:	481d      	ldr	r0, [pc, #116]	; (80012dc <plotSensorData+0x194>)
 8001266:	f005 fc19 	bl	8006a9c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3,(uint8_t *) u16charArr, arrSize, 100);
 800126a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800126c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800126e:	b29a      	uxth	r2, r3
 8001270:	2364      	movs	r3, #100	; 0x64
 8001272:	481a      	ldr	r0, [pc, #104]	; (80012dc <plotSensorData+0x194>)
 8001274:	f005 fc12 	bl	8006a9c <HAL_UART_Transmit>

    if(dataToPlot->mouseMotion)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d007      	beq.n	8001290 <plotSensorData+0x148>
      HAL_UART_Transmit(&huart3,(uint8_t *) M_M, sizeof(M_M), 100);
 8001280:	f107 0110 	add.w	r1, r7, #16
 8001284:	2364      	movs	r3, #100	; 0x64
 8001286:	2207      	movs	r2, #7
 8001288:	4814      	ldr	r0, [pc, #80]	; (80012dc <plotSensorData+0x194>)
 800128a:	f005 fc07 	bl	8006a9c <HAL_UART_Transmit>
 800128e:	e006      	b.n	800129e <plotSensorData+0x156>
    else
	  HAL_UART_Transmit(&huart3,(uint8_t *) M_S, sizeof(M_S), 100);
 8001290:	f107 0108 	add.w	r1, r7, #8
 8001294:	2364      	movs	r3, #100	; 0x64
 8001296:	2207      	movs	r2, #7
 8001298:	4810      	ldr	r0, [pc, #64]	; (80012dc <plotSensorData+0x194>)
 800129a:	f005 fbff 	bl	8006a9c <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart3,(uint8_t *) &CR, 1, 100);
 800129e:	f107 0147 	add.w	r1, r7, #71	; 0x47
 80012a2:	2364      	movs	r3, #100	; 0x64
 80012a4:	2201      	movs	r2, #1
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <plotSensorData+0x194>)
 80012a8:	f005 fbf8 	bl	8006a9c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3,(uint8_t *) MoveBack, sizeof(MoveBack), 100);
 80012ac:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80012b0:	2364      	movs	r3, #100	; 0x64
 80012b2:	2204      	movs	r2, #4
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <plotSensorData+0x194>)
 80012b6:	f005 fbf1 	bl	8006a9c <HAL_UART_Transmit>
 80012ba:	46ad      	mov	sp, r5
    //HAL_UART_Transmit(&huart3,(uint8_t *) MoveBack, sizeof(MoveBack), 100);

}
 80012bc:	bf00      	nop
 80012be:	3758      	adds	r7, #88	; 0x58
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bdb0      	pop	{r4, r5, r7, pc}
 80012c4:	00465b1b 	.word	0x00465b1b
 80012c8:	0800b4ec 	.word	0x0800b4ec
 80012cc:	0800b4fc 	.word	0x0800b4fc
 80012d0:	0800b508 	.word	0x0800b508
 80012d4:	0800b514 	.word	0x0800b514
 80012d8:	0800b51c 	.word	0x0800b51c
 80012dc:	24004af4 	.word	0x24004af4
 80012e0:	0800b4e8 	.word	0x0800b4e8

080012e4 <StartControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartControlTask */
void StartControlTask(void *argument)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80012ec:	2101      	movs	r1, #1
 80012ee:	4804      	ldr	r0, [pc, #16]	; (8001300 <StartControlTask+0x1c>)
 80012f0:	f001 fb61 	bl	80029b6 <HAL_GPIO_TogglePin>
	osDelay(500);
 80012f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f8:	f007 f860 	bl	80083bc <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80012fc:	e7f6      	b.n	80012ec <StartControlTask+0x8>
 80012fe:	bf00      	nop
 8001300:	58020400 	.word	0x58020400

08001304 <StartCommBoard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommBoard */
void StartCommBoard(void *argument)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommBoard */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 800130c:	2102      	movs	r1, #2
 800130e:	4804      	ldr	r0, [pc, #16]	; (8001320 <StartCommBoard+0x1c>)
 8001310:	f001 fb51 	bl	80029b6 <HAL_GPIO_TogglePin>
	osDelay(1000);
 8001314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001318:	f007 f850 	bl	80083bc <osDelay>
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 800131c:	e7f6      	b.n	800130c <StartCommBoard+0x8>
 800131e:	bf00      	nop
 8001320:	58021000 	.word	0x58021000

08001324 <StartSensorRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorRead */
void StartSensorRead(void *argument)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  sensValue sensorPacket;



  startUpMouse();
 800132c:	f7ff fdd4 	bl	8000ed8 <startUpMouse>
  /* Infinite loop */
  for(;;)
  {

    // Read the sensor values.
	readMouseSensor( &sensorPacket );
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fe9b 	bl	8001070 <readMouseSensor>

    //UART Send data to console.
    plotSensorData( &sensorPacket );
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff02 	bl	8001148 <plotSensorData>

    osDelay(1000);
 8001344:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001348:	f007 f838 	bl	80083bc <osDelay>
	readMouseSensor( &sensorPacket );
 800134c:	e7f0      	b.n	8001330 <StartSensorRead+0xc>
	...

08001350 <StartSafety>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSafety */
void StartSafety(void *argument)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001358:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <StartSafety+0x1c>)
 800135e:	f001 fb2a 	bl	80029b6 <HAL_GPIO_TogglePin>
	osDelay(1500);
 8001362:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001366:	f007 f829 	bl	80083bc <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800136a:	e7f5      	b.n	8001358 <StartSafety+0x8>
 800136c:	58020400 	.word	0x58020400

08001370 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001382:	f000 fbf7 	bl	8001b74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40001000 	.word	0x40001000

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_MspInit+0x30>)
 80013ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013b0:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <HAL_MspInit+0x30>)
 80013b2:	f043 0302 	orr.w	r3, r3, #2
 80013b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_MspInit+0x30>)
 80013bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	58024400 	.word	0x58024400

080013d8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08e      	sub	sp, #56	; 0x38
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a59      	ldr	r2, [pc, #356]	; (800155c <HAL_ETH_MspInit+0x184>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	f040 80ab 	bne.w	8001552 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80013fc:	4b58      	ldr	r3, [pc, #352]	; (8001560 <HAL_ETH_MspInit+0x188>)
 80013fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001402:	4a57      	ldr	r2, [pc, #348]	; (8001560 <HAL_ETH_MspInit+0x188>)
 8001404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001408:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800140c:	4b54      	ldr	r3, [pc, #336]	; (8001560 <HAL_ETH_MspInit+0x188>)
 800140e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001412:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001416:	623b      	str	r3, [r7, #32]
 8001418:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800141a:	4b51      	ldr	r3, [pc, #324]	; (8001560 <HAL_ETH_MspInit+0x188>)
 800141c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001420:	4a4f      	ldr	r2, [pc, #316]	; (8001560 <HAL_ETH_MspInit+0x188>)
 8001422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001426:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800142a:	4b4d      	ldr	r3, [pc, #308]	; (8001560 <HAL_ETH_MspInit+0x188>)
 800142c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001438:	4b49      	ldr	r3, [pc, #292]	; (8001560 <HAL_ETH_MspInit+0x188>)
 800143a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800143e:	4a48      	ldr	r2, [pc, #288]	; (8001560 <HAL_ETH_MspInit+0x188>)
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001448:	4b45      	ldr	r3, [pc, #276]	; (8001560 <HAL_ETH_MspInit+0x188>)
 800144a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	4b42      	ldr	r3, [pc, #264]	; (8001560 <HAL_ETH_MspInit+0x188>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145c:	4a40      	ldr	r2, [pc, #256]	; (8001560 <HAL_ETH_MspInit+0x188>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001466:	4b3e      	ldr	r3, [pc, #248]	; (8001560 <HAL_ETH_MspInit+0x188>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001474:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <HAL_ETH_MspInit+0x188>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147a:	4a39      	ldr	r2, [pc, #228]	; (8001560 <HAL_ETH_MspInit+0x188>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001484:	4b36      	ldr	r3, [pc, #216]	; (8001560 <HAL_ETH_MspInit+0x188>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	4b33      	ldr	r3, [pc, #204]	; (8001560 <HAL_ETH_MspInit+0x188>)
 8001494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001498:	4a31      	ldr	r2, [pc, #196]	; (8001560 <HAL_ETH_MspInit+0x188>)
 800149a:	f043 0302 	orr.w	r3, r3, #2
 800149e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <HAL_ETH_MspInit+0x188>)
 80014a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <HAL_ETH_MspInit+0x188>)
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b6:	4a2a      	ldr	r2, [pc, #168]	; (8001560 <HAL_ETH_MspInit+0x188>)
 80014b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c0:	4b27      	ldr	r3, [pc, #156]	; (8001560 <HAL_ETH_MspInit+0x188>)
 80014c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80014ce:	2332      	movs	r3, #50	; 0x32
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014de:	230b      	movs	r3, #11
 80014e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e6:	4619      	mov	r1, r3
 80014e8:	481e      	ldr	r0, [pc, #120]	; (8001564 <HAL_ETH_MspInit+0x18c>)
 80014ea:	f001 f89b 	bl	8002624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80014ee:	2386      	movs	r3, #134	; 0x86
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014fe:	230b      	movs	r3, #11
 8001500:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001506:	4619      	mov	r1, r3
 8001508:	4817      	ldr	r0, [pc, #92]	; (8001568 <HAL_ETH_MspInit+0x190>)
 800150a:	f001 f88b 	bl	8002624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800150e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001520:	230b      	movs	r3, #11
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001528:	4619      	mov	r1, r3
 800152a:	4810      	ldr	r0, [pc, #64]	; (800156c <HAL_ETH_MspInit+0x194>)
 800152c:	f001 f87a 	bl	8002624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001530:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001542:	230b      	movs	r3, #11
 8001544:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	4808      	ldr	r0, [pc, #32]	; (8001570 <HAL_ETH_MspInit+0x198>)
 800154e:	f001 f869 	bl	8002624 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001552:	bf00      	nop
 8001554:	3738      	adds	r7, #56	; 0x38
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40028000 	.word	0x40028000
 8001560:	58024400 	.word	0x58024400
 8001564:	58020800 	.word	0x58020800
 8001568:	58020000 	.word	0x58020000
 800156c:	58020400 	.word	0x58020400
 8001570:	58021800 	.word	0x58021800

08001574 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a1a      	ldr	r2, [pc, #104]	; (80015fc <HAL_SPI_MspInit+0x88>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d12d      	bne.n	80015f2 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_SPI_MspInit+0x8c>)
 8001598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800159c:	4a18      	ldr	r2, [pc, #96]	; (8001600 <HAL_SPI_MspInit+0x8c>)
 800159e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_SPI_MspInit+0x8c>)
 80015a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_SPI_MspInit+0x8c>)
 80015b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ba:	4a11      	ldr	r2, [pc, #68]	; (8001600 <HAL_SPI_MspInit+0x8c>)
 80015bc:	f043 0310 	orr.w	r3, r3, #16
 80015c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <HAL_SPI_MspInit+0x8c>)
 80015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80015d2:	2364      	movs	r3, #100	; 0x64
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80015e2:	2305      	movs	r3, #5
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <HAL_SPI_MspInit+0x90>)
 80015ee:	f001 f819 	bl	8002624 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40013400 	.word	0x40013400
 8001600:	58024400 	.word	0x58024400
 8001604:	58021000 	.word	0x58021000

08001608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08e      	sub	sp, #56	; 0x38
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a4e      	ldr	r2, [pc, #312]	; (8001760 <HAL_UART_MspInit+0x158>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d12e      	bne.n	8001688 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800162a:	4b4e      	ldr	r3, [pc, #312]	; (8001764 <HAL_UART_MspInit+0x15c>)
 800162c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001630:	4a4c      	ldr	r2, [pc, #304]	; (8001764 <HAL_UART_MspInit+0x15c>)
 8001632:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001636:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800163a:	4b4a      	ldr	r3, [pc, #296]	; (8001764 <HAL_UART_MspInit+0x15c>)
 800163c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001640:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001644:	623b      	str	r3, [r7, #32]
 8001646:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001648:	4b46      	ldr	r3, [pc, #280]	; (8001764 <HAL_UART_MspInit+0x15c>)
 800164a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164e:	4a45      	ldr	r2, [pc, #276]	; (8001764 <HAL_UART_MspInit+0x15c>)
 8001650:	f043 0320 	orr.w	r3, r3, #32
 8001654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001658:	4b42      	ldr	r3, [pc, #264]	; (8001764 <HAL_UART_MspInit+0x15c>)
 800165a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165e:	f003 0320 	and.w	r3, r3, #32
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166a:	2312      	movs	r3, #18
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001676:	2307      	movs	r3, #7
 8001678:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	4619      	mov	r1, r3
 8001680:	4839      	ldr	r0, [pc, #228]	; (8001768 <HAL_UART_MspInit+0x160>)
 8001682:	f000 ffcf 	bl	8002624 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001686:	e067      	b.n	8001758 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a37      	ldr	r2, [pc, #220]	; (800176c <HAL_UART_MspInit+0x164>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12e      	bne.n	80016f0 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001692:	4b34      	ldr	r3, [pc, #208]	; (8001764 <HAL_UART_MspInit+0x15c>)
 8001694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001698:	4a32      	ldr	r2, [pc, #200]	; (8001764 <HAL_UART_MspInit+0x15c>)
 800169a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016a2:	4b30      	ldr	r3, [pc, #192]	; (8001764 <HAL_UART_MspInit+0x15c>)
 80016a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	61bb      	str	r3, [r7, #24]
 80016ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b0:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <HAL_UART_MspInit+0x15c>)
 80016b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b6:	4a2b      	ldr	r2, [pc, #172]	; (8001764 <HAL_UART_MspInit+0x15c>)
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c0:	4b28      	ldr	r3, [pc, #160]	; (8001764 <HAL_UART_MspInit+0x15c>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016ce:	2320      	movs	r3, #32
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d2:	2312      	movs	r3, #18
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016de:	2307      	movs	r3, #7
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e6:	4619      	mov	r1, r3
 80016e8:	4821      	ldr	r0, [pc, #132]	; (8001770 <HAL_UART_MspInit+0x168>)
 80016ea:	f000 ff9b 	bl	8002624 <HAL_GPIO_Init>
}
 80016ee:	e033      	b.n	8001758 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART3)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1f      	ldr	r2, [pc, #124]	; (8001774 <HAL_UART_MspInit+0x16c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d12e      	bne.n	8001758 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <HAL_UART_MspInit+0x15c>)
 80016fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001700:	4a18      	ldr	r2, [pc, #96]	; (8001764 <HAL_UART_MspInit+0x15c>)
 8001702:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001706:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <HAL_UART_MspInit+0x15c>)
 800170c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_UART_MspInit+0x15c>)
 800171a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171e:	4a11      	ldr	r2, [pc, #68]	; (8001764 <HAL_UART_MspInit+0x15c>)
 8001720:	f043 0308 	orr.w	r3, r3, #8
 8001724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_UART_MspInit+0x15c>)
 800172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001736:	f44f 7340 	mov.w	r3, #768	; 0x300
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001748:	2307      	movs	r3, #7
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001750:	4619      	mov	r1, r3
 8001752:	4807      	ldr	r0, [pc, #28]	; (8001770 <HAL_UART_MspInit+0x168>)
 8001754:	f000 ff66 	bl	8002624 <HAL_GPIO_Init>
}
 8001758:	bf00      	nop
 800175a:	3738      	adds	r7, #56	; 0x38
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40007800 	.word	0x40007800
 8001764:	58024400 	.word	0x58024400
 8001768:	58021400 	.word	0x58021400
 800176c:	40004400 	.word	0x40004400
 8001770:	58020c00 	.word	0x58020c00
 8001774:	40004800 	.word	0x40004800

08001778 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a21      	ldr	r2, [pc, #132]	; (800181c <HAL_PCD_MspInit+0xa4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d13b      	bne.n	8001812 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b21      	ldr	r3, [pc, #132]	; (8001820 <HAL_PCD_MspInit+0xa8>)
 800179c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a0:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <HAL_PCD_MspInit+0xa8>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017aa:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <HAL_PCD_MspInit+0xa8>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80017b8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80017ca:	230a      	movs	r3, #10
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <HAL_PCD_MspInit+0xac>)
 80017d6:	f000 ff25 	bl	8002624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	480d      	ldr	r0, [pc, #52]	; (8001824 <HAL_PCD_MspInit+0xac>)
 80017f0:	f000 ff18 	bl	8002624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <HAL_PCD_MspInit+0xa8>)
 80017f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017fa:	4a09      	ldr	r2, [pc, #36]	; (8001820 <HAL_PCD_MspInit+0xa8>)
 80017fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001800:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_PCD_MspInit+0xa8>)
 8001806:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800180a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001812:	bf00      	nop
 8001814:	3728      	adds	r7, #40	; 0x28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40080000 	.word	0x40080000
 8001820:	58024400 	.word	0x58024400
 8001824:	58020000 	.word	0x58020000

08001828 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08e      	sub	sp, #56	; 0x38
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	2036      	movs	r0, #54	; 0x36
 800183e:	f000 fab3 	bl	8001da8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001842:	2036      	movs	r0, #54	; 0x36
 8001844:	f000 faca 	bl	8001ddc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001848:	4b20      	ldr	r3, [pc, #128]	; (80018cc <HAL_InitTick+0xa4>)
 800184a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800184e:	4a1f      	ldr	r2, [pc, #124]	; (80018cc <HAL_InitTick+0xa4>)
 8001850:	f043 0310 	orr.w	r3, r3, #16
 8001854:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <HAL_InitTick+0xa4>)
 800185a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001866:	f107 020c 	add.w	r2, r7, #12
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f002 f9e1 	bl	8003c38 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001876:	f002 f9b3 	bl	8003be0 <HAL_RCC_GetPCLK1Freq>
 800187a:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800187c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187e:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <HAL_InitTick+0xa8>)
 8001880:	fba2 2303 	umull	r2, r3, r2, r3
 8001884:	0c9b      	lsrs	r3, r3, #18
 8001886:	3b01      	subs	r3, #1
 8001888:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_InitTick+0xac>)
 800188c:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <HAL_InitTick+0xb0>)
 800188e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_InitTick+0xac>)
 8001892:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001896:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001898:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <HAL_InitTick+0xac>)
 800189a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <HAL_InitTick+0xac>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_InitTick+0xac>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018aa:	480a      	ldr	r0, [pc, #40]	; (80018d4 <HAL_InitTick+0xac>)
 80018ac:	f004 fdb7 	bl	800641e <HAL_TIM_Base_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d104      	bne.n	80018c0 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <HAL_InitTick+0xac>)
 80018b8:	f004 fe12 	bl	80064e0 <HAL_TIM_Base_Start_IT>
 80018bc:	4603      	mov	r3, r0
 80018be:	e000      	b.n	80018c2 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3738      	adds	r7, #56	; 0x38
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	58024400 	.word	0x58024400
 80018d0:	431bde83 	.word	0x431bde83
 80018d4:	24005150 	.word	0x24005150
 80018d8:	40001000 	.word	0x40001000

080018dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <HardFault_Handler+0x4>

080018f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <MemManage_Handler+0x4>

080018f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <BusFault_Handler+0x4>

080018fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <UsageFault_Handler+0x4>

08001902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <TIM6_DAC_IRQHandler+0x10>)
 8001916:	f004 fe19 	bl	800654c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	24005150 	.word	0x24005150

08001924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800192c:	4a14      	ldr	r2, [pc, #80]	; (8001980 <_sbrk+0x5c>)
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <_sbrk+0x60>)
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <_sbrk+0x64>)
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <_sbrk+0x68>)
 8001944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	429a      	cmp	r2, r3
 8001952:	d207      	bcs.n	8001964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001954:	f009 f962 	bl	800ac1c <__errno>
 8001958:	4602      	mov	r2, r0
 800195a:	230c      	movs	r3, #12
 800195c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	e009      	b.n	8001978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	4a05      	ldr	r2, [pc, #20]	; (8001988 <_sbrk+0x64>)
 8001974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001976:	68fb      	ldr	r3, [r7, #12]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	24080000 	.word	0x24080000
 8001984:	00000400 	.word	0x00000400
 8001988:	24000154 	.word	0x24000154
 800198c:	240051e8 	.word	0x240051e8

08001990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001994:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <SystemInit+0xec>)
 8001996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199a:	4a38      	ldr	r2, [pc, #224]	; (8001a7c <SystemInit+0xec>)
 800199c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019a4:	4b36      	ldr	r3, [pc, #216]	; (8001a80 <SystemInit+0xf0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	2b06      	cmp	r3, #6
 80019ae:	d807      	bhi.n	80019c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019b0:	4b33      	ldr	r3, [pc, #204]	; (8001a80 <SystemInit+0xf0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 030f 	bic.w	r3, r3, #15
 80019b8:	4a31      	ldr	r2, [pc, #196]	; (8001a80 <SystemInit+0xf0>)
 80019ba:	f043 0307 	orr.w	r3, r3, #7
 80019be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019c0:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <SystemInit+0xf4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a2f      	ldr	r2, [pc, #188]	; (8001a84 <SystemInit+0xf4>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019cc:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <SystemInit+0xf4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019d2:	4b2c      	ldr	r3, [pc, #176]	; (8001a84 <SystemInit+0xf4>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	492b      	ldr	r1, [pc, #172]	; (8001a84 <SystemInit+0xf4>)
 80019d8:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <SystemInit+0xf8>)
 80019da:	4013      	ands	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019de:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <SystemInit+0xf0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	2b07      	cmp	r3, #7
 80019e8:	d907      	bls.n	80019fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019ea:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <SystemInit+0xf0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 030f 	bic.w	r3, r3, #15
 80019f2:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <SystemInit+0xf0>)
 80019f4:	f043 0307 	orr.w	r3, r3, #7
 80019f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019fa:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <SystemInit+0xf4>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a00:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <SystemInit+0xf4>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a06:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <SystemInit+0xf4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <SystemInit+0xf4>)
 8001a0e:	4a1f      	ldr	r2, [pc, #124]	; (8001a8c <SystemInit+0xfc>)
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <SystemInit+0xf4>)
 8001a14:	4a1e      	ldr	r2, [pc, #120]	; (8001a90 <SystemInit+0x100>)
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <SystemInit+0xf4>)
 8001a1a:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <SystemInit+0x104>)
 8001a1c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <SystemInit+0xf4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <SystemInit+0xf4>)
 8001a26:	4a1b      	ldr	r2, [pc, #108]	; (8001a94 <SystemInit+0x104>)
 8001a28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <SystemInit+0xf4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <SystemInit+0xf4>)
 8001a32:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <SystemInit+0x104>)
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <SystemInit+0xf4>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <SystemInit+0xf4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <SystemInit+0xf4>)
 8001a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <SystemInit+0xf4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <SystemInit+0x108>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <SystemInit+0x10c>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a5a:	d202      	bcs.n	8001a62 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a5c:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <SystemInit+0x110>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <SystemInit+0x114>)
 8001a64:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a68:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <SystemInit+0xec>)
 8001a6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a70:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00
 8001a80:	52002000 	.word	0x52002000
 8001a84:	58024400 	.word	0x58024400
 8001a88:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a8c:	02020200 	.word	0x02020200
 8001a90:	01ff0000 	.word	0x01ff0000
 8001a94:	01010280 	.word	0x01010280
 8001a98:	5c001000 	.word	0x5c001000
 8001a9c:	ffff0000 	.word	0xffff0000
 8001aa0:	51008108 	.word	0x51008108
 8001aa4:	52004000 	.word	0x52004000

08001aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001aac:	f7ff ff70 	bl	8001990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ab0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ab2:	e003      	b.n	8001abc <LoopCopyDataInit>

08001ab4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001ab6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ab8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001aba:	3104      	adds	r1, #4

08001abc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001abc:	480a      	ldr	r0, [pc, #40]	; (8001ae8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001ac0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ac2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ac4:	d3f6      	bcc.n	8001ab4 <CopyDataInit>
  ldr  r2, =_sbss
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001ac8:	e002      	b.n	8001ad0 <LoopFillZerobss>

08001aca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001aca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001acc:	f842 3b04 	str.w	r3, [r2], #4

08001ad0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001ad2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ad4:	d3f9      	bcc.n	8001aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f009 f8a7 	bl	800ac28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ada:	f7fe fdd1 	bl	8000680 <main>
  bx  lr    
 8001ade:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ae0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001ae4:	0800c648 	.word	0x0800c648
  ldr  r0, =_sdata
 8001ae8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001aec:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 8001af0:	24000138 	.word	0x24000138
  ldr  r3, = _ebss
 8001af4:	240051e4 	.word	0x240051e4

08001af8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC3_IRQHandler>
	...

08001afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b02:	2003      	movs	r0, #3
 8001b04:	f000 f945 	bl	8001d92 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b08:	f001 fec8 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8001b0c:	4601      	mov	r1, r0
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_Init+0x68>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	0a1b      	lsrs	r3, r3, #8
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <HAL_Init+0x6c>)
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	fa21 f303 	lsr.w	r3, r1, r3
 8001b24:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_Init+0x68>)
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_Init+0x6c>)
 8001b30:	5cd3      	ldrb	r3, [r2, r3]
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <HAL_Init+0x70>)
 8001b3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b40:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <HAL_Init+0x74>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b46:	2000      	movs	r0, #0
 8001b48:	f7ff fe6e 	bl	8001828 <HAL_InitTick>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e002      	b.n	8001b5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b56:	f7ff fc25 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	58024400 	.word	0x58024400
 8001b68:	0800c5dc 	.word	0x0800c5dc
 8001b6c:	24000004 	.word	0x24000004
 8001b70:	24000000 	.word	0x24000000

08001b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_IncTick+0x20>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_IncTick+0x24>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <HAL_IncTick+0x24>)
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	2400000c 	.word	0x2400000c
 8001b98:	2400519c 	.word	0x2400519c

08001b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <HAL_GetTick+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	2400519c 	.word	0x2400519c

08001bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bbc:	f7ff ffee 	bl	8001b9c <HAL_GetTick>
 8001bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bcc:	d005      	beq.n	8001bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_Delay+0x40>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bda:	bf00      	nop
 8001bdc:	f7ff ffde 	bl	8001b9c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d8f7      	bhi.n	8001bdc <HAL_Delay+0x28>
  {
  }
}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	2400000c 	.word	0x2400000c

08001bf8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_GetREVID+0x14>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	0c1b      	lsrs	r3, r3, #16
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	5c001000 	.word	0x5c001000

08001c10 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001c20:	4904      	ldr	r1, [pc, #16]	; (8001c34 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	58000400 	.word	0x58000400

08001c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <__NVIC_SetPriorityGrouping+0x40>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c54:	4013      	ands	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <__NVIC_SetPriorityGrouping+0x40>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00
 8001c7c:	05fa0000 	.word	0x05fa0000

08001c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <__NVIC_GetPriorityGrouping+0x18>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	f003 0307 	and.w	r3, r3, #7
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	db0b      	blt.n	8001cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	f003 021f 	and.w	r2, r3, #31
 8001cb4:	4907      	ldr	r1, [pc, #28]	; (8001cd4 <__NVIC_EnableIRQ+0x38>)
 8001cb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000e100 	.word	0xe000e100

08001cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ce4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	db0a      	blt.n	8001d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	490c      	ldr	r1, [pc, #48]	; (8001d24 <__NVIC_SetPriority+0x4c>)
 8001cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d00:	e00a      	b.n	8001d18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4908      	ldr	r1, [pc, #32]	; (8001d28 <__NVIC_SetPriority+0x50>)
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3b04      	subs	r3, #4
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	440b      	add	r3, r1
 8001d16:	761a      	strb	r2, [r3, #24]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000e100 	.word	0xe000e100
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f1c3 0307 	rsb	r3, r3, #7
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	bf28      	it	cs
 8001d4a:	2304      	movcs	r3, #4
 8001d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3304      	adds	r3, #4
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d902      	bls.n	8001d5c <NVIC_EncodePriority+0x30>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3b03      	subs	r3, #3
 8001d5a:	e000      	b.n	8001d5e <NVIC_EncodePriority+0x32>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	401a      	ands	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	4313      	orrs	r3, r2
         );
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ff4c 	bl	8001c38 <__NVIC_SetPriorityGrouping>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001db6:	f7ff ff63 	bl	8001c80 <__NVIC_GetPriorityGrouping>
 8001dba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	68b9      	ldr	r1, [r7, #8]
 8001dc0:	6978      	ldr	r0, [r7, #20]
 8001dc2:	f7ff ffb3 	bl	8001d2c <NVIC_EncodePriority>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ff82 	bl	8001cd8 <__NVIC_SetPriority>
}
 8001dd4:	bf00      	nop
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff56 	bl	8001c9c <__NVIC_EnableIRQ>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e0c6      	b.n	8001f98 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fae0 	bl	80013d8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2223      	movs	r2, #35	; 0x23
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1e:	4b60      	ldr	r3, [pc, #384]	; (8001fa0 <HAL_ETH_Init+0x1a8>)
 8001e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e24:	4a5e      	ldr	r2, [pc, #376]	; (8001fa0 <HAL_ETH_Init+0x1a8>)
 8001e26:	f043 0302 	orr.w	r3, r3, #2
 8001e2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e2e:	4b5c      	ldr	r3, [pc, #368]	; (8001fa0 <HAL_ETH_Init+0x1a8>)
 8001e30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7a1b      	ldrb	r3, [r3, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d103      	bne.n	8001e4c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7ff fee3 	bl	8001c10 <HAL_SYSCFG_ETHInterfaceSelect>
 8001e4a:	e003      	b.n	8001e54 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001e4c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001e50:	f7ff fede 	bl	8001c10 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e6c:	f7ff fe96 	bl	8001b9c <HAL_GetTick>
 8001e70:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001e72:	e00f      	b.n	8001e94 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001e74:	f7ff fe92 	bl	8001b9c <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e82:	d907      	bls.n	8001e94 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2204      	movs	r2, #4
 8001e88:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	22e0      	movs	r2, #224	; 0xe0
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e081      	b.n	8001f98 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1e6      	bne.n	8001e74 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fac0 	bl	800242c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001eac:	f001 fe68 	bl	8003b80 <HAL_RCC_GetHCLKFreq>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b3c      	ldr	r3, [pc, #240]	; (8001fa4 <HAL_ETH_Init+0x1ac>)
 8001eb4:	fba3 2302 	umull	r2, r3, r3, r2
 8001eb8:	0c9a      	lsrs	r2, r3, #18
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	3a01      	subs	r2, #1
 8001ec0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fa13 	bl	80022f0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ee0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ee4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d007      	beq.n	8001f02 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	22e0      	movs	r2, #224	; 0xe0
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e04a      	b.n	8001f98 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	f241 1308 	movw	r3, #4360	; 0x1108
 8001f0a:	4413      	add	r3, r2
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <HAL_ETH_Init+0x1b0>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6952      	ldr	r2, [r2, #20]
 8001f16:	0052      	lsls	r2, r2, #1
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	6809      	ldr	r1, [r1, #0]
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001f22:	440b      	add	r3, r1
 8001f24:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fad8 	bl	80024dc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fb1c 	bl	800256a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	3305      	adds	r3, #5
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	021a      	lsls	r2, r3, #8
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	3304      	adds	r3, #4
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	3303      	adds	r3, #3
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	061a      	lsls	r2, r3, #24
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	3302      	adds	r3, #2
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	041b      	lsls	r3, r3, #16
 8001f64:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f70:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f7e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f80:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2210      	movs	r2, #16
 8001f94:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	58024400 	.word	0x58024400
 8001fa4:	431bde83 	.word	0x431bde83
 8001fa8:	ffff8001 	.word	0xffff8001

08001fac <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001fbe:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	791b      	ldrb	r3, [r3, #4]
 8001fc4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001fc6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	7b1b      	ldrb	r3, [r3, #12]
 8001fcc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001fce:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	7b5b      	ldrb	r3, [r3, #13]
 8001fd4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001fd6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	7b9b      	ldrb	r3, [r3, #14]
 8001fdc:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001fde:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	7bdb      	ldrb	r3, [r3, #15]
 8001fe4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001fe6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	7c12      	ldrb	r2, [r2, #16]
 8001fec:	2a00      	cmp	r2, #0
 8001fee:	d102      	bne.n	8001ff6 <ETH_SetMACConfig+0x4a>
 8001ff0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ff4:	e000      	b.n	8001ff8 <ETH_SetMACConfig+0x4c>
 8001ff6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001ff8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	7c52      	ldrb	r2, [r2, #17]
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	d102      	bne.n	8002008 <ETH_SetMACConfig+0x5c>
 8002002:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002006:	e000      	b.n	800200a <ETH_SetMACConfig+0x5e>
 8002008:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800200a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	7c9b      	ldrb	r3, [r3, #18]
 8002010:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002012:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002018:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800201e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	7f1b      	ldrb	r3, [r3, #28]
 8002024:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002026:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	7f5b      	ldrb	r3, [r3, #29]
 800202c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800202e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	7f92      	ldrb	r2, [r2, #30]
 8002034:	2a00      	cmp	r2, #0
 8002036:	d102      	bne.n	800203e <ETH_SetMACConfig+0x92>
 8002038:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800203c:	e000      	b.n	8002040 <ETH_SetMACConfig+0x94>
 800203e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002040:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	7fdb      	ldrb	r3, [r3, #31]
 8002046:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002048:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002050:	2a00      	cmp	r2, #0
 8002052:	d102      	bne.n	800205a <ETH_SetMACConfig+0xae>
 8002054:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002058:	e000      	b.n	800205c <ETH_SetMACConfig+0xb0>
 800205a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800205c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002062:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800206a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800206c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b56      	ldr	r3, [pc, #344]	; (80021d8 <ETH_SetMACConfig+0x22c>)
 800207e:	4013      	ands	r3, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	68f9      	ldr	r1, [r7, #12]
 8002086:	430b      	orrs	r3, r1
 8002088:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002096:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002098:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020a0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80020a2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80020aa:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80020ac:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d102      	bne.n	80020be <ETH_SetMACConfig+0x112>
 80020b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020bc:	e000      	b.n	80020c0 <ETH_SetMACConfig+0x114>
 80020be:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80020c0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4b42      	ldr	r3, [pc, #264]	; (80021dc <ETH_SetMACConfig+0x230>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	68f9      	ldr	r1, [r7, #12]
 80020da:	430b      	orrs	r3, r1
 80020dc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020e4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	4b3a      	ldr	r3, [pc, #232]	; (80021e0 <ETH_SetMACConfig+0x234>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	68f9      	ldr	r1, [r7, #12]
 80020fe:	430b      	orrs	r3, r1
 8002100:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002108:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800210e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002116:	2a00      	cmp	r2, #0
 8002118:	d101      	bne.n	800211e <ETH_SetMACConfig+0x172>
 800211a:	2280      	movs	r2, #128	; 0x80
 800211c:	e000      	b.n	8002120 <ETH_SetMACConfig+0x174>
 800211e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002120:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002126:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002128:	4313      	orrs	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002132:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002136:	4013      	ands	r3, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	68f9      	ldr	r1, [r7, #12]
 800213e:	430b      	orrs	r3, r1
 8002140:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002148:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002150:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002152:	4313      	orrs	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215e:	f023 0103 	bic.w	r1, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	430a      	orrs	r2, r1
 800216a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002176:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002192:	2a00      	cmp	r2, #0
 8002194:	d101      	bne.n	800219a <ETH_SetMACConfig+0x1ee>
 8002196:	2240      	movs	r2, #64	; 0x40
 8002198:	e000      	b.n	800219c <ETH_SetMACConfig+0x1f0>
 800219a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800219c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80021a4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80021a6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80021ae:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80021b0:	4313      	orrs	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80021bc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	00048083 	.word	0x00048083
 80021dc:	c0f88000 	.word	0xc0f88000
 80021e0:	fffffef0 	.word	0xfffffef0

080021e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b38      	ldr	r3, [pc, #224]	; (80022dc <ETH_SetDMAConfig+0xf8>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	6809      	ldr	r1, [r1, #0]
 8002204:	431a      	orrs	r2, r3
 8002206:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800220a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	791b      	ldrb	r3, [r3, #4]
 8002210:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002216:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	7b1b      	ldrb	r3, [r3, #12]
 800221c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	f241 0304 	movw	r3, #4100	; 0x1004
 800222a:	4413      	add	r3, r2
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <ETH_SetDMAConfig+0xfc>)
 8002230:	4013      	ands	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6811      	ldr	r1, [r2, #0]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	431a      	orrs	r2, r3
 800223a:	f241 0304 	movw	r3, #4100	; 0x1004
 800223e:	440b      	add	r3, r1
 8002240:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	7b5b      	ldrb	r3, [r3, #13]
 8002246:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800224c:	4313      	orrs	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <ETH_SetDMAConfig+0x100>)
 800225c:	4013      	ands	r3, r2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6811      	ldr	r1, [r2, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	431a      	orrs	r2, r3
 8002266:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800226a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	7d1b      	ldrb	r3, [r3, #20]
 8002274:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002276:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	7f5b      	ldrb	r3, [r3, #29]
 800227c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800227e:	4313      	orrs	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	f241 1304 	movw	r3, #4356	; 0x1104
 800228a:	4413      	add	r3, r2
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <ETH_SetDMAConfig+0x104>)
 8002290:	4013      	ands	r3, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6811      	ldr	r1, [r2, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	431a      	orrs	r2, r3
 800229a:	f241 1304 	movw	r3, #4356	; 0x1104
 800229e:	440b      	add	r3, r1
 80022a0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	7f1b      	ldrb	r3, [r3, #28]
 80022a6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	f241 1308 	movw	r3, #4360	; 0x1108
 80022b8:	4413      	add	r3, r2
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <ETH_SetDMAConfig+0x108>)
 80022be:	4013      	ands	r3, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6811      	ldr	r1, [r2, #0]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	f241 1308 	movw	r3, #4360	; 0x1108
 80022cc:	440b      	add	r3, r1
 80022ce:	601a      	str	r2, [r3, #0]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	ffff87fd 	.word	0xffff87fd
 80022e0:	ffff2ffe 	.word	0xffff2ffe
 80022e4:	fffec000 	.word	0xfffec000
 80022e8:	ffc0efef 	.word	0xffc0efef
 80022ec:	7fc0ffff 	.word	0x7fc0ffff

080022f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b0a4      	sub	sp, #144	; 0x90
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80022f8:	2301      	movs	r3, #1
 80022fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022fe:	2300      	movs	r3, #0
 8002300:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800230e:	2301      	movs	r3, #1
 8002310:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002314:	2301      	movs	r3, #1
 8002316:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800231a:	2301      	movs	r3, #1
 800231c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002320:	2300      	movs	r3, #0
 8002322:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002326:	2301      	movs	r3, #1
 8002328:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800232c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002330:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002332:	2300      	movs	r3, #0
 8002334:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002338:	2300      	movs	r3, #0
 800233a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002342:	2300      	movs	r3, #0
 8002344:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002348:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800234c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800234e:	2300      	movs	r3, #0
 8002350:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002354:	2300      	movs	r3, #0
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002358:	2301      	movs	r3, #1
 800235a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800236a:	2300      	movs	r3, #0
 800236c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800236e:	2300      	movs	r3, #0
 8002370:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002372:	2300      	movs	r3, #0
 8002374:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002382:	2301      	movs	r3, #1
 8002384:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002388:	2320      	movs	r3, #32
 800238a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800238e:	2301      	movs	r3, #1
 8002390:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002394:	2300      	movs	r3, #0
 8002396:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800239a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800239e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80023a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023a4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80023ac:	2302      	movs	r3, #2
 80023ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80023be:	2300      	movs	r3, #0
 80023c0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80023c4:	2301      	movs	r3, #1
 80023c6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80023ca:	2300      	movs	r3, #0
 80023cc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80023ce:	2301      	movs	r3, #1
 80023d0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80023d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d8:	4619      	mov	r1, r3
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff fde6 	bl	8001fac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80023e0:	2301      	movs	r3, #1
 80023e2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80023e4:	2301      	movs	r3, #1
 80023e6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023fe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002404:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002408:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800240a:	2300      	movs	r3, #0
 800240c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002410:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	4619      	mov	r1, r3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff fee1 	bl	80021e4 <ETH_SetDMAConfig>
}
 8002422:	bf00      	nop
 8002424:	3790      	adds	r7, #144	; 0x90
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800243c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002444:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002446:	f001 fb9b 	bl	8003b80 <HAL_RCC_GetHCLKFreq>
 800244a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4a1e      	ldr	r2, [pc, #120]	; (80024c8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d908      	bls.n	8002466 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d804      	bhi.n	8002466 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	e027      	b.n	80024b6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4a18      	ldr	r2, [pc, #96]	; (80024cc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d908      	bls.n	8002480 <ETH_MAC_MDIO_ClkConfig+0x54>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4a17      	ldr	r2, [pc, #92]	; (80024d0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d804      	bhi.n	8002480 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	e01a      	b.n	80024b6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4a13      	ldr	r2, [pc, #76]	; (80024d0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d903      	bls.n	8002490 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d911      	bls.n	80024b4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4a10      	ldr	r2, [pc, #64]	; (80024d4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d908      	bls.n	80024aa <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	4a0f      	ldr	r2, [pc, #60]	; (80024d8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d804      	bhi.n	80024aa <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	e005      	b.n	80024b6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	e000      	b.n	80024b6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80024b4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80024c0:	bf00      	nop
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	01312cff 	.word	0x01312cff
 80024cc:	02160ebf 	.word	0x02160ebf
 80024d0:	039386ff 	.word	0x039386ff
 80024d4:	05f5e0ff 	.word	0x05f5e0ff
 80024d8:	08f0d17f 	.word	0x08f0d17f

080024dc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	e01d      	b.n	8002526 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68d9      	ldr	r1, [r3, #12]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2200      	movs	r2, #0
 8002506:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2200      	movs	r2, #0
 8002512:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	3206      	adds	r2, #6
 800251c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3301      	adds	r3, #1
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d9de      	bls.n	80024ea <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	f241 132c 	movw	r3, #4396	; 0x112c
 800253a:	4413      	add	r3, r2
 800253c:	2203      	movs	r2, #3
 800253e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68d9      	ldr	r1, [r3, #12]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	f241 1314 	movw	r3, #4372	; 0x1114
 800254c:	4413      	add	r3, r2
 800254e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800255c:	601a      	str	r2, [r3, #0]
}
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800256a:	b480      	push	{r7}
 800256c:	b085      	sub	sp, #20
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	e024      	b.n	80025c2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6919      	ldr	r1, [r3, #16]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	440b      	add	r3, r1
 8002588:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2200      	movs	r2, #0
 8002594:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2200      	movs	r2, #0
 80025ac:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	330a      	adds	r3, #10
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	3301      	adds	r3, #1
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d9d7      	bls.n	8002578 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	f241 1330 	movw	r3, #4400	; 0x1130
 80025ee:	4413      	add	r3, r2
 80025f0:	2203      	movs	r2, #3
 80025f2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6919      	ldr	r1, [r3, #16]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	f241 131c 	movw	r3, #4380	; 0x111c
 8002600:	4413      	add	r3, r2
 8002602:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	f241 1328 	movw	r3, #4392	; 0x1128
 8002614:	4413      	add	r3, r2
 8002616:	6019      	str	r1, [r3, #0]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002632:	4b89      	ldr	r3, [pc, #548]	; (8002858 <HAL_GPIO_Init+0x234>)
 8002634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002636:	e194      	b.n	8002962 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2101      	movs	r1, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 8186 	beq.w	800295c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d00b      	beq.n	8002670 <HAL_GPIO_Init+0x4c>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d007      	beq.n	8002670 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002664:	2b11      	cmp	r3, #17
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b12      	cmp	r3, #18
 800266e:	d130      	bne.n	80026d2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026a6:	2201      	movs	r2, #1
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	f003 0201 	and.w	r2, r3, #1
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	2203      	movs	r2, #3
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0xee>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b12      	cmp	r3, #18
 8002710:	d123      	bne.n	800275a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	08da      	lsrs	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3208      	adds	r2, #8
 800271a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	220f      	movs	r2, #15
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	08da      	lsrs	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3208      	adds	r2, #8
 8002754:	69b9      	ldr	r1, [r7, #24]
 8002756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	2203      	movs	r2, #3
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 0203 	and.w	r2, r3, #3
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80e0 	beq.w	800295c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279c:	4b2f      	ldr	r3, [pc, #188]	; (800285c <HAL_GPIO_Init+0x238>)
 800279e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027a2:	4a2e      	ldr	r2, [pc, #184]	; (800285c <HAL_GPIO_Init+0x238>)
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_GPIO_Init+0x238>)
 80027ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ba:	4a29      	ldr	r2, [pc, #164]	; (8002860 <HAL_GPIO_Init+0x23c>)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3302      	adds	r3, #2
 80027c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	220f      	movs	r2, #15
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a20      	ldr	r2, [pc, #128]	; (8002864 <HAL_GPIO_Init+0x240>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d052      	beq.n	800288c <HAL_GPIO_Init+0x268>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a1f      	ldr	r2, [pc, #124]	; (8002868 <HAL_GPIO_Init+0x244>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d031      	beq.n	8002852 <HAL_GPIO_Init+0x22e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a1e      	ldr	r2, [pc, #120]	; (800286c <HAL_GPIO_Init+0x248>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d02b      	beq.n	800284e <HAL_GPIO_Init+0x22a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_GPIO_Init+0x24c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d025      	beq.n	800284a <HAL_GPIO_Init+0x226>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_GPIO_Init+0x250>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d01f      	beq.n	8002846 <HAL_GPIO_Init+0x222>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a1b      	ldr	r2, [pc, #108]	; (8002878 <HAL_GPIO_Init+0x254>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d019      	beq.n	8002842 <HAL_GPIO_Init+0x21e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a1a      	ldr	r2, [pc, #104]	; (800287c <HAL_GPIO_Init+0x258>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d013      	beq.n	800283e <HAL_GPIO_Init+0x21a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a19      	ldr	r2, [pc, #100]	; (8002880 <HAL_GPIO_Init+0x25c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00d      	beq.n	800283a <HAL_GPIO_Init+0x216>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a18      	ldr	r2, [pc, #96]	; (8002884 <HAL_GPIO_Init+0x260>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d007      	beq.n	8002836 <HAL_GPIO_Init+0x212>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a17      	ldr	r2, [pc, #92]	; (8002888 <HAL_GPIO_Init+0x264>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d101      	bne.n	8002832 <HAL_GPIO_Init+0x20e>
 800282e:	2309      	movs	r3, #9
 8002830:	e02d      	b.n	800288e <HAL_GPIO_Init+0x26a>
 8002832:	230a      	movs	r3, #10
 8002834:	e02b      	b.n	800288e <HAL_GPIO_Init+0x26a>
 8002836:	2308      	movs	r3, #8
 8002838:	e029      	b.n	800288e <HAL_GPIO_Init+0x26a>
 800283a:	2307      	movs	r3, #7
 800283c:	e027      	b.n	800288e <HAL_GPIO_Init+0x26a>
 800283e:	2306      	movs	r3, #6
 8002840:	e025      	b.n	800288e <HAL_GPIO_Init+0x26a>
 8002842:	2305      	movs	r3, #5
 8002844:	e023      	b.n	800288e <HAL_GPIO_Init+0x26a>
 8002846:	2304      	movs	r3, #4
 8002848:	e021      	b.n	800288e <HAL_GPIO_Init+0x26a>
 800284a:	2303      	movs	r3, #3
 800284c:	e01f      	b.n	800288e <HAL_GPIO_Init+0x26a>
 800284e:	2302      	movs	r3, #2
 8002850:	e01d      	b.n	800288e <HAL_GPIO_Init+0x26a>
 8002852:	2301      	movs	r3, #1
 8002854:	e01b      	b.n	800288e <HAL_GPIO_Init+0x26a>
 8002856:	bf00      	nop
 8002858:	58000080 	.word	0x58000080
 800285c:	58024400 	.word	0x58024400
 8002860:	58000400 	.word	0x58000400
 8002864:	58020000 	.word	0x58020000
 8002868:	58020400 	.word	0x58020400
 800286c:	58020800 	.word	0x58020800
 8002870:	58020c00 	.word	0x58020c00
 8002874:	58021000 	.word	0x58021000
 8002878:	58021400 	.word	0x58021400
 800287c:	58021800 	.word	0x58021800
 8002880:	58021c00 	.word	0x58021c00
 8002884:	58022000 	.word	0x58022000
 8002888:	58022400 	.word	0x58022400
 800288c:	2300      	movs	r3, #0
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	f002 0203 	and.w	r2, r2, #3
 8002894:	0092      	lsls	r2, r2, #2
 8002896:	4093      	lsls	r3, r2
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800289e:	4938      	ldr	r1, [pc, #224]	; (8002980 <HAL_GPIO_Init+0x35c>)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	089b      	lsrs	r3, r3, #2
 80028a4:	3302      	adds	r3, #2
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800292e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002954:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	3301      	adds	r3, #1
 8002960:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	f47f ae63 	bne.w	8002638 <HAL_GPIO_Init+0x14>
  }
}
 8002972:	bf00      	nop
 8002974:	3724      	adds	r7, #36	; 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	58000400 	.word	0x58000400

08002984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	807b      	strh	r3, [r7, #2]
 8002990:	4613      	mov	r3, r2
 8002992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002994:	787b      	ldrb	r3, [r7, #1]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800299a:	887a      	ldrh	r2, [r7, #2]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80029a0:	e003      	b.n	80029aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029a2:	887b      	ldrh	r3, [r7, #2]
 80029a4:	041a      	lsls	r2, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	619a      	str	r2, [r3, #24]
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	887b      	ldrh	r3, [r7, #2]
 80029c8:	401a      	ands	r2, r3
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d104      	bne.n	80029da <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029d0:	887b      	ldrh	r3, [r7, #2]
 80029d2:	041a      	lsls	r2, r3, #16
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80029d8:	e002      	b.n	80029e0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	619a      	str	r2, [r3, #24]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ee:	b08f      	sub	sp, #60	; 0x3c
 80029f0:	af0a      	add	r7, sp, #40	; 0x28
 80029f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e116      	b.n	8002c2c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d106      	bne.n	8002a1e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7fe fead 	bl	8001778 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2203      	movs	r2, #3
 8002a22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d102      	bne.n	8002a38 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f005 f95d 	bl	8007cfc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	687e      	ldr	r6, [r7, #4]
 8002a4a:	466d      	mov	r5, sp
 8002a4c:	f106 0410 	add.w	r4, r6, #16
 8002a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a60:	1d33      	adds	r3, r6, #4
 8002a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a64:	6838      	ldr	r0, [r7, #0]
 8002a66:	f005 f8e7 	bl	8007c38 <USB_CoreInit>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0d7      	b.n	8002c2c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f005 f94b 	bl	8007d1e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73fb      	strb	r3, [r7, #15]
 8002a8c:	e04a      	b.n	8002b24 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	333d      	adds	r3, #61	; 0x3d
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002aa2:	7bfa      	ldrb	r2, [r7, #15]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	333c      	adds	r3, #60	; 0x3c
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	b298      	uxth	r0, r3
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	1a9b      	subs	r3, r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3342      	adds	r3, #66	; 0x42
 8002aca:	4602      	mov	r2, r0
 8002acc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	333f      	adds	r3, #63	; 0x3f
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ae2:	7bfa      	ldrb	r2, [r7, #15]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	3344      	adds	r3, #68	; 0x44
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3348      	adds	r3, #72	; 0x48
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	3350      	adds	r3, #80	; 0x50
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	3301      	adds	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d3af      	bcc.n	8002a8e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]
 8002b32:	e044      	b.n	8002bbe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b60:	7bfa      	ldrb	r2, [r7, #15]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
 8002bbe:	7bfa      	ldrb	r2, [r7, #15]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d3b5      	bcc.n	8002b34 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	603b      	str	r3, [r7, #0]
 8002bce:	687e      	ldr	r6, [r7, #4]
 8002bd0:	466d      	mov	r5, sp
 8002bd2:	f106 0410 	add.w	r4, r6, #16
 8002bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002be2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002be6:	1d33      	adds	r3, r6, #4
 8002be8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bea:	6838      	ldr	r0, [r7, #0]
 8002bec:	f005 f8c2 	bl	8007d74 <USB_DevInit>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e014      	b.n	8002c2c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d102      	bne.n	8002c20 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f80a 	bl	8002c34 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f005 fa64 	bl	80080f2 <USB_DevDisconnect>

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	10000003 	.word	0x10000003

08002c7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_PWREx_ConfigSupply+0x70>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c90:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_PWREx_ConfigSupply+0x70>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d001      	beq.n	8002ca2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e01f      	b.n	8002ce2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	e01d      	b.n	8002ce2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ca6:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_PWREx_ConfigSupply+0x70>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f023 0207 	bic.w	r2, r3, #7
 8002cae:	490f      	ldr	r1, [pc, #60]	; (8002cec <HAL_PWREx_ConfigSupply+0x70>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002cb6:	f7fe ff71 	bl	8001b9c <HAL_GetTick>
 8002cba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cbc:	e009      	b.n	8002cd2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002cbe:	f7fe ff6d 	bl	8001b9c <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ccc:	d901      	bls.n	8002cd2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e007      	b.n	8002ce2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_PWREx_ConfigSupply+0x70>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cde:	d1ee      	bne.n	8002cbe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	58024800 	.word	0x58024800

08002cf0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	60d3      	str	r3, [r2, #12]
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	58024800 	.word	0x58024800

08002d10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	; 0x30
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e3ff      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8087 	beq.w	8002e3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d30:	4b99      	ldr	r3, [pc, #612]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d3a:	4b97      	ldr	r3, [pc, #604]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d42:	2b10      	cmp	r3, #16
 8002d44:	d007      	beq.n	8002d56 <HAL_RCC_OscConfig+0x46>
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	2b18      	cmp	r3, #24
 8002d4a:	d110      	bne.n	8002d6e <HAL_RCC_OscConfig+0x5e>
 8002d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d10b      	bne.n	8002d6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d56:	4b90      	ldr	r3, [pc, #576]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d06c      	beq.n	8002e3c <HAL_RCC_OscConfig+0x12c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d168      	bne.n	8002e3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e3d9      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d76:	d106      	bne.n	8002d86 <HAL_RCC_OscConfig+0x76>
 8002d78:	4b87      	ldr	r3, [pc, #540]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a86      	ldr	r2, [pc, #536]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	e02e      	b.n	8002de4 <HAL_RCC_OscConfig+0xd4>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCC_OscConfig+0x98>
 8002d8e:	4b82      	ldr	r3, [pc, #520]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a81      	ldr	r2, [pc, #516]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	4b7f      	ldr	r3, [pc, #508]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a7e      	ldr	r2, [pc, #504]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e01d      	b.n	8002de4 <HAL_RCC_OscConfig+0xd4>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCC_OscConfig+0xbc>
 8002db2:	4b79      	ldr	r3, [pc, #484]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a78      	ldr	r2, [pc, #480]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	4b76      	ldr	r3, [pc, #472]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a75      	ldr	r2, [pc, #468]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e00b      	b.n	8002de4 <HAL_RCC_OscConfig+0xd4>
 8002dcc:	4b72      	ldr	r3, [pc, #456]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a71      	ldr	r2, [pc, #452]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	4b6f      	ldr	r3, [pc, #444]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a6e      	ldr	r2, [pc, #440]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d013      	beq.n	8002e14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7fe fed6 	bl	8001b9c <HAL_GetTick>
 8002df0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df4:	f7fe fed2 	bl	8001b9c <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b64      	cmp	r3, #100	; 0x64
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e38d      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e06:	4b64      	ldr	r3, [pc, #400]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0xe4>
 8002e12:	e014      	b.n	8002e3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe fec2 	bl	8001b9c <HAL_GetTick>
 8002e18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fe febe 	bl	8001b9c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e379      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e2e:	4b5a      	ldr	r3, [pc, #360]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x10c>
 8002e3a:	e000      	b.n	8002e3e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 80ae 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e4c:	4b52      	ldr	r3, [pc, #328]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e56:	4b50      	ldr	r3, [pc, #320]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <HAL_RCC_OscConfig+0x162>
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	2b18      	cmp	r3, #24
 8002e66:	d13a      	bne.n	8002ede <HAL_RCC_OscConfig+0x1ce>
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d135      	bne.n	8002ede <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e72:	4b49      	ldr	r3, [pc, #292]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_RCC_OscConfig+0x17a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e34b      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	f7fe feb5 	bl	8001bf8 <HAL_GetREVID>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	f241 0303 	movw	r3, #4099	; 0x1003
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d817      	bhi.n	8002ec8 <HAL_RCC_OscConfig+0x1b8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	2b40      	cmp	r3, #64	; 0x40
 8002e9e:	d108      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x1a2>
 8002ea0:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ea8:	4a3b      	ldr	r2, [pc, #236]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eae:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb0:	e07a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb2:	4b39      	ldr	r3, [pc, #228]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	031b      	lsls	r3, r3, #12
 8002ec0:	4935      	ldr	r1, [pc, #212]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ec6:	e06f      	b.n	8002fa8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec8:	4b33      	ldr	r3, [pc, #204]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	061b      	lsls	r3, r3, #24
 8002ed6:	4930      	ldr	r1, [pc, #192]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002edc:	e064      	b.n	8002fa8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d045      	beq.n	8002f72 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ee6:	4b2c      	ldr	r3, [pc, #176]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 0219 	bic.w	r2, r3, #25
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	4929      	ldr	r1, [pc, #164]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fe50 	bl	8001b9c <HAL_GetTick>
 8002efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f00:	f7fe fe4c 	bl	8001b9c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e307      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f12:	4b21      	ldr	r3, [pc, #132]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1e:	f7fe fe6b 	bl	8001bf8 <HAL_GetREVID>
 8002f22:	4602      	mov	r2, r0
 8002f24:	f241 0303 	movw	r3, #4099	; 0x1003
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d817      	bhi.n	8002f5c <HAL_RCC_OscConfig+0x24c>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	2b40      	cmp	r3, #64	; 0x40
 8002f32:	d108      	bne.n	8002f46 <HAL_RCC_OscConfig+0x236>
 8002f34:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f3c:	4a16      	ldr	r2, [pc, #88]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f42:	6053      	str	r3, [r2, #4]
 8002f44:	e030      	b.n	8002fa8 <HAL_RCC_OscConfig+0x298>
 8002f46:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	031b      	lsls	r3, r3, #12
 8002f54:	4910      	ldr	r1, [pc, #64]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]
 8002f5a:	e025      	b.n	8002fa8 <HAL_RCC_OscConfig+0x298>
 8002f5c:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	061b      	lsls	r3, r3, #24
 8002f6a:	490b      	ldr	r1, [pc, #44]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]
 8002f70:	e01a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f72:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a08      	ldr	r2, [pc, #32]	; (8002f98 <HAL_RCC_OscConfig+0x288>)
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7e:	f7fe fe0d 	bl	8001b9c <HAL_GetTick>
 8002f82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f86:	f7fe fe09 	bl	8001b9c <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d903      	bls.n	8002f9c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e2c4      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
 8002f98:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f9c:	4ba4      	ldr	r3, [pc, #656]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1ee      	bne.n	8002f86 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80a9 	beq.w	8003108 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb6:	4b9e      	ldr	r3, [pc, #632]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fbe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fc0:	4b9b      	ldr	r3, [pc, #620]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d007      	beq.n	8002fdc <HAL_RCC_OscConfig+0x2cc>
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b18      	cmp	r3, #24
 8002fd0:	d13a      	bne.n	8003048 <HAL_RCC_OscConfig+0x338>
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d135      	bne.n	8003048 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fdc:	4b94      	ldr	r3, [pc, #592]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x2e4>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	2b80      	cmp	r3, #128	; 0x80
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e296      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ff4:	f7fe fe00 	bl	8001bf8 <HAL_GetREVID>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	f241 0303 	movw	r3, #4099	; 0x1003
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d817      	bhi.n	8003032 <HAL_RCC_OscConfig+0x322>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	2b20      	cmp	r3, #32
 8003008:	d108      	bne.n	800301c <HAL_RCC_OscConfig+0x30c>
 800300a:	4b89      	ldr	r3, [pc, #548]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003012:	4a87      	ldr	r2, [pc, #540]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 8003014:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003018:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800301a:	e075      	b.n	8003108 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800301c:	4b84      	ldr	r3, [pc, #528]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	069b      	lsls	r3, r3, #26
 800302a:	4981      	ldr	r1, [pc, #516]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003030:	e06a      	b.n	8003108 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003032:	4b7f      	ldr	r3, [pc, #508]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	061b      	lsls	r3, r3, #24
 8003040:	497b      	ldr	r1, [pc, #492]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 8003042:	4313      	orrs	r3, r2
 8003044:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003046:	e05f      	b.n	8003108 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d042      	beq.n	80030d6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003050:	4b77      	ldr	r3, [pc, #476]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a76      	ldr	r2, [pc, #472]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 8003056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fe fd9e 	bl	8001b9c <HAL_GetTick>
 8003060:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003064:	f7fe fd9a 	bl	8001b9c <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e255      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003076:	4b6e      	ldr	r3, [pc, #440]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003082:	f7fe fdb9 	bl	8001bf8 <HAL_GetREVID>
 8003086:	4602      	mov	r2, r0
 8003088:	f241 0303 	movw	r3, #4099	; 0x1003
 800308c:	429a      	cmp	r2, r3
 800308e:	d817      	bhi.n	80030c0 <HAL_RCC_OscConfig+0x3b0>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	2b20      	cmp	r3, #32
 8003096:	d108      	bne.n	80030aa <HAL_RCC_OscConfig+0x39a>
 8003098:	4b65      	ldr	r3, [pc, #404]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80030a0:	4a63      	ldr	r2, [pc, #396]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 80030a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030a6:	6053      	str	r3, [r2, #4]
 80030a8:	e02e      	b.n	8003108 <HAL_RCC_OscConfig+0x3f8>
 80030aa:	4b61      	ldr	r3, [pc, #388]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	069b      	lsls	r3, r3, #26
 80030b8:	495d      	ldr	r1, [pc, #372]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	604b      	str	r3, [r1, #4]
 80030be:	e023      	b.n	8003108 <HAL_RCC_OscConfig+0x3f8>
 80030c0:	4b5b      	ldr	r3, [pc, #364]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	061b      	lsls	r3, r3, #24
 80030ce:	4958      	ldr	r1, [pc, #352]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60cb      	str	r3, [r1, #12]
 80030d4:	e018      	b.n	8003108 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80030d6:	4b56      	ldr	r3, [pc, #344]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a55      	ldr	r2, [pc, #340]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 80030dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e2:	f7fe fd5b 	bl	8001b9c <HAL_GetTick>
 80030e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80030ea:	f7fe fd57 	bl	8001b9c <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e212      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030fc:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f0      	bne.n	80030ea <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d036      	beq.n	8003182 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d019      	beq.n	8003150 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311c:	4b44      	ldr	r3, [pc, #272]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 800311e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003120:	4a43      	ldr	r2, [pc, #268]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7fe fd38 	bl	8001b9c <HAL_GetTick>
 800312c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003130:	f7fe fd34 	bl	8001b9c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e1ef      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003142:	4b3b      	ldr	r3, [pc, #236]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 8003144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x420>
 800314e:	e018      	b.n	8003182 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003150:	4b37      	ldr	r3, [pc, #220]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 8003152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003154:	4a36      	ldr	r2, [pc, #216]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 8003156:	f023 0301 	bic.w	r3, r3, #1
 800315a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fe fd1e 	bl	8001b9c <HAL_GetTick>
 8003160:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003164:	f7fe fd1a 	bl	8001b9c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e1d5      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003176:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 8003178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b00      	cmp	r3, #0
 800318c:	d036      	beq.n	80031fc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d019      	beq.n	80031ca <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003196:	4b26      	ldr	r3, [pc, #152]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a25      	ldr	r2, [pc, #148]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 800319c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031a2:	f7fe fcfb 	bl	8001b9c <HAL_GetTick>
 80031a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80031aa:	f7fe fcf7 	bl	8001b9c <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e1b2      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031bc:	4b1c      	ldr	r3, [pc, #112]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0x49a>
 80031c8:	e018      	b.n	80031fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031ca:	4b19      	ldr	r3, [pc, #100]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a18      	ldr	r2, [pc, #96]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 80031d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031d6:	f7fe fce1 	bl	8001b9c <HAL_GetTick>
 80031da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80031de:	f7fe fcdd 	bl	8001b9c <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e198      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031f0:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <HAL_RCC_OscConfig+0x520>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f0      	bne.n	80031de <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8085 	beq.w	8003314 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800320a:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <HAL_RCC_OscConfig+0x524>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a09      	ldr	r2, [pc, #36]	; (8003234 <HAL_RCC_OscConfig+0x524>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003216:	f7fe fcc1 	bl	8001b9c <HAL_GetTick>
 800321a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800321c:	e00c      	b.n	8003238 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800321e:	f7fe fcbd 	bl	8001b9c <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b64      	cmp	r3, #100	; 0x64
 800322a:	d905      	bls.n	8003238 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e178      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
 8003230:	58024400 	.word	0x58024400
 8003234:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003238:	4b96      	ldr	r3, [pc, #600]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0ec      	beq.n	800321e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d106      	bne.n	800325a <HAL_RCC_OscConfig+0x54a>
 800324c:	4b92      	ldr	r3, [pc, #584]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 800324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003250:	4a91      	ldr	r2, [pc, #580]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6713      	str	r3, [r2, #112]	; 0x70
 8003258:	e02d      	b.n	80032b6 <HAL_RCC_OscConfig+0x5a6>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10c      	bne.n	800327c <HAL_RCC_OscConfig+0x56c>
 8003262:	4b8d      	ldr	r3, [pc, #564]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	4a8c      	ldr	r2, [pc, #560]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003268:	f023 0301 	bic.w	r3, r3, #1
 800326c:	6713      	str	r3, [r2, #112]	; 0x70
 800326e:	4b8a      	ldr	r3, [pc, #552]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	4a89      	ldr	r2, [pc, #548]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003274:	f023 0304 	bic.w	r3, r3, #4
 8003278:	6713      	str	r3, [r2, #112]	; 0x70
 800327a:	e01c      	b.n	80032b6 <HAL_RCC_OscConfig+0x5a6>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b05      	cmp	r3, #5
 8003282:	d10c      	bne.n	800329e <HAL_RCC_OscConfig+0x58e>
 8003284:	4b84      	ldr	r3, [pc, #528]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	4a83      	ldr	r2, [pc, #524]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 800328a:	f043 0304 	orr.w	r3, r3, #4
 800328e:	6713      	str	r3, [r2, #112]	; 0x70
 8003290:	4b81      	ldr	r3, [pc, #516]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	4a80      	ldr	r2, [pc, #512]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6713      	str	r3, [r2, #112]	; 0x70
 800329c:	e00b      	b.n	80032b6 <HAL_RCC_OscConfig+0x5a6>
 800329e:	4b7e      	ldr	r3, [pc, #504]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	4a7d      	ldr	r2, [pc, #500]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	6713      	str	r3, [r2, #112]	; 0x70
 80032aa:	4b7b      	ldr	r3, [pc, #492]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	4a7a      	ldr	r2, [pc, #488]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 80032b0:	f023 0304 	bic.w	r3, r3, #4
 80032b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d015      	beq.n	80032ea <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032be:	f7fe fc6d 	bl	8001b9c <HAL_GetTick>
 80032c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032c4:	e00a      	b.n	80032dc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c6:	f7fe fc69 	bl	8001b9c <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e122      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032dc:	4b6e      	ldr	r3, [pc, #440]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0ee      	beq.n	80032c6 <HAL_RCC_OscConfig+0x5b6>
 80032e8:	e014      	b.n	8003314 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ea:	f7fe fc57 	bl	8001b9c <HAL_GetTick>
 80032ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032f0:	e00a      	b.n	8003308 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f2:	f7fe fc53 	bl	8001b9c <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003300:	4293      	cmp	r3, r2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e10c      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003308:	4b63      	ldr	r3, [pc, #396]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1ee      	bne.n	80032f2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 8101 	beq.w	8003520 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800331e:	4b5e      	ldr	r3, [pc, #376]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003326:	2b18      	cmp	r3, #24
 8003328:	f000 80bc 	beq.w	80034a4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	2b02      	cmp	r3, #2
 8003332:	f040 8095 	bne.w	8003460 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003336:	4b58      	ldr	r3, [pc, #352]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a57      	ldr	r2, [pc, #348]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 800333c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7fe fc2b 	bl	8001b9c <HAL_GetTick>
 8003346:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334a:	f7fe fc27 	bl	8001b9c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e0e2      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800335c:	4b4e      	ldr	r3, [pc, #312]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f0      	bne.n	800334a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003368:	4b4b      	ldr	r3, [pc, #300]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 800336a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800336c:	4b4b      	ldr	r3, [pc, #300]	; (800349c <HAL_RCC_OscConfig+0x78c>)
 800336e:	4013      	ands	r3, r2
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003378:	0112      	lsls	r2, r2, #4
 800337a:	430a      	orrs	r2, r1
 800337c:	4946      	ldr	r1, [pc, #280]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 800337e:	4313      	orrs	r3, r2
 8003380:	628b      	str	r3, [r1, #40]	; 0x28
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	3b01      	subs	r3, #1
 8003388:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003390:	3b01      	subs	r3, #1
 8003392:	025b      	lsls	r3, r3, #9
 8003394:	b29b      	uxth	r3, r3
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	3b01      	subs	r3, #1
 800339e:	041b      	lsls	r3, r3, #16
 80033a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033aa:	3b01      	subs	r3, #1
 80033ac:	061b      	lsls	r3, r3, #24
 80033ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80033b2:	4939      	ldr	r1, [pc, #228]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80033b8:	4b37      	ldr	r3, [pc, #220]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	4a36      	ldr	r2, [pc, #216]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033c4:	4b34      	ldr	r3, [pc, #208]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 80033c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c8:	4b35      	ldr	r3, [pc, #212]	; (80034a0 <HAL_RCC_OscConfig+0x790>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033d0:	00d2      	lsls	r2, r2, #3
 80033d2:	4931      	ldr	r1, [pc, #196]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80033d8:	4b2f      	ldr	r3, [pc, #188]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	f023 020c 	bic.w	r2, r3, #12
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	492c      	ldr	r1, [pc, #176]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80033ea:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	f023 0202 	bic.w	r2, r3, #2
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	4928      	ldr	r1, [pc, #160]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80033fc:	4b26      	ldr	r3, [pc, #152]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	4a25      	ldr	r2, [pc, #148]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003408:	4b23      	ldr	r3, [pc, #140]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	4a22      	ldr	r2, [pc, #136]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 800340e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003412:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003414:	4b20      	ldr	r3, [pc, #128]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	4a1f      	ldr	r2, [pc, #124]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 800341a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800341e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003420:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	4a1c      	ldr	r2, [pc, #112]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800342c:	4b1a      	ldr	r3, [pc, #104]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a19      	ldr	r2, [pc, #100]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe fbb0 	bl	8001b9c <HAL_GetTick>
 800343c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003440:	f7fe fbac 	bl	8001b9c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e067      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003452:	4b11      	ldr	r3, [pc, #68]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0x730>
 800345e:	e05f      	b.n	8003520 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003460:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a0c      	ldr	r2, [pc, #48]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800346a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fe fb96 	bl	8001b9c <HAL_GetTick>
 8003470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003474:	f7fe fb92 	bl	8001b9c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e04d      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x764>
 8003492:	e045      	b.n	8003520 <HAL_RCC_OscConfig+0x810>
 8003494:	58024800 	.word	0x58024800
 8003498:	58024400 	.word	0x58024400
 800349c:	fffffc0c 	.word	0xfffffc0c
 80034a0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80034a4:	4b21      	ldr	r3, [pc, #132]	; (800352c <HAL_RCC_OscConfig+0x81c>)
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034aa:	4b20      	ldr	r3, [pc, #128]	; (800352c <HAL_RCC_OscConfig+0x81c>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d031      	beq.n	800351c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f003 0203 	and.w	r2, r3, #3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d12a      	bne.n	800351c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d122      	bne.n	800351c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d11a      	bne.n	800351c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	0a5b      	lsrs	r3, r3, #9
 80034ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d111      	bne.n	800351c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	0c1b      	lsrs	r3, r3, #16
 80034fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d108      	bne.n	800351c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	0e1b      	lsrs	r3, r3, #24
 800350e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3730      	adds	r7, #48	; 0x30
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	58024400 	.word	0x58024400

08003530 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e19c      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b8a      	ldr	r3, [pc, #552]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d910      	bls.n	8003574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b87      	ldr	r3, [pc, #540]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 020f 	bic.w	r2, r3, #15
 800355a:	4985      	ldr	r1, [pc, #532]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b83      	ldr	r3, [pc, #524]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e184      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d010      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	4b7b      	ldr	r3, [pc, #492]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800358c:	429a      	cmp	r2, r3
 800358e:	d908      	bls.n	80035a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003590:	4b78      	ldr	r3, [pc, #480]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	4975      	ldr	r1, [pc, #468]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d010      	beq.n	80035d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	4b70      	ldr	r3, [pc, #448]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d908      	bls.n	80035d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035be:	4b6d      	ldr	r3, [pc, #436]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	496a      	ldr	r1, [pc, #424]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d010      	beq.n	80035fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699a      	ldr	r2, [r3, #24]
 80035e0:	4b64      	ldr	r3, [pc, #400]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d908      	bls.n	80035fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035ec:	4b61      	ldr	r3, [pc, #388]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	495e      	ldr	r1, [pc, #376]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b00      	cmp	r3, #0
 8003608:	d010      	beq.n	800362c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69da      	ldr	r2, [r3, #28]
 800360e:	4b59      	ldr	r3, [pc, #356]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003616:	429a      	cmp	r2, r3
 8003618:	d908      	bls.n	800362c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800361a:	4b56      	ldr	r3, [pc, #344]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	4953      	ldr	r1, [pc, #332]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003628:	4313      	orrs	r3, r2
 800362a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d010      	beq.n	800365a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	4b4d      	ldr	r3, [pc, #308]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	429a      	cmp	r2, r3
 8003646:	d908      	bls.n	800365a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003648:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	f023 020f 	bic.w	r2, r3, #15
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4947      	ldr	r1, [pc, #284]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003656:	4313      	orrs	r3, r2
 8003658:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d055      	beq.n	8003712 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003666:	4b43      	ldr	r3, [pc, #268]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	4940      	ldr	r1, [pc, #256]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003674:	4313      	orrs	r3, r2
 8003676:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d107      	bne.n	8003690 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003680:	4b3c      	ldr	r3, [pc, #240]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d121      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0f6      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003698:	4b36      	ldr	r3, [pc, #216]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d115      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0ea      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d107      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036b0:	4b30      	ldr	r3, [pc, #192]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0de      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036c0:	4b2c      	ldr	r3, [pc, #176]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0d6      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036d0:	4b28      	ldr	r3, [pc, #160]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f023 0207 	bic.w	r2, r3, #7
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4925      	ldr	r1, [pc, #148]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e2:	f7fe fa5b 	bl	8001b9c <HAL_GetTick>
 80036e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ea:	f7fe fa57 	bl	8001b9c <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e0be      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003700:	4b1c      	ldr	r3, [pc, #112]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	429a      	cmp	r2, r3
 8003710:	d1eb      	bne.n	80036ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d010      	beq.n	8003740 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	4b14      	ldr	r3, [pc, #80]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	429a      	cmp	r2, r3
 800372c:	d208      	bcs.n	8003740 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800372e:	4b11      	ldr	r3, [pc, #68]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f023 020f 	bic.w	r2, r3, #15
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	490e      	ldr	r1, [pc, #56]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 800373c:	4313      	orrs	r3, r2
 800373e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d214      	bcs.n	8003778 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 020f 	bic.w	r2, r3, #15
 8003756:	4906      	ldr	r1, [pc, #24]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b04      	ldr	r3, [pc, #16]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d005      	beq.n	8003778 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e086      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
 8003770:	52002000 	.word	0x52002000
 8003774:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d010      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	4b3f      	ldr	r3, [pc, #252]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003790:	429a      	cmp	r2, r3
 8003792:	d208      	bcs.n	80037a6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003794:	4b3c      	ldr	r3, [pc, #240]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	4939      	ldr	r1, [pc, #228]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d010      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	4b34      	ldr	r3, [pc, #208]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037be:	429a      	cmp	r2, r3
 80037c0:	d208      	bcs.n	80037d4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037c2:	4b31      	ldr	r3, [pc, #196]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	492e      	ldr	r1, [pc, #184]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d010      	beq.n	8003802 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699a      	ldr	r2, [r3, #24]
 80037e4:	4b28      	ldr	r3, [pc, #160]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d208      	bcs.n	8003802 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037f0:	4b25      	ldr	r3, [pc, #148]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	4922      	ldr	r1, [pc, #136]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	2b00      	cmp	r3, #0
 800380c:	d010      	beq.n	8003830 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69da      	ldr	r2, [r3, #28]
 8003812:	4b1d      	ldr	r3, [pc, #116]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800381a:	429a      	cmp	r2, r3
 800381c:	d208      	bcs.n	8003830 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800381e:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	4917      	ldr	r1, [pc, #92]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 800382c:	4313      	orrs	r3, r2
 800382e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003830:	f000 f834 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8003834:	4601      	mov	r1, r0
 8003836:	4b14      	ldr	r3, [pc, #80]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	4a12      	ldr	r2, [pc, #72]	; (800388c <HAL_RCC_ClockConfig+0x35c>)
 8003842:	5cd3      	ldrb	r3, [r2, r3]
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	fa21 f303 	lsr.w	r3, r1, r3
 800384c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800384e:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	4a0d      	ldr	r2, [pc, #52]	; (800388c <HAL_RCC_ClockConfig+0x35c>)
 8003858:	5cd3      	ldrb	r3, [r2, r3]
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
 8003864:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <HAL_RCC_ClockConfig+0x360>)
 8003866:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003868:	4a0a      	ldr	r2, [pc, #40]	; (8003894 <HAL_RCC_ClockConfig+0x364>)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <HAL_RCC_ClockConfig+0x368>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd ffd8 	bl	8001828 <HAL_InitTick>
 8003878:	4603      	mov	r3, r0
 800387a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800387c:	7bfb      	ldrb	r3, [r7, #15]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	58024400 	.word	0x58024400
 800388c:	0800c5dc 	.word	0x0800c5dc
 8003890:	24000004 	.word	0x24000004
 8003894:	24000000 	.word	0x24000000
 8003898:	24000008 	.word	0x24000008

0800389c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	b089      	sub	sp, #36	; 0x24
 80038a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038a2:	4baf      	ldr	r3, [pc, #700]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038aa:	2b18      	cmp	r3, #24
 80038ac:	f200 814e 	bhi.w	8003b4c <HAL_RCC_GetSysClockFreq+0x2b0>
 80038b0:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	0800391d 	.word	0x0800391d
 80038bc:	08003b4d 	.word	0x08003b4d
 80038c0:	08003b4d 	.word	0x08003b4d
 80038c4:	08003b4d 	.word	0x08003b4d
 80038c8:	08003b4d 	.word	0x08003b4d
 80038cc:	08003b4d 	.word	0x08003b4d
 80038d0:	08003b4d 	.word	0x08003b4d
 80038d4:	08003b4d 	.word	0x08003b4d
 80038d8:	08003943 	.word	0x08003943
 80038dc:	08003b4d 	.word	0x08003b4d
 80038e0:	08003b4d 	.word	0x08003b4d
 80038e4:	08003b4d 	.word	0x08003b4d
 80038e8:	08003b4d 	.word	0x08003b4d
 80038ec:	08003b4d 	.word	0x08003b4d
 80038f0:	08003b4d 	.word	0x08003b4d
 80038f4:	08003b4d 	.word	0x08003b4d
 80038f8:	08003949 	.word	0x08003949
 80038fc:	08003b4d 	.word	0x08003b4d
 8003900:	08003b4d 	.word	0x08003b4d
 8003904:	08003b4d 	.word	0x08003b4d
 8003908:	08003b4d 	.word	0x08003b4d
 800390c:	08003b4d 	.word	0x08003b4d
 8003910:	08003b4d 	.word	0x08003b4d
 8003914:	08003b4d 	.word	0x08003b4d
 8003918:	0800394f 	.word	0x0800394f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800391c:	4b90      	ldr	r3, [pc, #576]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	2b00      	cmp	r3, #0
 8003926:	d009      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003928:	4b8d      	ldr	r3, [pc, #564]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	08db      	lsrs	r3, r3, #3
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	4a8c      	ldr	r2, [pc, #560]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
 8003938:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800393a:	e10a      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800393c:	4b89      	ldr	r3, [pc, #548]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800393e:	61bb      	str	r3, [r7, #24]
    break;
 8003940:	e107      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003942:	4b89      	ldr	r3, [pc, #548]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003944:	61bb      	str	r3, [r7, #24]
    break;
 8003946:	e104      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003948:	4b88      	ldr	r3, [pc, #544]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800394a:	61bb      	str	r3, [r7, #24]
    break;
 800394c:	e101      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800394e:	4b84      	ldr	r3, [pc, #528]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003958:	4b81      	ldr	r3, [pc, #516]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800395a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003962:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003964:	4b7e      	ldr	r3, [pc, #504]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800396e:	4b7c      	ldr	r3, [pc, #496]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003972:	08db      	lsrs	r3, r3, #3
 8003974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003986:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80da 	beq.w	8003b46 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d05a      	beq.n	8003a4e <HAL_RCC_GetSysClockFreq+0x1b2>
 8003998:	2b01      	cmp	r3, #1
 800399a:	d302      	bcc.n	80039a2 <HAL_RCC_GetSysClockFreq+0x106>
 800399c:	2b02      	cmp	r3, #2
 800399e:	d078      	beq.n	8003a92 <HAL_RCC_GetSysClockFreq+0x1f6>
 80039a0:	e099      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039a2:	4b6f      	ldr	r3, [pc, #444]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d02d      	beq.n	8003a0a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039ae:	4b6c      	ldr	r3, [pc, #432]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	08db      	lsrs	r3, r3, #3
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	4a6a      	ldr	r2, [pc, #424]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80039ba:	fa22 f303 	lsr.w	r3, r2, r3
 80039be:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	ee07 3a90 	vmov	s15, r3
 80039d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d8:	4b61      	ldr	r3, [pc, #388]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e0:	ee07 3a90 	vmov	s15, r3
 80039e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ec:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>
 80039f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a04:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003a08:	e087      	b.n	8003b1a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	ee07 3a90 	vmov	s15, r3
 8003a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a14:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003b74 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a1c:	4b50      	ldr	r3, [pc, #320]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a24:	ee07 3a90 	vmov	s15, r3
 8003a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a30:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003a34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a4c:	e065      	b.n	8003b1a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	ee07 3a90 	vmov	s15, r3
 8003a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a58:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003b78 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003a5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a60:	4b3f      	ldr	r3, [pc, #252]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a68:	ee07 3a90 	vmov	s15, r3
 8003a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a70:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a74:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003a78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a90:	e043      	b.n	8003b1a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	ee07 3a90 	vmov	s15, r3
 8003a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003b7c <HAL_RCC_GetSysClockFreq+0x2e0>
 8003aa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aa4:	4b2e      	ldr	r3, [pc, #184]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aac:	ee07 3a90 	vmov	s15, r3
 8003ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ab8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003abc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ac4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ad4:	e021      	b.n	8003b1a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	ee07 3a90 	vmov	s15, r3
 8003adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003b78 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003ae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ae8:	4b1d      	ldr	r3, [pc, #116]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af0:	ee07 3a90 	vmov	s15, r3
 8003af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003af8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003afc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003b00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b18:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003b1a:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	0a5b      	lsrs	r3, r3, #9
 8003b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b24:	3301      	adds	r3, #1
 8003b26:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	ee07 3a90 	vmov	s15, r3
 8003b2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b32:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b3e:	ee17 3a90 	vmov	r3, s15
 8003b42:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003b44:	e005      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61bb      	str	r3, [r7, #24]
    break;
 8003b4a:	e002      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003b4e:	61bb      	str	r3, [r7, #24]
    break;
 8003b50:	bf00      	nop
  }

  return sysclockfreq;
 8003b52:	69bb      	ldr	r3, [r7, #24]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3724      	adds	r7, #36	; 0x24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	58024400 	.word	0x58024400
 8003b64:	03d09000 	.word	0x03d09000
 8003b68:	003d0900 	.word	0x003d0900
 8003b6c:	007a1200 	.word	0x007a1200
 8003b70:	46000000 	.word	0x46000000
 8003b74:	4c742400 	.word	0x4c742400
 8003b78:	4a742400 	.word	0x4a742400
 8003b7c:	4af42400 	.word	0x4af42400

08003b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b86:	f7ff fe89 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8003b8a:	4601      	mov	r1, r0
 8003b8c:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	0a1b      	lsrs	r3, r3, #8
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	4a0f      	ldr	r2, [pc, #60]	; (8003bd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b98:	5cd3      	ldrb	r3, [r2, r3]
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	fa21 f303 	lsr.w	r3, r1, r3
 8003ba2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	4a09      	ldr	r2, [pc, #36]	; (8003bd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003bae:	5cd3      	ldrb	r3, [r2, r3]
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	4a07      	ldr	r2, [pc, #28]	; (8003bd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003bbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bbe:	4a07      	ldr	r2, [pc, #28]	; (8003bdc <HAL_RCC_GetHCLKFreq+0x5c>)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	58024400 	.word	0x58024400
 8003bd4:	0800c5dc 	.word	0x0800c5dc
 8003bd8:	24000004 	.word	0x24000004
 8003bdc:	24000000 	.word	0x24000000

08003be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003be4:	f7ff ffcc 	bl	8003b80 <HAL_RCC_GetHCLKFreq>
 8003be8:	4601      	mov	r1, r0
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bf6:	5cd3      	ldrb	r3, [r2, r3]
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	58024400 	.word	0x58024400
 8003c08:	0800c5dc 	.word	0x0800c5dc

08003c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003c10:	f7ff ffb6 	bl	8003b80 <HAL_RCC_GetHCLKFreq>
 8003c14:	4601      	mov	r1, r0
 8003c16:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	4a04      	ldr	r2, [pc, #16]	; (8003c34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c22:	5cd3      	ldrb	r3, [r2, r3]
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	58024400 	.word	0x58024400
 8003c34:	0800c5dc 	.word	0x0800c5dc

08003c38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	223f      	movs	r2, #63	; 0x3f
 8003c46:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c48:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	f003 0207 	and.w	r2, r3, #7
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003c54:	4b17      	ldr	r3, [pc, #92]	; (8003cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003c60:	4b14      	ldr	r3, [pc, #80]	; (8003cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f003 020f 	and.w	r2, r3, #15
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003c6c:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003c78:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003c90:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_RCC_GetClockConfig+0x80>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 020f 	and.w	r2, r3, #15
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	601a      	str	r2, [r3, #0]
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	58024400 	.word	0x58024400
 8003cb8:	52002000 	.word	0x52002000

08003cbc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cc8:	2300      	movs	r3, #0
 8003cca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d03d      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce0:	d013      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce6:	d802      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003cec:	e01f      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003cee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cf2:	d013      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003cf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cf8:	d01c      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003cfa:	e018      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cfc:	4baf      	ldr	r3, [pc, #700]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	4aae      	ldr	r2, [pc, #696]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d08:	e015      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	2102      	movs	r1, #2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f001 f96f 	bl	8004ff4 <RCCEx_PLL2_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d1a:	e00c      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3324      	adds	r3, #36	; 0x24
 8003d20:	2102      	movs	r1, #2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f001 fa18 	bl	8005158 <RCCEx_PLL3_Config>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d2c:	e003      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	75fb      	strb	r3, [r7, #23]
      break;
 8003d32:	e000      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d36:	7dfb      	ldrb	r3, [r7, #23]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d109      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d3c:	4b9f      	ldr	r3, [pc, #636]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d48:	499c      	ldr	r1, [pc, #624]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	650b      	str	r3, [r1, #80]	; 0x50
 8003d4e:	e001      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
 8003d52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d03d      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d826      	bhi.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003d68:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003d85 	.word	0x08003d85
 8003d74:	08003d93 	.word	0x08003d93
 8003d78:	08003da5 	.word	0x08003da5
 8003d7c:	08003dbd 	.word	0x08003dbd
 8003d80:	08003dbd 	.word	0x08003dbd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d84:	4b8d      	ldr	r3, [pc, #564]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	4a8c      	ldr	r2, [pc, #560]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d90:	e015      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3304      	adds	r3, #4
 8003d96:	2100      	movs	r1, #0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f001 f92b 	bl	8004ff4 <RCCEx_PLL2_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003da2:	e00c      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3324      	adds	r3, #36	; 0x24
 8003da8:	2100      	movs	r1, #0
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 f9d4 	bl	8005158 <RCCEx_PLL3_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003db4:	e003      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dba:	e000      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d109      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dc4:	4b7d      	ldr	r3, [pc, #500]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc8:	f023 0207 	bic.w	r2, r3, #7
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd0:	497a      	ldr	r1, [pc, #488]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	650b      	str	r3, [r1, #80]	; 0x50
 8003dd6:	e001      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd8:	7dfb      	ldrb	r3, [r7, #23]
 8003dda:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d03e      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dec:	2b80      	cmp	r3, #128	; 0x80
 8003dee:	d01c      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003df0:	2b80      	cmp	r3, #128	; 0x80
 8003df2:	d804      	bhi.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d00d      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003dfc:	e01e      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003dfe:	2bc0      	cmp	r3, #192	; 0xc0
 8003e00:	d01f      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e06:	d01e      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003e08:	e018      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e0a:	4b6c      	ldr	r3, [pc, #432]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	4a6b      	ldr	r2, [pc, #428]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003e16:	e017      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f001 f8e8 	bl	8004ff4 <RCCEx_PLL2_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003e28:	e00e      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3324      	adds	r3, #36	; 0x24
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f001 f991 	bl	8005158 <RCCEx_PLL3_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003e3a:	e005      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e40:	e002      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003e42:	bf00      	nop
 8003e44:	e000      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003e4e:	4b5b      	ldr	r3, [pc, #364]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e52:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	4958      	ldr	r1, [pc, #352]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	650b      	str	r3, [r1, #80]	; 0x50
 8003e60:	e001      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
 8003e64:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d044      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e7c:	d01f      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e82:	d805      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e8c:	d00e      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003e8e:	e01f      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003e90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e94:	d01f      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003e96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e9a:	d01e      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003e9c:	e018      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e9e:	4b47      	ldr	r3, [pc, #284]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	4a46      	ldr	r2, [pc, #280]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003eaa:	e017      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f001 f89e 	bl	8004ff4 <RCCEx_PLL2_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003ebc:	e00e      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3324      	adds	r3, #36	; 0x24
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f001 f947 	bl	8005158 <RCCEx_PLL3_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ece:	e005      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed4:	e002      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003ed6:	bf00      	nop
 8003ed8:	e000      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10a      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003ee2:	4b36      	ldr	r3, [pc, #216]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ef0:	4932      	ldr	r1, [pc, #200]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	658b      	str	r3, [r1, #88]	; 0x58
 8003ef6:	e001      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d044      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f12:	d01f      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003f14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f18:	d805      	bhi.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003f1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f22:	d00e      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003f24:	e01f      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003f26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f2a:	d01f      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003f2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f30:	d01e      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003f32:	e018      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f34:	4b21      	ldr	r3, [pc, #132]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	4a20      	ldr	r2, [pc, #128]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f40:	e017      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3304      	adds	r3, #4
 8003f46:	2100      	movs	r1, #0
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f001 f853 	bl	8004ff4 <RCCEx_PLL2_Config>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003f52:	e00e      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3324      	adds	r3, #36	; 0x24
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f001 f8fc 	bl	8005158 <RCCEx_PLL3_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f64:	e005      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	75fb      	strb	r3, [r7, #23]
      break;
 8003f6a:	e002      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003f6c:	bf00      	nop
 8003f6e:	e000      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f72:	7dfb      	ldrb	r3, [r7, #23]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f78:	4b10      	ldr	r3, [pc, #64]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f86:	490d      	ldr	r1, [pc, #52]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	658b      	str	r3, [r1, #88]	; 0x58
 8003f8c:	e001      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8e:	7dfb      	ldrb	r3, [r7, #23]
 8003f90:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d035      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa2:	2b10      	cmp	r3, #16
 8003fa4:	d00c      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003fa6:	2b10      	cmp	r3, #16
 8003fa8:	d802      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d01b      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003fae:	e017      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d00c      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003fb4:	2b30      	cmp	r3, #48	; 0x30
 8003fb6:	d018      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003fb8:	e012      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003fba:	bf00      	nop
 8003fbc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fc0:	4baf      	ldr	r3, [pc, #700]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	4aae      	ldr	r2, [pc, #696]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003fcc:	e00e      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f001 f80d 	bl	8004ff4 <RCCEx_PLL2_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003fde:	e005      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe4:	e002      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ff2:	4ba3      	ldr	r3, [pc, #652]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffe:	49a0      	ldr	r1, [pc, #640]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004000:	4313      	orrs	r3, r2
 8004002:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004004:	e001      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004006:	7dfb      	ldrb	r3, [r7, #23]
 8004008:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d042      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800401e:	d01f      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004024:	d805      	bhi.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800402a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800402e:	d00e      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004030:	e01f      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004032:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004036:	d01f      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800403c:	d01e      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800403e:	e018      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004040:	4b8f      	ldr	r3, [pc, #572]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	4a8e      	ldr	r2, [pc, #568]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800404a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800404c:	e017      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3304      	adds	r3, #4
 8004052:	2100      	movs	r1, #0
 8004054:	4618      	mov	r0, r3
 8004056:	f000 ffcd 	bl	8004ff4 <RCCEx_PLL2_Config>
 800405a:	4603      	mov	r3, r0
 800405c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800405e:	e00e      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3324      	adds	r3, #36	; 0x24
 8004064:	2100      	movs	r1, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f001 f876 	bl	8005158 <RCCEx_PLL3_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004070:	e005      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	75fb      	strb	r3, [r7, #23]
      break;
 8004076:	e002      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004078:	bf00      	nop
 800407a:	e000      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800407c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800407e:	7dfb      	ldrb	r3, [r7, #23]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d109      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004084:	4b7e      	ldr	r3, [pc, #504]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004088:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004090:	497b      	ldr	r1, [pc, #492]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004092:	4313      	orrs	r3, r2
 8004094:	650b      	str	r3, [r1, #80]	; 0x50
 8004096:	e001      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004098:	7dfb      	ldrb	r3, [r7, #23]
 800409a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d042      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040b0:	d01b      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80040b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040b6:	d805      	bhi.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d022      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80040bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80040c2:	e01b      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x440>
 80040c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040c8:	d01d      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80040ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ce:	d01c      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80040d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040d4:	d01b      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x452>
 80040d6:	e011      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3304      	adds	r3, #4
 80040dc:	2101      	movs	r1, #1
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 ff88 	bl	8004ff4 <RCCEx_PLL2_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040e8:	e012      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3324      	adds	r3, #36	; 0x24
 80040ee:	2101      	movs	r1, #1
 80040f0:	4618      	mov	r0, r3
 80040f2:	f001 f831 	bl	8005158 <RCCEx_PLL3_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040fa:	e009      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004100:	e006      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004102:	bf00      	nop
 8004104:	e004      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004106:	bf00      	nop
 8004108:	e002      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800410a:	bf00      	nop
 800410c:	e000      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800410e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004116:	4b5a      	ldr	r3, [pc, #360]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004122:	4957      	ldr	r1, [pc, #348]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004124:	4313      	orrs	r3, r2
 8004126:	650b      	str	r3, [r1, #80]	; 0x50
 8004128:	e001      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412a:	7dfb      	ldrb	r3, [r7, #23]
 800412c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d044      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004144:	d01b      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800414a:	d805      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800414c:	2b00      	cmp	r3, #0
 800414e:	d022      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004150:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004156:	e01b      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415c:	d01d      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800415e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004162:	d01c      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004164:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004168:	d01b      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800416a:	e011      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3304      	adds	r3, #4
 8004170:	2101      	movs	r1, #1
 8004172:	4618      	mov	r0, r3
 8004174:	f000 ff3e 	bl	8004ff4 <RCCEx_PLL2_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800417c:	e012      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3324      	adds	r3, #36	; 0x24
 8004182:	2101      	movs	r1, #1
 8004184:	4618      	mov	r0, r3
 8004186:	f000 ffe7 	bl	8005158 <RCCEx_PLL3_Config>
 800418a:	4603      	mov	r3, r0
 800418c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800418e:	e009      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	75fb      	strb	r3, [r7, #23]
      break;
 8004194:	e006      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004196:	bf00      	nop
 8004198:	e004      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800419a:	bf00      	nop
 800419c:	e002      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800419e:	bf00      	nop
 80041a0:	e000      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80041a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041aa:	4b35      	ldr	r3, [pc, #212]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041b8:	4931      	ldr	r1, [pc, #196]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	658b      	str	r3, [r1, #88]	; 0x58
 80041be:	e001      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
 80041c2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d02d      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041d8:	d005      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80041da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041de:	d009      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d013      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x550>
 80041e4:	e00f      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e6:	4b26      	ldr	r3, [pc, #152]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	4a25      	ldr	r2, [pc, #148]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80041f2:	e00c      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3304      	adds	r3, #4
 80041f8:	2101      	movs	r1, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fefa 	bl	8004ff4 <RCCEx_PLL2_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004204:	e003      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	75fb      	strb	r3, [r7, #23]
      break;
 800420a:	e000      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800420c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800420e:	7dfb      	ldrb	r3, [r7, #23]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d109      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004218:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004220:	4917      	ldr	r1, [pc, #92]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004222:	4313      	orrs	r3, r2
 8004224:	650b      	str	r3, [r1, #80]	; 0x50
 8004226:	e001      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004228:	7dfb      	ldrb	r3, [r7, #23]
 800422a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d035      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	2b03      	cmp	r3, #3
 800423e:	d81b      	bhi.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004240:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004246:	bf00      	nop
 8004248:	08004285 	.word	0x08004285
 800424c:	08004259 	.word	0x08004259
 8004250:	08004267 	.word	0x08004267
 8004254:	08004285 	.word	0x08004285
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004258:	4b09      	ldr	r3, [pc, #36]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	4a08      	ldr	r2, [pc, #32]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800425e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004262:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004264:	e00f      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3304      	adds	r3, #4
 800426a:	2102      	movs	r1, #2
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fec1 	bl	8004ff4 <RCCEx_PLL2_Config>
 8004272:	4603      	mov	r3, r0
 8004274:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004276:	e006      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	75fb      	strb	r3, [r7, #23]
      break;
 800427c:	e003      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800427e:	bf00      	nop
 8004280:	58024400 	.word	0x58024400
      break;
 8004284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004286:	7dfb      	ldrb	r3, [r7, #23]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800428c:	4bba      	ldr	r3, [pc, #744]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800428e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004290:	f023 0203 	bic.w	r2, r3, #3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004298:	49b7      	ldr	r1, [pc, #732]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800429a:	4313      	orrs	r3, r2
 800429c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800429e:	e001      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8086 	beq.w	80043be <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042b2:	4bb2      	ldr	r3, [pc, #712]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4ab1      	ldr	r2, [pc, #708]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80042b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042be:	f7fd fc6d 	bl	8001b9c <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042c4:	e009      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c6:	f7fd fc69 	bl	8001b9c <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b64      	cmp	r3, #100	; 0x64
 80042d2:	d902      	bls.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	75fb      	strb	r3, [r7, #23]
        break;
 80042d8:	e005      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042da:	4ba8      	ldr	r3, [pc, #672]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0ef      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80042e6:	7dfb      	ldrb	r3, [r7, #23]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d166      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042ec:	4ba2      	ldr	r3, [pc, #648]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042f6:	4053      	eors	r3, r2
 80042f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d013      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004300:	4b9d      	ldr	r3, [pc, #628]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004308:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800430a:	4b9b      	ldr	r3, [pc, #620]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	4a9a      	ldr	r2, [pc, #616]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004314:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004316:	4b98      	ldr	r3, [pc, #608]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431a:	4a97      	ldr	r2, [pc, #604]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800431c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004320:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004322:	4a95      	ldr	r2, [pc, #596]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800432e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004332:	d115      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fd fc32 	bl	8001b9c <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800433a:	e00b      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433c:	f7fd fc2e 	bl	8001b9c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	; 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d902      	bls.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	75fb      	strb	r3, [r7, #23]
            break;
 8004352:	e005      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004354:	4b88      	ldr	r3, [pc, #544]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0ed      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004360:	7dfb      	ldrb	r3, [r7, #23]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d126      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800436c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004370:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004374:	d10d      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004376:	4b80      	ldr	r3, [pc, #512]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004384:	0919      	lsrs	r1, r3, #4
 8004386:	4b7e      	ldr	r3, [pc, #504]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004388:	400b      	ands	r3, r1
 800438a:	497b      	ldr	r1, [pc, #492]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800438c:	4313      	orrs	r3, r2
 800438e:	610b      	str	r3, [r1, #16]
 8004390:	e005      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004392:	4b79      	ldr	r3, [pc, #484]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	4a78      	ldr	r2, [pc, #480]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004398:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800439c:	6113      	str	r3, [r2, #16]
 800439e:	4b76      	ldr	r3, [pc, #472]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ac:	4972      	ldr	r1, [pc, #456]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	670b      	str	r3, [r1, #112]	; 0x70
 80043b2:	e004      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
 80043b6:	75bb      	strb	r3, [r7, #22]
 80043b8:	e001      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
 80043bc:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d07d      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ce:	2b28      	cmp	r3, #40	; 0x28
 80043d0:	d866      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80043d2:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80043d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d8:	080044a7 	.word	0x080044a7
 80043dc:	080044a1 	.word	0x080044a1
 80043e0:	080044a1 	.word	0x080044a1
 80043e4:	080044a1 	.word	0x080044a1
 80043e8:	080044a1 	.word	0x080044a1
 80043ec:	080044a1 	.word	0x080044a1
 80043f0:	080044a1 	.word	0x080044a1
 80043f4:	080044a1 	.word	0x080044a1
 80043f8:	0800447d 	.word	0x0800447d
 80043fc:	080044a1 	.word	0x080044a1
 8004400:	080044a1 	.word	0x080044a1
 8004404:	080044a1 	.word	0x080044a1
 8004408:	080044a1 	.word	0x080044a1
 800440c:	080044a1 	.word	0x080044a1
 8004410:	080044a1 	.word	0x080044a1
 8004414:	080044a1 	.word	0x080044a1
 8004418:	0800448f 	.word	0x0800448f
 800441c:	080044a1 	.word	0x080044a1
 8004420:	080044a1 	.word	0x080044a1
 8004424:	080044a1 	.word	0x080044a1
 8004428:	080044a1 	.word	0x080044a1
 800442c:	080044a1 	.word	0x080044a1
 8004430:	080044a1 	.word	0x080044a1
 8004434:	080044a1 	.word	0x080044a1
 8004438:	080044a7 	.word	0x080044a7
 800443c:	080044a1 	.word	0x080044a1
 8004440:	080044a1 	.word	0x080044a1
 8004444:	080044a1 	.word	0x080044a1
 8004448:	080044a1 	.word	0x080044a1
 800444c:	080044a1 	.word	0x080044a1
 8004450:	080044a1 	.word	0x080044a1
 8004454:	080044a1 	.word	0x080044a1
 8004458:	080044a7 	.word	0x080044a7
 800445c:	080044a1 	.word	0x080044a1
 8004460:	080044a1 	.word	0x080044a1
 8004464:	080044a1 	.word	0x080044a1
 8004468:	080044a1 	.word	0x080044a1
 800446c:	080044a1 	.word	0x080044a1
 8004470:	080044a1 	.word	0x080044a1
 8004474:	080044a1 	.word	0x080044a1
 8004478:	080044a7 	.word	0x080044a7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	2101      	movs	r1, #1
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fdb6 	bl	8004ff4 <RCCEx_PLL2_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800448c:	e00c      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3324      	adds	r3, #36	; 0x24
 8004492:	2101      	movs	r1, #1
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fe5f 	bl	8005158 <RCCEx_PLL3_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800449e:	e003      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	75fb      	strb	r3, [r7, #23]
      break;
 80044a4:	e000      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80044a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d109      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044ae:	4b32      	ldr	r3, [pc, #200]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ba:	492f      	ldr	r1, [pc, #188]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	654b      	str	r3, [r1, #84]	; 0x54
 80044c0:	e001      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c2:	7dfb      	ldrb	r3, [r7, #23]
 80044c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d037      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d6:	2b05      	cmp	r3, #5
 80044d8:	d820      	bhi.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x860>
 80044da:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80044dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e0:	08004523 	.word	0x08004523
 80044e4:	080044f9 	.word	0x080044f9
 80044e8:	0800450b 	.word	0x0800450b
 80044ec:	08004523 	.word	0x08004523
 80044f0:	08004523 	.word	0x08004523
 80044f4:	08004523 	.word	0x08004523
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3304      	adds	r3, #4
 80044fc:	2101      	movs	r1, #1
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fd78 	bl	8004ff4 <RCCEx_PLL2_Config>
 8004504:	4603      	mov	r3, r0
 8004506:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004508:	e00c      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3324      	adds	r3, #36	; 0x24
 800450e:	2101      	movs	r1, #1
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fe21 	bl	8005158 <RCCEx_PLL3_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800451a:	e003      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	75fb      	strb	r3, [r7, #23]
      break;
 8004520:	e000      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004524:	7dfb      	ldrb	r3, [r7, #23]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800452a:	4b13      	ldr	r3, [pc, #76]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	f023 0207 	bic.w	r2, r3, #7
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004536:	4910      	ldr	r1, [pc, #64]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004538:	4313      	orrs	r3, r2
 800453a:	654b      	str	r3, [r1, #84]	; 0x54
 800453c:	e001      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453e:	7dfb      	ldrb	r3, [r7, #23]
 8004540:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	d040      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004554:	2b05      	cmp	r3, #5
 8004556:	d827      	bhi.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004558:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	080045af 	.word	0x080045af
 8004564:	08004585 	.word	0x08004585
 8004568:	08004597 	.word	0x08004597
 800456c:	080045af 	.word	0x080045af
 8004570:	080045af 	.word	0x080045af
 8004574:	080045af 	.word	0x080045af
 8004578:	58024400 	.word	0x58024400
 800457c:	58024800 	.word	0x58024800
 8004580:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3304      	adds	r3, #4
 8004588:	2101      	movs	r1, #1
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fd32 	bl	8004ff4 <RCCEx_PLL2_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004594:	e00c      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3324      	adds	r3, #36	; 0x24
 800459a:	2101      	movs	r1, #1
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fddb 	bl	8005158 <RCCEx_PLL3_Config>
 80045a2:	4603      	mov	r3, r0
 80045a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80045a6:	e003      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	75fb      	strb	r3, [r7, #23]
      break;
 80045ac:	e000      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80045ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10a      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045b6:	4bb2      	ldr	r3, [pc, #712]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80045b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ba:	f023 0207 	bic.w	r2, r3, #7
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c4:	49ae      	ldr	r1, [pc, #696]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	658b      	str	r3, [r1, #88]	; 0x58
 80045ca:	e001      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
 80045ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d044      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045e6:	d01b      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80045e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ec:	d805      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d022      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80045f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045f6:	d00a      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x952>
 80045f8:	e01b      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80045fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fe:	d01d      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004600:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004604:	d01c      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004606:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800460a:	d01b      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800460c:	e011      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3304      	adds	r3, #4
 8004612:	2100      	movs	r1, #0
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fced 	bl	8004ff4 <RCCEx_PLL2_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800461e:	e012      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3324      	adds	r3, #36	; 0x24
 8004624:	2102      	movs	r1, #2
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fd96 	bl	8005158 <RCCEx_PLL3_Config>
 800462c:	4603      	mov	r3, r0
 800462e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004630:	e009      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	75fb      	strb	r3, [r7, #23]
      break;
 8004636:	e006      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004638:	bf00      	nop
 800463a:	e004      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800463c:	bf00      	nop
 800463e:	e002      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004640:	bf00      	nop
 8004642:	e000      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004646:	7dfb      	ldrb	r3, [r7, #23]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800464c:	4b8c      	ldr	r3, [pc, #560]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800464e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004650:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800465a:	4989      	ldr	r1, [pc, #548]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800465c:	4313      	orrs	r3, r2
 800465e:	654b      	str	r3, [r1, #84]	; 0x54
 8004660:	e001      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004662:	7dfb      	ldrb	r3, [r7, #23]
 8004664:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d044      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800467c:	d01b      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800467e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004682:	d805      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004684:	2b00      	cmp	r3, #0
 8004686:	d022      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800468e:	e01b      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004694:	d01d      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004696:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800469a:	d01c      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800469c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046a0:	d01b      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80046a2:	e011      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3304      	adds	r3, #4
 80046a8:	2100      	movs	r1, #0
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fca2 	bl	8004ff4 <RCCEx_PLL2_Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80046b4:	e012      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3324      	adds	r3, #36	; 0x24
 80046ba:	2102      	movs	r1, #2
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 fd4b 	bl	8005158 <RCCEx_PLL3_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80046c6:	e009      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	75fb      	strb	r3, [r7, #23]
      break;
 80046cc:	e006      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80046ce:	bf00      	nop
 80046d0:	e004      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80046d2:	bf00      	nop
 80046d4:	e002      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80046d6:	bf00      	nop
 80046d8:	e000      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80046da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046dc:	7dfb      	ldrb	r3, [r7, #23]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10a      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046e2:	4b67      	ldr	r3, [pc, #412]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80046e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046f0:	4963      	ldr	r1, [pc, #396]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	658b      	str	r3, [r1, #88]	; 0x58
 80046f6:	e001      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
 80046fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004704:	2b00      	cmp	r3, #0
 8004706:	d044      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800470e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004712:	d01b      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004718:	d805      	bhi.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d022      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800471e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004724:	e01b      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8004726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800472a:	d01d      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800472c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004730:	d01c      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8004732:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004736:	d01b      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004738:	e011      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3304      	adds	r3, #4
 800473e:	2100      	movs	r1, #0
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fc57 	bl	8004ff4 <RCCEx_PLL2_Config>
 8004746:	4603      	mov	r3, r0
 8004748:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800474a:	e012      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3324      	adds	r3, #36	; 0x24
 8004750:	2102      	movs	r1, #2
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fd00 	bl	8005158 <RCCEx_PLL3_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800475c:	e009      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	75fb      	strb	r3, [r7, #23]
      break;
 8004762:	e006      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004764:	bf00      	nop
 8004766:	e004      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004768:	bf00      	nop
 800476a:	e002      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800476c:	bf00      	nop
 800476e:	e000      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004772:	7dfb      	ldrb	r3, [r7, #23]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10a      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004778:	4b41      	ldr	r3, [pc, #260]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800477a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004786:	493e      	ldr	r1, [pc, #248]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004788:	4313      	orrs	r3, r2
 800478a:	658b      	str	r3, [r1, #88]	; 0x58
 800478c:	e001      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478e:	7dfb      	ldrb	r3, [r7, #23]
 8004790:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d01a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a8:	d10a      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3324      	adds	r3, #36	; 0x24
 80047ae:	2102      	movs	r1, #2
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fcd1 	bl	8005158 <RCCEx_PLL3_Config>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047c0:	4b2f      	ldr	r3, [pc, #188]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80047c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ce:	492c      	ldr	r1, [pc, #176]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d01a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ea:	d10a      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3324      	adds	r3, #36	; 0x24
 80047f0:	2102      	movs	r1, #2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fcb0 	bl	8005158 <RCCEx_PLL3_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004802:	4b1f      	ldr	r3, [pc, #124]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004806:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004810:	491b      	ldr	r1, [pc, #108]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004812:	4313      	orrs	r3, r2
 8004814:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d032      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800482c:	d00d      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800482e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004832:	d016      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8004834:	2b00      	cmp	r3, #0
 8004836:	d111      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3304      	adds	r3, #4
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fbd8 	bl	8004ff4 <RCCEx_PLL2_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004848:	e00c      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3324      	adds	r3, #36	; 0x24
 800484e:	2102      	movs	r1, #2
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fc81 	bl	8005158 <RCCEx_PLL3_Config>
 8004856:	4603      	mov	r3, r0
 8004858:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800485a:	e003      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	75fb      	strb	r3, [r7, #23]
      break;
 8004860:	e000      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8004862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004864:	7dfb      	ldrb	r3, [r7, #23]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10c      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800486a:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800486c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004878:	4901      	ldr	r1, [pc, #4]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800487a:	4313      	orrs	r3, r2
 800487c:	658b      	str	r3, [r1, #88]	; 0x58
 800487e:	e003      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004880:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004884:	7dfb      	ldrb	r3, [r7, #23]
 8004886:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d02f      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800489a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800489e:	d00c      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80048a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048a4:	d015      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80048a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048aa:	d10f      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ac:	4b79      	ldr	r3, [pc, #484]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	4a78      	ldr	r2, [pc, #480]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80048b8:	e00c      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3324      	adds	r3, #36	; 0x24
 80048be:	2101      	movs	r1, #1
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fc49 	bl	8005158 <RCCEx_PLL3_Config>
 80048c6:	4603      	mov	r3, r0
 80048c8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80048ca:	e003      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	75fb      	strb	r3, [r7, #23]
      break;
 80048d0:	e000      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80048d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048da:	4b6e      	ldr	r3, [pc, #440]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e8:	496a      	ldr	r1, [pc, #424]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	654b      	str	r3, [r1, #84]	; 0x54
 80048ee:	e001      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f0:	7dfb      	ldrb	r3, [r7, #23]
 80048f2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d029      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490c:	d007      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800490e:	e00f      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004910:	4b60      	ldr	r3, [pc, #384]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	4a5f      	ldr	r2, [pc, #380]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800491a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800491c:	e00b      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3304      	adds	r3, #4
 8004922:	2102      	movs	r1, #2
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fb65 	bl	8004ff4 <RCCEx_PLL2_Config>
 800492a:	4603      	mov	r3, r0
 800492c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800492e:	e002      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	75fb      	strb	r3, [r7, #23]
      break;
 8004934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004936:	7dfb      	ldrb	r3, [r7, #23]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d109      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800493c:	4b55      	ldr	r3, [pc, #340]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800493e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004940:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004948:	4952      	ldr	r1, [pc, #328]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800494a:	4313      	orrs	r3, r2
 800494c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800494e:	e001      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004950:	7dfb      	ldrb	r3, [r7, #23]
 8004952:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3324      	adds	r3, #36	; 0x24
 8004964:	2102      	movs	r1, #2
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fbf6 	bl	8005158 <RCCEx_PLL3_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d02f      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800498a:	d00c      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800498c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004990:	d802      	bhi.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d011      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8004996:	e00d      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8004998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800499c:	d00f      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800499e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049a2:	d00e      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80049a4:	e006      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a6:	4b3b      	ldr	r3, [pc, #236]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	4a3a      	ldr	r2, [pc, #232]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80049b2:	e007      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	75fb      	strb	r3, [r7, #23]
      break;
 80049b8:	e004      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80049ba:	bf00      	nop
 80049bc:	e002      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80049be:	bf00      	nop
 80049c0:	e000      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80049c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d109      	bne.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049ca:	4b32      	ldr	r3, [pc, #200]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049d6:	492f      	ldr	r1, [pc, #188]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	654b      	str	r3, [r1, #84]	; 0x54
 80049dc:	e001      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049de:	7dfb      	ldrb	r3, [r7, #23]
 80049e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d008      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049ee:	4b29      	ldr	r3, [pc, #164]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fa:	4926      	ldr	r1, [pc, #152]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d009      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a0c:	4b21      	ldr	r3, [pc, #132]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a1a:	491e      	ldr	r1, [pc, #120]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d008      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a2c:	4b19      	ldr	r3, [pc, #100]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a38:	4916      	ldr	r1, [pc, #88]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00d      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a4a:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	4a11      	ldr	r2, [pc, #68]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a54:	6113      	str	r3, [r2, #16]
 8004a56:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a60:	490c      	ldr	r1, [pc, #48]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	da08      	bge.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a6e:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7a:	4906      	ldr	r1, [pc, #24]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004a80:	7dbb      	ldrb	r3, [r7, #22]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e000      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	58024400 	.word	0x58024400

08004a98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a9c:	f7ff f870 	bl	8003b80 <HAL_RCC_GetHCLKFreq>
 8004aa0:	4601      	mov	r1, r0
 8004aa2:	4b06      	ldr	r3, [pc, #24]	; (8004abc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	091b      	lsrs	r3, r3, #4
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	4a04      	ldr	r2, [pc, #16]	; (8004ac0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004aae:	5cd3      	ldrb	r3, [r2, r3]
 8004ab0:	f003 031f 	and.w	r3, r3, #31
 8004ab4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	58024400 	.word	0x58024400
 8004ac0:	0800c5dc 	.word	0x0800c5dc

08004ac4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b089      	sub	sp, #36	; 0x24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004acc:	4b9d      	ldr	r3, [pc, #628]	; (8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	f003 0303 	and.w	r3, r3, #3
 8004ad4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004ad6:	4b9b      	ldr	r3, [pc, #620]	; (8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	0b1b      	lsrs	r3, r3, #12
 8004adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ae0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004ae2:	4b98      	ldr	r3, [pc, #608]	; (8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	091b      	lsrs	r3, r3, #4
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004aee:	4b95      	ldr	r3, [pc, #596]	; (8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af2:	08db      	lsrs	r3, r3, #3
 8004af4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	fb02 f303 	mul.w	r3, r2, r3
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 810a 	beq.w	8004d26 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d05a      	beq.n	8004bce <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d302      	bcc.n	8004b22 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d078      	beq.n	8004c12 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004b20:	e099      	b.n	8004c56 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b22:	4b88      	ldr	r3, [pc, #544]	; (8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d02d      	beq.n	8004b8a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b2e:	4b85      	ldr	r3, [pc, #532]	; (8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	08db      	lsrs	r3, r3, #3
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	4a83      	ldr	r2, [pc, #524]	; (8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	ee07 3a90 	vmov	s15, r3
 8004b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b58:	4b7a      	ldr	r3, [pc, #488]	; (8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b60:	ee07 3a90 	vmov	s15, r3
 8004b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b68:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b6c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004d4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004b70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b84:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004b88:	e087      	b.n	8004c9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	ee07 3a90 	vmov	s15, r3
 8004b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b94:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004d50 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004b98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9c:	4b69      	ldr	r3, [pc, #420]	; (8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba4:	ee07 3a90 	vmov	s15, r3
 8004ba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bac:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bb0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004d4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004bb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bcc:	e065      	b.n	8004c9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	ee07 3a90 	vmov	s15, r3
 8004bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004bdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be0:	4b58      	ldr	r3, [pc, #352]	; (8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be8:	ee07 3a90 	vmov	s15, r3
 8004bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf0:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bf4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004d4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004bf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c10:	e043      	b.n	8004c9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	ee07 3a90 	vmov	s15, r3
 8004c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004d58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004c20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c24:	4b47      	ldr	r3, [pc, #284]	; (8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2c:	ee07 3a90 	vmov	s15, r3
 8004c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c34:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c38:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004d4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004c3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c54:	e021      	b.n	8004c9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	ee07 3a90 	vmov	s15, r3
 8004c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c60:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004c64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c68:	4b36      	ldr	r3, [pc, #216]	; (8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c70:	ee07 3a90 	vmov	s15, r3
 8004c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c78:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c7c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004d4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004c80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c98:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004c9a:	4b2a      	ldr	r3, [pc, #168]	; (8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9e:	0a5b      	lsrs	r3, r3, #9
 8004ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca4:	ee07 3a90 	vmov	s15, r3
 8004ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cc0:	ee17 2a90 	vmov	r2, s15
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004cc8:	4b1e      	ldr	r3, [pc, #120]	; (8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	0c1b      	lsrs	r3, r3, #16
 8004cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cee:	ee17 2a90 	vmov	r2, s15
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004cf6:	4b13      	ldr	r3, [pc, #76]	; (8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	0e1b      	lsrs	r3, r3, #24
 8004cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d00:	ee07 3a90 	vmov	s15, r3
 8004d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d1c:	ee17 2a90 	vmov	r2, s15
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d24:	e008      	b.n	8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	609a      	str	r2, [r3, #8]
}
 8004d38:	bf00      	nop
 8004d3a:	3724      	adds	r7, #36	; 0x24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	58024400 	.word	0x58024400
 8004d48:	03d09000 	.word	0x03d09000
 8004d4c:	46000000 	.word	0x46000000
 8004d50:	4c742400 	.word	0x4c742400
 8004d54:	4a742400 	.word	0x4a742400
 8004d58:	4af42400 	.word	0x4af42400

08004d5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b089      	sub	sp, #36	; 0x24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d64:	4b9d      	ldr	r3, [pc, #628]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004d6e:	4b9b      	ldr	r3, [pc, #620]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d72:	0d1b      	lsrs	r3, r3, #20
 8004d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d7a:	4b98      	ldr	r3, [pc, #608]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	0a1b      	lsrs	r3, r3, #8
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004d86:	4b95      	ldr	r3, [pc, #596]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8a:	08db      	lsrs	r3, r3, #3
 8004d8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	fb02 f303 	mul.w	r3, r2, r3
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 810a 	beq.w	8004fbe <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d05a      	beq.n	8004e66 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d302      	bcc.n	8004dba <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d078      	beq.n	8004eaa <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004db8:	e099      	b.n	8004eee <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dba:	4b88      	ldr	r3, [pc, #544]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d02d      	beq.n	8004e22 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004dc6:	4b85      	ldr	r3, [pc, #532]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	08db      	lsrs	r3, r3, #3
 8004dcc:	f003 0303 	and.w	r3, r3, #3
 8004dd0:	4a83      	ldr	r2, [pc, #524]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	ee07 3a90 	vmov	s15, r3
 8004de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004df0:	4b7a      	ldr	r3, [pc, #488]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df8:	ee07 3a90 	vmov	s15, r3
 8004dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e00:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e04:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004e08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e20:	e087      	b.n	8004f32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	ee07 3a90 	vmov	s15, r3
 8004e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004e30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e34:	4b69      	ldr	r3, [pc, #420]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3c:	ee07 3a90 	vmov	s15, r3
 8004e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e44:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e48:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004e4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e64:	e065      	b.n	8004f32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	ee07 3a90 	vmov	s15, r3
 8004e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e70:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004e74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e78:	4b58      	ldr	r3, [pc, #352]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e80:	ee07 3a90 	vmov	s15, r3
 8004e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e88:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e8c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004e90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ea8:	e043      	b.n	8004f32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	ee07 3a90 	vmov	s15, r3
 8004eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004eb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ebc:	4b47      	ldr	r3, [pc, #284]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec4:	ee07 3a90 	vmov	s15, r3
 8004ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ecc:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ed0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004ed4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ed8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004edc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ee0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004eec:	e021      	b.n	8004f32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	ee07 3a90 	vmov	s15, r3
 8004ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f00:	4b36      	ldr	r3, [pc, #216]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f08:	ee07 3a90 	vmov	s15, r3
 8004f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f10:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f14:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004f18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f30:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004f32:	4b2a      	ldr	r3, [pc, #168]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	0a5b      	lsrs	r3, r3, #9
 8004f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f3c:	ee07 3a90 	vmov	s15, r3
 8004f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f58:	ee17 2a90 	vmov	r2, s15
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004f60:	4b1e      	ldr	r3, [pc, #120]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	0c1b      	lsrs	r3, r3, #16
 8004f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f86:	ee17 2a90 	vmov	r2, s15
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004f8e:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	0e1b      	lsrs	r3, r3, #24
 8004f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f98:	ee07 3a90 	vmov	s15, r3
 8004f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb4:	ee17 2a90 	vmov	r2, s15
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	609a      	str	r2, [r3, #8]
}
 8004fd0:	bf00      	nop
 8004fd2:	3724      	adds	r7, #36	; 0x24
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	58024400 	.word	0x58024400
 8004fe0:	03d09000 	.word	0x03d09000
 8004fe4:	46000000 	.word	0x46000000
 8004fe8:	4c742400 	.word	0x4c742400
 8004fec:	4a742400 	.word	0x4a742400
 8004ff0:	4af42400 	.word	0x4af42400

08004ff4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005002:	4b53      	ldr	r3, [pc, #332]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 8005004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	2b03      	cmp	r3, #3
 800500c:	d101      	bne.n	8005012 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e099      	b.n	8005146 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005012:	4b4f      	ldr	r3, [pc, #316]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a4e      	ldr	r2, [pc, #312]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 8005018:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800501c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800501e:	f7fc fdbd 	bl	8001b9c <HAL_GetTick>
 8005022:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005024:	e008      	b.n	8005038 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005026:	f7fc fdb9 	bl	8001b9c <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e086      	b.n	8005146 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005038:	4b45      	ldr	r3, [pc, #276]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1f0      	bne.n	8005026 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005044:	4b42      	ldr	r3, [pc, #264]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	031b      	lsls	r3, r3, #12
 8005052:	493f      	ldr	r1, [pc, #252]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 8005054:	4313      	orrs	r3, r2
 8005056:	628b      	str	r3, [r1, #40]	; 0x28
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	3b01      	subs	r3, #1
 800505e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	3b01      	subs	r3, #1
 8005068:	025b      	lsls	r3, r3, #9
 800506a:	b29b      	uxth	r3, r3
 800506c:	431a      	orrs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	3b01      	subs	r3, #1
 8005074:	041b      	lsls	r3, r3, #16
 8005076:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	3b01      	subs	r3, #1
 8005082:	061b      	lsls	r3, r3, #24
 8005084:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005088:	4931      	ldr	r1, [pc, #196]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 800508a:	4313      	orrs	r3, r2
 800508c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800508e:	4b30      	ldr	r3, [pc, #192]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	492d      	ldr	r1, [pc, #180]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 800509c:	4313      	orrs	r3, r2
 800509e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80050a0:	4b2b      	ldr	r3, [pc, #172]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	f023 0220 	bic.w	r2, r3, #32
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	4928      	ldr	r1, [pc, #160]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80050b2:	4b27      	ldr	r3, [pc, #156]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b6:	4a26      	ldr	r2, [pc, #152]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050b8:	f023 0310 	bic.w	r3, r3, #16
 80050bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050be:	4b24      	ldr	r3, [pc, #144]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050c2:	4b24      	ldr	r3, [pc, #144]	; (8005154 <RCCEx_PLL2_Config+0x160>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	69d2      	ldr	r2, [r2, #28]
 80050ca:	00d2      	lsls	r2, r2, #3
 80050cc:	4920      	ldr	r1, [pc, #128]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80050d2:	4b1f      	ldr	r3, [pc, #124]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	4a1e      	ldr	r2, [pc, #120]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050d8:	f043 0310 	orr.w	r3, r3, #16
 80050dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050e4:	4b1a      	ldr	r3, [pc, #104]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	4a19      	ldr	r2, [pc, #100]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050f0:	e00f      	b.n	8005112 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d106      	bne.n	8005106 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80050f8:	4b15      	ldr	r3, [pc, #84]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	4a14      	ldr	r2, [pc, #80]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 80050fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005102:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005104:	e005      	b.n	8005112 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005106:	4b12      	ldr	r3, [pc, #72]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	4a11      	ldr	r2, [pc, #68]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 800510c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005110:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005112:	4b0f      	ldr	r3, [pc, #60]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a0e      	ldr	r2, [pc, #56]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 8005118:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800511c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511e:	f7fc fd3d 	bl	8001b9c <HAL_GetTick>
 8005122:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005124:	e008      	b.n	8005138 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005126:	f7fc fd39 	bl	8001b9c <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e006      	b.n	8005146 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <RCCEx_PLL2_Config+0x15c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0f0      	beq.n	8005126 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	58024400 	.word	0x58024400
 8005154:	ffff0007 	.word	0xffff0007

08005158 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005166:	4b53      	ldr	r3, [pc, #332]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	2b03      	cmp	r3, #3
 8005170:	d101      	bne.n	8005176 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e099      	b.n	80052aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005176:	4b4f      	ldr	r3, [pc, #316]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a4e      	ldr	r2, [pc, #312]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800517c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005182:	f7fc fd0b 	bl	8001b9c <HAL_GetTick>
 8005186:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005188:	e008      	b.n	800519c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800518a:	f7fc fd07 	bl	8001b9c <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e086      	b.n	80052aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800519c:	4b45      	ldr	r3, [pc, #276]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1f0      	bne.n	800518a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80051a8:	4b42      	ldr	r3, [pc, #264]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 80051aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	051b      	lsls	r3, r3, #20
 80051b6:	493f      	ldr	r1, [pc, #252]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	628b      	str	r3, [r1, #40]	; 0x28
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	025b      	lsls	r3, r3, #9
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	041b      	lsls	r3, r3, #16
 80051da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	3b01      	subs	r3, #1
 80051e6:	061b      	lsls	r3, r3, #24
 80051e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051ec:	4931      	ldr	r1, [pc, #196]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051f2:	4b30      	ldr	r3, [pc, #192]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 80051f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	492d      	ldr	r1, [pc, #180]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005200:	4313      	orrs	r3, r2
 8005202:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005204:	4b2b      	ldr	r3, [pc, #172]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	4928      	ldr	r1, [pc, #160]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005212:	4313      	orrs	r3, r2
 8005214:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005216:	4b27      	ldr	r3, [pc, #156]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521a:	4a26      	ldr	r2, [pc, #152]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800521c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005220:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005222:	4b24      	ldr	r3, [pc, #144]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005226:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <RCCEx_PLL3_Config+0x160>)
 8005228:	4013      	ands	r3, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	69d2      	ldr	r2, [r2, #28]
 800522e:	00d2      	lsls	r2, r2, #3
 8005230:	4920      	ldr	r1, [pc, #128]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005232:	4313      	orrs	r3, r2
 8005234:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005236:	4b1f      	ldr	r3, [pc, #124]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	4a1e      	ldr	r2, [pc, #120]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800523c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005240:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d106      	bne.n	8005256 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005248:	4b1a      	ldr	r3, [pc, #104]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	4a19      	ldr	r2, [pc, #100]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800524e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005252:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005254:	e00f      	b.n	8005276 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d106      	bne.n	800526a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800525c:	4b15      	ldr	r3, [pc, #84]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	4a14      	ldr	r2, [pc, #80]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005262:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005266:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005268:	e005      	b.n	8005276 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800526a:	4b12      	ldr	r3, [pc, #72]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	4a11      	ldr	r2, [pc, #68]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005270:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005274:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005276:	4b0f      	ldr	r3, [pc, #60]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a0e      	ldr	r2, [pc, #56]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800527c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005282:	f7fc fc8b 	bl	8001b9c <HAL_GetTick>
 8005286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005288:	e008      	b.n	800529c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800528a:	f7fc fc87 	bl	8001b9c <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e006      	b.n	80052aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <RCCEx_PLL3_Config+0x15c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0f0      	beq.n	800528a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	58024400 	.word	0x58024400
 80052b8:	ffff0007 	.word	0xffff0007

080052bc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e0e2      	b.n	8005498 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a70      	ldr	r2, [pc, #448]	; (80054a0 <HAL_SPI_Init+0x1e4>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00f      	beq.n	8005302 <HAL_SPI_Init+0x46>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a6f      	ldr	r2, [pc, #444]	; (80054a4 <HAL_SPI_Init+0x1e8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00a      	beq.n	8005302 <HAL_SPI_Init+0x46>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a6d      	ldr	r2, [pc, #436]	; (80054a8 <HAL_SPI_Init+0x1ec>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d005      	beq.n	8005302 <HAL_SPI_Init+0x46>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	2b0f      	cmp	r3, #15
 80052fc:	d901      	bls.n	8005302 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e0ca      	b.n	8005498 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f001 f870 	bl	80063e8 <SPI_GetPacketSize>
 8005308:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a64      	ldr	r2, [pc, #400]	; (80054a0 <HAL_SPI_Init+0x1e4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00c      	beq.n	800532e <HAL_SPI_Init+0x72>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a62      	ldr	r2, [pc, #392]	; (80054a4 <HAL_SPI_Init+0x1e8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d007      	beq.n	800532e <HAL_SPI_Init+0x72>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a61      	ldr	r2, [pc, #388]	; (80054a8 <HAL_SPI_Init+0x1ec>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d002      	beq.n	800532e <HAL_SPI_Init+0x72>
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b08      	cmp	r3, #8
 800532c:	d811      	bhi.n	8005352 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005332:	4a5b      	ldr	r2, [pc, #364]	; (80054a0 <HAL_SPI_Init+0x1e4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d009      	beq.n	800534c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a59      	ldr	r2, [pc, #356]	; (80054a4 <HAL_SPI_Init+0x1e8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d004      	beq.n	800534c <HAL_SPI_Init+0x90>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a58      	ldr	r2, [pc, #352]	; (80054a8 <HAL_SPI_Init+0x1ec>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d104      	bne.n	8005356 <HAL_SPI_Init+0x9a>
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b10      	cmp	r3, #16
 8005350:	d901      	bls.n	8005356 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e0a0      	b.n	8005498 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7fc f902 	bl	8001574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0201 	bic.w	r2, r2, #1
 8005386:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005390:	d110      	bne.n	80053b4 <HAL_SPI_Init+0xf8>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800539a:	d10b      	bne.n	80053b4 <HAL_SPI_Init+0xf8>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d107      	bne.n	80053b4 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053b2:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	69da      	ldr	r2, [r3, #28]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053bc:	431a      	orrs	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c6:	ea42 0103 	orr.w	r1, r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005414:	ea42 0103 	orr.w	r1, r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d113      	bne.n	8005454 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800543e:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005452:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0201 	bic.w	r2, r2, #1
 8005462:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40013000 	.word	0x40013000
 80054a4:	40003800 	.word	0x40003800
 80054a8:	40003c00 	.word	0x40003c00

080054ac <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08a      	sub	sp, #40	; 0x28
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	4613      	mov	r3, r2
 80054ba:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3320      	adds	r3, #32
 80054c2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_SPI_Transmit+0x2a>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e1d7      	b.n	8005886 <HAL_SPI_Transmit+0x3da>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054de:	f7fc fb5d 	bl	8001b9c <HAL_GetTick>
 80054e2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d007      	beq.n	8005500 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80054f0:	2302      	movs	r3, #2
 80054f2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80054fc:	7efb      	ldrb	r3, [r7, #27]
 80054fe:	e1c2      	b.n	8005886 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_SPI_Transmit+0x60>
 8005506:	88fb      	ldrh	r3, [r7, #6]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d107      	bne.n	800551c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005518:	7efb      	ldrb	r3, [r7, #27]
 800551a:	e1b4      	b.n	8005886 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2203      	movs	r2, #3
 8005520:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	88fa      	ldrh	r2, [r7, #6]
 8005536:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	88fa      	ldrh	r2, [r7, #6]
 800553e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800556c:	d107      	bne.n	800557e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800557c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	4b96      	ldr	r3, [pc, #600]	; (80057e0 <HAL_SPI_Transmit+0x334>)
 8005586:	4013      	ands	r3, r2
 8005588:	88f9      	ldrh	r1, [r7, #6]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	430b      	orrs	r3, r1
 8005590:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0201 	orr.w	r2, r2, #1
 80055a0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055aa:	d107      	bne.n	80055bc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	2b0f      	cmp	r3, #15
 80055c2:	d947      	bls.n	8005654 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80055c4:	e03f      	b.n	8005646 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d114      	bne.n	80055fe <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6812      	ldr	r2, [r2, #0]
 80055de:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e4:	1d1a      	adds	r2, r3, #4
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80055fc:	e023      	b.n	8005646 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055fe:	f7fc facd 	bl	8001b9c <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d803      	bhi.n	8005616 <HAL_SPI_Transmit+0x16a>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005614:	d102      	bne.n	800561c <HAL_SPI_Transmit+0x170>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d114      	bne.n	8005646 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 fe15 	bl	800624c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005630:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e11f      	b.n	8005886 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1b9      	bne.n	80055c6 <HAL_SPI_Transmit+0x11a>
 8005652:	e0f2      	b.n	800583a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	2b07      	cmp	r3, #7
 800565a:	f240 80e7 	bls.w	800582c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800565e:	e05d      	b.n	800571c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b02      	cmp	r3, #2
 800566c:	d132      	bne.n	80056d4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b01      	cmp	r3, #1
 8005678:	d918      	bls.n	80056ac <HAL_SPI_Transmit+0x200>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d014      	beq.n	80056ac <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6812      	ldr	r2, [r2, #0]
 800568c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005692:	1d1a      	adds	r2, r3, #4
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b02      	subs	r3, #2
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80056aa:	e037      	b.n	800571c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b0:	881a      	ldrh	r2, [r3, #0]
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ba:	1c9a      	adds	r2, r3, #2
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80056d2:	e023      	b.n	800571c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056d4:	f7fc fa62 	bl	8001b9c <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d803      	bhi.n	80056ec <HAL_SPI_Transmit+0x240>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ea:	d102      	bne.n	80056f2 <HAL_SPI_Transmit+0x246>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d114      	bne.n	800571c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 fdaa 	bl	800624c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005706:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0b4      	b.n	8005886 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d19b      	bne.n	8005660 <HAL_SPI_Transmit+0x1b4>
 8005728:	e087      	b.n	800583a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b02      	cmp	r3, #2
 8005736:	d155      	bne.n	80057e4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800573e:	b29b      	uxth	r3, r3
 8005740:	2b03      	cmp	r3, #3
 8005742:	d918      	bls.n	8005776 <HAL_SPI_Transmit+0x2ca>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005748:	2b40      	cmp	r3, #64	; 0x40
 800574a:	d914      	bls.n	8005776 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6812      	ldr	r2, [r2, #0]
 8005756:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575c:	1d1a      	adds	r2, r3, #4
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005768:	b29b      	uxth	r3, r3
 800576a:	3b04      	subs	r3, #4
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005774:	e05a      	b.n	800582c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800577c:	b29b      	uxth	r3, r3
 800577e:	2b01      	cmp	r3, #1
 8005780:	d917      	bls.n	80057b2 <HAL_SPI_Transmit+0x306>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005786:	2b00      	cmp	r3, #0
 8005788:	d013      	beq.n	80057b2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578e:	881a      	ldrh	r2, [r3, #0]
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005798:	1c9a      	adds	r2, r3, #2
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	3b02      	subs	r3, #2
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80057b0:	e03c      	b.n	800582c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3320      	adds	r3, #32
 80057bc:	7812      	ldrb	r2, [r2, #0]
 80057be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80057dc:	e026      	b.n	800582c <HAL_SPI_Transmit+0x380>
 80057de:	bf00      	nop
 80057e0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057e4:	f7fc f9da 	bl	8001b9c <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d803      	bhi.n	80057fc <HAL_SPI_Transmit+0x350>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	d102      	bne.n	8005802 <HAL_SPI_Transmit+0x356>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d114      	bne.n	800582c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 fd22 	bl	800624c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005816:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e02c      	b.n	8005886 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	f47f af78 	bne.w	800572a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2200      	movs	r2, #0
 8005842:	2108      	movs	r1, #8
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 fda1 	bl	800638c <SPI_WaitOnFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d007      	beq.n	8005860 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005856:	f043 0220 	orr.w	r2, r3, #32
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fcf3 	bl	800624c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e000      	b.n	8005886 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8005884:	7efb      	ldrb	r3, [r7, #27]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3720      	adds	r7, #32
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop

08005890 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08a      	sub	sp, #40	; 0x28
 8005894:	af02      	add	r7, sp, #8
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	4613      	mov	r3, r2
 800589e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3330      	adds	r3, #48	; 0x30
 80058aa:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058b4:	d112      	bne.n	80058dc <HAL_SPI_Receive+0x4c>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10e      	bne.n	80058dc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2204      	movs	r2, #4
 80058c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80058c6:	88fa      	ldrh	r2, [r7, #6]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	4613      	mov	r3, r2
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	68b9      	ldr	r1, [r7, #8]
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 f9ce 	bl	8005c74 <HAL_SPI_TransmitReceive>
 80058d8:	4603      	mov	r3, r0
 80058da:	e1c7      	b.n	8005c6c <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <HAL_SPI_Receive+0x5a>
 80058e6:	2302      	movs	r3, #2
 80058e8:	e1c0      	b.n	8005c6c <HAL_SPI_Receive+0x3dc>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058f2:	f7fc f953 	bl	8001b9c <HAL_GetTick>
 80058f6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b01      	cmp	r3, #1
 8005902:	d007      	beq.n	8005914 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8005904:	2302      	movs	r3, #2
 8005906:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005910:	7ffb      	ldrb	r3, [r7, #31]
 8005912:	e1ab      	b.n	8005c6c <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <HAL_SPI_Receive+0x90>
 800591a:	88fb      	ldrh	r3, [r7, #6]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d107      	bne.n	8005930 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800592c:	7ffb      	ldrb	r3, [r7, #31]
 800592e:	e19d      	b.n	8005c6c <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2204      	movs	r2, #4
 8005934:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	88fa      	ldrh	r2, [r7, #6]
 800594a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	88fa      	ldrh	r2, [r7, #6]
 8005952:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005980:	d107      	bne.n	8005992 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005990:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	4b94      	ldr	r3, [pc, #592]	; (8005bec <HAL_SPI_Receive+0x35c>)
 800599a:	4013      	ands	r3, r2
 800599c:	88f9      	ldrh	r1, [r7, #6]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	6812      	ldr	r2, [r2, #0]
 80059a2:	430b      	orrs	r3, r1
 80059a4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f042 0201 	orr.w	r2, r2, #1
 80059b4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059be:	d107      	bne.n	80059d0 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	2b0f      	cmp	r3, #15
 80059d6:	d948      	bls.n	8005a6a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80059d8:	e040      	b.n	8005a5c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695a      	ldr	r2, [r3, #20]
 80059e0:	f248 0308 	movw	r3, #32776	; 0x8008
 80059e4:	4013      	ands	r3, r2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d014      	beq.n	8005a14 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80059f4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059fa:	1d1a      	adds	r2, r3, #4
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005a12:	e023      	b.n	8005a5c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a14:	f7fc f8c2 	bl	8001b9c <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d803      	bhi.n	8005a2c <HAL_SPI_Receive+0x19c>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2a:	d102      	bne.n	8005a32 <HAL_SPI_Receive+0x1a2>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d114      	bne.n	8005a5c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 fc0a 	bl	800624c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e107      	b.n	8005c6c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1b8      	bne.n	80059da <HAL_SPI_Receive+0x14a>
 8005a68:	e0ed      	b.n	8005c46 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	2b07      	cmp	r3, #7
 8005a70:	f240 80e2 	bls.w	8005c38 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005a74:	e05b      	b.n	8005b2e <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d030      	beq.n	8005ae6 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d014      	beq.n	8005abc <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a9c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa2:	1d1a      	adds	r2, r3, #4
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b02      	subs	r3, #2
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005aba:	e038      	b.n	8005b2e <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	8812      	ldrh	r2, [r2, #0]
 8005ac4:	b292      	uxth	r2, r2
 8005ac6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005acc:	1c9a      	adds	r2, r3, #2
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005ae4:	e023      	b.n	8005b2e <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ae6:	f7fc f859 	bl	8001b9c <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d803      	bhi.n	8005afe <HAL_SPI_Receive+0x26e>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afc:	d102      	bne.n	8005b04 <HAL_SPI_Receive+0x274>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d114      	bne.n	8005b2e <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 fba1 	bl	800624c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e09e      	b.n	8005c6c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d19d      	bne.n	8005a76 <HAL_SPI_Receive+0x1e6>
 8005b3a:	e084      	b.n	8005c46 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d052      	beq.n	8005bf0 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d014      	beq.n	8005b82 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b62:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b68:	1d1a      	adds	r2, r3, #4
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	3b04      	subs	r3, #4
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005b80:	e05a      	b.n	8005c38 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8005b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b90:	d914      	bls.n	8005bbc <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	8812      	ldrh	r2, [r2, #0]
 8005b9a:	b292      	uxth	r2, r2
 8005b9c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ba2:	1c9a      	adds	r2, r3, #2
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b02      	subs	r3, #2
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005bba:	e03d      	b.n	8005c38 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bc8:	7812      	ldrb	r2, [r2, #0]
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005bea:	e025      	b.n	8005c38 <HAL_SPI_Receive+0x3a8>
 8005bec:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bf0:	f7fb ffd4 	bl	8001b9c <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d803      	bhi.n	8005c08 <HAL_SPI_Receive+0x378>
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c06:	d102      	bne.n	8005c0e <HAL_SPI_Receive+0x37e>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d114      	bne.n	8005c38 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 fb1c 	bl	800624c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e019      	b.n	8005c6c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f47f af7b 	bne.w	8005b3c <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 fb00 	bl	800624c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 8005c6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3720      	adds	r7, #32
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08e      	sub	sp, #56	; 0x38
 8005c78:	af02      	add	r7, sp, #8
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3320      	adds	r3, #32
 8005c8e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3330      	adds	r3, #48	; 0x30
 8005c96:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <HAL_SPI_TransmitReceive+0x32>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e2ce      	b.n	8006244 <HAL_SPI_TransmitReceive+0x5d0>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cae:	f7fb ff75 	bl	8001b9c <HAL_GetTick>
 8005cb2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8005cb4:	887b      	ldrh	r3, [r7, #2]
 8005cb6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8005cb8:	887b      	ldrh	r3, [r7, #2]
 8005cba:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005cc2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005cca:	7efb      	ldrb	r3, [r7, #27]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d014      	beq.n	8005cfa <HAL_SPI_TransmitReceive+0x86>
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cd6:	d106      	bne.n	8005ce6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d102      	bne.n	8005ce6 <HAL_SPI_TransmitReceive+0x72>
 8005ce0:	7efb      	ldrb	r3, [r7, #27]
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d009      	beq.n	8005cfa <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005cf4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cf8:	e2a4      	b.n	8006244 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <HAL_SPI_TransmitReceive+0x98>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <HAL_SPI_TransmitReceive+0x98>
 8005d06:	887b      	ldrh	r3, [r7, #2]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d109      	bne.n	8005d20 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005d1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d1e:	e291      	b.n	8006244 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d003      	beq.n	8005d34 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2205      	movs	r2, #5
 8005d30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	887a      	ldrh	r2, [r7, #2]
 8005d46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	887a      	ldrh	r2, [r7, #2]
 8005d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	887a      	ldrh	r2, [r7, #2]
 8005d5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	887a      	ldrh	r2, [r7, #2]
 8005d64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	4b9f      	ldr	r3, [pc, #636]	; (8005ff8 <HAL_SPI_TransmitReceive+0x384>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	8879      	ldrh	r1, [r7, #2]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	430b      	orrs	r3, r1
 8005d86:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005da0:	d107      	bne.n	8005db2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	2b0f      	cmp	r3, #15
 8005db8:	d970      	bls.n	8005e9c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005dba:	e068      	b.n	8005e8e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d11a      	bne.n	8005e00 <HAL_SPI_TransmitReceive+0x18c>
 8005dca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d017      	beq.n	8005e00 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6812      	ldr	r2, [r2, #0]
 8005dda:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de0:	1d1a      	adds	r2, r3, #4
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	3b01      	subs	r3, #1
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005dfe:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695a      	ldr	r2, [r3, #20]
 8005e06:	f248 0308 	movw	r3, #32776	; 0x8008
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01a      	beq.n	8005e46 <HAL_SPI_TransmitReceive+0x1d2>
 8005e10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d017      	beq.n	8005e46 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e20:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e26:	1d1a      	adds	r2, r3, #4
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e44:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e46:	f7fb fea9 	bl	8001b9c <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d803      	bhi.n	8005e5e <HAL_SPI_TransmitReceive+0x1ea>
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5c:	d102      	bne.n	8005e64 <HAL_SPI_TransmitReceive+0x1f0>
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d114      	bne.n	8005e8e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 f9f1 	bl	800624c <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e1da      	b.n	8006244 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005e8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d193      	bne.n	8005dbc <HAL_SPI_TransmitReceive+0x148>
 8005e94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d190      	bne.n	8005dbc <HAL_SPI_TransmitReceive+0x148>
 8005e9a:	e1ac      	b.n	80061f6 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	2b07      	cmp	r3, #7
 8005ea2:	f240 81a0 	bls.w	80061e6 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005ea6:	e0a9      	b.n	8005ffc <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d139      	bne.n	8005f2a <HAL_SPI_TransmitReceive+0x2b6>
 8005eb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d036      	beq.n	8005f2a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005ebc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d91c      	bls.n	8005efc <HAL_SPI_TransmitReceive+0x288>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d018      	beq.n	8005efc <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6812      	ldr	r2, [r2, #0]
 8005ed4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eda:	1d1a      	adds	r2, r3, #4
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	3b02      	subs	r3, #2
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ef8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005efa:	e016      	b.n	8005f2a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f00:	881a      	ldrh	r2, [r3, #0]
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0a:	1c9a      	adds	r2, r3, #2
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005f28:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d03a      	beq.n	8005fae <HAL_SPI_TransmitReceive+0x33a>
 8005f38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d037      	beq.n	8005fae <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d018      	beq.n	8005f7e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f56:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f5c:	1d1a      	adds	r2, r3, #4
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	3b02      	subs	r3, #2
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f7a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005f7c:	e017      	b.n	8005fae <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f82:	6a3a      	ldr	r2, [r7, #32]
 8005f84:	8812      	ldrh	r2, [r2, #0]
 8005f86:	b292      	uxth	r2, r2
 8005f88:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f8e:	1c9a      	adds	r2, r3, #2
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005fac:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fae:	f7fb fdf5 	bl	8001b9c <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d803      	bhi.n	8005fc6 <HAL_SPI_TransmitReceive+0x352>
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc4:	d102      	bne.n	8005fcc <HAL_SPI_TransmitReceive+0x358>
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d117      	bne.n	8005ffc <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f93d 	bl	800624c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fe0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e126      	b.n	8006244 <HAL_SPI_TransmitReceive+0x5d0>
 8005ff6:	bf00      	nop
 8005ff8:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005ffc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f47f af52 	bne.w	8005ea8 <HAL_SPI_TransmitReceive+0x234>
 8006004:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006006:	2b00      	cmp	r3, #0
 8006008:	f47f af4e 	bne.w	8005ea8 <HAL_SPI_TransmitReceive+0x234>
 800600c:	e0f3      	b.n	80061f6 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b02      	cmp	r3, #2
 800601a:	d15a      	bne.n	80060d2 <HAL_SPI_TransmitReceive+0x45e>
 800601c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800601e:	2b00      	cmp	r3, #0
 8006020:	d057      	beq.n	80060d2 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006022:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006024:	2b03      	cmp	r3, #3
 8006026:	d91c      	bls.n	8006062 <HAL_SPI_TransmitReceive+0x3ee>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602c:	2b40      	cmp	r3, #64	; 0x40
 800602e:	d918      	bls.n	8006062 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6812      	ldr	r2, [r2, #0]
 800603a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006040:	1d1a      	adds	r2, r3, #4
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800604c:	b29b      	uxth	r3, r3
 800604e:	3b04      	subs	r3, #4
 8006050:	b29a      	uxth	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800605e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006060:	e037      	b.n	80060d2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006062:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006064:	2b01      	cmp	r3, #1
 8006066:	d91b      	bls.n	80060a0 <HAL_SPI_TransmitReceive+0x42c>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606c:	2b00      	cmp	r3, #0
 800606e:	d017      	beq.n	80060a0 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006074:	881a      	ldrh	r2, [r3, #0]
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607e:	1c9a      	adds	r2, r3, #2
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800608a:	b29b      	uxth	r3, r3
 800608c:	3b02      	subs	r3, #2
 800608e:	b29a      	uxth	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800609c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800609e:	e018      	b.n	80060d2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3320      	adds	r3, #32
 80060aa:	7812      	ldrb	r2, [r2, #0]
 80060ac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d05e      	beq.n	800619e <HAL_SPI_TransmitReceive+0x52a>
 80060e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d05b      	beq.n	800619e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d018      	beq.n	8006126 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80060fe:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006104:	1d1a      	adds	r2, r3, #4
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006110:	b29b      	uxth	r3, r3
 8006112:	3b04      	subs	r3, #4
 8006114:	b29a      	uxth	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006122:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006124:	e03b      	b.n	800619e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8006130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006134:	d918      	bls.n	8006168 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800613a:	6a3a      	ldr	r2, [r7, #32]
 800613c:	8812      	ldrh	r2, [r2, #0]
 800613e:	b292      	uxth	r2, r2
 8006140:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006146:	1c9a      	adds	r2, r3, #2
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006152:	b29b      	uxth	r3, r3
 8006154:	3b02      	subs	r3, #2
 8006156:	b29a      	uxth	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006164:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006166:	e01a      	b.n	800619e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006174:	7812      	ldrb	r2, [r2, #0]
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800617e:	1c5a      	adds	r2, r3, #1
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800618a:	b29b      	uxth	r3, r3
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800619c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800619e:	f7fb fcfd 	bl	8001b9c <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d803      	bhi.n	80061b6 <HAL_SPI_TransmitReceive+0x542>
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b4:	d102      	bne.n	80061bc <HAL_SPI_TransmitReceive+0x548>
 80061b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d114      	bne.n	80061e6 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f845 	bl	800624c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e02e      	b.n	8006244 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80061e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f47f af10 	bne.w	800600e <HAL_SPI_TransmitReceive+0x39a>
 80061ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f47f af0c 	bne.w	800600e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80061f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	2200      	movs	r2, #0
 80061fe:	2108      	movs	r1, #8
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 f8c3 	bl	800638c <SPI_WaitOnFlagUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006212:	f043 0220 	orr.w	r2, r3, #32
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f815 	bl	800624c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e001      	b.n	8006244 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8006240:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006244:	4618      	mov	r0, r3
 8006246:	3730      	adds	r7, #48	; 0x30
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699a      	ldr	r2, [r3, #24]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0208 	orr.w	r2, r2, #8
 800626a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0210 	orr.w	r2, r2, #16
 800627a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0201 	bic.w	r2, r2, #1
 800628a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6919      	ldr	r1, [r3, #16]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4b3c      	ldr	r3, [pc, #240]	; (8006388 <SPI_CloseTransfer+0x13c>)
 8006298:	400b      	ands	r3, r1
 800629a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80062aa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	d014      	beq.n	80062e2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00f      	beq.n	80062e2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	699a      	ldr	r2, [r3, #24]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0220 	orr.w	r2, r2, #32
 80062e0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d014      	beq.n	8006318 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00f      	beq.n	8006318 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062fe:	f043 0204 	orr.w	r2, r3, #4
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006316:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00f      	beq.n	8006342 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006328:	f043 0201 	orr.w	r2, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	699a      	ldr	r2, [r3, #24]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006340:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00f      	beq.n	800636c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006352:	f043 0208 	orr.w	r2, r3, #8
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800636a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800637c:	bf00      	nop
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	fffffc90 	.word	0xfffffc90

0800638c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	4613      	mov	r3, r2
 800639a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800639c:	e010      	b.n	80063c0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800639e:	f7fb fbfd 	bl	8001b9c <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d803      	bhi.n	80063b6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b4:	d102      	bne.n	80063bc <SPI_WaitOnFlagUntilTimeout+0x30>
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e00f      	b.n	80063e0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695a      	ldr	r2, [r3, #20]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	4013      	ands	r3, r2
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	bf0c      	ite	eq
 80063d0:	2301      	moveq	r3, #1
 80063d2:	2300      	movne	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d0df      	beq.n	800639e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	3301      	adds	r3, #1
 80063f8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	3301      	adds	r3, #1
 8006400:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	3307      	adds	r3, #7
 8006406:	08db      	lsrs	r3, r3, #3
 8006408:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e049      	b.n	80064c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d106      	bne.n	800644a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f841 	bl	80064cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3304      	adds	r3, #4
 800645a:	4619      	mov	r1, r3
 800645c:	4610      	mov	r0, r2
 800645e:	f000 f9bd 	bl	80067dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d001      	beq.n	80064f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e021      	b.n	800653c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f042 0201 	orr.w	r2, r2, #1
 800650e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <HAL_TIM_Base_Start_IT+0x68>)
 8006518:	4013      	ands	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2b06      	cmp	r3, #6
 8006520:	d00b      	beq.n	800653a <HAL_TIM_Base_Start_IT+0x5a>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006528:	d007      	beq.n	800653a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f042 0201 	orr.w	r2, r2, #1
 8006538:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr
 8006548:	00010007 	.word	0x00010007

0800654c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b02      	cmp	r3, #2
 8006560:	d122      	bne.n	80065a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b02      	cmp	r3, #2
 800656e:	d11b      	bne.n	80065a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f06f 0202 	mvn.w	r2, #2
 8006578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	f003 0303 	and.w	r3, r3, #3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f905 	bl	800679e <HAL_TIM_IC_CaptureCallback>
 8006594:	e005      	b.n	80065a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f8f7 	bl	800678a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f908 	bl	80067b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f003 0304 	and.w	r3, r3, #4
 80065b2:	2b04      	cmp	r3, #4
 80065b4:	d122      	bne.n	80065fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	d11b      	bne.n	80065fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f06f 0204 	mvn.w	r2, #4
 80065cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2202      	movs	r2, #2
 80065d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f8db 	bl	800679e <HAL_TIM_IC_CaptureCallback>
 80065e8:	e005      	b.n	80065f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f8cd 	bl	800678a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f8de 	bl	80067b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b08      	cmp	r3, #8
 8006608:	d122      	bne.n	8006650 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	f003 0308 	and.w	r3, r3, #8
 8006614:	2b08      	cmp	r3, #8
 8006616:	d11b      	bne.n	8006650 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f06f 0208 	mvn.w	r2, #8
 8006620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2204      	movs	r2, #4
 8006626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f8b1 	bl	800679e <HAL_TIM_IC_CaptureCallback>
 800663c:	e005      	b.n	800664a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f8a3 	bl	800678a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f8b4 	bl	80067b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	f003 0310 	and.w	r3, r3, #16
 800665a:	2b10      	cmp	r3, #16
 800665c:	d122      	bne.n	80066a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f003 0310 	and.w	r3, r3, #16
 8006668:	2b10      	cmp	r3, #16
 800666a:	d11b      	bne.n	80066a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f06f 0210 	mvn.w	r2, #16
 8006674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2208      	movs	r2, #8
 800667a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f887 	bl	800679e <HAL_TIM_IC_CaptureCallback>
 8006690:	e005      	b.n	800669e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f879 	bl	800678a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f88a 	bl	80067b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d10e      	bne.n	80066d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d107      	bne.n	80066d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f06f 0201 	mvn.w	r2, #1
 80066c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fa fe50 	bl	8001370 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066da:	2b80      	cmp	r3, #128	; 0x80
 80066dc:	d10e      	bne.n	80066fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e8:	2b80      	cmp	r3, #128	; 0x80
 80066ea:	d107      	bne.n	80066fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f914 	bl	8006924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800670a:	d10e      	bne.n	800672a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006716:	2b80      	cmp	r3, #128	; 0x80
 8006718:	d107      	bne.n	800672a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f907 	bl	8006938 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006734:	2b40      	cmp	r3, #64	; 0x40
 8006736:	d10e      	bne.n	8006756 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006742:	2b40      	cmp	r3, #64	; 0x40
 8006744:	d107      	bne.n	8006756 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800674e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f838 	bl	80067c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f003 0320 	and.w	r3, r3, #32
 8006760:	2b20      	cmp	r3, #32
 8006762:	d10e      	bne.n	8006782 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b20      	cmp	r3, #32
 8006770:	d107      	bne.n	8006782 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f06f 0220 	mvn.w	r2, #32
 800677a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f8c7 	bl	8006910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006782:	bf00      	nop
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067ba:	bf00      	nop
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
	...

080067dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a40      	ldr	r2, [pc, #256]	; (80068f0 <TIM_Base_SetConfig+0x114>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d013      	beq.n	800681c <TIM_Base_SetConfig+0x40>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067fa:	d00f      	beq.n	800681c <TIM_Base_SetConfig+0x40>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a3d      	ldr	r2, [pc, #244]	; (80068f4 <TIM_Base_SetConfig+0x118>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d00b      	beq.n	800681c <TIM_Base_SetConfig+0x40>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a3c      	ldr	r2, [pc, #240]	; (80068f8 <TIM_Base_SetConfig+0x11c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d007      	beq.n	800681c <TIM_Base_SetConfig+0x40>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a3b      	ldr	r2, [pc, #236]	; (80068fc <TIM_Base_SetConfig+0x120>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d003      	beq.n	800681c <TIM_Base_SetConfig+0x40>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a3a      	ldr	r2, [pc, #232]	; (8006900 <TIM_Base_SetConfig+0x124>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d108      	bne.n	800682e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	4313      	orrs	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a2f      	ldr	r2, [pc, #188]	; (80068f0 <TIM_Base_SetConfig+0x114>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d01f      	beq.n	8006876 <TIM_Base_SetConfig+0x9a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800683c:	d01b      	beq.n	8006876 <TIM_Base_SetConfig+0x9a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a2c      	ldr	r2, [pc, #176]	; (80068f4 <TIM_Base_SetConfig+0x118>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d017      	beq.n	8006876 <TIM_Base_SetConfig+0x9a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a2b      	ldr	r2, [pc, #172]	; (80068f8 <TIM_Base_SetConfig+0x11c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d013      	beq.n	8006876 <TIM_Base_SetConfig+0x9a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a2a      	ldr	r2, [pc, #168]	; (80068fc <TIM_Base_SetConfig+0x120>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d00f      	beq.n	8006876 <TIM_Base_SetConfig+0x9a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a29      	ldr	r2, [pc, #164]	; (8006900 <TIM_Base_SetConfig+0x124>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d00b      	beq.n	8006876 <TIM_Base_SetConfig+0x9a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a28      	ldr	r2, [pc, #160]	; (8006904 <TIM_Base_SetConfig+0x128>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d007      	beq.n	8006876 <TIM_Base_SetConfig+0x9a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a27      	ldr	r2, [pc, #156]	; (8006908 <TIM_Base_SetConfig+0x12c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d003      	beq.n	8006876 <TIM_Base_SetConfig+0x9a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a26      	ldr	r2, [pc, #152]	; (800690c <TIM_Base_SetConfig+0x130>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d108      	bne.n	8006888 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800687c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4313      	orrs	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a10      	ldr	r2, [pc, #64]	; (80068f0 <TIM_Base_SetConfig+0x114>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00f      	beq.n	80068d4 <TIM_Base_SetConfig+0xf8>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a12      	ldr	r2, [pc, #72]	; (8006900 <TIM_Base_SetConfig+0x124>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00b      	beq.n	80068d4 <TIM_Base_SetConfig+0xf8>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a11      	ldr	r2, [pc, #68]	; (8006904 <TIM_Base_SetConfig+0x128>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d007      	beq.n	80068d4 <TIM_Base_SetConfig+0xf8>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a10      	ldr	r2, [pc, #64]	; (8006908 <TIM_Base_SetConfig+0x12c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d003      	beq.n	80068d4 <TIM_Base_SetConfig+0xf8>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a0f      	ldr	r2, [pc, #60]	; (800690c <TIM_Base_SetConfig+0x130>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d103      	bne.n	80068dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	691a      	ldr	r2, [r3, #16]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	615a      	str	r2, [r3, #20]
}
 80068e2:	bf00      	nop
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40010000 	.word	0x40010000
 80068f4:	40000400 	.word	0x40000400
 80068f8:	40000800 	.word	0x40000800
 80068fc:	40000c00 	.word	0x40000c00
 8006900:	40010400 	.word	0x40010400
 8006904:	40014000 	.word	0x40014000
 8006908:	40014400 	.word	0x40014400
 800690c:	40014800 	.word	0x40014800

08006910 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e042      	b.n	80069e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006964:	2b00      	cmp	r3, #0
 8006966:	d106      	bne.n	8006976 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7fa fe49 	bl	8001608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2224      	movs	r2, #36	; 0x24
 800697a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 0201 	bic.w	r2, r2, #1
 800698c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f91a 	bl	8006bc8 <UART_SetConfig>
 8006994:	4603      	mov	r3, r0
 8006996:	2b01      	cmp	r3, #1
 8006998:	d101      	bne.n	800699e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e022      	b.n	80069e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 febe 	bl	8007728 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689a      	ldr	r2, [r3, #8]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0201 	orr.w	r2, r2, #1
 80069da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 ff45 	bl	800786c <UART_CheckIdleState>
 80069e2:	4603      	mov	r3, r0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3708      	adds	r7, #8
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e04a      	b.n	8006a94 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d106      	bne.n	8006a16 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7fa fdf9 	bl	8001608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2224      	movs	r2, #36	; 0x24
 8006a1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0201 	bic.w	r2, r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f8ca 	bl	8006bc8 <UART_SetConfig>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d101      	bne.n	8006a3e <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e02a      	b.n	8006a94 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fe6e 	bl	8007728 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8006a6a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689a      	ldr	r2, [r3, #8]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0208 	orr.w	r2, r2, #8
 8006a7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 feed 	bl	800786c <UART_CheckIdleState>
 8006a92:	4603      	mov	r3, r0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08a      	sub	sp, #40	; 0x28
 8006aa0:	af02      	add	r7, sp, #8
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	603b      	str	r3, [r7, #0]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ab2:	2b20      	cmp	r3, #32
 8006ab4:	f040 8083 	bne.w	8006bbe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d002      	beq.n	8006ac4 <HAL_UART_Transmit+0x28>
 8006abe:	88fb      	ldrh	r3, [r7, #6]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e07b      	b.n	8006bc0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d101      	bne.n	8006ad6 <HAL_UART_Transmit+0x3a>
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	e074      	b.n	8006bc0 <HAL_UART_Transmit+0x124>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2221      	movs	r2, #33	; 0x21
 8006aea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006aee:	f7fb f855 	bl	8001b9c <HAL_GetTick>
 8006af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	88fa      	ldrh	r2, [r7, #6]
 8006af8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	88fa      	ldrh	r2, [r7, #6]
 8006b00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b0c:	d108      	bne.n	8006b20 <HAL_UART_Transmit+0x84>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d104      	bne.n	8006b20 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	61bb      	str	r3, [r7, #24]
 8006b1e:	e003      	b.n	8006b28 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b24:	2300      	movs	r3, #0
 8006b26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8006b30:	e02c      	b.n	8006b8c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	2180      	movs	r1, #128	; 0x80
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 fedd 	bl	80078fc <UART_WaitOnFlagUntilTimeout>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e039      	b.n	8006bc0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10b      	bne.n	8006b6a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	3302      	adds	r3, #2
 8006b66:	61bb      	str	r3, [r7, #24]
 8006b68:	e007      	b.n	8006b7a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	781a      	ldrb	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	3301      	adds	r3, #1
 8006b78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1cc      	bne.n	8006b32 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	2140      	movs	r1, #64	; 0x40
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 feaa 	bl	80078fc <UART_WaitOnFlagUntilTimeout>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e006      	b.n	8006bc0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e000      	b.n	8006bc0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006bbe:	2302      	movs	r3, #2
  }
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3720      	adds	r7, #32
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bc8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006bcc:	b08e      	sub	sp, #56	; 0x38
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	431a      	orrs	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	4bc1      	ldr	r3, [pc, #772]	; (8006f08 <UART_SetConfig+0x340>)
 8006c02:	4013      	ands	r3, r2
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6812      	ldr	r2, [r2, #0]
 8006c08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c0a:	430b      	orrs	r3, r1
 8006c0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68da      	ldr	r2, [r3, #12]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4ab7      	ldr	r2, [pc, #732]	; (8006f0c <UART_SetConfig+0x344>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d004      	beq.n	8006c3e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	4bb2      	ldr	r3, [pc, #712]	; (8006f10 <UART_SetConfig+0x348>)
 8006c46:	4013      	ands	r3, r2
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6812      	ldr	r2, [r2, #0]
 8006c4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c4e:	430b      	orrs	r3, r1
 8006c50:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	f023 010f 	bic.w	r1, r3, #15
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4aa9      	ldr	r2, [pc, #676]	; (8006f14 <UART_SetConfig+0x34c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d177      	bne.n	8006d62 <UART_SetConfig+0x19a>
 8006c72:	4ba9      	ldr	r3, [pc, #676]	; (8006f18 <UART_SetConfig+0x350>)
 8006c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c7a:	2b28      	cmp	r3, #40	; 0x28
 8006c7c:	d86c      	bhi.n	8006d58 <UART_SetConfig+0x190>
 8006c7e:	a201      	add	r2, pc, #4	; (adr r2, 8006c84 <UART_SetConfig+0xbc>)
 8006c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c84:	08006d29 	.word	0x08006d29
 8006c88:	08006d59 	.word	0x08006d59
 8006c8c:	08006d59 	.word	0x08006d59
 8006c90:	08006d59 	.word	0x08006d59
 8006c94:	08006d59 	.word	0x08006d59
 8006c98:	08006d59 	.word	0x08006d59
 8006c9c:	08006d59 	.word	0x08006d59
 8006ca0:	08006d59 	.word	0x08006d59
 8006ca4:	08006d31 	.word	0x08006d31
 8006ca8:	08006d59 	.word	0x08006d59
 8006cac:	08006d59 	.word	0x08006d59
 8006cb0:	08006d59 	.word	0x08006d59
 8006cb4:	08006d59 	.word	0x08006d59
 8006cb8:	08006d59 	.word	0x08006d59
 8006cbc:	08006d59 	.word	0x08006d59
 8006cc0:	08006d59 	.word	0x08006d59
 8006cc4:	08006d39 	.word	0x08006d39
 8006cc8:	08006d59 	.word	0x08006d59
 8006ccc:	08006d59 	.word	0x08006d59
 8006cd0:	08006d59 	.word	0x08006d59
 8006cd4:	08006d59 	.word	0x08006d59
 8006cd8:	08006d59 	.word	0x08006d59
 8006cdc:	08006d59 	.word	0x08006d59
 8006ce0:	08006d59 	.word	0x08006d59
 8006ce4:	08006d41 	.word	0x08006d41
 8006ce8:	08006d59 	.word	0x08006d59
 8006cec:	08006d59 	.word	0x08006d59
 8006cf0:	08006d59 	.word	0x08006d59
 8006cf4:	08006d59 	.word	0x08006d59
 8006cf8:	08006d59 	.word	0x08006d59
 8006cfc:	08006d59 	.word	0x08006d59
 8006d00:	08006d59 	.word	0x08006d59
 8006d04:	08006d49 	.word	0x08006d49
 8006d08:	08006d59 	.word	0x08006d59
 8006d0c:	08006d59 	.word	0x08006d59
 8006d10:	08006d59 	.word	0x08006d59
 8006d14:	08006d59 	.word	0x08006d59
 8006d18:	08006d59 	.word	0x08006d59
 8006d1c:	08006d59 	.word	0x08006d59
 8006d20:	08006d59 	.word	0x08006d59
 8006d24:	08006d51 	.word	0x08006d51
 8006d28:	2301      	movs	r3, #1
 8006d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d2e:	e233      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006d30:	2304      	movs	r3, #4
 8006d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d36:	e22f      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006d38:	2308      	movs	r3, #8
 8006d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d3e:	e22b      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006d40:	2310      	movs	r3, #16
 8006d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d46:	e227      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006d48:	2320      	movs	r3, #32
 8006d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d4e:	e223      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006d50:	2340      	movs	r3, #64	; 0x40
 8006d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d56:	e21f      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006d58:	2380      	movs	r3, #128	; 0x80
 8006d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d5e:	bf00      	nop
 8006d60:	e21a      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a6d      	ldr	r2, [pc, #436]	; (8006f1c <UART_SetConfig+0x354>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d132      	bne.n	8006dd2 <UART_SetConfig+0x20a>
 8006d6c:	4b6a      	ldr	r3, [pc, #424]	; (8006f18 <UART_SetConfig+0x350>)
 8006d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d70:	f003 0307 	and.w	r3, r3, #7
 8006d74:	2b05      	cmp	r3, #5
 8006d76:	d827      	bhi.n	8006dc8 <UART_SetConfig+0x200>
 8006d78:	a201      	add	r2, pc, #4	; (adr r2, 8006d80 <UART_SetConfig+0x1b8>)
 8006d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7e:	bf00      	nop
 8006d80:	08006d99 	.word	0x08006d99
 8006d84:	08006da1 	.word	0x08006da1
 8006d88:	08006da9 	.word	0x08006da9
 8006d8c:	08006db1 	.word	0x08006db1
 8006d90:	08006db9 	.word	0x08006db9
 8006d94:	08006dc1 	.word	0x08006dc1
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d9e:	e1fb      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006da0:	2304      	movs	r3, #4
 8006da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006da6:	e1f7      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006da8:	2308      	movs	r3, #8
 8006daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dae:	e1f3      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006db0:	2310      	movs	r3, #16
 8006db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006db6:	e1ef      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006db8:	2320      	movs	r3, #32
 8006dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dbe:	e1eb      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006dc0:	2340      	movs	r3, #64	; 0x40
 8006dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dc6:	e1e7      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006dc8:	2380      	movs	r3, #128	; 0x80
 8006dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dce:	bf00      	nop
 8006dd0:	e1e2      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a52      	ldr	r2, [pc, #328]	; (8006f20 <UART_SetConfig+0x358>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d132      	bne.n	8006e42 <UART_SetConfig+0x27a>
 8006ddc:	4b4e      	ldr	r3, [pc, #312]	; (8006f18 <UART_SetConfig+0x350>)
 8006dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	2b05      	cmp	r3, #5
 8006de6:	d827      	bhi.n	8006e38 <UART_SetConfig+0x270>
 8006de8:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <UART_SetConfig+0x228>)
 8006dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dee:	bf00      	nop
 8006df0:	08006e09 	.word	0x08006e09
 8006df4:	08006e11 	.word	0x08006e11
 8006df8:	08006e19 	.word	0x08006e19
 8006dfc:	08006e21 	.word	0x08006e21
 8006e00:	08006e29 	.word	0x08006e29
 8006e04:	08006e31 	.word	0x08006e31
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e0e:	e1c3      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006e10:	2304      	movs	r3, #4
 8006e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e16:	e1bf      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006e18:	2308      	movs	r3, #8
 8006e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e1e:	e1bb      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006e20:	2310      	movs	r3, #16
 8006e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e26:	e1b7      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006e28:	2320      	movs	r3, #32
 8006e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e2e:	e1b3      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006e30:	2340      	movs	r3, #64	; 0x40
 8006e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e36:	e1af      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006e38:	2380      	movs	r3, #128	; 0x80
 8006e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e3e:	bf00      	nop
 8006e40:	e1aa      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a37      	ldr	r2, [pc, #220]	; (8006f24 <UART_SetConfig+0x35c>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d132      	bne.n	8006eb2 <UART_SetConfig+0x2ea>
 8006e4c:	4b32      	ldr	r3, [pc, #200]	; (8006f18 <UART_SetConfig+0x350>)
 8006e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e50:	f003 0307 	and.w	r3, r3, #7
 8006e54:	2b05      	cmp	r3, #5
 8006e56:	d827      	bhi.n	8006ea8 <UART_SetConfig+0x2e0>
 8006e58:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <UART_SetConfig+0x298>)
 8006e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5e:	bf00      	nop
 8006e60:	08006e79 	.word	0x08006e79
 8006e64:	08006e81 	.word	0x08006e81
 8006e68:	08006e89 	.word	0x08006e89
 8006e6c:	08006e91 	.word	0x08006e91
 8006e70:	08006e99 	.word	0x08006e99
 8006e74:	08006ea1 	.word	0x08006ea1
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e7e:	e18b      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006e80:	2304      	movs	r3, #4
 8006e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e86:	e187      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006e88:	2308      	movs	r3, #8
 8006e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e8e:	e183      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006e90:	2310      	movs	r3, #16
 8006e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e96:	e17f      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006e98:	2320      	movs	r3, #32
 8006e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e9e:	e17b      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006ea0:	2340      	movs	r3, #64	; 0x40
 8006ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ea6:	e177      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006ea8:	2380      	movs	r3, #128	; 0x80
 8006eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eae:	bf00      	nop
 8006eb0:	e172      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a1c      	ldr	r2, [pc, #112]	; (8006f28 <UART_SetConfig+0x360>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d144      	bne.n	8006f46 <UART_SetConfig+0x37e>
 8006ebc:	4b16      	ldr	r3, [pc, #88]	; (8006f18 <UART_SetConfig+0x350>)
 8006ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec0:	f003 0307 	and.w	r3, r3, #7
 8006ec4:	2b05      	cmp	r3, #5
 8006ec6:	d839      	bhi.n	8006f3c <UART_SetConfig+0x374>
 8006ec8:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <UART_SetConfig+0x308>)
 8006eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ece:	bf00      	nop
 8006ed0:	08006ee9 	.word	0x08006ee9
 8006ed4:	08006ef1 	.word	0x08006ef1
 8006ed8:	08006ef9 	.word	0x08006ef9
 8006edc:	08006f01 	.word	0x08006f01
 8006ee0:	08006f2d 	.word	0x08006f2d
 8006ee4:	08006f35 	.word	0x08006f35
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eee:	e153      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006ef0:	2304      	movs	r3, #4
 8006ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ef6:	e14f      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006ef8:	2308      	movs	r3, #8
 8006efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006efe:	e14b      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006f00:	2310      	movs	r3, #16
 8006f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f06:	e147      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006f08:	cfff69f3 	.word	0xcfff69f3
 8006f0c:	58000c00 	.word	0x58000c00
 8006f10:	11fff4ff 	.word	0x11fff4ff
 8006f14:	40011000 	.word	0x40011000
 8006f18:	58024400 	.word	0x58024400
 8006f1c:	40004400 	.word	0x40004400
 8006f20:	40004800 	.word	0x40004800
 8006f24:	40004c00 	.word	0x40004c00
 8006f28:	40005000 	.word	0x40005000
 8006f2c:	2320      	movs	r3, #32
 8006f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f32:	e131      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006f34:	2340      	movs	r3, #64	; 0x40
 8006f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f3a:	e12d      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006f3c:	2380      	movs	r3, #128	; 0x80
 8006f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f42:	bf00      	nop
 8006f44:	e128      	b.n	8007198 <UART_SetConfig+0x5d0>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4ab6      	ldr	r2, [pc, #728]	; (8007224 <UART_SetConfig+0x65c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d178      	bne.n	8007042 <UART_SetConfig+0x47a>
 8006f50:	4bb5      	ldr	r3, [pc, #724]	; (8007228 <UART_SetConfig+0x660>)
 8006f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f58:	2b28      	cmp	r3, #40	; 0x28
 8006f5a:	d86d      	bhi.n	8007038 <UART_SetConfig+0x470>
 8006f5c:	a201      	add	r2, pc, #4	; (adr r2, 8006f64 <UART_SetConfig+0x39c>)
 8006f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f62:	bf00      	nop
 8006f64:	08007009 	.word	0x08007009
 8006f68:	08007039 	.word	0x08007039
 8006f6c:	08007039 	.word	0x08007039
 8006f70:	08007039 	.word	0x08007039
 8006f74:	08007039 	.word	0x08007039
 8006f78:	08007039 	.word	0x08007039
 8006f7c:	08007039 	.word	0x08007039
 8006f80:	08007039 	.word	0x08007039
 8006f84:	08007011 	.word	0x08007011
 8006f88:	08007039 	.word	0x08007039
 8006f8c:	08007039 	.word	0x08007039
 8006f90:	08007039 	.word	0x08007039
 8006f94:	08007039 	.word	0x08007039
 8006f98:	08007039 	.word	0x08007039
 8006f9c:	08007039 	.word	0x08007039
 8006fa0:	08007039 	.word	0x08007039
 8006fa4:	08007019 	.word	0x08007019
 8006fa8:	08007039 	.word	0x08007039
 8006fac:	08007039 	.word	0x08007039
 8006fb0:	08007039 	.word	0x08007039
 8006fb4:	08007039 	.word	0x08007039
 8006fb8:	08007039 	.word	0x08007039
 8006fbc:	08007039 	.word	0x08007039
 8006fc0:	08007039 	.word	0x08007039
 8006fc4:	08007021 	.word	0x08007021
 8006fc8:	08007039 	.word	0x08007039
 8006fcc:	08007039 	.word	0x08007039
 8006fd0:	08007039 	.word	0x08007039
 8006fd4:	08007039 	.word	0x08007039
 8006fd8:	08007039 	.word	0x08007039
 8006fdc:	08007039 	.word	0x08007039
 8006fe0:	08007039 	.word	0x08007039
 8006fe4:	08007029 	.word	0x08007029
 8006fe8:	08007039 	.word	0x08007039
 8006fec:	08007039 	.word	0x08007039
 8006ff0:	08007039 	.word	0x08007039
 8006ff4:	08007039 	.word	0x08007039
 8006ff8:	08007039 	.word	0x08007039
 8006ffc:	08007039 	.word	0x08007039
 8007000:	08007039 	.word	0x08007039
 8007004:	08007031 	.word	0x08007031
 8007008:	2301      	movs	r3, #1
 800700a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800700e:	e0c3      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007010:	2304      	movs	r3, #4
 8007012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007016:	e0bf      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007018:	2308      	movs	r3, #8
 800701a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800701e:	e0bb      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007020:	2310      	movs	r3, #16
 8007022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007026:	e0b7      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007028:	2320      	movs	r3, #32
 800702a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800702e:	e0b3      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007030:	2340      	movs	r3, #64	; 0x40
 8007032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007036:	e0af      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007038:	2380      	movs	r3, #128	; 0x80
 800703a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800703e:	bf00      	nop
 8007040:	e0aa      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a79      	ldr	r2, [pc, #484]	; (800722c <UART_SetConfig+0x664>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d132      	bne.n	80070b2 <UART_SetConfig+0x4ea>
 800704c:	4b76      	ldr	r3, [pc, #472]	; (8007228 <UART_SetConfig+0x660>)
 800704e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007050:	f003 0307 	and.w	r3, r3, #7
 8007054:	2b05      	cmp	r3, #5
 8007056:	d827      	bhi.n	80070a8 <UART_SetConfig+0x4e0>
 8007058:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <UART_SetConfig+0x498>)
 800705a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705e:	bf00      	nop
 8007060:	08007079 	.word	0x08007079
 8007064:	08007081 	.word	0x08007081
 8007068:	08007089 	.word	0x08007089
 800706c:	08007091 	.word	0x08007091
 8007070:	08007099 	.word	0x08007099
 8007074:	080070a1 	.word	0x080070a1
 8007078:	2300      	movs	r3, #0
 800707a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800707e:	e08b      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007080:	2304      	movs	r3, #4
 8007082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007086:	e087      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007088:	2308      	movs	r3, #8
 800708a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800708e:	e083      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007090:	2310      	movs	r3, #16
 8007092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007096:	e07f      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007098:	2320      	movs	r3, #32
 800709a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800709e:	e07b      	b.n	8007198 <UART_SetConfig+0x5d0>
 80070a0:	2340      	movs	r3, #64	; 0x40
 80070a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070a6:	e077      	b.n	8007198 <UART_SetConfig+0x5d0>
 80070a8:	2380      	movs	r3, #128	; 0x80
 80070aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ae:	bf00      	nop
 80070b0:	e072      	b.n	8007198 <UART_SetConfig+0x5d0>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a5e      	ldr	r2, [pc, #376]	; (8007230 <UART_SetConfig+0x668>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d132      	bne.n	8007122 <UART_SetConfig+0x55a>
 80070bc:	4b5a      	ldr	r3, [pc, #360]	; (8007228 <UART_SetConfig+0x660>)
 80070be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c0:	f003 0307 	and.w	r3, r3, #7
 80070c4:	2b05      	cmp	r3, #5
 80070c6:	d827      	bhi.n	8007118 <UART_SetConfig+0x550>
 80070c8:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <UART_SetConfig+0x508>)
 80070ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ce:	bf00      	nop
 80070d0:	080070e9 	.word	0x080070e9
 80070d4:	080070f1 	.word	0x080070f1
 80070d8:	080070f9 	.word	0x080070f9
 80070dc:	08007101 	.word	0x08007101
 80070e0:	08007109 	.word	0x08007109
 80070e4:	08007111 	.word	0x08007111
 80070e8:	2300      	movs	r3, #0
 80070ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ee:	e053      	b.n	8007198 <UART_SetConfig+0x5d0>
 80070f0:	2304      	movs	r3, #4
 80070f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070f6:	e04f      	b.n	8007198 <UART_SetConfig+0x5d0>
 80070f8:	2308      	movs	r3, #8
 80070fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070fe:	e04b      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007100:	2310      	movs	r3, #16
 8007102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007106:	e047      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007108:	2320      	movs	r3, #32
 800710a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800710e:	e043      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007110:	2340      	movs	r3, #64	; 0x40
 8007112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007116:	e03f      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007118:	2380      	movs	r3, #128	; 0x80
 800711a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800711e:	bf00      	nop
 8007120:	e03a      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a43      	ldr	r2, [pc, #268]	; (8007234 <UART_SetConfig+0x66c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d132      	bne.n	8007192 <UART_SetConfig+0x5ca>
 800712c:	4b3e      	ldr	r3, [pc, #248]	; (8007228 <UART_SetConfig+0x660>)
 800712e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007130:	f003 0307 	and.w	r3, r3, #7
 8007134:	2b05      	cmp	r3, #5
 8007136:	d827      	bhi.n	8007188 <UART_SetConfig+0x5c0>
 8007138:	a201      	add	r2, pc, #4	; (adr r2, 8007140 <UART_SetConfig+0x578>)
 800713a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713e:	bf00      	nop
 8007140:	08007159 	.word	0x08007159
 8007144:	08007161 	.word	0x08007161
 8007148:	08007169 	.word	0x08007169
 800714c:	08007171 	.word	0x08007171
 8007150:	08007179 	.word	0x08007179
 8007154:	08007181 	.word	0x08007181
 8007158:	2302      	movs	r3, #2
 800715a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800715e:	e01b      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007160:	2304      	movs	r3, #4
 8007162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007166:	e017      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007168:	2308      	movs	r3, #8
 800716a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800716e:	e013      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007170:	2310      	movs	r3, #16
 8007172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007176:	e00f      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007178:	2320      	movs	r3, #32
 800717a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800717e:	e00b      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007180:	2340      	movs	r3, #64	; 0x40
 8007182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007186:	e007      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007188:	2380      	movs	r3, #128	; 0x80
 800718a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800718e:	bf00      	nop
 8007190:	e002      	b.n	8007198 <UART_SetConfig+0x5d0>
 8007192:	2380      	movs	r3, #128	; 0x80
 8007194:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a25      	ldr	r2, [pc, #148]	; (8007234 <UART_SetConfig+0x66c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	f040 80b8 	bne.w	8007314 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d019      	beq.n	80071e0 <UART_SetConfig+0x618>
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	dc04      	bgt.n	80071ba <UART_SetConfig+0x5f2>
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d009      	beq.n	80071c8 <UART_SetConfig+0x600>
 80071b4:	2b04      	cmp	r3, #4
 80071b6:	d00b      	beq.n	80071d0 <UART_SetConfig+0x608>
 80071b8:	e042      	b.n	8007240 <UART_SetConfig+0x678>
 80071ba:	2b20      	cmp	r3, #32
 80071bc:	d02b      	beq.n	8007216 <UART_SetConfig+0x64e>
 80071be:	2b40      	cmp	r3, #64	; 0x40
 80071c0:	d02c      	beq.n	800721c <UART_SetConfig+0x654>
 80071c2:	2b10      	cmp	r3, #16
 80071c4:	d014      	beq.n	80071f0 <UART_SetConfig+0x628>
 80071c6:	e03b      	b.n	8007240 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80071c8:	f7fd fc66 	bl	8004a98 <HAL_RCCEx_GetD3PCLK1Freq>
 80071cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80071ce:	e03d      	b.n	800724c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071d0:	f107 0314 	add.w	r3, r7, #20
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fd fc75 	bl	8004ac4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071de:	e035      	b.n	800724c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071e0:	f107 0308 	add.w	r3, r7, #8
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fd fdb9 	bl	8004d5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071ee:	e02d      	b.n	800724c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071f0:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <UART_SetConfig+0x660>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0320 	and.w	r3, r3, #32
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d009      	beq.n	8007210 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80071fc:	4b0a      	ldr	r3, [pc, #40]	; (8007228 <UART_SetConfig+0x660>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	08db      	lsrs	r3, r3, #3
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	4a0c      	ldr	r2, [pc, #48]	; (8007238 <UART_SetConfig+0x670>)
 8007208:	fa22 f303 	lsr.w	r3, r2, r3
 800720c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800720e:	e01d      	b.n	800724c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8007210:	4b09      	ldr	r3, [pc, #36]	; (8007238 <UART_SetConfig+0x670>)
 8007212:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007214:	e01a      	b.n	800724c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007216:	4b09      	ldr	r3, [pc, #36]	; (800723c <UART_SetConfig+0x674>)
 8007218:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800721a:	e017      	b.n	800724c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800721c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007220:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007222:	e013      	b.n	800724c <UART_SetConfig+0x684>
 8007224:	40011400 	.word	0x40011400
 8007228:	58024400 	.word	0x58024400
 800722c:	40007800 	.word	0x40007800
 8007230:	40007c00 	.word	0x40007c00
 8007234:	58000c00 	.word	0x58000c00
 8007238:	03d09000 	.word	0x03d09000
 800723c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800724a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 824d 	beq.w	80076ee <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	4aad      	ldr	r2, [pc, #692]	; (8007510 <UART_SetConfig+0x948>)
 800725a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800725e:	461a      	mov	r2, r3
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	fbb3 f3f2 	udiv	r3, r3, r2
 8007266:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	4613      	mov	r3, r2
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	4413      	add	r3, r2
 8007272:	6a3a      	ldr	r2, [r7, #32]
 8007274:	429a      	cmp	r2, r3
 8007276:	d305      	bcc.n	8007284 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800727e:	6a3a      	ldr	r2, [r7, #32]
 8007280:	429a      	cmp	r2, r3
 8007282:	d903      	bls.n	800728c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800728a:	e230      	b.n	80076ee <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800728c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728e:	4618      	mov	r0, r3
 8007290:	f04f 0100 	mov.w	r1, #0
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	4a9d      	ldr	r2, [pc, #628]	; (8007510 <UART_SetConfig+0x948>)
 800729a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800729e:	b29b      	uxth	r3, r3
 80072a0:	f04f 0400 	mov.w	r4, #0
 80072a4:	461a      	mov	r2, r3
 80072a6:	4623      	mov	r3, r4
 80072a8:	f7f9 f86a 	bl	8000380 <__aeabi_uldivmod>
 80072ac:	4603      	mov	r3, r0
 80072ae:	460c      	mov	r4, r1
 80072b0:	4619      	mov	r1, r3
 80072b2:	4622      	mov	r2, r4
 80072b4:	f04f 0300 	mov.w	r3, #0
 80072b8:	f04f 0400 	mov.w	r4, #0
 80072bc:	0214      	lsls	r4, r2, #8
 80072be:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80072c2:	020b      	lsls	r3, r1, #8
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	6852      	ldr	r2, [r2, #4]
 80072c8:	0852      	lsrs	r2, r2, #1
 80072ca:	4611      	mov	r1, r2
 80072cc:	f04f 0200 	mov.w	r2, #0
 80072d0:	eb13 0b01 	adds.w	fp, r3, r1
 80072d4:	eb44 0c02 	adc.w	ip, r4, r2
 80072d8:	4658      	mov	r0, fp
 80072da:	4661      	mov	r1, ip
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f04f 0400 	mov.w	r4, #0
 80072e4:	461a      	mov	r2, r3
 80072e6:	4623      	mov	r3, r4
 80072e8:	f7f9 f84a 	bl	8000380 <__aeabi_uldivmod>
 80072ec:	4603      	mov	r3, r0
 80072ee:	460c      	mov	r4, r1
 80072f0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072f8:	d308      	bcc.n	800730c <UART_SetConfig+0x744>
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007300:	d204      	bcs.n	800730c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007308:	60da      	str	r2, [r3, #12]
 800730a:	e1f0      	b.n	80076ee <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007312:	e1ec      	b.n	80076ee <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800731c:	f040 8100 	bne.w	8007520 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8007320:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007324:	2b40      	cmp	r3, #64	; 0x40
 8007326:	f200 80b7 	bhi.w	8007498 <UART_SetConfig+0x8d0>
 800732a:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <UART_SetConfig+0x768>)
 800732c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007330:	08007435 	.word	0x08007435
 8007334:	0800743d 	.word	0x0800743d
 8007338:	08007499 	.word	0x08007499
 800733c:	08007499 	.word	0x08007499
 8007340:	08007445 	.word	0x08007445
 8007344:	08007499 	.word	0x08007499
 8007348:	08007499 	.word	0x08007499
 800734c:	08007499 	.word	0x08007499
 8007350:	08007455 	.word	0x08007455
 8007354:	08007499 	.word	0x08007499
 8007358:	08007499 	.word	0x08007499
 800735c:	08007499 	.word	0x08007499
 8007360:	08007499 	.word	0x08007499
 8007364:	08007499 	.word	0x08007499
 8007368:	08007499 	.word	0x08007499
 800736c:	08007499 	.word	0x08007499
 8007370:	08007465 	.word	0x08007465
 8007374:	08007499 	.word	0x08007499
 8007378:	08007499 	.word	0x08007499
 800737c:	08007499 	.word	0x08007499
 8007380:	08007499 	.word	0x08007499
 8007384:	08007499 	.word	0x08007499
 8007388:	08007499 	.word	0x08007499
 800738c:	08007499 	.word	0x08007499
 8007390:	08007499 	.word	0x08007499
 8007394:	08007499 	.word	0x08007499
 8007398:	08007499 	.word	0x08007499
 800739c:	08007499 	.word	0x08007499
 80073a0:	08007499 	.word	0x08007499
 80073a4:	08007499 	.word	0x08007499
 80073a8:	08007499 	.word	0x08007499
 80073ac:	08007499 	.word	0x08007499
 80073b0:	0800748b 	.word	0x0800748b
 80073b4:	08007499 	.word	0x08007499
 80073b8:	08007499 	.word	0x08007499
 80073bc:	08007499 	.word	0x08007499
 80073c0:	08007499 	.word	0x08007499
 80073c4:	08007499 	.word	0x08007499
 80073c8:	08007499 	.word	0x08007499
 80073cc:	08007499 	.word	0x08007499
 80073d0:	08007499 	.word	0x08007499
 80073d4:	08007499 	.word	0x08007499
 80073d8:	08007499 	.word	0x08007499
 80073dc:	08007499 	.word	0x08007499
 80073e0:	08007499 	.word	0x08007499
 80073e4:	08007499 	.word	0x08007499
 80073e8:	08007499 	.word	0x08007499
 80073ec:	08007499 	.word	0x08007499
 80073f0:	08007499 	.word	0x08007499
 80073f4:	08007499 	.word	0x08007499
 80073f8:	08007499 	.word	0x08007499
 80073fc:	08007499 	.word	0x08007499
 8007400:	08007499 	.word	0x08007499
 8007404:	08007499 	.word	0x08007499
 8007408:	08007499 	.word	0x08007499
 800740c:	08007499 	.word	0x08007499
 8007410:	08007499 	.word	0x08007499
 8007414:	08007499 	.word	0x08007499
 8007418:	08007499 	.word	0x08007499
 800741c:	08007499 	.word	0x08007499
 8007420:	08007499 	.word	0x08007499
 8007424:	08007499 	.word	0x08007499
 8007428:	08007499 	.word	0x08007499
 800742c:	08007499 	.word	0x08007499
 8007430:	08007491 	.word	0x08007491
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007434:	f7fc fbd4 	bl	8003be0 <HAL_RCC_GetPCLK1Freq>
 8007438:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800743a:	e033      	b.n	80074a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800743c:	f7fc fbe6 	bl	8003c0c <HAL_RCC_GetPCLK2Freq>
 8007440:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007442:	e02f      	b.n	80074a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007444:	f107 0314 	add.w	r3, r7, #20
 8007448:	4618      	mov	r0, r3
 800744a:	f7fd fb3b 	bl	8004ac4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007452:	e027      	b.n	80074a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007454:	f107 0308 	add.w	r3, r7, #8
 8007458:	4618      	mov	r0, r3
 800745a:	f7fd fc7f 	bl	8004d5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007462:	e01f      	b.n	80074a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007464:	4b2b      	ldr	r3, [pc, #172]	; (8007514 <UART_SetConfig+0x94c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0320 	and.w	r3, r3, #32
 800746c:	2b00      	cmp	r3, #0
 800746e:	d009      	beq.n	8007484 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007470:	4b28      	ldr	r3, [pc, #160]	; (8007514 <UART_SetConfig+0x94c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	08db      	lsrs	r3, r3, #3
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	4a27      	ldr	r2, [pc, #156]	; (8007518 <UART_SetConfig+0x950>)
 800747c:	fa22 f303 	lsr.w	r3, r2, r3
 8007480:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007482:	e00f      	b.n	80074a4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8007484:	4b24      	ldr	r3, [pc, #144]	; (8007518 <UART_SetConfig+0x950>)
 8007486:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007488:	e00c      	b.n	80074a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800748a:	4b24      	ldr	r3, [pc, #144]	; (800751c <UART_SetConfig+0x954>)
 800748c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800748e:	e009      	b.n	80074a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007494:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007496:	e005      	b.n	80074a4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80074a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 8121 	beq.w	80076ee <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b0:	4a17      	ldr	r2, [pc, #92]	; (8007510 <UART_SetConfig+0x948>)
 80074b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074b6:	461a      	mov	r2, r3
 80074b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80074be:	005a      	lsls	r2, r3, #1
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	085b      	lsrs	r3, r3, #1
 80074c6:	441a      	add	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	2b0f      	cmp	r3, #15
 80074d8:	d916      	bls.n	8007508 <UART_SetConfig+0x940>
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074e0:	d212      	bcs.n	8007508 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	f023 030f 	bic.w	r3, r3, #15
 80074ea:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	085b      	lsrs	r3, r3, #1
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074fa:	4313      	orrs	r3, r2
 80074fc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007504:	60da      	str	r2, [r3, #12]
 8007506:	e0f2      	b.n	80076ee <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800750e:	e0ee      	b.n	80076ee <UART_SetConfig+0xb26>
 8007510:	0800c5ec 	.word	0x0800c5ec
 8007514:	58024400 	.word	0x58024400
 8007518:	03d09000 	.word	0x03d09000
 800751c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8007520:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007524:	2b40      	cmp	r3, #64	; 0x40
 8007526:	f200 80b7 	bhi.w	8007698 <UART_SetConfig+0xad0>
 800752a:	a201      	add	r2, pc, #4	; (adr r2, 8007530 <UART_SetConfig+0x968>)
 800752c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007530:	08007635 	.word	0x08007635
 8007534:	0800763d 	.word	0x0800763d
 8007538:	08007699 	.word	0x08007699
 800753c:	08007699 	.word	0x08007699
 8007540:	08007645 	.word	0x08007645
 8007544:	08007699 	.word	0x08007699
 8007548:	08007699 	.word	0x08007699
 800754c:	08007699 	.word	0x08007699
 8007550:	08007655 	.word	0x08007655
 8007554:	08007699 	.word	0x08007699
 8007558:	08007699 	.word	0x08007699
 800755c:	08007699 	.word	0x08007699
 8007560:	08007699 	.word	0x08007699
 8007564:	08007699 	.word	0x08007699
 8007568:	08007699 	.word	0x08007699
 800756c:	08007699 	.word	0x08007699
 8007570:	08007665 	.word	0x08007665
 8007574:	08007699 	.word	0x08007699
 8007578:	08007699 	.word	0x08007699
 800757c:	08007699 	.word	0x08007699
 8007580:	08007699 	.word	0x08007699
 8007584:	08007699 	.word	0x08007699
 8007588:	08007699 	.word	0x08007699
 800758c:	08007699 	.word	0x08007699
 8007590:	08007699 	.word	0x08007699
 8007594:	08007699 	.word	0x08007699
 8007598:	08007699 	.word	0x08007699
 800759c:	08007699 	.word	0x08007699
 80075a0:	08007699 	.word	0x08007699
 80075a4:	08007699 	.word	0x08007699
 80075a8:	08007699 	.word	0x08007699
 80075ac:	08007699 	.word	0x08007699
 80075b0:	0800768b 	.word	0x0800768b
 80075b4:	08007699 	.word	0x08007699
 80075b8:	08007699 	.word	0x08007699
 80075bc:	08007699 	.word	0x08007699
 80075c0:	08007699 	.word	0x08007699
 80075c4:	08007699 	.word	0x08007699
 80075c8:	08007699 	.word	0x08007699
 80075cc:	08007699 	.word	0x08007699
 80075d0:	08007699 	.word	0x08007699
 80075d4:	08007699 	.word	0x08007699
 80075d8:	08007699 	.word	0x08007699
 80075dc:	08007699 	.word	0x08007699
 80075e0:	08007699 	.word	0x08007699
 80075e4:	08007699 	.word	0x08007699
 80075e8:	08007699 	.word	0x08007699
 80075ec:	08007699 	.word	0x08007699
 80075f0:	08007699 	.word	0x08007699
 80075f4:	08007699 	.word	0x08007699
 80075f8:	08007699 	.word	0x08007699
 80075fc:	08007699 	.word	0x08007699
 8007600:	08007699 	.word	0x08007699
 8007604:	08007699 	.word	0x08007699
 8007608:	08007699 	.word	0x08007699
 800760c:	08007699 	.word	0x08007699
 8007610:	08007699 	.word	0x08007699
 8007614:	08007699 	.word	0x08007699
 8007618:	08007699 	.word	0x08007699
 800761c:	08007699 	.word	0x08007699
 8007620:	08007699 	.word	0x08007699
 8007624:	08007699 	.word	0x08007699
 8007628:	08007699 	.word	0x08007699
 800762c:	08007699 	.word	0x08007699
 8007630:	08007691 	.word	0x08007691
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007634:	f7fc fad4 	bl	8003be0 <HAL_RCC_GetPCLK1Freq>
 8007638:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800763a:	e033      	b.n	80076a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800763c:	f7fc fae6 	bl	8003c0c <HAL_RCC_GetPCLK2Freq>
 8007640:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007642:	e02f      	b.n	80076a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007644:	f107 0314 	add.w	r3, r7, #20
 8007648:	4618      	mov	r0, r3
 800764a:	f7fd fa3b 	bl	8004ac4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007652:	e027      	b.n	80076a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007654:	f107 0308 	add.w	r3, r7, #8
 8007658:	4618      	mov	r0, r3
 800765a:	f7fd fb7f 	bl	8004d5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007662:	e01f      	b.n	80076a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007664:	4b2c      	ldr	r3, [pc, #176]	; (8007718 <UART_SetConfig+0xb50>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0320 	and.w	r3, r3, #32
 800766c:	2b00      	cmp	r3, #0
 800766e:	d009      	beq.n	8007684 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007670:	4b29      	ldr	r3, [pc, #164]	; (8007718 <UART_SetConfig+0xb50>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	08db      	lsrs	r3, r3, #3
 8007676:	f003 0303 	and.w	r3, r3, #3
 800767a:	4a28      	ldr	r2, [pc, #160]	; (800771c <UART_SetConfig+0xb54>)
 800767c:	fa22 f303 	lsr.w	r3, r2, r3
 8007680:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007682:	e00f      	b.n	80076a4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8007684:	4b25      	ldr	r3, [pc, #148]	; (800771c <UART_SetConfig+0xb54>)
 8007686:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007688:	e00c      	b.n	80076a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800768a:	4b25      	ldr	r3, [pc, #148]	; (8007720 <UART_SetConfig+0xb58>)
 800768c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800768e:	e009      	b.n	80076a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007694:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007696:	e005      	b.n	80076a4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80076a2:	bf00      	nop
    }

    if (pclk != 0U)
 80076a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d021      	beq.n	80076ee <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	4a1d      	ldr	r2, [pc, #116]	; (8007724 <UART_SetConfig+0xb5c>)
 80076b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076b4:	461a      	mov	r2, r3
 80076b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	085b      	lsrs	r3, r3, #1
 80076c2:	441a      	add	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d2:	2b0f      	cmp	r3, #15
 80076d4:	d908      	bls.n	80076e8 <UART_SetConfig+0xb20>
 80076d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076dc:	d204      	bcs.n	80076e8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076e4:	60da      	str	r2, [r3, #12]
 80076e6:	e002      	b.n	80076ee <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800770a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800770e:	4618      	mov	r0, r3
 8007710:	3738      	adds	r7, #56	; 0x38
 8007712:	46bd      	mov	sp, r7
 8007714:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007718:	58024400 	.word	0x58024400
 800771c:	03d09000 	.word	0x03d09000
 8007720:	003d0900 	.word	0x003d0900
 8007724:	0800c5ec 	.word	0x0800c5ec

08007728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00a      	beq.n	8007752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	430a      	orrs	r2, r1
 8007772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00a      	beq.n	8007796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779a:	f003 0308 	and.w	r3, r3, #8
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00a      	beq.n	80077b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077bc:	f003 0310 	and.w	r3, r3, #16
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00a      	beq.n	80077da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01a      	beq.n	800783e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007826:	d10a      	bne.n	800783e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	605a      	str	r2, [r3, #4]
  }
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af02      	add	r7, sp, #8
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800787c:	f7fa f98e 	bl	8001b9c <HAL_GetTick>
 8007880:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0308 	and.w	r3, r3, #8
 800788c:	2b08      	cmp	r3, #8
 800788e:	d10e      	bne.n	80078ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f82c 	bl	80078fc <UART_WaitOnFlagUntilTimeout>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e022      	b.n	80078f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0304 	and.w	r3, r3, #4
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	d10e      	bne.n	80078da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f816 	bl	80078fc <UART_WaitOnFlagUntilTimeout>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e00c      	b.n	80078f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2220      	movs	r2, #32
 80078de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2220      	movs	r2, #32
 80078e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	603b      	str	r3, [r7, #0]
 8007908:	4613      	mov	r3, r2
 800790a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800790c:	e062      	b.n	80079d4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007914:	d05e      	beq.n	80079d4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007916:	f7fa f941 	bl	8001b9c <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	69ba      	ldr	r2, [r7, #24]
 8007922:	429a      	cmp	r2, r3
 8007924:	d302      	bcc.n	800792c <UART_WaitOnFlagUntilTimeout+0x30>
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d11d      	bne.n	8007968 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800793a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689a      	ldr	r2, [r3, #8]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0201 	bic.w	r2, r2, #1
 800794a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2220      	movs	r2, #32
 8007950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2220      	movs	r2, #32
 8007958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e045      	b.n	80079f4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0304 	and.w	r3, r3, #4
 8007972:	2b00      	cmp	r3, #0
 8007974:	d02e      	beq.n	80079d4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007984:	d126      	bne.n	80079d4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800798e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800799e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689a      	ldr	r2, [r3, #8]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f022 0201 	bic.w	r2, r2, #1
 80079ae:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2220      	movs	r2, #32
 80079b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2220      	movs	r2, #32
 80079bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2220      	movs	r2, #32
 80079c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e00f      	b.n	80079f4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	69da      	ldr	r2, [r3, #28]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	4013      	ands	r3, r2
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	bf0c      	ite	eq
 80079e4:	2301      	moveq	r3, #1
 80079e6:	2300      	movne	r3, #0
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	461a      	mov	r2, r3
 80079ec:	79fb      	ldrb	r3, [r7, #7]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d08d      	beq.n	800790e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d101      	bne.n	8007a12 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a0e:	2302      	movs	r3, #2
 8007a10:	e027      	b.n	8007a62 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2224      	movs	r2, #36	; 0x24
 8007a1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f022 0201 	bic.w	r2, r2, #1
 8007a38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d101      	bne.n	8007a86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a82:	2302      	movs	r3, #2
 8007a84:	e02d      	b.n	8007ae2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2224      	movs	r2, #36	; 0x24
 8007a92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f022 0201 	bic.w	r2, r2, #1
 8007aac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f850 	bl	8007b68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d101      	bne.n	8007b02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007afe:	2302      	movs	r3, #2
 8007b00:	e02d      	b.n	8007b5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2224      	movs	r2, #36	; 0x24
 8007b0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0201 	bic.w	r2, r2, #1
 8007b28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f812 	bl	8007b68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b089      	sub	sp, #36	; 0x24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007b70:	4a2f      	ldr	r2, [pc, #188]	; (8007c30 <UARTEx_SetNbDataToProcess+0xc8>)
 8007b72:	f107 0314 	add.w	r3, r7, #20
 8007b76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b7a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007b7e:	4a2d      	ldr	r2, [pc, #180]	; (8007c34 <UARTEx_SetNbDataToProcess+0xcc>)
 8007b80:	f107 030c 	add.w	r3, r7, #12
 8007b84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b88:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d108      	bne.n	8007ba6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ba4:	e03d      	b.n	8007c22 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ba6:	2310      	movs	r3, #16
 8007ba8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007baa:	2310      	movs	r3, #16
 8007bac:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	0e5b      	lsrs	r3, r3, #25
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	f003 0307 	and.w	r3, r3, #7
 8007bbc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	0f5b      	lsrs	r3, r3, #29
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f003 0307 	and.w	r3, r3, #7
 8007bcc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007bce:	7fbb      	ldrb	r3, [r7, #30]
 8007bd0:	7f3a      	ldrb	r2, [r7, #28]
 8007bd2:	f107 0120 	add.w	r1, r7, #32
 8007bd6:	440a      	add	r2, r1
 8007bd8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007bdc:	fb02 f303 	mul.w	r3, r2, r3
 8007be0:	7f3a      	ldrb	r2, [r7, #28]
 8007be2:	f107 0120 	add.w	r1, r7, #32
 8007be6:	440a      	add	r2, r1
 8007be8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007bec:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007bf8:	7ffb      	ldrb	r3, [r7, #31]
 8007bfa:	7f7a      	ldrb	r2, [r7, #29]
 8007bfc:	f107 0120 	add.w	r1, r7, #32
 8007c00:	440a      	add	r2, r1
 8007c02:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007c06:	fb02 f303 	mul.w	r3, r2, r3
 8007c0a:	7f7a      	ldrb	r2, [r7, #29]
 8007c0c:	f107 0120 	add.w	r1, r7, #32
 8007c10:	440a      	add	r2, r1
 8007c12:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007c16:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c22:	bf00      	nop
 8007c24:	3724      	adds	r7, #36	; 0x24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	0800b524 	.word	0x0800b524
 8007c34:	0800b52c 	.word	0x0800b52c

08007c38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c38:	b084      	sub	sp, #16
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	f107 001c 	add.w	r0, r7, #28
 8007c46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d120      	bne.n	8007c92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68da      	ldr	r2, [r3, #12]
 8007c60:	4b25      	ldr	r3, [pc, #148]	; (8007cf8 <USB_CoreInit+0xc0>)
 8007c62:	4013      	ands	r3, r2
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d105      	bne.n	8007c86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fa4c 	bl	8008124 <USB_CoreReset>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	73fb      	strb	r3, [r7, #15]
 8007c90:	e01a      	b.n	8007cc8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fa40 	bl	8008124 <USB_CoreReset>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d106      	bne.n	8007cbc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	639a      	str	r2, [r3, #56]	; 0x38
 8007cba:	e005      	b.n	8007cc8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d10b      	bne.n	8007ce6 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f043 0206 	orr.w	r2, r3, #6
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f043 0220 	orr.w	r2, r3, #32
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cf2:	b004      	add	sp, #16
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	ffbdffbf 	.word	0xffbdffbf

08007cfc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f023 0201 	bic.w	r2, r3, #1
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	460b      	mov	r3, r1
 8007d28:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d36:	78fb      	ldrb	r3, [r7, #3]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d106      	bne.n	8007d4a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	60da      	str	r2, [r3, #12]
 8007d48:	e00b      	b.n	8007d62 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d4a:	78fb      	ldrb	r3, [r7, #3]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d106      	bne.n	8007d5e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	60da      	str	r2, [r3, #12]
 8007d5c:	e001      	b.n	8007d62 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e003      	b.n	8007d6a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007d62:	2032      	movs	r0, #50	; 0x32
 8007d64:	f7f9 ff26 	bl	8001bb4 <HAL_Delay>

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
	...

08007d74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d74:	b084      	sub	sp, #16
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b086      	sub	sp, #24
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d86:	2300      	movs	r3, #0
 8007d88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d8e:	2300      	movs	r3, #0
 8007d90:	613b      	str	r3, [r7, #16]
 8007d92:	e009      	b.n	8007da8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	3340      	adds	r3, #64	; 0x40
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	2200      	movs	r2, #0
 8007da0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	3301      	adds	r3, #1
 8007da6:	613b      	str	r3, [r7, #16]
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	2b0e      	cmp	r3, #14
 8007dac:	d9f2      	bls.n	8007d94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d11c      	bne.n	8007dee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dc2:	f043 0302 	orr.w	r3, r3, #2
 8007dc6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dcc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	601a      	str	r2, [r3, #0]
 8007dec:	e005      	b.n	8007dfa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e00:	461a      	mov	r2, r3
 8007e02:	2300      	movs	r3, #0
 8007e04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e14:	461a      	mov	r2, r3
 8007e16:	680b      	ldr	r3, [r1, #0]
 8007e18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d10c      	bne.n	8007e3a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d104      	bne.n	8007e30 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e26:	2100      	movs	r1, #0
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f949 	bl	80080c0 <USB_SetDevSpeed>
 8007e2e:	e008      	b.n	8007e42 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e30:	2101      	movs	r1, #1
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f944 	bl	80080c0 <USB_SetDevSpeed>
 8007e38:	e003      	b.n	8007e42 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e3a:	2103      	movs	r1, #3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f93f 	bl	80080c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e42:	2110      	movs	r1, #16
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f8f3 	bl	8008030 <USB_FlushTxFifo>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f911 	bl	800807c <USB_FlushRxFifo>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e76:	461a      	mov	r2, r3
 8007e78:	2300      	movs	r3, #0
 8007e7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e82:	461a      	mov	r2, r3
 8007e84:	2300      	movs	r3, #0
 8007e86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e88:	2300      	movs	r3, #0
 8007e8a:	613b      	str	r3, [r7, #16]
 8007e8c:	e043      	b.n	8007f16 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ea4:	d118      	bne.n	8007ed8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10a      	bne.n	8007ec2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb8:	461a      	mov	r2, r3
 8007eba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	e013      	b.n	8007eea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ed4:	6013      	str	r3, [r2, #0]
 8007ed6:	e008      	b.n	8007eea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	2300      	movs	r3, #0
 8007efa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	015a      	lsls	r2, r3, #5
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f08:	461a      	mov	r2, r3
 8007f0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	3301      	adds	r3, #1
 8007f14:	613b      	str	r3, [r7, #16]
 8007f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f18:	693a      	ldr	r2, [r7, #16]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d3b7      	bcc.n	8007e8e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f1e:	2300      	movs	r3, #0
 8007f20:	613b      	str	r3, [r7, #16]
 8007f22:	e043      	b.n	8007fac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f3a:	d118      	bne.n	8007f6e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10a      	bne.n	8007f58 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f54:	6013      	str	r3, [r2, #0]
 8007f56:	e013      	b.n	8007f80 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	015a      	lsls	r2, r3, #5
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f64:	461a      	mov	r2, r3
 8007f66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	e008      	b.n	8007f80 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	2300      	movs	r3, #0
 8007f90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fa4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	613b      	str	r3, [r7, #16]
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d3b7      	bcc.n	8007f24 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fc6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007fd4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d105      	bne.n	8007fe8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	f043 0210 	orr.w	r2, r3, #16
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	699a      	ldr	r2, [r3, #24]
 8007fec:	4b0e      	ldr	r3, [pc, #56]	; (8008028 <USB_DevInit+0x2b4>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d005      	beq.n	8008006 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	f043 0208 	orr.w	r2, r3, #8
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008008:	2b01      	cmp	r3, #1
 800800a:	d105      	bne.n	8008018 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	699a      	ldr	r2, [r3, #24]
 8008010:	4b06      	ldr	r3, [pc, #24]	; (800802c <USB_DevInit+0x2b8>)
 8008012:	4313      	orrs	r3, r2
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008018:	7dfb      	ldrb	r3, [r7, #23]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008024:	b004      	add	sp, #16
 8008026:	4770      	bx	lr
 8008028:	803c3800 	.word	0x803c3800
 800802c:	40000004 	.word	0x40000004

08008030 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	019b      	lsls	r3, r3, #6
 8008042:	f043 0220 	orr.w	r2, r3, #32
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	3301      	adds	r3, #1
 800804e:	60fb      	str	r3, [r7, #12]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4a09      	ldr	r2, [pc, #36]	; (8008078 <USB_FlushTxFifo+0x48>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d901      	bls.n	800805c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e006      	b.n	800806a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	f003 0320 	and.w	r3, r3, #32
 8008064:	2b20      	cmp	r3, #32
 8008066:	d0f0      	beq.n	800804a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	00030d40 	.word	0x00030d40

0800807c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2210      	movs	r2, #16
 800808c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3301      	adds	r3, #1
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	4a09      	ldr	r2, [pc, #36]	; (80080bc <USB_FlushRxFifo+0x40>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d901      	bls.n	80080a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e006      	b.n	80080ae <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	f003 0310 	and.w	r3, r3, #16
 80080a8:	2b10      	cmp	r3, #16
 80080aa:	d0f0      	beq.n	800808e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	00030d40 	.word	0x00030d40

080080c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	460b      	mov	r3, r1
 80080ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	78fb      	ldrb	r3, [r7, #3]
 80080da:	68f9      	ldr	r1, [r7, #12]
 80080dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080e0:	4313      	orrs	r3, r2
 80080e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800810c:	f043 0302 	orr.w	r3, r3, #2
 8008110:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008112:	2003      	movs	r0, #3
 8008114:	f7f9 fd4e 	bl	8001bb4 <HAL_Delay>

  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
	...

08008124 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800812c:	2300      	movs	r3, #0
 800812e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	3301      	adds	r3, #1
 8008134:	60fb      	str	r3, [r7, #12]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	4a13      	ldr	r2, [pc, #76]	; (8008188 <USB_CoreReset+0x64>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d901      	bls.n	8008142 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e01b      	b.n	800817a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	2b00      	cmp	r3, #0
 8008148:	daf2      	bge.n	8008130 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800814a:	2300      	movs	r3, #0
 800814c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	f043 0201 	orr.w	r2, r3, #1
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3301      	adds	r3, #1
 800815e:	60fb      	str	r3, [r7, #12]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4a09      	ldr	r2, [pc, #36]	; (8008188 <USB_CoreReset+0x64>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d901      	bls.n	800816c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e006      	b.n	800817a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	2b01      	cmp	r3, #1
 8008176:	d0f0      	beq.n	800815a <USB_CoreReset+0x36>

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	00030d40 	.word	0x00030d40

0800818c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008190:	bf00      	nop
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
	...

0800819c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081a2:	f3ef 8305 	mrs	r3, IPSR
 80081a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80081a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10f      	bne.n	80081ce <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081ae:	f3ef 8310 	mrs	r3, PRIMASK
 80081b2:	607b      	str	r3, [r7, #4]
  return(result);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d105      	bne.n	80081c6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80081ba:	f3ef 8311 	mrs	r3, BASEPRI
 80081be:	603b      	str	r3, [r7, #0]
  return(result);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d007      	beq.n	80081d6 <osKernelInitialize+0x3a>
 80081c6:	4b0e      	ldr	r3, [pc, #56]	; (8008200 <osKernelInitialize+0x64>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d103      	bne.n	80081d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80081ce:	f06f 0305 	mvn.w	r3, #5
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	e00c      	b.n	80081f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081d6:	4b0a      	ldr	r3, [pc, #40]	; (8008200 <osKernelInitialize+0x64>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d105      	bne.n	80081ea <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80081de:	4b08      	ldr	r3, [pc, #32]	; (8008200 <osKernelInitialize+0x64>)
 80081e0:	2201      	movs	r2, #1
 80081e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	60fb      	str	r3, [r7, #12]
 80081e8:	e002      	b.n	80081f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80081ea:	f04f 33ff 	mov.w	r3, #4294967295
 80081ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80081f0:	68fb      	ldr	r3, [r7, #12]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	24000158 	.word	0x24000158

08008204 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800820a:	f3ef 8305 	mrs	r3, IPSR
 800820e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008210:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10f      	bne.n	8008236 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008216:	f3ef 8310 	mrs	r3, PRIMASK
 800821a:	607b      	str	r3, [r7, #4]
  return(result);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d105      	bne.n	800822e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008222:	f3ef 8311 	mrs	r3, BASEPRI
 8008226:	603b      	str	r3, [r7, #0]
  return(result);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d007      	beq.n	800823e <osKernelStart+0x3a>
 800822e:	4b0f      	ldr	r3, [pc, #60]	; (800826c <osKernelStart+0x68>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b02      	cmp	r3, #2
 8008234:	d103      	bne.n	800823e <osKernelStart+0x3a>
    stat = osErrorISR;
 8008236:	f06f 0305 	mvn.w	r3, #5
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	e010      	b.n	8008260 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800823e:	4b0b      	ldr	r3, [pc, #44]	; (800826c <osKernelStart+0x68>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d109      	bne.n	800825a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008246:	f7ff ffa1 	bl	800818c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800824a:	4b08      	ldr	r3, [pc, #32]	; (800826c <osKernelStart+0x68>)
 800824c:	2202      	movs	r2, #2
 800824e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008250:	f001 f870 	bl	8009334 <vTaskStartScheduler>
      stat = osOK;
 8008254:	2300      	movs	r3, #0
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	e002      	b.n	8008260 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800825a:	f04f 33ff 	mov.w	r3, #4294967295
 800825e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008260:	68fb      	ldr	r3, [r7, #12]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	24000158 	.word	0x24000158

08008270 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008270:	b580      	push	{r7, lr}
 8008272:	b090      	sub	sp, #64	; 0x40
 8008274:	af04      	add	r7, sp, #16
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800827c:	2300      	movs	r3, #0
 800827e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008280:	f3ef 8305 	mrs	r3, IPSR
 8008284:	61fb      	str	r3, [r7, #28]
  return(result);
 8008286:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008288:	2b00      	cmp	r3, #0
 800828a:	f040 808f 	bne.w	80083ac <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800828e:	f3ef 8310 	mrs	r3, PRIMASK
 8008292:	61bb      	str	r3, [r7, #24]
  return(result);
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d105      	bne.n	80082a6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800829a:	f3ef 8311 	mrs	r3, BASEPRI
 800829e:	617b      	str	r3, [r7, #20]
  return(result);
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <osThreadNew+0x3e>
 80082a6:	4b44      	ldr	r3, [pc, #272]	; (80083b8 <osThreadNew+0x148>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d07e      	beq.n	80083ac <osThreadNew+0x13c>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d07b      	beq.n	80083ac <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80082b4:	2380      	movs	r3, #128	; 0x80
 80082b6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80082b8:	2318      	movs	r3, #24
 80082ba:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80082bc:	2300      	movs	r3, #0
 80082be:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80082c0:	f04f 33ff 	mov.w	r3, #4294967295
 80082c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d045      	beq.n	8008358 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d002      	beq.n	80082da <osThreadNew+0x6a>
        name = attr->name;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d002      	beq.n	80082e8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d008      	beq.n	8008300 <osThreadNew+0x90>
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	2b38      	cmp	r3, #56	; 0x38
 80082f2:	d805      	bhi.n	8008300 <osThreadNew+0x90>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <osThreadNew+0x94>
        return (NULL);
 8008300:	2300      	movs	r3, #0
 8008302:	e054      	b.n	80083ae <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	695b      	ldr	r3, [r3, #20]
 8008310:	089b      	lsrs	r3, r3, #2
 8008312:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00e      	beq.n	800833a <osThreadNew+0xca>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	2b5b      	cmp	r3, #91	; 0x5b
 8008322:	d90a      	bls.n	800833a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008328:	2b00      	cmp	r3, #0
 800832a:	d006      	beq.n	800833a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <osThreadNew+0xca>
        mem = 1;
 8008334:	2301      	movs	r3, #1
 8008336:	623b      	str	r3, [r7, #32]
 8008338:	e010      	b.n	800835c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10c      	bne.n	800835c <osThreadNew+0xec>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d108      	bne.n	800835c <osThreadNew+0xec>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d104      	bne.n	800835c <osThreadNew+0xec>
          mem = 0;
 8008352:	2300      	movs	r3, #0
 8008354:	623b      	str	r3, [r7, #32]
 8008356:	e001      	b.n	800835c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d110      	bne.n	8008384 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800836a:	9202      	str	r2, [sp, #8]
 800836c:	9301      	str	r3, [sp, #4]
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 fe09 	bl	8008f90 <xTaskCreateStatic>
 800837e:	4603      	mov	r3, r0
 8008380:	613b      	str	r3, [r7, #16]
 8008382:	e013      	b.n	80083ac <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d110      	bne.n	80083ac <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800838a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838c:	b29a      	uxth	r2, r3
 800838e:	f107 0310 	add.w	r3, r7, #16
 8008392:	9301      	str	r3, [sp, #4]
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 fe51 	bl	8009044 <xTaskCreate>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d001      	beq.n	80083ac <osThreadNew+0x13c>
          hTask = NULL;
 80083a8:	2300      	movs	r3, #0
 80083aa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80083ac:	693b      	ldr	r3, [r7, #16]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3730      	adds	r7, #48	; 0x30
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	24000158 	.word	0x24000158

080083bc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083c4:	f3ef 8305 	mrs	r3, IPSR
 80083c8:	613b      	str	r3, [r7, #16]
  return(result);
 80083ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10f      	bne.n	80083f0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083d0:	f3ef 8310 	mrs	r3, PRIMASK
 80083d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d105      	bne.n	80083e8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083dc:	f3ef 8311 	mrs	r3, BASEPRI
 80083e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d007      	beq.n	80083f8 <osDelay+0x3c>
 80083e8:	4b0a      	ldr	r3, [pc, #40]	; (8008414 <osDelay+0x58>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d103      	bne.n	80083f8 <osDelay+0x3c>
    stat = osErrorISR;
 80083f0:	f06f 0305 	mvn.w	r3, #5
 80083f4:	617b      	str	r3, [r7, #20]
 80083f6:	e007      	b.n	8008408 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 ff62 	bl	80092cc <vTaskDelay>
    }
  }

  return (stat);
 8008408:	697b      	ldr	r3, [r7, #20]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	24000158 	.word	0x24000158

08008418 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	4a07      	ldr	r2, [pc, #28]	; (8008444 <vApplicationGetIdleTaskMemory+0x2c>)
 8008428:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	4a06      	ldr	r2, [pc, #24]	; (8008448 <vApplicationGetIdleTaskMemory+0x30>)
 800842e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2280      	movs	r2, #128	; 0x80
 8008434:	601a      	str	r2, [r3, #0]
}
 8008436:	bf00      	nop
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	2400015c 	.word	0x2400015c
 8008448:	240001b8 	.word	0x240001b8

0800844c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	4a07      	ldr	r2, [pc, #28]	; (8008478 <vApplicationGetTimerTaskMemory+0x2c>)
 800845c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	4a06      	ldr	r2, [pc, #24]	; (800847c <vApplicationGetTimerTaskMemory+0x30>)
 8008462:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800846a:	601a      	str	r2, [r3, #0]
}
 800846c:	bf00      	nop
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	240003b8 	.word	0x240003b8
 800847c:	24000414 	.word	0x24000414

08008480 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f103 0208 	add.w	r2, r3, #8
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f04f 32ff 	mov.w	r2, #4294967295
 8008498:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f103 0208 	add.w	r2, r3, #8
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f103 0208 	add.w	r2, r3, #8
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80084ce:	bf00      	nop
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084da:	b480      	push	{r7}
 80084dc:	b085      	sub	sp, #20
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	1c5a      	adds	r2, r3, #1
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	601a      	str	r2, [r3, #0]
}
 8008516:	bf00      	nop
 8008518:	3714      	adds	r7, #20
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008538:	d103      	bne.n	8008542 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	e00c      	b.n	800855c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	3308      	adds	r3, #8
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	e002      	b.n	8008550 <vListInsert+0x2e>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	429a      	cmp	r2, r3
 800855a:	d2f6      	bcs.n	800854a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	601a      	str	r2, [r3, #0]
}
 8008588:	bf00      	nop
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	6892      	ldr	r2, [r2, #8]
 80085aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	6852      	ldr	r2, [r2, #4]
 80085b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d103      	bne.n	80085c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	689a      	ldr	r2, [r3, #8]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	1e5a      	subs	r2, r3, #1
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d109      	bne.n	8008610 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	60bb      	str	r3, [r7, #8]
 800860e:	e7fe      	b.n	800860e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008610:	f002 f814 	bl	800a63c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861c:	68f9      	ldr	r1, [r7, #12]
 800861e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008620:	fb01 f303 	mul.w	r3, r1, r3
 8008624:	441a      	add	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008640:	3b01      	subs	r3, #1
 8008642:	68f9      	ldr	r1, [r7, #12]
 8008644:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008646:	fb01 f303 	mul.w	r3, r1, r3
 800864a:	441a      	add	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	22ff      	movs	r2, #255	; 0xff
 8008654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	22ff      	movs	r2, #255	; 0xff
 800865c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d114      	bne.n	8008690 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d01a      	beq.n	80086a4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3310      	adds	r3, #16
 8008672:	4618      	mov	r0, r3
 8008674:	f001 f8de 	bl	8009834 <xTaskRemoveFromEventList>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d012      	beq.n	80086a4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800867e:	4b0d      	ldr	r3, [pc, #52]	; (80086b4 <xQueueGenericReset+0xcc>)
 8008680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	f3bf 8f6f 	isb	sy
 800868e:	e009      	b.n	80086a4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3310      	adds	r3, #16
 8008694:	4618      	mov	r0, r3
 8008696:	f7ff fef3 	bl	8008480 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3324      	adds	r3, #36	; 0x24
 800869e:	4618      	mov	r0, r3
 80086a0:	f7ff feee 	bl	8008480 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80086a4:	f001 fff8 	bl	800a698 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80086a8:	2301      	movs	r3, #1
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	e000ed04 	.word	0xe000ed04

080086b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08e      	sub	sp, #56	; 0x38
 80086bc:	af02      	add	r7, sp, #8
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
 80086c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d109      	bne.n	80086e0 <xQueueGenericCreateStatic+0x28>
 80086cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80086de:	e7fe      	b.n	80086de <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d109      	bne.n	80086fa <xQueueGenericCreateStatic+0x42>
 80086e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	627b      	str	r3, [r7, #36]	; 0x24
 80086f8:	e7fe      	b.n	80086f8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <xQueueGenericCreateStatic+0x4e>
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <xQueueGenericCreateStatic+0x52>
 8008706:	2301      	movs	r3, #1
 8008708:	e000      	b.n	800870c <xQueueGenericCreateStatic+0x54>
 800870a:	2300      	movs	r3, #0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d109      	bne.n	8008724 <xQueueGenericCreateStatic+0x6c>
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	623b      	str	r3, [r7, #32]
 8008722:	e7fe      	b.n	8008722 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d102      	bne.n	8008730 <xQueueGenericCreateStatic+0x78>
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d101      	bne.n	8008734 <xQueueGenericCreateStatic+0x7c>
 8008730:	2301      	movs	r3, #1
 8008732:	e000      	b.n	8008736 <xQueueGenericCreateStatic+0x7e>
 8008734:	2300      	movs	r3, #0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d109      	bne.n	800874e <xQueueGenericCreateStatic+0x96>
 800873a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	61fb      	str	r3, [r7, #28]
 800874c:	e7fe      	b.n	800874c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800874e:	2350      	movs	r3, #80	; 0x50
 8008750:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2b50      	cmp	r3, #80	; 0x50
 8008756:	d009      	beq.n	800876c <xQueueGenericCreateStatic+0xb4>
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	61bb      	str	r3, [r7, #24]
 800876a:	e7fe      	b.n	800876a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800876c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00d      	beq.n	8008794 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008780:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	4613      	mov	r3, r2
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	68b9      	ldr	r1, [r7, #8]
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f000 f805 	bl	800879e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008796:	4618      	mov	r0, r3
 8008798:	3730      	adds	r7, #48	; 0x30
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	60b9      	str	r1, [r7, #8]
 80087a8:	607a      	str	r2, [r7, #4]
 80087aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d103      	bne.n	80087ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	69ba      	ldr	r2, [r7, #24]
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	e002      	b.n	80087c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087cc:	2101      	movs	r1, #1
 80087ce:	69b8      	ldr	r0, [r7, #24]
 80087d0:	f7ff ff0a 	bl	80085e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	78fa      	ldrb	r2, [r7, #3]
 80087d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087dc:	bf00      	nop
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b08e      	sub	sp, #56	; 0x38
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80087f2:	2300      	movs	r3, #0
 80087f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80087fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d109      	bne.n	8008814 <xQueueGenericSend+0x30>
 8008800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	62bb      	str	r3, [r7, #40]	; 0x28
 8008812:	e7fe      	b.n	8008812 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d103      	bne.n	8008822 <xQueueGenericSend+0x3e>
 800881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <xQueueGenericSend+0x42>
 8008822:	2301      	movs	r3, #1
 8008824:	e000      	b.n	8008828 <xQueueGenericSend+0x44>
 8008826:	2300      	movs	r3, #0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d109      	bne.n	8008840 <xQueueGenericSend+0x5c>
 800882c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	627b      	str	r3, [r7, #36]	; 0x24
 800883e:	e7fe      	b.n	800883e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2b02      	cmp	r3, #2
 8008844:	d103      	bne.n	800884e <xQueueGenericSend+0x6a>
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800884a:	2b01      	cmp	r3, #1
 800884c:	d101      	bne.n	8008852 <xQueueGenericSend+0x6e>
 800884e:	2301      	movs	r3, #1
 8008850:	e000      	b.n	8008854 <xQueueGenericSend+0x70>
 8008852:	2300      	movs	r3, #0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d109      	bne.n	800886c <xQueueGenericSend+0x88>
 8008858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885c:	f383 8811 	msr	BASEPRI, r3
 8008860:	f3bf 8f6f 	isb	sy
 8008864:	f3bf 8f4f 	dsb	sy
 8008868:	623b      	str	r3, [r7, #32]
 800886a:	e7fe      	b.n	800886a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800886c:	f001 f998 	bl	8009ba0 <xTaskGetSchedulerState>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d102      	bne.n	800887c <xQueueGenericSend+0x98>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <xQueueGenericSend+0x9c>
 800887c:	2301      	movs	r3, #1
 800887e:	e000      	b.n	8008882 <xQueueGenericSend+0x9e>
 8008880:	2300      	movs	r3, #0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d109      	bne.n	800889a <xQueueGenericSend+0xb6>
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	61fb      	str	r3, [r7, #28]
 8008898:	e7fe      	b.n	8008898 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800889a:	f001 fecf 	bl	800a63c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d302      	bcc.n	80088b0 <xQueueGenericSend+0xcc>
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d129      	bne.n	8008904 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088b0:	683a      	ldr	r2, [r7, #0]
 80088b2:	68b9      	ldr	r1, [r7, #8]
 80088b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088b6:	f000 f9ff 	bl	8008cb8 <prvCopyDataToQueue>
 80088ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d010      	beq.n	80088e6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c6:	3324      	adds	r3, #36	; 0x24
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 ffb3 	bl	8009834 <xTaskRemoveFromEventList>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d013      	beq.n	80088fc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088d4:	4b3f      	ldr	r3, [pc, #252]	; (80089d4 <xQueueGenericSend+0x1f0>)
 80088d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	e00a      	b.n	80088fc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80088e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d007      	beq.n	80088fc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80088ec:	4b39      	ldr	r3, [pc, #228]	; (80089d4 <xQueueGenericSend+0x1f0>)
 80088ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80088fc:	f001 fecc 	bl	800a698 <vPortExitCritical>
				return pdPASS;
 8008900:	2301      	movs	r3, #1
 8008902:	e063      	b.n	80089cc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d103      	bne.n	8008912 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800890a:	f001 fec5 	bl	800a698 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800890e:	2300      	movs	r3, #0
 8008910:	e05c      	b.n	80089cc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008914:	2b00      	cmp	r3, #0
 8008916:	d106      	bne.n	8008926 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008918:	f107 0314 	add.w	r3, r7, #20
 800891c:	4618      	mov	r0, r3
 800891e:	f000 ffeb 	bl	80098f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008922:	2301      	movs	r3, #1
 8008924:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008926:	f001 feb7 	bl	800a698 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800892a:	f000 fd67 	bl	80093fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800892e:	f001 fe85 	bl	800a63c <vPortEnterCritical>
 8008932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008934:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008938:	b25b      	sxtb	r3, r3
 800893a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893e:	d103      	bne.n	8008948 <xQueueGenericSend+0x164>
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	2200      	movs	r2, #0
 8008944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800894e:	b25b      	sxtb	r3, r3
 8008950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008954:	d103      	bne.n	800895e <xQueueGenericSend+0x17a>
 8008956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008958:	2200      	movs	r2, #0
 800895a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800895e:	f001 fe9b 	bl	800a698 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008962:	1d3a      	adds	r2, r7, #4
 8008964:	f107 0314 	add.w	r3, r7, #20
 8008968:	4611      	mov	r1, r2
 800896a:	4618      	mov	r0, r3
 800896c:	f000 ffda 	bl	8009924 <xTaskCheckForTimeOut>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d124      	bne.n	80089c0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008976:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008978:	f000 fa96 	bl	8008ea8 <prvIsQueueFull>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d018      	beq.n	80089b4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	3310      	adds	r3, #16
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	4611      	mov	r1, r2
 800898a:	4618      	mov	r0, r3
 800898c:	f000 ff04 	bl	8009798 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008992:	f000 fa21 	bl	8008dd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008996:	f000 fd3f 	bl	8009418 <xTaskResumeAll>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	f47f af7c 	bne.w	800889a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80089a2:	4b0c      	ldr	r3, [pc, #48]	; (80089d4 <xQueueGenericSend+0x1f0>)
 80089a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	e772      	b.n	800889a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089b6:	f000 fa0f 	bl	8008dd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089ba:	f000 fd2d 	bl	8009418 <xTaskResumeAll>
 80089be:	e76c      	b.n	800889a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80089c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089c2:	f000 fa09 	bl	8008dd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089c6:	f000 fd27 	bl	8009418 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80089ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3738      	adds	r7, #56	; 0x38
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	e000ed04 	.word	0xe000ed04

080089d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b08e      	sub	sp, #56	; 0x38
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
 80089e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80089ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d109      	bne.n	8008a04 <xQueueGenericSendFromISR+0x2c>
 80089f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	627b      	str	r3, [r7, #36]	; 0x24
 8008a02:	e7fe      	b.n	8008a02 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d103      	bne.n	8008a12 <xQueueGenericSendFromISR+0x3a>
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d101      	bne.n	8008a16 <xQueueGenericSendFromISR+0x3e>
 8008a12:	2301      	movs	r3, #1
 8008a14:	e000      	b.n	8008a18 <xQueueGenericSendFromISR+0x40>
 8008a16:	2300      	movs	r3, #0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d109      	bne.n	8008a30 <xQueueGenericSendFromISR+0x58>
 8008a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a20:	f383 8811 	msr	BASEPRI, r3
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	623b      	str	r3, [r7, #32]
 8008a2e:	e7fe      	b.n	8008a2e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d103      	bne.n	8008a3e <xQueueGenericSendFromISR+0x66>
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d101      	bne.n	8008a42 <xQueueGenericSendFromISR+0x6a>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e000      	b.n	8008a44 <xQueueGenericSendFromISR+0x6c>
 8008a42:	2300      	movs	r3, #0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d109      	bne.n	8008a5c <xQueueGenericSendFromISR+0x84>
 8008a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	61fb      	str	r3, [r7, #28]
 8008a5a:	e7fe      	b.n	8008a5a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a5c:	f001 feca 	bl	800a7f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a60:	f3ef 8211 	mrs	r2, BASEPRI
 8008a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	61ba      	str	r2, [r7, #24]
 8008a76:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a78:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d302      	bcc.n	8008a8e <xQueueGenericSendFromISR+0xb6>
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d12c      	bne.n	8008ae8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	68b9      	ldr	r1, [r7, #8]
 8008a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a9e:	f000 f90b 	bl	8008cb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008aa2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aaa:	d112      	bne.n	8008ad2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d016      	beq.n	8008ae2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab6:	3324      	adds	r3, #36	; 0x24
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 febb 	bl	8009834 <xTaskRemoveFromEventList>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00e      	beq.n	8008ae2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00b      	beq.n	8008ae2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	e007      	b.n	8008ae2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ad2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	b25a      	sxtb	r2, r3
 8008adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008ae6:	e001      	b.n	8008aec <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	637b      	str	r3, [r7, #52]	; 0x34
 8008aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3738      	adds	r7, #56	; 0x38
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b08c      	sub	sp, #48	; 0x30
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d109      	bne.n	8008b2e <xQueueReceive+0x2e>
	__asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	623b      	str	r3, [r7, #32]
 8008b2c:	e7fe      	b.n	8008b2c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d103      	bne.n	8008b3c <xQueueReceive+0x3c>
 8008b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <xQueueReceive+0x40>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e000      	b.n	8008b42 <xQueueReceive+0x42>
 8008b40:	2300      	movs	r3, #0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d109      	bne.n	8008b5a <xQueueReceive+0x5a>
 8008b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	61fb      	str	r3, [r7, #28]
 8008b58:	e7fe      	b.n	8008b58 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b5a:	f001 f821 	bl	8009ba0 <xTaskGetSchedulerState>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d102      	bne.n	8008b6a <xQueueReceive+0x6a>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <xQueueReceive+0x6e>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e000      	b.n	8008b70 <xQueueReceive+0x70>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d109      	bne.n	8008b88 <xQueueReceive+0x88>
 8008b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	61bb      	str	r3, [r7, #24]
 8008b86:	e7fe      	b.n	8008b86 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b88:	f001 fd58 	bl	800a63c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b90:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d01f      	beq.n	8008bd8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b98:	68b9      	ldr	r1, [r7, #8]
 8008b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b9c:	f000 f8f6 	bl	8008d8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	1e5a      	subs	r2, r3, #1
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00f      	beq.n	8008bd0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb2:	3310      	adds	r3, #16
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f000 fe3d 	bl	8009834 <xTaskRemoveFromEventList>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d007      	beq.n	8008bd0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008bc0:	4b3c      	ldr	r3, [pc, #240]	; (8008cb4 <xQueueReceive+0x1b4>)
 8008bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc6:	601a      	str	r2, [r3, #0]
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008bd0:	f001 fd62 	bl	800a698 <vPortExitCritical>
				return pdPASS;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e069      	b.n	8008cac <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d103      	bne.n	8008be6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bde:	f001 fd5b 	bl	800a698 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008be2:	2300      	movs	r3, #0
 8008be4:	e062      	b.n	8008cac <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d106      	bne.n	8008bfa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bec:	f107 0310 	add.w	r3, r7, #16
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 fe81 	bl	80098f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bfa:	f001 fd4d 	bl	800a698 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bfe:	f000 fbfd 	bl	80093fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c02:	f001 fd1b 	bl	800a63c <vPortEnterCritical>
 8008c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c0c:	b25b      	sxtb	r3, r3
 8008c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c12:	d103      	bne.n	8008c1c <xQueueReceive+0x11c>
 8008c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c22:	b25b      	sxtb	r3, r3
 8008c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c28:	d103      	bne.n	8008c32 <xQueueReceive+0x132>
 8008c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c32:	f001 fd31 	bl	800a698 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c36:	1d3a      	adds	r2, r7, #4
 8008c38:	f107 0310 	add.w	r3, r7, #16
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 fe70 	bl	8009924 <xTaskCheckForTimeOut>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d123      	bne.n	8008c92 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c4c:	f000 f916 	bl	8008e7c <prvIsQueueEmpty>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d017      	beq.n	8008c86 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c58:	3324      	adds	r3, #36	; 0x24
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 fd9a 	bl	8009798 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c66:	f000 f8b7 	bl	8008dd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c6a:	f000 fbd5 	bl	8009418 <xTaskResumeAll>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d189      	bne.n	8008b88 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008c74:	4b0f      	ldr	r3, [pc, #60]	; (8008cb4 <xQueueReceive+0x1b4>)
 8008c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c7a:	601a      	str	r2, [r3, #0]
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	f3bf 8f6f 	isb	sy
 8008c84:	e780      	b.n	8008b88 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c88:	f000 f8a6 	bl	8008dd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c8c:	f000 fbc4 	bl	8009418 <xTaskResumeAll>
 8008c90:	e77a      	b.n	8008b88 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c94:	f000 f8a0 	bl	8008dd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c98:	f000 fbbe 	bl	8009418 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c9e:	f000 f8ed 	bl	8008e7c <prvIsQueueEmpty>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f43f af6f 	beq.w	8008b88 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008caa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3730      	adds	r7, #48	; 0x30
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	e000ed04 	.word	0xe000ed04

08008cb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ccc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10d      	bne.n	8008cf2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d14d      	bne.n	8008d7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 ff7a 	bl	8009bdc <xTaskPriorityDisinherit>
 8008ce8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	609a      	str	r2, [r3, #8]
 8008cf0:	e043      	b.n	8008d7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d119      	bne.n	8008d2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6858      	ldr	r0, [r3, #4]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d00:	461a      	mov	r2, r3
 8008d02:	68b9      	ldr	r1, [r7, #8]
 8008d04:	f001 ffb4 	bl	800ac70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d10:	441a      	add	r2, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d32b      	bcc.n	8008d7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	605a      	str	r2, [r3, #4]
 8008d2a:	e026      	b.n	8008d7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	68d8      	ldr	r0, [r3, #12]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d34:	461a      	mov	r2, r3
 8008d36:	68b9      	ldr	r1, [r7, #8]
 8008d38:	f001 ff9a 	bl	800ac70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	68da      	ldr	r2, [r3, #12]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d44:	425b      	negs	r3, r3
 8008d46:	441a      	add	r2, r3
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	68da      	ldr	r2, [r3, #12]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d207      	bcs.n	8008d68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d60:	425b      	negs	r3, r3
 8008d62:	441a      	add	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d105      	bne.n	8008d7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d002      	beq.n	8008d7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	1c5a      	adds	r2, r3, #1
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008d82:	697b      	ldr	r3, [r7, #20]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d018      	beq.n	8008dd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da6:	441a      	add	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68da      	ldr	r2, [r3, #12]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d303      	bcc.n	8008dc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	68d9      	ldr	r1, [r3, #12]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc8:	461a      	mov	r2, r3
 8008dca:	6838      	ldr	r0, [r7, #0]
 8008dcc:	f001 ff50 	bl	800ac70 <memcpy>
	}
}
 8008dd0:	bf00      	nop
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008de0:	f001 fc2c 	bl	800a63c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008dec:	e011      	b.n	8008e12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d012      	beq.n	8008e1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	3324      	adds	r3, #36	; 0x24
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fd1a 	bl	8009834 <xTaskRemoveFromEventList>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e06:	f000 fded 	bl	80099e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	dce9      	bgt.n	8008dee <prvUnlockQueue+0x16>
 8008e1a:	e000      	b.n	8008e1e <prvUnlockQueue+0x46>
					break;
 8008e1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	22ff      	movs	r2, #255	; 0xff
 8008e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e26:	f001 fc37 	bl	800a698 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e2a:	f001 fc07 	bl	800a63c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e36:	e011      	b.n	8008e5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d012      	beq.n	8008e66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	3310      	adds	r3, #16
 8008e44:	4618      	mov	r0, r3
 8008e46:	f000 fcf5 	bl	8009834 <xTaskRemoveFromEventList>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e50:	f000 fdc8 	bl	80099e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
 8008e56:	3b01      	subs	r3, #1
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	dce9      	bgt.n	8008e38 <prvUnlockQueue+0x60>
 8008e64:	e000      	b.n	8008e68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	22ff      	movs	r2, #255	; 0xff
 8008e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008e70:	f001 fc12 	bl	800a698 <vPortExitCritical>
}
 8008e74:	bf00      	nop
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e84:	f001 fbda 	bl	800a63c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d102      	bne.n	8008e96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e90:	2301      	movs	r3, #1
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	e001      	b.n	8008e9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e9a:	f001 fbfd 	bl	800a698 <vPortExitCritical>

	return xReturn;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008eb0:	f001 fbc4 	bl	800a63c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d102      	bne.n	8008ec6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	60fb      	str	r3, [r7, #12]
 8008ec4:	e001      	b.n	8008eca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008eca:	f001 fbe5 	bl	800a698 <vPortExitCritical>

	return xReturn;
 8008ece:	68fb      	ldr	r3, [r7, #12]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60fb      	str	r3, [r7, #12]
 8008ee6:	e014      	b.n	8008f12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ee8:	4a0e      	ldr	r2, [pc, #56]	; (8008f24 <vQueueAddToRegistry+0x4c>)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10b      	bne.n	8008f0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ef4:	490b      	ldr	r1, [pc, #44]	; (8008f24 <vQueueAddToRegistry+0x4c>)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	683a      	ldr	r2, [r7, #0]
 8008efa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008efe:	4a09      	ldr	r2, [pc, #36]	; (8008f24 <vQueueAddToRegistry+0x4c>)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	00db      	lsls	r3, r3, #3
 8008f04:	4413      	add	r3, r2
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f0a:	e005      	b.n	8008f18 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	60fb      	str	r3, [r7, #12]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2b07      	cmp	r3, #7
 8008f16:	d9e7      	bls.n	8008ee8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f18:	bf00      	nop
 8008f1a:	3714      	adds	r7, #20
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	240051a0 	.word	0x240051a0

08008f28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f38:	f001 fb80 	bl	800a63c <vPortEnterCritical>
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f42:	b25b      	sxtb	r3, r3
 8008f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f48:	d103      	bne.n	8008f52 <vQueueWaitForMessageRestricted+0x2a>
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f58:	b25b      	sxtb	r3, r3
 8008f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5e:	d103      	bne.n	8008f68 <vQueueWaitForMessageRestricted+0x40>
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f68:	f001 fb96 	bl	800a698 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d106      	bne.n	8008f82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	3324      	adds	r3, #36	; 0x24
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	68b9      	ldr	r1, [r7, #8]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 fc2f 	bl	80097e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f82:	6978      	ldr	r0, [r7, #20]
 8008f84:	f7ff ff28 	bl	8008dd8 <prvUnlockQueue>
	}
 8008f88:	bf00      	nop
 8008f8a:	3718      	adds	r7, #24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b08e      	sub	sp, #56	; 0x38
 8008f94:	af04      	add	r7, sp, #16
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
 8008f9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d109      	bne.n	8008fb8 <xTaskCreateStatic+0x28>
 8008fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	623b      	str	r3, [r7, #32]
 8008fb6:	e7fe      	b.n	8008fb6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d109      	bne.n	8008fd2 <xTaskCreateStatic+0x42>
 8008fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	61fb      	str	r3, [r7, #28]
 8008fd0:	e7fe      	b.n	8008fd0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008fd2:	235c      	movs	r3, #92	; 0x5c
 8008fd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	2b5c      	cmp	r3, #92	; 0x5c
 8008fda:	d009      	beq.n	8008ff0 <xTaskCreateStatic+0x60>
 8008fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	61bb      	str	r3, [r7, #24]
 8008fee:	e7fe      	b.n	8008fee <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ff0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d01e      	beq.n	8009036 <xTaskCreateStatic+0xa6>
 8008ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d01b      	beq.n	8009036 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009000:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009006:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	2202      	movs	r2, #2
 800900c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009010:	2300      	movs	r3, #0
 8009012:	9303      	str	r3, [sp, #12]
 8009014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009016:	9302      	str	r3, [sp, #8]
 8009018:	f107 0314 	add.w	r3, r7, #20
 800901c:	9301      	str	r3, [sp, #4]
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	68b9      	ldr	r1, [r7, #8]
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 f850 	bl	80090ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800902e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009030:	f000 f8dc 	bl	80091ec <prvAddNewTaskToReadyList>
 8009034:	e001      	b.n	800903a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009036:	2300      	movs	r3, #0
 8009038:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800903a:	697b      	ldr	r3, [r7, #20]
	}
 800903c:	4618      	mov	r0, r3
 800903e:	3728      	adds	r7, #40	; 0x28
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009044:	b580      	push	{r7, lr}
 8009046:	b08c      	sub	sp, #48	; 0x30
 8009048:	af04      	add	r7, sp, #16
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	603b      	str	r3, [r7, #0]
 8009050:	4613      	mov	r3, r2
 8009052:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009054:	88fb      	ldrh	r3, [r7, #6]
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4618      	mov	r0, r3
 800905a:	f001 fc09 	bl	800a870 <pvPortMalloc>
 800905e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00e      	beq.n	8009084 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009066:	205c      	movs	r0, #92	; 0x5c
 8009068:	f001 fc02 	bl	800a870 <pvPortMalloc>
 800906c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d003      	beq.n	800907c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	631a      	str	r2, [r3, #48]	; 0x30
 800907a:	e005      	b.n	8009088 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800907c:	6978      	ldr	r0, [r7, #20]
 800907e:	f001 fcb9 	bl	800a9f4 <vPortFree>
 8009082:	e001      	b.n	8009088 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009084:	2300      	movs	r3, #0
 8009086:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d017      	beq.n	80090be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009096:	88fa      	ldrh	r2, [r7, #6]
 8009098:	2300      	movs	r3, #0
 800909a:	9303      	str	r3, [sp, #12]
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	9302      	str	r3, [sp, #8]
 80090a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a2:	9301      	str	r3, [sp, #4]
 80090a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	68b9      	ldr	r1, [r7, #8]
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 f80e 	bl	80090ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090b2:	69f8      	ldr	r0, [r7, #28]
 80090b4:	f000 f89a 	bl	80091ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80090b8:	2301      	movs	r3, #1
 80090ba:	61bb      	str	r3, [r7, #24]
 80090bc:	e002      	b.n	80090c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80090be:	f04f 33ff 	mov.w	r3, #4294967295
 80090c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80090c4:	69bb      	ldr	r3, [r7, #24]
	}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3720      	adds	r7, #32
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b088      	sub	sp, #32
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	60f8      	str	r0, [r7, #12]
 80090d6:	60b9      	str	r1, [r7, #8]
 80090d8:	607a      	str	r2, [r7, #4]
 80090da:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80090dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	461a      	mov	r2, r3
 80090e6:	21a5      	movs	r1, #165	; 0xa5
 80090e8:	f001 fdcd 	bl	800ac86 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80090ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090f0:	6879      	ldr	r1, [r7, #4]
 80090f2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80090f6:	440b      	add	r3, r1
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	f023 0307 	bic.w	r3, r3, #7
 8009104:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	f003 0307 	and.w	r3, r3, #7
 800910c:	2b00      	cmp	r3, #0
 800910e:	d009      	beq.n	8009124 <prvInitialiseNewTask+0x56>
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	617b      	str	r3, [r7, #20]
 8009122:	e7fe      	b.n	8009122 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d01f      	beq.n	800916a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800912a:	2300      	movs	r3, #0
 800912c:	61fb      	str	r3, [r7, #28]
 800912e:	e012      	b.n	8009156 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	4413      	add	r3, r2
 8009136:	7819      	ldrb	r1, [r3, #0]
 8009138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	4413      	add	r3, r2
 800913e:	3334      	adds	r3, #52	; 0x34
 8009140:	460a      	mov	r2, r1
 8009142:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	4413      	add	r3, r2
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d006      	beq.n	800915e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	3301      	adds	r3, #1
 8009154:	61fb      	str	r3, [r7, #28]
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	2b0f      	cmp	r3, #15
 800915a:	d9e9      	bls.n	8009130 <prvInitialiseNewTask+0x62>
 800915c:	e000      	b.n	8009160 <prvInitialiseNewTask+0x92>
			{
				break;
 800915e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009162:	2200      	movs	r2, #0
 8009164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009168:	e003      	b.n	8009172 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	2b37      	cmp	r3, #55	; 0x37
 8009176:	d901      	bls.n	800917c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009178:	2337      	movs	r3, #55	; 0x37
 800917a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800917c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009180:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009186:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918a:	2200      	movs	r2, #0
 800918c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009190:	3304      	adds	r3, #4
 8009192:	4618      	mov	r0, r3
 8009194:	f7ff f994 	bl	80084c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919a:	3318      	adds	r3, #24
 800919c:	4618      	mov	r0, r3
 800919e:	f7ff f98f 	bl	80084c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80091a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80091b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ba:	2200      	movs	r2, #0
 80091bc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	68f9      	ldr	r1, [r7, #12]
 80091ca:	69b8      	ldr	r0, [r7, #24]
 80091cc:	f001 f90c 	bl	800a3e8 <pxPortInitialiseStack>
 80091d0:	4602      	mov	r2, r0
 80091d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80091d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091e2:	bf00      	nop
 80091e4:	3720      	adds	r7, #32
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
	...

080091ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091f4:	f001 fa22 	bl	800a63c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091f8:	4b2d      	ldr	r3, [pc, #180]	; (80092b0 <prvAddNewTaskToReadyList+0xc4>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3301      	adds	r3, #1
 80091fe:	4a2c      	ldr	r2, [pc, #176]	; (80092b0 <prvAddNewTaskToReadyList+0xc4>)
 8009200:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009202:	4b2c      	ldr	r3, [pc, #176]	; (80092b4 <prvAddNewTaskToReadyList+0xc8>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d109      	bne.n	800921e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800920a:	4a2a      	ldr	r2, [pc, #168]	; (80092b4 <prvAddNewTaskToReadyList+0xc8>)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009210:	4b27      	ldr	r3, [pc, #156]	; (80092b0 <prvAddNewTaskToReadyList+0xc4>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d110      	bne.n	800923a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009218:	f000 fc08 	bl	8009a2c <prvInitialiseTaskLists>
 800921c:	e00d      	b.n	800923a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800921e:	4b26      	ldr	r3, [pc, #152]	; (80092b8 <prvAddNewTaskToReadyList+0xcc>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d109      	bne.n	800923a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009226:	4b23      	ldr	r3, [pc, #140]	; (80092b4 <prvAddNewTaskToReadyList+0xc8>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009230:	429a      	cmp	r2, r3
 8009232:	d802      	bhi.n	800923a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009234:	4a1f      	ldr	r2, [pc, #124]	; (80092b4 <prvAddNewTaskToReadyList+0xc8>)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800923a:	4b20      	ldr	r3, [pc, #128]	; (80092bc <prvAddNewTaskToReadyList+0xd0>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3301      	adds	r3, #1
 8009240:	4a1e      	ldr	r2, [pc, #120]	; (80092bc <prvAddNewTaskToReadyList+0xd0>)
 8009242:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009244:	4b1d      	ldr	r3, [pc, #116]	; (80092bc <prvAddNewTaskToReadyList+0xd0>)
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009250:	4b1b      	ldr	r3, [pc, #108]	; (80092c0 <prvAddNewTaskToReadyList+0xd4>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	429a      	cmp	r2, r3
 8009256:	d903      	bls.n	8009260 <prvAddNewTaskToReadyList+0x74>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925c:	4a18      	ldr	r2, [pc, #96]	; (80092c0 <prvAddNewTaskToReadyList+0xd4>)
 800925e:	6013      	str	r3, [r2, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009264:	4613      	mov	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4413      	add	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4a15      	ldr	r2, [pc, #84]	; (80092c4 <prvAddNewTaskToReadyList+0xd8>)
 800926e:	441a      	add	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	3304      	adds	r3, #4
 8009274:	4619      	mov	r1, r3
 8009276:	4610      	mov	r0, r2
 8009278:	f7ff f92f 	bl	80084da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800927c:	f001 fa0c 	bl	800a698 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009280:	4b0d      	ldr	r3, [pc, #52]	; (80092b8 <prvAddNewTaskToReadyList+0xcc>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00e      	beq.n	80092a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009288:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <prvAddNewTaskToReadyList+0xc8>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009292:	429a      	cmp	r2, r3
 8009294:	d207      	bcs.n	80092a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009296:	4b0c      	ldr	r3, [pc, #48]	; (80092c8 <prvAddNewTaskToReadyList+0xdc>)
 8009298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092a6:	bf00      	nop
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	24000ce8 	.word	0x24000ce8
 80092b4:	24000814 	.word	0x24000814
 80092b8:	24000cf4 	.word	0x24000cf4
 80092bc:	24000d04 	.word	0x24000d04
 80092c0:	24000cf0 	.word	0x24000cf0
 80092c4:	24000818 	.word	0x24000818
 80092c8:	e000ed04 	.word	0xe000ed04

080092cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092d4:	2300      	movs	r3, #0
 80092d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d016      	beq.n	800930c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80092de:	4b13      	ldr	r3, [pc, #76]	; (800932c <vTaskDelay+0x60>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d009      	beq.n	80092fa <vTaskDelay+0x2e>
 80092e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	60bb      	str	r3, [r7, #8]
 80092f8:	e7fe      	b.n	80092f8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80092fa:	f000 f87f 	bl	80093fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092fe:	2100      	movs	r1, #0
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fcd7 	bl	8009cb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009306:	f000 f887 	bl	8009418 <xTaskResumeAll>
 800930a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d107      	bne.n	8009322 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009312:	4b07      	ldr	r3, [pc, #28]	; (8009330 <vTaskDelay+0x64>)
 8009314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009318:	601a      	str	r2, [r3, #0]
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009322:	bf00      	nop
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	24000d10 	.word	0x24000d10
 8009330:	e000ed04 	.word	0xe000ed04

08009334 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b08a      	sub	sp, #40	; 0x28
 8009338:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800933a:	2300      	movs	r3, #0
 800933c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800933e:	2300      	movs	r3, #0
 8009340:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009342:	463a      	mov	r2, r7
 8009344:	1d39      	adds	r1, r7, #4
 8009346:	f107 0308 	add.w	r3, r7, #8
 800934a:	4618      	mov	r0, r3
 800934c:	f7ff f864 	bl	8008418 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68ba      	ldr	r2, [r7, #8]
 8009356:	9202      	str	r2, [sp, #8]
 8009358:	9301      	str	r3, [sp, #4]
 800935a:	2300      	movs	r3, #0
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	2300      	movs	r3, #0
 8009360:	460a      	mov	r2, r1
 8009362:	4920      	ldr	r1, [pc, #128]	; (80093e4 <vTaskStartScheduler+0xb0>)
 8009364:	4820      	ldr	r0, [pc, #128]	; (80093e8 <vTaskStartScheduler+0xb4>)
 8009366:	f7ff fe13 	bl	8008f90 <xTaskCreateStatic>
 800936a:	4602      	mov	r2, r0
 800936c:	4b1f      	ldr	r3, [pc, #124]	; (80093ec <vTaskStartScheduler+0xb8>)
 800936e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009370:	4b1e      	ldr	r3, [pc, #120]	; (80093ec <vTaskStartScheduler+0xb8>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009378:	2301      	movs	r3, #1
 800937a:	617b      	str	r3, [r7, #20]
 800937c:	e001      	b.n	8009382 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800937e:	2300      	movs	r3, #0
 8009380:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d102      	bne.n	800938e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009388:	f000 fce8 	bl	8009d5c <xTimerCreateTimerTask>
 800938c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d115      	bne.n	80093c0 <vTaskStartScheduler+0x8c>
 8009394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009398:	f383 8811 	msr	BASEPRI, r3
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80093a6:	4b12      	ldr	r3, [pc, #72]	; (80093f0 <vTaskStartScheduler+0xbc>)
 80093a8:	f04f 32ff 	mov.w	r2, #4294967295
 80093ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093ae:	4b11      	ldr	r3, [pc, #68]	; (80093f4 <vTaskStartScheduler+0xc0>)
 80093b0:	2201      	movs	r2, #1
 80093b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80093b4:	4b10      	ldr	r3, [pc, #64]	; (80093f8 <vTaskStartScheduler+0xc4>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80093ba:	f001 f8a1 	bl	800a500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80093be:	e00d      	b.n	80093dc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c6:	d109      	bne.n	80093dc <vTaskStartScheduler+0xa8>
 80093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	60fb      	str	r3, [r7, #12]
 80093da:	e7fe      	b.n	80093da <vTaskStartScheduler+0xa6>
}
 80093dc:	bf00      	nop
 80093de:	3718      	adds	r7, #24
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	0800b534 	.word	0x0800b534
 80093e8:	080099fd 	.word	0x080099fd
 80093ec:	24000d0c 	.word	0x24000d0c
 80093f0:	24000d08 	.word	0x24000d08
 80093f4:	24000cf4 	.word	0x24000cf4
 80093f8:	24000cec 	.word	0x24000cec

080093fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093fc:	b480      	push	{r7}
 80093fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009400:	4b04      	ldr	r3, [pc, #16]	; (8009414 <vTaskSuspendAll+0x18>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	3301      	adds	r3, #1
 8009406:	4a03      	ldr	r2, [pc, #12]	; (8009414 <vTaskSuspendAll+0x18>)
 8009408:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800940a:	bf00      	nop
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr
 8009414:	24000d10 	.word	0x24000d10

08009418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800941e:	2300      	movs	r3, #0
 8009420:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009422:	2300      	movs	r3, #0
 8009424:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009426:	4b41      	ldr	r3, [pc, #260]	; (800952c <xTaskResumeAll+0x114>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d109      	bne.n	8009442 <xTaskResumeAll+0x2a>
 800942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	603b      	str	r3, [r7, #0]
 8009440:	e7fe      	b.n	8009440 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009442:	f001 f8fb 	bl	800a63c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009446:	4b39      	ldr	r3, [pc, #228]	; (800952c <xTaskResumeAll+0x114>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3b01      	subs	r3, #1
 800944c:	4a37      	ldr	r2, [pc, #220]	; (800952c <xTaskResumeAll+0x114>)
 800944e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009450:	4b36      	ldr	r3, [pc, #216]	; (800952c <xTaskResumeAll+0x114>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d162      	bne.n	800951e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009458:	4b35      	ldr	r3, [pc, #212]	; (8009530 <xTaskResumeAll+0x118>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d05e      	beq.n	800951e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009460:	e02f      	b.n	80094c2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009462:	4b34      	ldr	r3, [pc, #208]	; (8009534 <xTaskResumeAll+0x11c>)
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3318      	adds	r3, #24
 800946e:	4618      	mov	r0, r3
 8009470:	f7ff f890 	bl	8008594 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	3304      	adds	r3, #4
 8009478:	4618      	mov	r0, r3
 800947a:	f7ff f88b 	bl	8008594 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009482:	4b2d      	ldr	r3, [pc, #180]	; (8009538 <xTaskResumeAll+0x120>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	429a      	cmp	r2, r3
 8009488:	d903      	bls.n	8009492 <xTaskResumeAll+0x7a>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948e:	4a2a      	ldr	r2, [pc, #168]	; (8009538 <xTaskResumeAll+0x120>)
 8009490:	6013      	str	r3, [r2, #0]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009496:	4613      	mov	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4a27      	ldr	r2, [pc, #156]	; (800953c <xTaskResumeAll+0x124>)
 80094a0:	441a      	add	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	3304      	adds	r3, #4
 80094a6:	4619      	mov	r1, r3
 80094a8:	4610      	mov	r0, r2
 80094aa:	f7ff f816 	bl	80084da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b2:	4b23      	ldr	r3, [pc, #140]	; (8009540 <xTaskResumeAll+0x128>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d302      	bcc.n	80094c2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80094bc:	4b21      	ldr	r3, [pc, #132]	; (8009544 <xTaskResumeAll+0x12c>)
 80094be:	2201      	movs	r2, #1
 80094c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094c2:	4b1c      	ldr	r3, [pc, #112]	; (8009534 <xTaskResumeAll+0x11c>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1cb      	bne.n	8009462 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094d0:	f000 fb46 	bl	8009b60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80094d4:	4b1c      	ldr	r3, [pc, #112]	; (8009548 <xTaskResumeAll+0x130>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d010      	beq.n	8009502 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094e0:	f000 f846 	bl	8009570 <xTaskIncrementTick>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d002      	beq.n	80094f0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80094ea:	4b16      	ldr	r3, [pc, #88]	; (8009544 <xTaskResumeAll+0x12c>)
 80094ec:	2201      	movs	r2, #1
 80094ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3b01      	subs	r3, #1
 80094f4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1f1      	bne.n	80094e0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80094fc:	4b12      	ldr	r3, [pc, #72]	; (8009548 <xTaskResumeAll+0x130>)
 80094fe:	2200      	movs	r2, #0
 8009500:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009502:	4b10      	ldr	r3, [pc, #64]	; (8009544 <xTaskResumeAll+0x12c>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d009      	beq.n	800951e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800950a:	2301      	movs	r3, #1
 800950c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800950e:	4b0f      	ldr	r3, [pc, #60]	; (800954c <xTaskResumeAll+0x134>)
 8009510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009514:	601a      	str	r2, [r3, #0]
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800951e:	f001 f8bb 	bl	800a698 <vPortExitCritical>

	return xAlreadyYielded;
 8009522:	68bb      	ldr	r3, [r7, #8]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	24000d10 	.word	0x24000d10
 8009530:	24000ce8 	.word	0x24000ce8
 8009534:	24000ca8 	.word	0x24000ca8
 8009538:	24000cf0 	.word	0x24000cf0
 800953c:	24000818 	.word	0x24000818
 8009540:	24000814 	.word	0x24000814
 8009544:	24000cfc 	.word	0x24000cfc
 8009548:	24000cf8 	.word	0x24000cf8
 800954c:	e000ed04 	.word	0xe000ed04

08009550 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009556:	4b05      	ldr	r3, [pc, #20]	; (800956c <xTaskGetTickCount+0x1c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800955c:	687b      	ldr	r3, [r7, #4]
}
 800955e:	4618      	mov	r0, r3
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	24000cec 	.word	0x24000cec

08009570 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009576:	2300      	movs	r3, #0
 8009578:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800957a:	4b4e      	ldr	r3, [pc, #312]	; (80096b4 <xTaskIncrementTick+0x144>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	f040 8088 	bne.w	8009694 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009584:	4b4c      	ldr	r3, [pc, #304]	; (80096b8 <xTaskIncrementTick+0x148>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3301      	adds	r3, #1
 800958a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800958c:	4a4a      	ldr	r2, [pc, #296]	; (80096b8 <xTaskIncrementTick+0x148>)
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d11f      	bne.n	80095d8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009598:	4b48      	ldr	r3, [pc, #288]	; (80096bc <xTaskIncrementTick+0x14c>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d009      	beq.n	80095b6 <xTaskIncrementTick+0x46>
 80095a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	603b      	str	r3, [r7, #0]
 80095b4:	e7fe      	b.n	80095b4 <xTaskIncrementTick+0x44>
 80095b6:	4b41      	ldr	r3, [pc, #260]	; (80096bc <xTaskIncrementTick+0x14c>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	60fb      	str	r3, [r7, #12]
 80095bc:	4b40      	ldr	r3, [pc, #256]	; (80096c0 <xTaskIncrementTick+0x150>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a3e      	ldr	r2, [pc, #248]	; (80096bc <xTaskIncrementTick+0x14c>)
 80095c2:	6013      	str	r3, [r2, #0]
 80095c4:	4a3e      	ldr	r2, [pc, #248]	; (80096c0 <xTaskIncrementTick+0x150>)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6013      	str	r3, [r2, #0]
 80095ca:	4b3e      	ldr	r3, [pc, #248]	; (80096c4 <xTaskIncrementTick+0x154>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	3301      	adds	r3, #1
 80095d0:	4a3c      	ldr	r2, [pc, #240]	; (80096c4 <xTaskIncrementTick+0x154>)
 80095d2:	6013      	str	r3, [r2, #0]
 80095d4:	f000 fac4 	bl	8009b60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095d8:	4b3b      	ldr	r3, [pc, #236]	; (80096c8 <xTaskIncrementTick+0x158>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d349      	bcc.n	8009676 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095e2:	4b36      	ldr	r3, [pc, #216]	; (80096bc <xTaskIncrementTick+0x14c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d104      	bne.n	80095f6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095ec:	4b36      	ldr	r3, [pc, #216]	; (80096c8 <xTaskIncrementTick+0x158>)
 80095ee:	f04f 32ff 	mov.w	r2, #4294967295
 80095f2:	601a      	str	r2, [r3, #0]
					break;
 80095f4:	e03f      	b.n	8009676 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095f6:	4b31      	ldr	r3, [pc, #196]	; (80096bc <xTaskIncrementTick+0x14c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	429a      	cmp	r2, r3
 800960c:	d203      	bcs.n	8009616 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800960e:	4a2e      	ldr	r2, [pc, #184]	; (80096c8 <xTaskIncrementTick+0x158>)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009614:	e02f      	b.n	8009676 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	3304      	adds	r3, #4
 800961a:	4618      	mov	r0, r3
 800961c:	f7fe ffba 	bl	8008594 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009624:	2b00      	cmp	r3, #0
 8009626:	d004      	beq.n	8009632 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	3318      	adds	r3, #24
 800962c:	4618      	mov	r0, r3
 800962e:	f7fe ffb1 	bl	8008594 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009636:	4b25      	ldr	r3, [pc, #148]	; (80096cc <xTaskIncrementTick+0x15c>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	429a      	cmp	r2, r3
 800963c:	d903      	bls.n	8009646 <xTaskIncrementTick+0xd6>
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009642:	4a22      	ldr	r2, [pc, #136]	; (80096cc <xTaskIncrementTick+0x15c>)
 8009644:	6013      	str	r3, [r2, #0]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800964a:	4613      	mov	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4a1f      	ldr	r2, [pc, #124]	; (80096d0 <xTaskIncrementTick+0x160>)
 8009654:	441a      	add	r2, r3
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	3304      	adds	r3, #4
 800965a:	4619      	mov	r1, r3
 800965c:	4610      	mov	r0, r2
 800965e:	f7fe ff3c 	bl	80084da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009666:	4b1b      	ldr	r3, [pc, #108]	; (80096d4 <xTaskIncrementTick+0x164>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966c:	429a      	cmp	r2, r3
 800966e:	d3b8      	bcc.n	80095e2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009670:	2301      	movs	r3, #1
 8009672:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009674:	e7b5      	b.n	80095e2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009676:	4b17      	ldr	r3, [pc, #92]	; (80096d4 <xTaskIncrementTick+0x164>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800967c:	4914      	ldr	r1, [pc, #80]	; (80096d0 <xTaskIncrementTick+0x160>)
 800967e:	4613      	mov	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	440b      	add	r3, r1
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2b01      	cmp	r3, #1
 800968c:	d907      	bls.n	800969e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800968e:	2301      	movs	r3, #1
 8009690:	617b      	str	r3, [r7, #20]
 8009692:	e004      	b.n	800969e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009694:	4b10      	ldr	r3, [pc, #64]	; (80096d8 <xTaskIncrementTick+0x168>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	3301      	adds	r3, #1
 800969a:	4a0f      	ldr	r2, [pc, #60]	; (80096d8 <xTaskIncrementTick+0x168>)
 800969c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800969e:	4b0f      	ldr	r3, [pc, #60]	; (80096dc <xTaskIncrementTick+0x16c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80096a6:	2301      	movs	r3, #1
 80096a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80096aa:	697b      	ldr	r3, [r7, #20]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3718      	adds	r7, #24
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	24000d10 	.word	0x24000d10
 80096b8:	24000cec 	.word	0x24000cec
 80096bc:	24000ca0 	.word	0x24000ca0
 80096c0:	24000ca4 	.word	0x24000ca4
 80096c4:	24000d00 	.word	0x24000d00
 80096c8:	24000d08 	.word	0x24000d08
 80096cc:	24000cf0 	.word	0x24000cf0
 80096d0:	24000818 	.word	0x24000818
 80096d4:	24000814 	.word	0x24000814
 80096d8:	24000cf8 	.word	0x24000cf8
 80096dc:	24000cfc 	.word	0x24000cfc

080096e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096e6:	4b27      	ldr	r3, [pc, #156]	; (8009784 <vTaskSwitchContext+0xa4>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096ee:	4b26      	ldr	r3, [pc, #152]	; (8009788 <vTaskSwitchContext+0xa8>)
 80096f0:	2201      	movs	r2, #1
 80096f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096f4:	e040      	b.n	8009778 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80096f6:	4b24      	ldr	r3, [pc, #144]	; (8009788 <vTaskSwitchContext+0xa8>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096fc:	4b23      	ldr	r3, [pc, #140]	; (800978c <vTaskSwitchContext+0xac>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	60fb      	str	r3, [r7, #12]
 8009702:	e00f      	b.n	8009724 <vTaskSwitchContext+0x44>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d109      	bne.n	800971e <vTaskSwitchContext+0x3e>
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	607b      	str	r3, [r7, #4]
 800971c:	e7fe      	b.n	800971c <vTaskSwitchContext+0x3c>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	3b01      	subs	r3, #1
 8009722:	60fb      	str	r3, [r7, #12]
 8009724:	491a      	ldr	r1, [pc, #104]	; (8009790 <vTaskSwitchContext+0xb0>)
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	4613      	mov	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4413      	add	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	440b      	add	r3, r1
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d0e5      	beq.n	8009704 <vTaskSwitchContext+0x24>
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	4613      	mov	r3, r2
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4413      	add	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4a13      	ldr	r2, [pc, #76]	; (8009790 <vTaskSwitchContext+0xb0>)
 8009744:	4413      	add	r3, r2
 8009746:	60bb      	str	r3, [r7, #8]
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	605a      	str	r2, [r3, #4]
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	685a      	ldr	r2, [r3, #4]
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	3308      	adds	r3, #8
 800975a:	429a      	cmp	r2, r3
 800975c:	d104      	bne.n	8009768 <vTaskSwitchContext+0x88>
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	605a      	str	r2, [r3, #4]
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	4a09      	ldr	r2, [pc, #36]	; (8009794 <vTaskSwitchContext+0xb4>)
 8009770:	6013      	str	r3, [r2, #0]
 8009772:	4a06      	ldr	r2, [pc, #24]	; (800978c <vTaskSwitchContext+0xac>)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6013      	str	r3, [r2, #0]
}
 8009778:	bf00      	nop
 800977a:	3714      	adds	r7, #20
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	24000d10 	.word	0x24000d10
 8009788:	24000cfc 	.word	0x24000cfc
 800978c:	24000cf0 	.word	0x24000cf0
 8009790:	24000818 	.word	0x24000818
 8009794:	24000814 	.word	0x24000814

08009798 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d109      	bne.n	80097bc <vTaskPlaceOnEventList+0x24>
 80097a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	60fb      	str	r3, [r7, #12]
 80097ba:	e7fe      	b.n	80097ba <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097bc:	4b07      	ldr	r3, [pc, #28]	; (80097dc <vTaskPlaceOnEventList+0x44>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	3318      	adds	r3, #24
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7fe feac 	bl	8008522 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80097ca:	2101      	movs	r1, #1
 80097cc:	6838      	ldr	r0, [r7, #0]
 80097ce:	f000 fa71 	bl	8009cb4 <prvAddCurrentTaskToDelayedList>
}
 80097d2:	bf00      	nop
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	24000814 	.word	0x24000814

080097e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d109      	bne.n	8009806 <vTaskPlaceOnEventListRestricted+0x26>
 80097f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	617b      	str	r3, [r7, #20]
 8009804:	e7fe      	b.n	8009804 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009806:	4b0a      	ldr	r3, [pc, #40]	; (8009830 <vTaskPlaceOnEventListRestricted+0x50>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3318      	adds	r3, #24
 800980c:	4619      	mov	r1, r3
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	f7fe fe63 	bl	80084da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d002      	beq.n	8009820 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800981a:	f04f 33ff 	mov.w	r3, #4294967295
 800981e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009820:	6879      	ldr	r1, [r7, #4]
 8009822:	68b8      	ldr	r0, [r7, #8]
 8009824:	f000 fa46 	bl	8009cb4 <prvAddCurrentTaskToDelayedList>
	}
 8009828:	bf00      	nop
 800982a:	3718      	adds	r7, #24
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	24000814 	.word	0x24000814

08009834 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d109      	bne.n	800985e <xTaskRemoveFromEventList+0x2a>
 800984a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	60fb      	str	r3, [r7, #12]
 800985c:	e7fe      	b.n	800985c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	3318      	adds	r3, #24
 8009862:	4618      	mov	r0, r3
 8009864:	f7fe fe96 	bl	8008594 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009868:	4b1d      	ldr	r3, [pc, #116]	; (80098e0 <xTaskRemoveFromEventList+0xac>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d11d      	bne.n	80098ac <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	3304      	adds	r3, #4
 8009874:	4618      	mov	r0, r3
 8009876:	f7fe fe8d 	bl	8008594 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800987e:	4b19      	ldr	r3, [pc, #100]	; (80098e4 <xTaskRemoveFromEventList+0xb0>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	429a      	cmp	r2, r3
 8009884:	d903      	bls.n	800988e <xTaskRemoveFromEventList+0x5a>
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988a:	4a16      	ldr	r2, [pc, #88]	; (80098e4 <xTaskRemoveFromEventList+0xb0>)
 800988c:	6013      	str	r3, [r2, #0]
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009892:	4613      	mov	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	4413      	add	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4a13      	ldr	r2, [pc, #76]	; (80098e8 <xTaskRemoveFromEventList+0xb4>)
 800989c:	441a      	add	r2, r3
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	3304      	adds	r3, #4
 80098a2:	4619      	mov	r1, r3
 80098a4:	4610      	mov	r0, r2
 80098a6:	f7fe fe18 	bl	80084da <vListInsertEnd>
 80098aa:	e005      	b.n	80098b8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	3318      	adds	r3, #24
 80098b0:	4619      	mov	r1, r3
 80098b2:	480e      	ldr	r0, [pc, #56]	; (80098ec <xTaskRemoveFromEventList+0xb8>)
 80098b4:	f7fe fe11 	bl	80084da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098bc:	4b0c      	ldr	r3, [pc, #48]	; (80098f0 <xTaskRemoveFromEventList+0xbc>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d905      	bls.n	80098d2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80098c6:	2301      	movs	r3, #1
 80098c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80098ca:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <xTaskRemoveFromEventList+0xc0>)
 80098cc:	2201      	movs	r2, #1
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	e001      	b.n	80098d6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80098d2:	2300      	movs	r3, #0
 80098d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80098d6:	697b      	ldr	r3, [r7, #20]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3718      	adds	r7, #24
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	24000d10 	.word	0x24000d10
 80098e4:	24000cf0 	.word	0x24000cf0
 80098e8:	24000818 	.word	0x24000818
 80098ec:	24000ca8 	.word	0x24000ca8
 80098f0:	24000814 	.word	0x24000814
 80098f4:	24000cfc 	.word	0x24000cfc

080098f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009900:	4b06      	ldr	r3, [pc, #24]	; (800991c <vTaskInternalSetTimeOutState+0x24>)
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009908:	4b05      	ldr	r3, [pc, #20]	; (8009920 <vTaskInternalSetTimeOutState+0x28>)
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	605a      	str	r2, [r3, #4]
}
 8009910:	bf00      	nop
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	24000d00 	.word	0x24000d00
 8009920:	24000cec 	.word	0x24000cec

08009924 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b088      	sub	sp, #32
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d109      	bne.n	8009948 <xTaskCheckForTimeOut+0x24>
 8009934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009938:	f383 8811 	msr	BASEPRI, r3
 800993c:	f3bf 8f6f 	isb	sy
 8009940:	f3bf 8f4f 	dsb	sy
 8009944:	613b      	str	r3, [r7, #16]
 8009946:	e7fe      	b.n	8009946 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d109      	bne.n	8009962 <xTaskCheckForTimeOut+0x3e>
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	60fb      	str	r3, [r7, #12]
 8009960:	e7fe      	b.n	8009960 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009962:	f000 fe6b 	bl	800a63c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009966:	4b1d      	ldr	r3, [pc, #116]	; (80099dc <xTaskCheckForTimeOut+0xb8>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	69ba      	ldr	r2, [r7, #24]
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997e:	d102      	bne.n	8009986 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009980:	2300      	movs	r3, #0
 8009982:	61fb      	str	r3, [r7, #28]
 8009984:	e023      	b.n	80099ce <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	4b15      	ldr	r3, [pc, #84]	; (80099e0 <xTaskCheckForTimeOut+0xbc>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	429a      	cmp	r2, r3
 8009990:	d007      	beq.n	80099a2 <xTaskCheckForTimeOut+0x7e>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	69ba      	ldr	r2, [r7, #24]
 8009998:	429a      	cmp	r2, r3
 800999a:	d302      	bcc.n	80099a2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800999c:	2301      	movs	r3, #1
 800999e:	61fb      	str	r3, [r7, #28]
 80099a0:	e015      	b.n	80099ce <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d20b      	bcs.n	80099c4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	1ad2      	subs	r2, r2, r3
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7ff ff9d 	bl	80098f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80099be:	2300      	movs	r3, #0
 80099c0:	61fb      	str	r3, [r7, #28]
 80099c2:	e004      	b.n	80099ce <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	2200      	movs	r2, #0
 80099c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80099ca:	2301      	movs	r3, #1
 80099cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80099ce:	f000 fe63 	bl	800a698 <vPortExitCritical>

	return xReturn;
 80099d2:	69fb      	ldr	r3, [r7, #28]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3720      	adds	r7, #32
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	24000cec 	.word	0x24000cec
 80099e0:	24000d00 	.word	0x24000d00

080099e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80099e4:	b480      	push	{r7}
 80099e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80099e8:	4b03      	ldr	r3, [pc, #12]	; (80099f8 <vTaskMissedYield+0x14>)
 80099ea:	2201      	movs	r2, #1
 80099ec:	601a      	str	r2, [r3, #0]
}
 80099ee:	bf00      	nop
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr
 80099f8:	24000cfc 	.word	0x24000cfc

080099fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a04:	f000 f852 	bl	8009aac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a08:	4b06      	ldr	r3, [pc, #24]	; (8009a24 <prvIdleTask+0x28>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d9f9      	bls.n	8009a04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a10:	4b05      	ldr	r3, [pc, #20]	; (8009a28 <prvIdleTask+0x2c>)
 8009a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a16:	601a      	str	r2, [r3, #0]
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a20:	e7f0      	b.n	8009a04 <prvIdleTask+0x8>
 8009a22:	bf00      	nop
 8009a24:	24000818 	.word	0x24000818
 8009a28:	e000ed04 	.word	0xe000ed04

08009a2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a32:	2300      	movs	r3, #0
 8009a34:	607b      	str	r3, [r7, #4]
 8009a36:	e00c      	b.n	8009a52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	4413      	add	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4a12      	ldr	r2, [pc, #72]	; (8009a8c <prvInitialiseTaskLists+0x60>)
 8009a44:	4413      	add	r3, r2
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fe fd1a 	bl	8008480 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	607b      	str	r3, [r7, #4]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2b37      	cmp	r3, #55	; 0x37
 8009a56:	d9ef      	bls.n	8009a38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a58:	480d      	ldr	r0, [pc, #52]	; (8009a90 <prvInitialiseTaskLists+0x64>)
 8009a5a:	f7fe fd11 	bl	8008480 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a5e:	480d      	ldr	r0, [pc, #52]	; (8009a94 <prvInitialiseTaskLists+0x68>)
 8009a60:	f7fe fd0e 	bl	8008480 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a64:	480c      	ldr	r0, [pc, #48]	; (8009a98 <prvInitialiseTaskLists+0x6c>)
 8009a66:	f7fe fd0b 	bl	8008480 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a6a:	480c      	ldr	r0, [pc, #48]	; (8009a9c <prvInitialiseTaskLists+0x70>)
 8009a6c:	f7fe fd08 	bl	8008480 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a70:	480b      	ldr	r0, [pc, #44]	; (8009aa0 <prvInitialiseTaskLists+0x74>)
 8009a72:	f7fe fd05 	bl	8008480 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a76:	4b0b      	ldr	r3, [pc, #44]	; (8009aa4 <prvInitialiseTaskLists+0x78>)
 8009a78:	4a05      	ldr	r2, [pc, #20]	; (8009a90 <prvInitialiseTaskLists+0x64>)
 8009a7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a7c:	4b0a      	ldr	r3, [pc, #40]	; (8009aa8 <prvInitialiseTaskLists+0x7c>)
 8009a7e:	4a05      	ldr	r2, [pc, #20]	; (8009a94 <prvInitialiseTaskLists+0x68>)
 8009a80:	601a      	str	r2, [r3, #0]
}
 8009a82:	bf00      	nop
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	24000818 	.word	0x24000818
 8009a90:	24000c78 	.word	0x24000c78
 8009a94:	24000c8c 	.word	0x24000c8c
 8009a98:	24000ca8 	.word	0x24000ca8
 8009a9c:	24000cbc 	.word	0x24000cbc
 8009aa0:	24000cd4 	.word	0x24000cd4
 8009aa4:	24000ca0 	.word	0x24000ca0
 8009aa8:	24000ca4 	.word	0x24000ca4

08009aac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ab2:	e019      	b.n	8009ae8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ab4:	f000 fdc2 	bl	800a63c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ab8:	4b0f      	ldr	r3, [pc, #60]	; (8009af8 <prvCheckTasksWaitingTermination+0x4c>)
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7fe fd65 	bl	8008594 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009aca:	4b0c      	ldr	r3, [pc, #48]	; (8009afc <prvCheckTasksWaitingTermination+0x50>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	4a0a      	ldr	r2, [pc, #40]	; (8009afc <prvCheckTasksWaitingTermination+0x50>)
 8009ad2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ad4:	4b0a      	ldr	r3, [pc, #40]	; (8009b00 <prvCheckTasksWaitingTermination+0x54>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	4a09      	ldr	r2, [pc, #36]	; (8009b00 <prvCheckTasksWaitingTermination+0x54>)
 8009adc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ade:	f000 fddb 	bl	800a698 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f80e 	bl	8009b04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ae8:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <prvCheckTasksWaitingTermination+0x54>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1e1      	bne.n	8009ab4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009af0:	bf00      	nop
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	24000cbc 	.word	0x24000cbc
 8009afc:	24000ce8 	.word	0x24000ce8
 8009b00:	24000cd0 	.word	0x24000cd0

08009b04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d108      	bne.n	8009b28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 ff6a 	bl	800a9f4 <vPortFree>
				vPortFree( pxTCB );
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 ff67 	bl	800a9f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b26:	e017      	b.n	8009b58 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d103      	bne.n	8009b3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 ff5e 	bl	800a9f4 <vPortFree>
	}
 8009b38:	e00e      	b.n	8009b58 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d009      	beq.n	8009b58 <prvDeleteTCB+0x54>
 8009b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	60fb      	str	r3, [r7, #12]
 8009b56:	e7fe      	b.n	8009b56 <prvDeleteTCB+0x52>
	}
 8009b58:	bf00      	nop
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b66:	4b0c      	ldr	r3, [pc, #48]	; (8009b98 <prvResetNextTaskUnblockTime+0x38>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d104      	bne.n	8009b7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b70:	4b0a      	ldr	r3, [pc, #40]	; (8009b9c <prvResetNextTaskUnblockTime+0x3c>)
 8009b72:	f04f 32ff 	mov.w	r2, #4294967295
 8009b76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b78:	e008      	b.n	8009b8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b7a:	4b07      	ldr	r3, [pc, #28]	; (8009b98 <prvResetNextTaskUnblockTime+0x38>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	4a04      	ldr	r2, [pc, #16]	; (8009b9c <prvResetNextTaskUnblockTime+0x3c>)
 8009b8a:	6013      	str	r3, [r2, #0]
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	24000ca0 	.word	0x24000ca0
 8009b9c:	24000d08 	.word	0x24000d08

08009ba0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ba6:	4b0b      	ldr	r3, [pc, #44]	; (8009bd4 <xTaskGetSchedulerState+0x34>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d102      	bne.n	8009bb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	607b      	str	r3, [r7, #4]
 8009bb2:	e008      	b.n	8009bc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bb4:	4b08      	ldr	r3, [pc, #32]	; (8009bd8 <xTaskGetSchedulerState+0x38>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d102      	bne.n	8009bc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	607b      	str	r3, [r7, #4]
 8009bc0:	e001      	b.n	8009bc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009bc6:	687b      	ldr	r3, [r7, #4]
	}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr
 8009bd4:	24000cf4 	.word	0x24000cf4
 8009bd8:	24000d10 	.word	0x24000d10

08009bdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009be8:	2300      	movs	r3, #0
 8009bea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d054      	beq.n	8009c9c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009bf2:	4b2d      	ldr	r3, [pc, #180]	; (8009ca8 <xTaskPriorityDisinherit+0xcc>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	693a      	ldr	r2, [r7, #16]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d009      	beq.n	8009c10 <xTaskPriorityDisinherit+0x34>
 8009bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c00:	f383 8811 	msr	BASEPRI, r3
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	60fb      	str	r3, [r7, #12]
 8009c0e:	e7fe      	b.n	8009c0e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d109      	bne.n	8009c2c <xTaskPriorityDisinherit+0x50>
 8009c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	60bb      	str	r3, [r7, #8]
 8009c2a:	e7fe      	b.n	8009c2a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c30:	1e5a      	subs	r2, r3, #1
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d02c      	beq.n	8009c9c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d128      	bne.n	8009c9c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	3304      	adds	r3, #4
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe fca0 	bl	8008594 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c6c:	4b0f      	ldr	r3, [pc, #60]	; (8009cac <xTaskPriorityDisinherit+0xd0>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d903      	bls.n	8009c7c <xTaskPriorityDisinherit+0xa0>
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c78:	4a0c      	ldr	r2, [pc, #48]	; (8009cac <xTaskPriorityDisinherit+0xd0>)
 8009c7a:	6013      	str	r3, [r2, #0]
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c80:	4613      	mov	r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4a09      	ldr	r2, [pc, #36]	; (8009cb0 <xTaskPriorityDisinherit+0xd4>)
 8009c8a:	441a      	add	r2, r3
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	3304      	adds	r3, #4
 8009c90:	4619      	mov	r1, r3
 8009c92:	4610      	mov	r0, r2
 8009c94:	f7fe fc21 	bl	80084da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c9c:	697b      	ldr	r3, [r7, #20]
	}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	24000814 	.word	0x24000814
 8009cac:	24000cf0 	.word	0x24000cf0
 8009cb0:	24000818 	.word	0x24000818

08009cb4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009cbe:	4b21      	ldr	r3, [pc, #132]	; (8009d44 <prvAddCurrentTaskToDelayedList+0x90>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cc4:	4b20      	ldr	r3, [pc, #128]	; (8009d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3304      	adds	r3, #4
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fe fc62 	bl	8008594 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd6:	d10a      	bne.n	8009cee <prvAddCurrentTaskToDelayedList+0x3a>
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d007      	beq.n	8009cee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cde:	4b1a      	ldr	r3, [pc, #104]	; (8009d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	3304      	adds	r3, #4
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	4819      	ldr	r0, [pc, #100]	; (8009d4c <prvAddCurrentTaskToDelayedList+0x98>)
 8009ce8:	f7fe fbf7 	bl	80084da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009cec:	e026      	b.n	8009d3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009cf6:	4b14      	ldr	r3, [pc, #80]	; (8009d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d209      	bcs.n	8009d1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d06:	4b12      	ldr	r3, [pc, #72]	; (8009d50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	4b0f      	ldr	r3, [pc, #60]	; (8009d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	3304      	adds	r3, #4
 8009d10:	4619      	mov	r1, r3
 8009d12:	4610      	mov	r0, r2
 8009d14:	f7fe fc05 	bl	8008522 <vListInsert>
}
 8009d18:	e010      	b.n	8009d3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d1a:	4b0e      	ldr	r3, [pc, #56]	; (8009d54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	4b0a      	ldr	r3, [pc, #40]	; (8009d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	3304      	adds	r3, #4
 8009d24:	4619      	mov	r1, r3
 8009d26:	4610      	mov	r0, r2
 8009d28:	f7fe fbfb 	bl	8008522 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d2c:	4b0a      	ldr	r3, [pc, #40]	; (8009d58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68ba      	ldr	r2, [r7, #8]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d202      	bcs.n	8009d3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009d36:	4a08      	ldr	r2, [pc, #32]	; (8009d58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	6013      	str	r3, [r2, #0]
}
 8009d3c:	bf00      	nop
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	24000cec 	.word	0x24000cec
 8009d48:	24000814 	.word	0x24000814
 8009d4c:	24000cd4 	.word	0x24000cd4
 8009d50:	24000ca4 	.word	0x24000ca4
 8009d54:	24000ca0 	.word	0x24000ca0
 8009d58:	24000d08 	.word	0x24000d08

08009d5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b08a      	sub	sp, #40	; 0x28
 8009d60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d62:	2300      	movs	r3, #0
 8009d64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d66:	f000 faff 	bl	800a368 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009d6a:	4b1c      	ldr	r3, [pc, #112]	; (8009ddc <xTimerCreateTimerTask+0x80>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d021      	beq.n	8009db6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009d72:	2300      	movs	r3, #0
 8009d74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009d76:	2300      	movs	r3, #0
 8009d78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009d7a:	1d3a      	adds	r2, r7, #4
 8009d7c:	f107 0108 	add.w	r1, r7, #8
 8009d80:	f107 030c 	add.w	r3, r7, #12
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7fe fb61 	bl	800844c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009d8a:	6879      	ldr	r1, [r7, #4]
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	9202      	str	r2, [sp, #8]
 8009d92:	9301      	str	r3, [sp, #4]
 8009d94:	2302      	movs	r3, #2
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	460a      	mov	r2, r1
 8009d9c:	4910      	ldr	r1, [pc, #64]	; (8009de0 <xTimerCreateTimerTask+0x84>)
 8009d9e:	4811      	ldr	r0, [pc, #68]	; (8009de4 <xTimerCreateTimerTask+0x88>)
 8009da0:	f7ff f8f6 	bl	8008f90 <xTaskCreateStatic>
 8009da4:	4602      	mov	r2, r0
 8009da6:	4b10      	ldr	r3, [pc, #64]	; (8009de8 <xTimerCreateTimerTask+0x8c>)
 8009da8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009daa:	4b0f      	ldr	r3, [pc, #60]	; (8009de8 <xTimerCreateTimerTask+0x8c>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d001      	beq.n	8009db6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009db2:	2301      	movs	r3, #1
 8009db4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d109      	bne.n	8009dd0 <xTimerCreateTimerTask+0x74>
 8009dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	613b      	str	r3, [r7, #16]
 8009dce:	e7fe      	b.n	8009dce <xTimerCreateTimerTask+0x72>
	return xReturn;
 8009dd0:	697b      	ldr	r3, [r7, #20]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3718      	adds	r7, #24
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	24000d44 	.word	0x24000d44
 8009de0:	0800b53c 	.word	0x0800b53c
 8009de4:	08009f1d 	.word	0x08009f1d
 8009de8:	24000d48 	.word	0x24000d48

08009dec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08a      	sub	sp, #40	; 0x28
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
 8009df8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d109      	bne.n	8009e18 <xTimerGenericCommand+0x2c>
 8009e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e08:	f383 8811 	msr	BASEPRI, r3
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	623b      	str	r3, [r7, #32]
 8009e16:	e7fe      	b.n	8009e16 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e18:	4b19      	ldr	r3, [pc, #100]	; (8009e80 <xTimerGenericCommand+0x94>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d02a      	beq.n	8009e76 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	2b05      	cmp	r3, #5
 8009e30:	dc18      	bgt.n	8009e64 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009e32:	f7ff feb5 	bl	8009ba0 <xTaskGetSchedulerState>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d109      	bne.n	8009e50 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e3c:	4b10      	ldr	r3, [pc, #64]	; (8009e80 <xTimerGenericCommand+0x94>)
 8009e3e:	6818      	ldr	r0, [r3, #0]
 8009e40:	f107 0110 	add.w	r1, r7, #16
 8009e44:	2300      	movs	r3, #0
 8009e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e48:	f7fe fccc 	bl	80087e4 <xQueueGenericSend>
 8009e4c:	6278      	str	r0, [r7, #36]	; 0x24
 8009e4e:	e012      	b.n	8009e76 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009e50:	4b0b      	ldr	r3, [pc, #44]	; (8009e80 <xTimerGenericCommand+0x94>)
 8009e52:	6818      	ldr	r0, [r3, #0]
 8009e54:	f107 0110 	add.w	r1, r7, #16
 8009e58:	2300      	movs	r3, #0
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f7fe fcc2 	bl	80087e4 <xQueueGenericSend>
 8009e60:	6278      	str	r0, [r7, #36]	; 0x24
 8009e62:	e008      	b.n	8009e76 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e64:	4b06      	ldr	r3, [pc, #24]	; (8009e80 <xTimerGenericCommand+0x94>)
 8009e66:	6818      	ldr	r0, [r3, #0]
 8009e68:	f107 0110 	add.w	r1, r7, #16
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	f7fe fdb2 	bl	80089d8 <xQueueGenericSendFromISR>
 8009e74:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3728      	adds	r7, #40	; 0x28
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	24000d44 	.word	0x24000d44

08009e84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b088      	sub	sp, #32
 8009e88:	af02      	add	r7, sp, #8
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e8e:	4b22      	ldr	r3, [pc, #136]	; (8009f18 <prvProcessExpiredTimer+0x94>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fe fb79 	bl	8008594 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ea8:	f003 0304 	and.w	r3, r3, #4
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d021      	beq.n	8009ef4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	699a      	ldr	r2, [r3, #24]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	18d1      	adds	r1, r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	683a      	ldr	r2, [r7, #0]
 8009ebc:	6978      	ldr	r0, [r7, #20]
 8009ebe:	f000 f8d1 	bl	800a064 <prvInsertTimerInActiveList>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d01e      	beq.n	8009f06 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ec8:	2300      	movs	r3, #0
 8009eca:	9300      	str	r3, [sp, #0]
 8009ecc:	2300      	movs	r3, #0
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	6978      	ldr	r0, [r7, #20]
 8009ed4:	f7ff ff8a 	bl	8009dec <xTimerGenericCommand>
 8009ed8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d112      	bne.n	8009f06 <prvProcessExpiredTimer+0x82>
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	60fb      	str	r3, [r7, #12]
 8009ef2:	e7fe      	b.n	8009ef2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009efa:	f023 0301 	bic.w	r3, r3, #1
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	6978      	ldr	r0, [r7, #20]
 8009f0c:	4798      	blx	r3
}
 8009f0e:	bf00      	nop
 8009f10:	3718      	adds	r7, #24
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	24000d3c 	.word	0x24000d3c

08009f1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f24:	f107 0308 	add.w	r3, r7, #8
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f000 f857 	bl	8009fdc <prvGetNextExpireTime>
 8009f2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	4619      	mov	r1, r3
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 f803 	bl	8009f40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009f3a:	f000 f8d5 	bl	800a0e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f3e:	e7f1      	b.n	8009f24 <prvTimerTask+0x8>

08009f40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009f4a:	f7ff fa57 	bl	80093fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f4e:	f107 0308 	add.w	r3, r7, #8
 8009f52:	4618      	mov	r0, r3
 8009f54:	f000 f866 	bl	800a024 <prvSampleTimeNow>
 8009f58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d130      	bne.n	8009fc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d10a      	bne.n	8009f7c <prvProcessTimerOrBlockTask+0x3c>
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d806      	bhi.n	8009f7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f6e:	f7ff fa53 	bl	8009418 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f72:	68f9      	ldr	r1, [r7, #12]
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7ff ff85 	bl	8009e84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f7a:	e024      	b.n	8009fc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d008      	beq.n	8009f94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f82:	4b13      	ldr	r3, [pc, #76]	; (8009fd0 <prvProcessTimerOrBlockTask+0x90>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d101      	bne.n	8009f90 <prvProcessTimerOrBlockTask+0x50>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e000      	b.n	8009f92 <prvProcessTimerOrBlockTask+0x52>
 8009f90:	2300      	movs	r3, #0
 8009f92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f94:	4b0f      	ldr	r3, [pc, #60]	; (8009fd4 <prvProcessTimerOrBlockTask+0x94>)
 8009f96:	6818      	ldr	r0, [r3, #0]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	1ad3      	subs	r3, r2, r3
 8009f9e:	683a      	ldr	r2, [r7, #0]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	f7fe ffc1 	bl	8008f28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009fa6:	f7ff fa37 	bl	8009418 <xTaskResumeAll>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d10a      	bne.n	8009fc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009fb0:	4b09      	ldr	r3, [pc, #36]	; (8009fd8 <prvProcessTimerOrBlockTask+0x98>)
 8009fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb6:	601a      	str	r2, [r3, #0]
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	f3bf 8f6f 	isb	sy
}
 8009fc0:	e001      	b.n	8009fc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009fc2:	f7ff fa29 	bl	8009418 <xTaskResumeAll>
}
 8009fc6:	bf00      	nop
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	24000d40 	.word	0x24000d40
 8009fd4:	24000d44 	.word	0x24000d44
 8009fd8:	e000ed04 	.word	0xe000ed04

08009fdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009fe4:	4b0e      	ldr	r3, [pc, #56]	; (800a020 <prvGetNextExpireTime+0x44>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d101      	bne.n	8009ff2 <prvGetNextExpireTime+0x16>
 8009fee:	2201      	movs	r2, #1
 8009ff0:	e000      	b.n	8009ff4 <prvGetNextExpireTime+0x18>
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d105      	bne.n	800a00c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a000:	4b07      	ldr	r3, [pc, #28]	; (800a020 <prvGetNextExpireTime+0x44>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	60fb      	str	r3, [r7, #12]
 800a00a:	e001      	b.n	800a010 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a00c:	2300      	movs	r3, #0
 800a00e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a010:	68fb      	ldr	r3, [r7, #12]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3714      	adds	r7, #20
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop
 800a020:	24000d3c 	.word	0x24000d3c

0800a024 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a02c:	f7ff fa90 	bl	8009550 <xTaskGetTickCount>
 800a030:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a032:	4b0b      	ldr	r3, [pc, #44]	; (800a060 <prvSampleTimeNow+0x3c>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d205      	bcs.n	800a048 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a03c:	f000 f930 	bl	800a2a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	601a      	str	r2, [r3, #0]
 800a046:	e002      	b.n	800a04e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a04e:	4a04      	ldr	r2, [pc, #16]	; (800a060 <prvSampleTimeNow+0x3c>)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a054:	68fb      	ldr	r3, [r7, #12]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	24000d4c 	.word	0x24000d4c

0800a064 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
 800a070:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a072:	2300      	movs	r3, #0
 800a074:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	429a      	cmp	r2, r3
 800a088:	d812      	bhi.n	800a0b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	1ad2      	subs	r2, r2, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	699b      	ldr	r3, [r3, #24]
 800a094:	429a      	cmp	r2, r3
 800a096:	d302      	bcc.n	800a09e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a098:	2301      	movs	r3, #1
 800a09a:	617b      	str	r3, [r7, #20]
 800a09c:	e01b      	b.n	800a0d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a09e:	4b10      	ldr	r3, [pc, #64]	; (800a0e0 <prvInsertTimerInActiveList+0x7c>)
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	3304      	adds	r3, #4
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	f7fe fa3a 	bl	8008522 <vListInsert>
 800a0ae:	e012      	b.n	800a0d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d206      	bcs.n	800a0c6 <prvInsertTimerInActiveList+0x62>
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d302      	bcc.n	800a0c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	617b      	str	r3, [r7, #20]
 800a0c4:	e007      	b.n	800a0d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0c6:	4b07      	ldr	r3, [pc, #28]	; (800a0e4 <prvInsertTimerInActiveList+0x80>)
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	f7fe fa26 	bl	8008522 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a0d6:	697b      	ldr	r3, [r7, #20]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3718      	adds	r7, #24
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	24000d40 	.word	0x24000d40
 800a0e4:	24000d3c 	.word	0x24000d3c

0800a0e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b08e      	sub	sp, #56	; 0x38
 800a0ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0ee:	e0c6      	b.n	800a27e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	da17      	bge.n	800a126 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a0f6:	1d3b      	adds	r3, r7, #4
 800a0f8:	3304      	adds	r3, #4
 800a0fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d109      	bne.n	800a116 <prvProcessReceivedCommands+0x2e>
 800a102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	61fb      	str	r3, [r7, #28]
 800a114:	e7fe      	b.n	800a114 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a11c:	6850      	ldr	r0, [r2, #4]
 800a11e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a120:	6892      	ldr	r2, [r2, #8]
 800a122:	4611      	mov	r1, r2
 800a124:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f2c0 80a7 	blt.w	800a27c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a134:	695b      	ldr	r3, [r3, #20]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d004      	beq.n	800a144 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13c:	3304      	adds	r3, #4
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fe fa28 	bl	8008594 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a144:	463b      	mov	r3, r7
 800a146:	4618      	mov	r0, r3
 800a148:	f7ff ff6c 	bl	800a024 <prvSampleTimeNow>
 800a14c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2b09      	cmp	r3, #9
 800a152:	f200 8094 	bhi.w	800a27e <prvProcessReceivedCommands+0x196>
 800a156:	a201      	add	r2, pc, #4	; (adr r2, 800a15c <prvProcessReceivedCommands+0x74>)
 800a158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15c:	0800a185 	.word	0x0800a185
 800a160:	0800a185 	.word	0x0800a185
 800a164:	0800a185 	.word	0x0800a185
 800a168:	0800a1f7 	.word	0x0800a1f7
 800a16c:	0800a20b 	.word	0x0800a20b
 800a170:	0800a253 	.word	0x0800a253
 800a174:	0800a185 	.word	0x0800a185
 800a178:	0800a185 	.word	0x0800a185
 800a17c:	0800a1f7 	.word	0x0800a1f7
 800a180:	0800a20b 	.word	0x0800a20b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a18a:	f043 0301 	orr.w	r3, r3, #1
 800a18e:	b2da      	uxtb	r2, r3
 800a190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	18d1      	adds	r1, r2, r3
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1a4:	f7ff ff5e 	bl	800a064 <prvInsertTimerInActiveList>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d067      	beq.n	800a27e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d05c      	beq.n	800a27e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	441a      	add	r2, r3
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1d6:	f7ff fe09 	bl	8009dec <xTimerGenericCommand>
 800a1da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a1dc:	6a3b      	ldr	r3, [r7, #32]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d14d      	bne.n	800a27e <prvProcessReceivedCommands+0x196>
 800a1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	61bb      	str	r3, [r7, #24]
 800a1f4:	e7fe      	b.n	800a1f4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1fc:	f023 0301 	bic.w	r3, r3, #1
 800a200:	b2da      	uxtb	r2, r3
 800a202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a204:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a208:	e039      	b.n	800a27e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a210:	f043 0301 	orr.w	r3, r3, #1
 800a214:	b2da      	uxtb	r2, r3
 800a216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a218:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a220:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d109      	bne.n	800a23e <prvProcessReceivedCommands+0x156>
 800a22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22e:	f383 8811 	msr	BASEPRI, r3
 800a232:	f3bf 8f6f 	isb	sy
 800a236:	f3bf 8f4f 	dsb	sy
 800a23a:	617b      	str	r3, [r7, #20]
 800a23c:	e7fe      	b.n	800a23c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a240:	699a      	ldr	r2, [r3, #24]
 800a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a244:	18d1      	adds	r1, r2, r3
 800a246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a24a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a24c:	f7ff ff0a 	bl	800a064 <prvInsertTimerInActiveList>
					break;
 800a250:	e015      	b.n	800a27e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a258:	f003 0302 	and.w	r3, r3, #2
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d103      	bne.n	800a268 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800a260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a262:	f000 fbc7 	bl	800a9f4 <vPortFree>
 800a266:	e00a      	b.n	800a27e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a26e:	f023 0301 	bic.w	r3, r3, #1
 800a272:	b2da      	uxtb	r2, r3
 800a274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a276:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a27a:	e000      	b.n	800a27e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a27c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a27e:	4b07      	ldr	r3, [pc, #28]	; (800a29c <prvProcessReceivedCommands+0x1b4>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	1d39      	adds	r1, r7, #4
 800a284:	2200      	movs	r2, #0
 800a286:	4618      	mov	r0, r3
 800a288:	f7fe fc3a 	bl	8008b00 <xQueueReceive>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	f47f af2e 	bne.w	800a0f0 <prvProcessReceivedCommands+0x8>
	}
}
 800a294:	bf00      	nop
 800a296:	3730      	adds	r7, #48	; 0x30
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	24000d44 	.word	0x24000d44

0800a2a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b088      	sub	sp, #32
 800a2a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a2a6:	e047      	b.n	800a338 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2a8:	4b2d      	ldr	r3, [pc, #180]	; (800a360 <prvSwitchTimerLists+0xc0>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2b2:	4b2b      	ldr	r3, [pc, #172]	; (800a360 <prvSwitchTimerLists+0xc0>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	3304      	adds	r3, #4
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7fe f967 	bl	8008594 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6a1b      	ldr	r3, [r3, #32]
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2d4:	f003 0304 	and.w	r3, r3, #4
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d02d      	beq.n	800a338 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	699b      	ldr	r3, [r3, #24]
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d90e      	bls.n	800a30c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2fa:	4b19      	ldr	r3, [pc, #100]	; (800a360 <prvSwitchTimerLists+0xc0>)
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	3304      	adds	r3, #4
 800a302:	4619      	mov	r1, r3
 800a304:	4610      	mov	r0, r2
 800a306:	f7fe f90c 	bl	8008522 <vListInsert>
 800a30a:	e015      	b.n	800a338 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a30c:	2300      	movs	r3, #0
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	2300      	movs	r3, #0
 800a312:	693a      	ldr	r2, [r7, #16]
 800a314:	2100      	movs	r1, #0
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f7ff fd68 	bl	8009dec <xTimerGenericCommand>
 800a31c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d109      	bne.n	800a338 <prvSwitchTimerLists+0x98>
 800a324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a328:	f383 8811 	msr	BASEPRI, r3
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	603b      	str	r3, [r7, #0]
 800a336:	e7fe      	b.n	800a336 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a338:	4b09      	ldr	r3, [pc, #36]	; (800a360 <prvSwitchTimerLists+0xc0>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1b2      	bne.n	800a2a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a342:	4b07      	ldr	r3, [pc, #28]	; (800a360 <prvSwitchTimerLists+0xc0>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a348:	4b06      	ldr	r3, [pc, #24]	; (800a364 <prvSwitchTimerLists+0xc4>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a04      	ldr	r2, [pc, #16]	; (800a360 <prvSwitchTimerLists+0xc0>)
 800a34e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a350:	4a04      	ldr	r2, [pc, #16]	; (800a364 <prvSwitchTimerLists+0xc4>)
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	6013      	str	r3, [r2, #0]
}
 800a356:	bf00      	nop
 800a358:	3718      	adds	r7, #24
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	24000d3c 	.word	0x24000d3c
 800a364:	24000d40 	.word	0x24000d40

0800a368 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a36e:	f000 f965 	bl	800a63c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a372:	4b15      	ldr	r3, [pc, #84]	; (800a3c8 <prvCheckForValidListAndQueue+0x60>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d120      	bne.n	800a3bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a37a:	4814      	ldr	r0, [pc, #80]	; (800a3cc <prvCheckForValidListAndQueue+0x64>)
 800a37c:	f7fe f880 	bl	8008480 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a380:	4813      	ldr	r0, [pc, #76]	; (800a3d0 <prvCheckForValidListAndQueue+0x68>)
 800a382:	f7fe f87d 	bl	8008480 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a386:	4b13      	ldr	r3, [pc, #76]	; (800a3d4 <prvCheckForValidListAndQueue+0x6c>)
 800a388:	4a10      	ldr	r2, [pc, #64]	; (800a3cc <prvCheckForValidListAndQueue+0x64>)
 800a38a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a38c:	4b12      	ldr	r3, [pc, #72]	; (800a3d8 <prvCheckForValidListAndQueue+0x70>)
 800a38e:	4a10      	ldr	r2, [pc, #64]	; (800a3d0 <prvCheckForValidListAndQueue+0x68>)
 800a390:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a392:	2300      	movs	r3, #0
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	4b11      	ldr	r3, [pc, #68]	; (800a3dc <prvCheckForValidListAndQueue+0x74>)
 800a398:	4a11      	ldr	r2, [pc, #68]	; (800a3e0 <prvCheckForValidListAndQueue+0x78>)
 800a39a:	2110      	movs	r1, #16
 800a39c:	200a      	movs	r0, #10
 800a39e:	f7fe f98b 	bl	80086b8 <xQueueGenericCreateStatic>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	4b08      	ldr	r3, [pc, #32]	; (800a3c8 <prvCheckForValidListAndQueue+0x60>)
 800a3a6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a3a8:	4b07      	ldr	r3, [pc, #28]	; (800a3c8 <prvCheckForValidListAndQueue+0x60>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d005      	beq.n	800a3bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a3b0:	4b05      	ldr	r3, [pc, #20]	; (800a3c8 <prvCheckForValidListAndQueue+0x60>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	490b      	ldr	r1, [pc, #44]	; (800a3e4 <prvCheckForValidListAndQueue+0x7c>)
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fe fd8e 	bl	8008ed8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3bc:	f000 f96c 	bl	800a698 <vPortExitCritical>
}
 800a3c0:	bf00      	nop
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	24000d44 	.word	0x24000d44
 800a3cc:	24000d14 	.word	0x24000d14
 800a3d0:	24000d28 	.word	0x24000d28
 800a3d4:	24000d3c 	.word	0x24000d3c
 800a3d8:	24000d40 	.word	0x24000d40
 800a3dc:	24000df0 	.word	0x24000df0
 800a3e0:	24000d50 	.word	0x24000d50
 800a3e4:	0800b544 	.word	0x0800b544

0800a3e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	3b04      	subs	r3, #4
 800a3f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a400:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	3b04      	subs	r3, #4
 800a406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	f023 0201 	bic.w	r2, r3, #1
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	3b04      	subs	r3, #4
 800a416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a418:	4a0c      	ldr	r2, [pc, #48]	; (800a44c <pxPortInitialiseStack+0x64>)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	3b14      	subs	r3, #20
 800a422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	3b04      	subs	r3, #4
 800a42e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f06f 0202 	mvn.w	r2, #2
 800a436:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	3b20      	subs	r3, #32
 800a43c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a43e:	68fb      	ldr	r3, [r7, #12]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3714      	adds	r7, #20
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr
 800a44c:	0800a451 	.word	0x0800a451

0800a450 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a456:	2300      	movs	r3, #0
 800a458:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a45a:	4b11      	ldr	r3, [pc, #68]	; (800a4a0 <prvTaskExitError+0x50>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a462:	d009      	beq.n	800a478 <prvTaskExitError+0x28>
 800a464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a468:	f383 8811 	msr	BASEPRI, r3
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	60fb      	str	r3, [r7, #12]
 800a476:	e7fe      	b.n	800a476 <prvTaskExitError+0x26>
 800a478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47c:	f383 8811 	msr	BASEPRI, r3
 800a480:	f3bf 8f6f 	isb	sy
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a48a:	bf00      	nop
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d0fc      	beq.n	800a48c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a492:	bf00      	nop
 800a494:	3714      	adds	r7, #20
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	24000010 	.word	0x24000010
	...

0800a4b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a4b0:	4b07      	ldr	r3, [pc, #28]	; (800a4d0 <pxCurrentTCBConst2>)
 800a4b2:	6819      	ldr	r1, [r3, #0]
 800a4b4:	6808      	ldr	r0, [r1, #0]
 800a4b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ba:	f380 8809 	msr	PSP, r0
 800a4be:	f3bf 8f6f 	isb	sy
 800a4c2:	f04f 0000 	mov.w	r0, #0
 800a4c6:	f380 8811 	msr	BASEPRI, r0
 800a4ca:	4770      	bx	lr
 800a4cc:	f3af 8000 	nop.w

0800a4d0 <pxCurrentTCBConst2>:
 800a4d0:	24000814 	.word	0x24000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a4d4:	bf00      	nop
 800a4d6:	bf00      	nop

0800a4d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a4d8:	4808      	ldr	r0, [pc, #32]	; (800a4fc <prvPortStartFirstTask+0x24>)
 800a4da:	6800      	ldr	r0, [r0, #0]
 800a4dc:	6800      	ldr	r0, [r0, #0]
 800a4de:	f380 8808 	msr	MSP, r0
 800a4e2:	f04f 0000 	mov.w	r0, #0
 800a4e6:	f380 8814 	msr	CONTROL, r0
 800a4ea:	b662      	cpsie	i
 800a4ec:	b661      	cpsie	f
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	df00      	svc	0
 800a4f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a4fa:	bf00      	nop
 800a4fc:	e000ed08 	.word	0xe000ed08

0800a500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a506:	4b44      	ldr	r3, [pc, #272]	; (800a618 <xPortStartScheduler+0x118>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a44      	ldr	r2, [pc, #272]	; (800a61c <xPortStartScheduler+0x11c>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d109      	bne.n	800a524 <xPortStartScheduler+0x24>
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	613b      	str	r3, [r7, #16]
 800a522:	e7fe      	b.n	800a522 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a524:	4b3c      	ldr	r3, [pc, #240]	; (800a618 <xPortStartScheduler+0x118>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a3d      	ldr	r2, [pc, #244]	; (800a620 <xPortStartScheduler+0x120>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d109      	bne.n	800a542 <xPortStartScheduler+0x42>
 800a52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a532:	f383 8811 	msr	BASEPRI, r3
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	60fb      	str	r3, [r7, #12]
 800a540:	e7fe      	b.n	800a540 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a542:	4b38      	ldr	r3, [pc, #224]	; (800a624 <xPortStartScheduler+0x124>)
 800a544:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	22ff      	movs	r2, #255	; 0xff
 800a552:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a55c:	78fb      	ldrb	r3, [r7, #3]
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a564:	b2da      	uxtb	r2, r3
 800a566:	4b30      	ldr	r3, [pc, #192]	; (800a628 <xPortStartScheduler+0x128>)
 800a568:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a56a:	4b30      	ldr	r3, [pc, #192]	; (800a62c <xPortStartScheduler+0x12c>)
 800a56c:	2207      	movs	r2, #7
 800a56e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a570:	e009      	b.n	800a586 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a572:	4b2e      	ldr	r3, [pc, #184]	; (800a62c <xPortStartScheduler+0x12c>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	3b01      	subs	r3, #1
 800a578:	4a2c      	ldr	r2, [pc, #176]	; (800a62c <xPortStartScheduler+0x12c>)
 800a57a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a57c:	78fb      	ldrb	r3, [r7, #3]
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	005b      	lsls	r3, r3, #1
 800a582:	b2db      	uxtb	r3, r3
 800a584:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a586:	78fb      	ldrb	r3, [r7, #3]
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a58e:	2b80      	cmp	r3, #128	; 0x80
 800a590:	d0ef      	beq.n	800a572 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a592:	4b26      	ldr	r3, [pc, #152]	; (800a62c <xPortStartScheduler+0x12c>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f1c3 0307 	rsb	r3, r3, #7
 800a59a:	2b04      	cmp	r3, #4
 800a59c:	d009      	beq.n	800a5b2 <xPortStartScheduler+0xb2>
 800a59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a2:	f383 8811 	msr	BASEPRI, r3
 800a5a6:	f3bf 8f6f 	isb	sy
 800a5aa:	f3bf 8f4f 	dsb	sy
 800a5ae:	60bb      	str	r3, [r7, #8]
 800a5b0:	e7fe      	b.n	800a5b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a5b2:	4b1e      	ldr	r3, [pc, #120]	; (800a62c <xPortStartScheduler+0x12c>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	021b      	lsls	r3, r3, #8
 800a5b8:	4a1c      	ldr	r2, [pc, #112]	; (800a62c <xPortStartScheduler+0x12c>)
 800a5ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a5bc:	4b1b      	ldr	r3, [pc, #108]	; (800a62c <xPortStartScheduler+0x12c>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5c4:	4a19      	ldr	r2, [pc, #100]	; (800a62c <xPortStartScheduler+0x12c>)
 800a5c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a5d0:	4b17      	ldr	r3, [pc, #92]	; (800a630 <xPortStartScheduler+0x130>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a16      	ldr	r2, [pc, #88]	; (800a630 <xPortStartScheduler+0x130>)
 800a5d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a5da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a5dc:	4b14      	ldr	r3, [pc, #80]	; (800a630 <xPortStartScheduler+0x130>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a13      	ldr	r2, [pc, #76]	; (800a630 <xPortStartScheduler+0x130>)
 800a5e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a5e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a5e8:	f000 f8d6 	bl	800a798 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a5ec:	4b11      	ldr	r3, [pc, #68]	; (800a634 <xPortStartScheduler+0x134>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a5f2:	f000 f8f5 	bl	800a7e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a5f6:	4b10      	ldr	r3, [pc, #64]	; (800a638 <xPortStartScheduler+0x138>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a0f      	ldr	r2, [pc, #60]	; (800a638 <xPortStartScheduler+0x138>)
 800a5fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a600:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a602:	f7ff ff69 	bl	800a4d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a606:	f7ff f86b 	bl	80096e0 <vTaskSwitchContext>
	prvTaskExitError();
 800a60a:	f7ff ff21 	bl	800a450 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3718      	adds	r7, #24
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	e000ed00 	.word	0xe000ed00
 800a61c:	410fc271 	.word	0x410fc271
 800a620:	410fc270 	.word	0x410fc270
 800a624:	e000e400 	.word	0xe000e400
 800a628:	24000e40 	.word	0x24000e40
 800a62c:	24000e44 	.word	0x24000e44
 800a630:	e000ed20 	.word	0xe000ed20
 800a634:	24000010 	.word	0x24000010
 800a638:	e000ef34 	.word	0xe000ef34

0800a63c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a654:	4b0e      	ldr	r3, [pc, #56]	; (800a690 <vPortEnterCritical+0x54>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	3301      	adds	r3, #1
 800a65a:	4a0d      	ldr	r2, [pc, #52]	; (800a690 <vPortEnterCritical+0x54>)
 800a65c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a65e:	4b0c      	ldr	r3, [pc, #48]	; (800a690 <vPortEnterCritical+0x54>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d10e      	bne.n	800a684 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a666:	4b0b      	ldr	r3, [pc, #44]	; (800a694 <vPortEnterCritical+0x58>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d009      	beq.n	800a684 <vPortEnterCritical+0x48>
 800a670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a674:	f383 8811 	msr	BASEPRI, r3
 800a678:	f3bf 8f6f 	isb	sy
 800a67c:	f3bf 8f4f 	dsb	sy
 800a680:	603b      	str	r3, [r7, #0]
 800a682:	e7fe      	b.n	800a682 <vPortEnterCritical+0x46>
	}
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	24000010 	.word	0x24000010
 800a694:	e000ed04 	.word	0xe000ed04

0800a698 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a69e:	4b11      	ldr	r3, [pc, #68]	; (800a6e4 <vPortExitCritical+0x4c>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d109      	bne.n	800a6ba <vPortExitCritical+0x22>
 800a6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6aa:	f383 8811 	msr	BASEPRI, r3
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	f3bf 8f4f 	dsb	sy
 800a6b6:	607b      	str	r3, [r7, #4]
 800a6b8:	e7fe      	b.n	800a6b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a6ba:	4b0a      	ldr	r3, [pc, #40]	; (800a6e4 <vPortExitCritical+0x4c>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	4a08      	ldr	r2, [pc, #32]	; (800a6e4 <vPortExitCritical+0x4c>)
 800a6c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a6c4:	4b07      	ldr	r3, [pc, #28]	; (800a6e4 <vPortExitCritical+0x4c>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d104      	bne.n	800a6d6 <vPortExitCritical+0x3e>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a6d6:	bf00      	nop
 800a6d8:	370c      	adds	r7, #12
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	24000010 	.word	0x24000010
	...

0800a6f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a6f0:	f3ef 8009 	mrs	r0, PSP
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	4b15      	ldr	r3, [pc, #84]	; (800a750 <pxCurrentTCBConst>)
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	f01e 0f10 	tst.w	lr, #16
 800a700:	bf08      	it	eq
 800a702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70a:	6010      	str	r0, [r2, #0]
 800a70c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a710:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a714:	f380 8811 	msr	BASEPRI, r0
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	f7fe ffde 	bl	80096e0 <vTaskSwitchContext>
 800a724:	f04f 0000 	mov.w	r0, #0
 800a728:	f380 8811 	msr	BASEPRI, r0
 800a72c:	bc09      	pop	{r0, r3}
 800a72e:	6819      	ldr	r1, [r3, #0]
 800a730:	6808      	ldr	r0, [r1, #0]
 800a732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a736:	f01e 0f10 	tst.w	lr, #16
 800a73a:	bf08      	it	eq
 800a73c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a740:	f380 8809 	msr	PSP, r0
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	f3af 8000 	nop.w

0800a750 <pxCurrentTCBConst>:
 800a750:	24000814 	.word	0x24000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a754:	bf00      	nop
 800a756:	bf00      	nop

0800a758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a770:	f7fe fefe 	bl	8009570 <xTaskIncrementTick>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d003      	beq.n	800a782 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a77a:	4b06      	ldr	r3, [pc, #24]	; (800a794 <SysTick_Handler+0x3c>)
 800a77c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a780:	601a      	str	r2, [r3, #0]
 800a782:	2300      	movs	r3, #0
 800a784:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a78c:	bf00      	nop
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	e000ed04 	.word	0xe000ed04

0800a798 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a798:	b480      	push	{r7}
 800a79a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a79c:	4b0b      	ldr	r3, [pc, #44]	; (800a7cc <vPortSetupTimerInterrupt+0x34>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a7a2:	4b0b      	ldr	r3, [pc, #44]	; (800a7d0 <vPortSetupTimerInterrupt+0x38>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a7a8:	4b0a      	ldr	r3, [pc, #40]	; (800a7d4 <vPortSetupTimerInterrupt+0x3c>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a0a      	ldr	r2, [pc, #40]	; (800a7d8 <vPortSetupTimerInterrupt+0x40>)
 800a7ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a7b2:	099b      	lsrs	r3, r3, #6
 800a7b4:	4a09      	ldr	r2, [pc, #36]	; (800a7dc <vPortSetupTimerInterrupt+0x44>)
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a7ba:	4b04      	ldr	r3, [pc, #16]	; (800a7cc <vPortSetupTimerInterrupt+0x34>)
 800a7bc:	2207      	movs	r2, #7
 800a7be:	601a      	str	r2, [r3, #0]
}
 800a7c0:	bf00      	nop
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	e000e010 	.word	0xe000e010
 800a7d0:	e000e018 	.word	0xe000e018
 800a7d4:	24000000 	.word	0x24000000
 800a7d8:	10624dd3 	.word	0x10624dd3
 800a7dc:	e000e014 	.word	0xe000e014

0800a7e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a7e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a7f0 <vPortEnableVFP+0x10>
 800a7e4:	6801      	ldr	r1, [r0, #0]
 800a7e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a7ea:	6001      	str	r1, [r0, #0]
 800a7ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a7ee:	bf00      	nop
 800a7f0:	e000ed88 	.word	0xe000ed88

0800a7f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a7fa:	f3ef 8305 	mrs	r3, IPSR
 800a7fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2b0f      	cmp	r3, #15
 800a804:	d913      	bls.n	800a82e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a806:	4a16      	ldr	r2, [pc, #88]	; (800a860 <vPortValidateInterruptPriority+0x6c>)
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	4413      	add	r3, r2
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a810:	4b14      	ldr	r3, [pc, #80]	; (800a864 <vPortValidateInterruptPriority+0x70>)
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	7afa      	ldrb	r2, [r7, #11]
 800a816:	429a      	cmp	r2, r3
 800a818:	d209      	bcs.n	800a82e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	607b      	str	r3, [r7, #4]
 800a82c:	e7fe      	b.n	800a82c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a82e:	4b0e      	ldr	r3, [pc, #56]	; (800a868 <vPortValidateInterruptPriority+0x74>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a836:	4b0d      	ldr	r3, [pc, #52]	; (800a86c <vPortValidateInterruptPriority+0x78>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d909      	bls.n	800a852 <vPortValidateInterruptPriority+0x5e>
 800a83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	603b      	str	r3, [r7, #0]
 800a850:	e7fe      	b.n	800a850 <vPortValidateInterruptPriority+0x5c>
	}
 800a852:	bf00      	nop
 800a854:	3714      	adds	r7, #20
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	e000e3f0 	.word	0xe000e3f0
 800a864:	24000e40 	.word	0x24000e40
 800a868:	e000ed0c 	.word	0xe000ed0c
 800a86c:	24000e44 	.word	0x24000e44

0800a870 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b08a      	sub	sp, #40	; 0x28
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a878:	2300      	movs	r3, #0
 800a87a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a87c:	f7fe fdbe 	bl	80093fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a880:	4b57      	ldr	r3, [pc, #348]	; (800a9e0 <pvPortMalloc+0x170>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d101      	bne.n	800a88c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a888:	f000 f90c 	bl	800aaa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a88c:	4b55      	ldr	r3, [pc, #340]	; (800a9e4 <pvPortMalloc+0x174>)
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4013      	ands	r3, r2
 800a894:	2b00      	cmp	r3, #0
 800a896:	f040 808c 	bne.w	800a9b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d01c      	beq.n	800a8da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a8a0:	2208      	movs	r2, #8
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f003 0307 	and.w	r3, r3, #7
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d013      	beq.n	800a8da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f023 0307 	bic.w	r3, r3, #7
 800a8b8:	3308      	adds	r3, #8
 800a8ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f003 0307 	and.w	r3, r3, #7
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d009      	beq.n	800a8da <pvPortMalloc+0x6a>
 800a8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	617b      	str	r3, [r7, #20]
 800a8d8:	e7fe      	b.n	800a8d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d068      	beq.n	800a9b2 <pvPortMalloc+0x142>
 800a8e0:	4b41      	ldr	r3, [pc, #260]	; (800a9e8 <pvPortMalloc+0x178>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d863      	bhi.n	800a9b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a8ea:	4b40      	ldr	r3, [pc, #256]	; (800a9ec <pvPortMalloc+0x17c>)
 800a8ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a8ee:	4b3f      	ldr	r3, [pc, #252]	; (800a9ec <pvPortMalloc+0x17c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8f4:	e004      	b.n	800a900 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	429a      	cmp	r2, r3
 800a908:	d903      	bls.n	800a912 <pvPortMalloc+0xa2>
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1f1      	bne.n	800a8f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a912:	4b33      	ldr	r3, [pc, #204]	; (800a9e0 <pvPortMalloc+0x170>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a918:	429a      	cmp	r2, r3
 800a91a:	d04a      	beq.n	800a9b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a91c:	6a3b      	ldr	r3, [r7, #32]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2208      	movs	r2, #8
 800a922:	4413      	add	r3, r2
 800a924:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	6a3b      	ldr	r3, [r7, #32]
 800a92c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	1ad2      	subs	r2, r2, r3
 800a936:	2308      	movs	r3, #8
 800a938:	005b      	lsls	r3, r3, #1
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d91e      	bls.n	800a97c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a93e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4413      	add	r3, r2
 800a944:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	f003 0307 	and.w	r3, r3, #7
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d009      	beq.n	800a964 <pvPortMalloc+0xf4>
 800a950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	f3bf 8f6f 	isb	sy
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	613b      	str	r3, [r7, #16]
 800a962:	e7fe      	b.n	800a962 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	685a      	ldr	r2, [r3, #4]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	1ad2      	subs	r2, r2, r3
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a976:	69b8      	ldr	r0, [r7, #24]
 800a978:	f000 f8f6 	bl	800ab68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a97c:	4b1a      	ldr	r3, [pc, #104]	; (800a9e8 <pvPortMalloc+0x178>)
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	1ad3      	subs	r3, r2, r3
 800a986:	4a18      	ldr	r2, [pc, #96]	; (800a9e8 <pvPortMalloc+0x178>)
 800a988:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a98a:	4b17      	ldr	r3, [pc, #92]	; (800a9e8 <pvPortMalloc+0x178>)
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	4b18      	ldr	r3, [pc, #96]	; (800a9f0 <pvPortMalloc+0x180>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	429a      	cmp	r2, r3
 800a994:	d203      	bcs.n	800a99e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a996:	4b14      	ldr	r3, [pc, #80]	; (800a9e8 <pvPortMalloc+0x178>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a15      	ldr	r2, [pc, #84]	; (800a9f0 <pvPortMalloc+0x180>)
 800a99c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a0:	685a      	ldr	r2, [r3, #4]
 800a9a2:	4b10      	ldr	r3, [pc, #64]	; (800a9e4 <pvPortMalloc+0x174>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	431a      	orrs	r2, r3
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a9b2:	f7fe fd31 	bl	8009418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	f003 0307 	and.w	r3, r3, #7
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d009      	beq.n	800a9d4 <pvPortMalloc+0x164>
 800a9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c4:	f383 8811 	msr	BASEPRI, r3
 800a9c8:	f3bf 8f6f 	isb	sy
 800a9cc:	f3bf 8f4f 	dsb	sy
 800a9d0:	60fb      	str	r3, [r7, #12]
 800a9d2:	e7fe      	b.n	800a9d2 <pvPortMalloc+0x162>
	return pvReturn;
 800a9d4:	69fb      	ldr	r3, [r7, #28]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3728      	adds	r7, #40	; 0x28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	24004a50 	.word	0x24004a50
 800a9e4:	24004a5c 	.word	0x24004a5c
 800a9e8:	24004a54 	.word	0x24004a54
 800a9ec:	24004a48 	.word	0x24004a48
 800a9f0:	24004a58 	.word	0x24004a58

0800a9f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b086      	sub	sp, #24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d046      	beq.n	800aa94 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa06:	2308      	movs	r3, #8
 800aa08:	425b      	negs	r3, r3
 800aa0a:	697a      	ldr	r2, [r7, #20]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	685a      	ldr	r2, [r3, #4]
 800aa18:	4b20      	ldr	r3, [pc, #128]	; (800aa9c <vPortFree+0xa8>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4013      	ands	r3, r2
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d109      	bne.n	800aa36 <vPortFree+0x42>
 800aa22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa26:	f383 8811 	msr	BASEPRI, r3
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	f3bf 8f4f 	dsb	sy
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	e7fe      	b.n	800aa34 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d009      	beq.n	800aa52 <vPortFree+0x5e>
 800aa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	60bb      	str	r3, [r7, #8]
 800aa50:	e7fe      	b.n	800aa50 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	4b11      	ldr	r3, [pc, #68]	; (800aa9c <vPortFree+0xa8>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4013      	ands	r3, r2
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d019      	beq.n	800aa94 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d115      	bne.n	800aa94 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	4b0b      	ldr	r3, [pc, #44]	; (800aa9c <vPortFree+0xa8>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	43db      	mvns	r3, r3
 800aa72:	401a      	ands	r2, r3
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa78:	f7fe fcc0 	bl	80093fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	685a      	ldr	r2, [r3, #4]
 800aa80:	4b07      	ldr	r3, [pc, #28]	; (800aaa0 <vPortFree+0xac>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4413      	add	r3, r2
 800aa86:	4a06      	ldr	r2, [pc, #24]	; (800aaa0 <vPortFree+0xac>)
 800aa88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa8a:	6938      	ldr	r0, [r7, #16]
 800aa8c:	f000 f86c 	bl	800ab68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800aa90:	f7fe fcc2 	bl	8009418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa94:	bf00      	nop
 800aa96:	3718      	adds	r7, #24
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	24004a5c 	.word	0x24004a5c
 800aaa0:	24004a54 	.word	0x24004a54

0800aaa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aaaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800aaae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aab0:	4b27      	ldr	r3, [pc, #156]	; (800ab50 <prvHeapInit+0xac>)
 800aab2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f003 0307 	and.w	r3, r3, #7
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00c      	beq.n	800aad8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	3307      	adds	r3, #7
 800aac2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f023 0307 	bic.w	r3, r3, #7
 800aaca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	1ad3      	subs	r3, r2, r3
 800aad2:	4a1f      	ldr	r2, [pc, #124]	; (800ab50 <prvHeapInit+0xac>)
 800aad4:	4413      	add	r3, r2
 800aad6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aadc:	4a1d      	ldr	r2, [pc, #116]	; (800ab54 <prvHeapInit+0xb0>)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aae2:	4b1c      	ldr	r3, [pc, #112]	; (800ab54 <prvHeapInit+0xb0>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	4413      	add	r3, r2
 800aaee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aaf0:	2208      	movs	r2, #8
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	1a9b      	subs	r3, r3, r2
 800aaf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f023 0307 	bic.w	r3, r3, #7
 800aafe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	4a15      	ldr	r2, [pc, #84]	; (800ab58 <prvHeapInit+0xb4>)
 800ab04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab06:	4b14      	ldr	r3, [pc, #80]	; (800ab58 <prvHeapInit+0xb4>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab0e:	4b12      	ldr	r3, [pc, #72]	; (800ab58 <prvHeapInit+0xb4>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2200      	movs	r2, #0
 800ab14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	1ad2      	subs	r2, r2, r3
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab24:	4b0c      	ldr	r3, [pc, #48]	; (800ab58 <prvHeapInit+0xb4>)
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	4a0a      	ldr	r2, [pc, #40]	; (800ab5c <prvHeapInit+0xb8>)
 800ab32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	4a09      	ldr	r2, [pc, #36]	; (800ab60 <prvHeapInit+0xbc>)
 800ab3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab3c:	4b09      	ldr	r3, [pc, #36]	; (800ab64 <prvHeapInit+0xc0>)
 800ab3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ab42:	601a      	str	r2, [r3, #0]
}
 800ab44:	bf00      	nop
 800ab46:	3714      	adds	r7, #20
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr
 800ab50:	24000e48 	.word	0x24000e48
 800ab54:	24004a48 	.word	0x24004a48
 800ab58:	24004a50 	.word	0x24004a50
 800ab5c:	24004a58 	.word	0x24004a58
 800ab60:	24004a54 	.word	0x24004a54
 800ab64:	24004a5c 	.word	0x24004a5c

0800ab68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab70:	4b28      	ldr	r3, [pc, #160]	; (800ac14 <prvInsertBlockIntoFreeList+0xac>)
 800ab72:	60fb      	str	r3, [r7, #12]
 800ab74:	e002      	b.n	800ab7c <prvInsertBlockIntoFreeList+0x14>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	60fb      	str	r3, [r7, #12]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d8f7      	bhi.n	800ab76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	4413      	add	r3, r2
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d108      	bne.n	800abaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	441a      	add	r2, r3
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	68ba      	ldr	r2, [r7, #8]
 800abb4:	441a      	add	r2, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d118      	bne.n	800abf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	4b15      	ldr	r3, [pc, #84]	; (800ac18 <prvInsertBlockIntoFreeList+0xb0>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d00d      	beq.n	800abe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	685a      	ldr	r2, [r3, #4]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	441a      	add	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	601a      	str	r2, [r3, #0]
 800abe4:	e008      	b.n	800abf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800abe6:	4b0c      	ldr	r3, [pc, #48]	; (800ac18 <prvInsertBlockIntoFreeList+0xb0>)
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	601a      	str	r2, [r3, #0]
 800abee:	e003      	b.n	800abf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d002      	beq.n	800ac06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac06:	bf00      	nop
 800ac08:	3714      	adds	r7, #20
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	24004a48 	.word	0x24004a48
 800ac18:	24004a50 	.word	0x24004a50

0800ac1c <__errno>:
 800ac1c:	4b01      	ldr	r3, [pc, #4]	; (800ac24 <__errno+0x8>)
 800ac1e:	6818      	ldr	r0, [r3, #0]
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	24000014 	.word	0x24000014

0800ac28 <__libc_init_array>:
 800ac28:	b570      	push	{r4, r5, r6, lr}
 800ac2a:	4e0d      	ldr	r6, [pc, #52]	; (800ac60 <__libc_init_array+0x38>)
 800ac2c:	4c0d      	ldr	r4, [pc, #52]	; (800ac64 <__libc_init_array+0x3c>)
 800ac2e:	1ba4      	subs	r4, r4, r6
 800ac30:	10a4      	asrs	r4, r4, #2
 800ac32:	2500      	movs	r5, #0
 800ac34:	42a5      	cmp	r5, r4
 800ac36:	d109      	bne.n	800ac4c <__libc_init_array+0x24>
 800ac38:	4e0b      	ldr	r6, [pc, #44]	; (800ac68 <__libc_init_array+0x40>)
 800ac3a:	4c0c      	ldr	r4, [pc, #48]	; (800ac6c <__libc_init_array+0x44>)
 800ac3c:	f000 fc28 	bl	800b490 <_init>
 800ac40:	1ba4      	subs	r4, r4, r6
 800ac42:	10a4      	asrs	r4, r4, #2
 800ac44:	2500      	movs	r5, #0
 800ac46:	42a5      	cmp	r5, r4
 800ac48:	d105      	bne.n	800ac56 <__libc_init_array+0x2e>
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac50:	4798      	blx	r3
 800ac52:	3501      	adds	r5, #1
 800ac54:	e7ee      	b.n	800ac34 <__libc_init_array+0xc>
 800ac56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac5a:	4798      	blx	r3
 800ac5c:	3501      	adds	r5, #1
 800ac5e:	e7f2      	b.n	800ac46 <__libc_init_array+0x1e>
 800ac60:	0800c640 	.word	0x0800c640
 800ac64:	0800c640 	.word	0x0800c640
 800ac68:	0800c640 	.word	0x0800c640
 800ac6c:	0800c644 	.word	0x0800c644

0800ac70 <memcpy>:
 800ac70:	b510      	push	{r4, lr}
 800ac72:	1e43      	subs	r3, r0, #1
 800ac74:	440a      	add	r2, r1
 800ac76:	4291      	cmp	r1, r2
 800ac78:	d100      	bne.n	800ac7c <memcpy+0xc>
 800ac7a:	bd10      	pop	{r4, pc}
 800ac7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac84:	e7f7      	b.n	800ac76 <memcpy+0x6>

0800ac86 <memset>:
 800ac86:	4402      	add	r2, r0
 800ac88:	4603      	mov	r3, r0
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d100      	bne.n	800ac90 <memset+0xa>
 800ac8e:	4770      	bx	lr
 800ac90:	f803 1b01 	strb.w	r1, [r3], #1
 800ac94:	e7f9      	b.n	800ac8a <memset+0x4>
	...

0800ac98 <siprintf>:
 800ac98:	b40e      	push	{r1, r2, r3}
 800ac9a:	b500      	push	{lr}
 800ac9c:	b09c      	sub	sp, #112	; 0x70
 800ac9e:	ab1d      	add	r3, sp, #116	; 0x74
 800aca0:	9002      	str	r0, [sp, #8]
 800aca2:	9006      	str	r0, [sp, #24]
 800aca4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aca8:	4809      	ldr	r0, [pc, #36]	; (800acd0 <siprintf+0x38>)
 800acaa:	9107      	str	r1, [sp, #28]
 800acac:	9104      	str	r1, [sp, #16]
 800acae:	4909      	ldr	r1, [pc, #36]	; (800acd4 <siprintf+0x3c>)
 800acb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800acb4:	9105      	str	r1, [sp, #20]
 800acb6:	6800      	ldr	r0, [r0, #0]
 800acb8:	9301      	str	r3, [sp, #4]
 800acba:	a902      	add	r1, sp, #8
 800acbc:	f000 f866 	bl	800ad8c <_svfiprintf_r>
 800acc0:	9b02      	ldr	r3, [sp, #8]
 800acc2:	2200      	movs	r2, #0
 800acc4:	701a      	strb	r2, [r3, #0]
 800acc6:	b01c      	add	sp, #112	; 0x70
 800acc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800accc:	b003      	add	sp, #12
 800acce:	4770      	bx	lr
 800acd0:	24000014 	.word	0x24000014
 800acd4:	ffff0208 	.word	0xffff0208

0800acd8 <__ssputs_r>:
 800acd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acdc:	688e      	ldr	r6, [r1, #8]
 800acde:	429e      	cmp	r6, r3
 800ace0:	4682      	mov	sl, r0
 800ace2:	460c      	mov	r4, r1
 800ace4:	4690      	mov	r8, r2
 800ace6:	4699      	mov	r9, r3
 800ace8:	d837      	bhi.n	800ad5a <__ssputs_r+0x82>
 800acea:	898a      	ldrh	r2, [r1, #12]
 800acec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800acf0:	d031      	beq.n	800ad56 <__ssputs_r+0x7e>
 800acf2:	6825      	ldr	r5, [r4, #0]
 800acf4:	6909      	ldr	r1, [r1, #16]
 800acf6:	1a6f      	subs	r7, r5, r1
 800acf8:	6965      	ldr	r5, [r4, #20]
 800acfa:	2302      	movs	r3, #2
 800acfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad00:	fb95 f5f3 	sdiv	r5, r5, r3
 800ad04:	f109 0301 	add.w	r3, r9, #1
 800ad08:	443b      	add	r3, r7
 800ad0a:	429d      	cmp	r5, r3
 800ad0c:	bf38      	it	cc
 800ad0e:	461d      	movcc	r5, r3
 800ad10:	0553      	lsls	r3, r2, #21
 800ad12:	d530      	bpl.n	800ad76 <__ssputs_r+0x9e>
 800ad14:	4629      	mov	r1, r5
 800ad16:	f000 fb21 	bl	800b35c <_malloc_r>
 800ad1a:	4606      	mov	r6, r0
 800ad1c:	b950      	cbnz	r0, 800ad34 <__ssputs_r+0x5c>
 800ad1e:	230c      	movs	r3, #12
 800ad20:	f8ca 3000 	str.w	r3, [sl]
 800ad24:	89a3      	ldrh	r3, [r4, #12]
 800ad26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad2a:	81a3      	strh	r3, [r4, #12]
 800ad2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad34:	463a      	mov	r2, r7
 800ad36:	6921      	ldr	r1, [r4, #16]
 800ad38:	f7ff ff9a 	bl	800ac70 <memcpy>
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad46:	81a3      	strh	r3, [r4, #12]
 800ad48:	6126      	str	r6, [r4, #16]
 800ad4a:	6165      	str	r5, [r4, #20]
 800ad4c:	443e      	add	r6, r7
 800ad4e:	1bed      	subs	r5, r5, r7
 800ad50:	6026      	str	r6, [r4, #0]
 800ad52:	60a5      	str	r5, [r4, #8]
 800ad54:	464e      	mov	r6, r9
 800ad56:	454e      	cmp	r6, r9
 800ad58:	d900      	bls.n	800ad5c <__ssputs_r+0x84>
 800ad5a:	464e      	mov	r6, r9
 800ad5c:	4632      	mov	r2, r6
 800ad5e:	4641      	mov	r1, r8
 800ad60:	6820      	ldr	r0, [r4, #0]
 800ad62:	f000 fa93 	bl	800b28c <memmove>
 800ad66:	68a3      	ldr	r3, [r4, #8]
 800ad68:	1b9b      	subs	r3, r3, r6
 800ad6a:	60a3      	str	r3, [r4, #8]
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	441e      	add	r6, r3
 800ad70:	6026      	str	r6, [r4, #0]
 800ad72:	2000      	movs	r0, #0
 800ad74:	e7dc      	b.n	800ad30 <__ssputs_r+0x58>
 800ad76:	462a      	mov	r2, r5
 800ad78:	f000 fb4a 	bl	800b410 <_realloc_r>
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	d1e2      	bne.n	800ad48 <__ssputs_r+0x70>
 800ad82:	6921      	ldr	r1, [r4, #16]
 800ad84:	4650      	mov	r0, sl
 800ad86:	f000 fa9b 	bl	800b2c0 <_free_r>
 800ad8a:	e7c8      	b.n	800ad1e <__ssputs_r+0x46>

0800ad8c <_svfiprintf_r>:
 800ad8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad90:	461d      	mov	r5, r3
 800ad92:	898b      	ldrh	r3, [r1, #12]
 800ad94:	061f      	lsls	r7, r3, #24
 800ad96:	b09d      	sub	sp, #116	; 0x74
 800ad98:	4680      	mov	r8, r0
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	4616      	mov	r6, r2
 800ad9e:	d50f      	bpl.n	800adc0 <_svfiprintf_r+0x34>
 800ada0:	690b      	ldr	r3, [r1, #16]
 800ada2:	b96b      	cbnz	r3, 800adc0 <_svfiprintf_r+0x34>
 800ada4:	2140      	movs	r1, #64	; 0x40
 800ada6:	f000 fad9 	bl	800b35c <_malloc_r>
 800adaa:	6020      	str	r0, [r4, #0]
 800adac:	6120      	str	r0, [r4, #16]
 800adae:	b928      	cbnz	r0, 800adbc <_svfiprintf_r+0x30>
 800adb0:	230c      	movs	r3, #12
 800adb2:	f8c8 3000 	str.w	r3, [r8]
 800adb6:	f04f 30ff 	mov.w	r0, #4294967295
 800adba:	e0c8      	b.n	800af4e <_svfiprintf_r+0x1c2>
 800adbc:	2340      	movs	r3, #64	; 0x40
 800adbe:	6163      	str	r3, [r4, #20]
 800adc0:	2300      	movs	r3, #0
 800adc2:	9309      	str	r3, [sp, #36]	; 0x24
 800adc4:	2320      	movs	r3, #32
 800adc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adca:	2330      	movs	r3, #48	; 0x30
 800adcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800add0:	9503      	str	r5, [sp, #12]
 800add2:	f04f 0b01 	mov.w	fp, #1
 800add6:	4637      	mov	r7, r6
 800add8:	463d      	mov	r5, r7
 800adda:	f815 3b01 	ldrb.w	r3, [r5], #1
 800adde:	b10b      	cbz	r3, 800ade4 <_svfiprintf_r+0x58>
 800ade0:	2b25      	cmp	r3, #37	; 0x25
 800ade2:	d13e      	bne.n	800ae62 <_svfiprintf_r+0xd6>
 800ade4:	ebb7 0a06 	subs.w	sl, r7, r6
 800ade8:	d00b      	beq.n	800ae02 <_svfiprintf_r+0x76>
 800adea:	4653      	mov	r3, sl
 800adec:	4632      	mov	r2, r6
 800adee:	4621      	mov	r1, r4
 800adf0:	4640      	mov	r0, r8
 800adf2:	f7ff ff71 	bl	800acd8 <__ssputs_r>
 800adf6:	3001      	adds	r0, #1
 800adf8:	f000 80a4 	beq.w	800af44 <_svfiprintf_r+0x1b8>
 800adfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adfe:	4453      	add	r3, sl
 800ae00:	9309      	str	r3, [sp, #36]	; 0x24
 800ae02:	783b      	ldrb	r3, [r7, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 809d 	beq.w	800af44 <_svfiprintf_r+0x1b8>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae14:	9304      	str	r3, [sp, #16]
 800ae16:	9307      	str	r3, [sp, #28]
 800ae18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae1c:	931a      	str	r3, [sp, #104]	; 0x68
 800ae1e:	462f      	mov	r7, r5
 800ae20:	2205      	movs	r2, #5
 800ae22:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ae26:	4850      	ldr	r0, [pc, #320]	; (800af68 <_svfiprintf_r+0x1dc>)
 800ae28:	f7f5 fa5a 	bl	80002e0 <memchr>
 800ae2c:	9b04      	ldr	r3, [sp, #16]
 800ae2e:	b9d0      	cbnz	r0, 800ae66 <_svfiprintf_r+0xda>
 800ae30:	06d9      	lsls	r1, r3, #27
 800ae32:	bf44      	itt	mi
 800ae34:	2220      	movmi	r2, #32
 800ae36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae3a:	071a      	lsls	r2, r3, #28
 800ae3c:	bf44      	itt	mi
 800ae3e:	222b      	movmi	r2, #43	; 0x2b
 800ae40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae44:	782a      	ldrb	r2, [r5, #0]
 800ae46:	2a2a      	cmp	r2, #42	; 0x2a
 800ae48:	d015      	beq.n	800ae76 <_svfiprintf_r+0xea>
 800ae4a:	9a07      	ldr	r2, [sp, #28]
 800ae4c:	462f      	mov	r7, r5
 800ae4e:	2000      	movs	r0, #0
 800ae50:	250a      	movs	r5, #10
 800ae52:	4639      	mov	r1, r7
 800ae54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae58:	3b30      	subs	r3, #48	; 0x30
 800ae5a:	2b09      	cmp	r3, #9
 800ae5c:	d94d      	bls.n	800aefa <_svfiprintf_r+0x16e>
 800ae5e:	b1b8      	cbz	r0, 800ae90 <_svfiprintf_r+0x104>
 800ae60:	e00f      	b.n	800ae82 <_svfiprintf_r+0xf6>
 800ae62:	462f      	mov	r7, r5
 800ae64:	e7b8      	b.n	800add8 <_svfiprintf_r+0x4c>
 800ae66:	4a40      	ldr	r2, [pc, #256]	; (800af68 <_svfiprintf_r+0x1dc>)
 800ae68:	1a80      	subs	r0, r0, r2
 800ae6a:	fa0b f000 	lsl.w	r0, fp, r0
 800ae6e:	4318      	orrs	r0, r3
 800ae70:	9004      	str	r0, [sp, #16]
 800ae72:	463d      	mov	r5, r7
 800ae74:	e7d3      	b.n	800ae1e <_svfiprintf_r+0x92>
 800ae76:	9a03      	ldr	r2, [sp, #12]
 800ae78:	1d11      	adds	r1, r2, #4
 800ae7a:	6812      	ldr	r2, [r2, #0]
 800ae7c:	9103      	str	r1, [sp, #12]
 800ae7e:	2a00      	cmp	r2, #0
 800ae80:	db01      	blt.n	800ae86 <_svfiprintf_r+0xfa>
 800ae82:	9207      	str	r2, [sp, #28]
 800ae84:	e004      	b.n	800ae90 <_svfiprintf_r+0x104>
 800ae86:	4252      	negs	r2, r2
 800ae88:	f043 0302 	orr.w	r3, r3, #2
 800ae8c:	9207      	str	r2, [sp, #28]
 800ae8e:	9304      	str	r3, [sp, #16]
 800ae90:	783b      	ldrb	r3, [r7, #0]
 800ae92:	2b2e      	cmp	r3, #46	; 0x2e
 800ae94:	d10c      	bne.n	800aeb0 <_svfiprintf_r+0x124>
 800ae96:	787b      	ldrb	r3, [r7, #1]
 800ae98:	2b2a      	cmp	r3, #42	; 0x2a
 800ae9a:	d133      	bne.n	800af04 <_svfiprintf_r+0x178>
 800ae9c:	9b03      	ldr	r3, [sp, #12]
 800ae9e:	1d1a      	adds	r2, r3, #4
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	9203      	str	r2, [sp, #12]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	bfb8      	it	lt
 800aea8:	f04f 33ff 	movlt.w	r3, #4294967295
 800aeac:	3702      	adds	r7, #2
 800aeae:	9305      	str	r3, [sp, #20]
 800aeb0:	4d2e      	ldr	r5, [pc, #184]	; (800af6c <_svfiprintf_r+0x1e0>)
 800aeb2:	7839      	ldrb	r1, [r7, #0]
 800aeb4:	2203      	movs	r2, #3
 800aeb6:	4628      	mov	r0, r5
 800aeb8:	f7f5 fa12 	bl	80002e0 <memchr>
 800aebc:	b138      	cbz	r0, 800aece <_svfiprintf_r+0x142>
 800aebe:	2340      	movs	r3, #64	; 0x40
 800aec0:	1b40      	subs	r0, r0, r5
 800aec2:	fa03 f000 	lsl.w	r0, r3, r0
 800aec6:	9b04      	ldr	r3, [sp, #16]
 800aec8:	4303      	orrs	r3, r0
 800aeca:	3701      	adds	r7, #1
 800aecc:	9304      	str	r3, [sp, #16]
 800aece:	7839      	ldrb	r1, [r7, #0]
 800aed0:	4827      	ldr	r0, [pc, #156]	; (800af70 <_svfiprintf_r+0x1e4>)
 800aed2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aed6:	2206      	movs	r2, #6
 800aed8:	1c7e      	adds	r6, r7, #1
 800aeda:	f7f5 fa01 	bl	80002e0 <memchr>
 800aede:	2800      	cmp	r0, #0
 800aee0:	d038      	beq.n	800af54 <_svfiprintf_r+0x1c8>
 800aee2:	4b24      	ldr	r3, [pc, #144]	; (800af74 <_svfiprintf_r+0x1e8>)
 800aee4:	bb13      	cbnz	r3, 800af2c <_svfiprintf_r+0x1a0>
 800aee6:	9b03      	ldr	r3, [sp, #12]
 800aee8:	3307      	adds	r3, #7
 800aeea:	f023 0307 	bic.w	r3, r3, #7
 800aeee:	3308      	adds	r3, #8
 800aef0:	9303      	str	r3, [sp, #12]
 800aef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef4:	444b      	add	r3, r9
 800aef6:	9309      	str	r3, [sp, #36]	; 0x24
 800aef8:	e76d      	b.n	800add6 <_svfiprintf_r+0x4a>
 800aefa:	fb05 3202 	mla	r2, r5, r2, r3
 800aefe:	2001      	movs	r0, #1
 800af00:	460f      	mov	r7, r1
 800af02:	e7a6      	b.n	800ae52 <_svfiprintf_r+0xc6>
 800af04:	2300      	movs	r3, #0
 800af06:	3701      	adds	r7, #1
 800af08:	9305      	str	r3, [sp, #20]
 800af0a:	4619      	mov	r1, r3
 800af0c:	250a      	movs	r5, #10
 800af0e:	4638      	mov	r0, r7
 800af10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af14:	3a30      	subs	r2, #48	; 0x30
 800af16:	2a09      	cmp	r2, #9
 800af18:	d903      	bls.n	800af22 <_svfiprintf_r+0x196>
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d0c8      	beq.n	800aeb0 <_svfiprintf_r+0x124>
 800af1e:	9105      	str	r1, [sp, #20]
 800af20:	e7c6      	b.n	800aeb0 <_svfiprintf_r+0x124>
 800af22:	fb05 2101 	mla	r1, r5, r1, r2
 800af26:	2301      	movs	r3, #1
 800af28:	4607      	mov	r7, r0
 800af2a:	e7f0      	b.n	800af0e <_svfiprintf_r+0x182>
 800af2c:	ab03      	add	r3, sp, #12
 800af2e:	9300      	str	r3, [sp, #0]
 800af30:	4622      	mov	r2, r4
 800af32:	4b11      	ldr	r3, [pc, #68]	; (800af78 <_svfiprintf_r+0x1ec>)
 800af34:	a904      	add	r1, sp, #16
 800af36:	4640      	mov	r0, r8
 800af38:	f3af 8000 	nop.w
 800af3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800af40:	4681      	mov	r9, r0
 800af42:	d1d6      	bne.n	800aef2 <_svfiprintf_r+0x166>
 800af44:	89a3      	ldrh	r3, [r4, #12]
 800af46:	065b      	lsls	r3, r3, #25
 800af48:	f53f af35 	bmi.w	800adb6 <_svfiprintf_r+0x2a>
 800af4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af4e:	b01d      	add	sp, #116	; 0x74
 800af50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af54:	ab03      	add	r3, sp, #12
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	4622      	mov	r2, r4
 800af5a:	4b07      	ldr	r3, [pc, #28]	; (800af78 <_svfiprintf_r+0x1ec>)
 800af5c:	a904      	add	r1, sp, #16
 800af5e:	4640      	mov	r0, r8
 800af60:	f000 f882 	bl	800b068 <_printf_i>
 800af64:	e7ea      	b.n	800af3c <_svfiprintf_r+0x1b0>
 800af66:	bf00      	nop
 800af68:	0800c604 	.word	0x0800c604
 800af6c:	0800c60a 	.word	0x0800c60a
 800af70:	0800c60e 	.word	0x0800c60e
 800af74:	00000000 	.word	0x00000000
 800af78:	0800acd9 	.word	0x0800acd9

0800af7c <_printf_common>:
 800af7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af80:	4691      	mov	r9, r2
 800af82:	461f      	mov	r7, r3
 800af84:	688a      	ldr	r2, [r1, #8]
 800af86:	690b      	ldr	r3, [r1, #16]
 800af88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af8c:	4293      	cmp	r3, r2
 800af8e:	bfb8      	it	lt
 800af90:	4613      	movlt	r3, r2
 800af92:	f8c9 3000 	str.w	r3, [r9]
 800af96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af9a:	4606      	mov	r6, r0
 800af9c:	460c      	mov	r4, r1
 800af9e:	b112      	cbz	r2, 800afa6 <_printf_common+0x2a>
 800afa0:	3301      	adds	r3, #1
 800afa2:	f8c9 3000 	str.w	r3, [r9]
 800afa6:	6823      	ldr	r3, [r4, #0]
 800afa8:	0699      	lsls	r1, r3, #26
 800afaa:	bf42      	ittt	mi
 800afac:	f8d9 3000 	ldrmi.w	r3, [r9]
 800afb0:	3302      	addmi	r3, #2
 800afb2:	f8c9 3000 	strmi.w	r3, [r9]
 800afb6:	6825      	ldr	r5, [r4, #0]
 800afb8:	f015 0506 	ands.w	r5, r5, #6
 800afbc:	d107      	bne.n	800afce <_printf_common+0x52>
 800afbe:	f104 0a19 	add.w	sl, r4, #25
 800afc2:	68e3      	ldr	r3, [r4, #12]
 800afc4:	f8d9 2000 	ldr.w	r2, [r9]
 800afc8:	1a9b      	subs	r3, r3, r2
 800afca:	42ab      	cmp	r3, r5
 800afcc:	dc28      	bgt.n	800b020 <_printf_common+0xa4>
 800afce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800afd2:	6822      	ldr	r2, [r4, #0]
 800afd4:	3300      	adds	r3, #0
 800afd6:	bf18      	it	ne
 800afd8:	2301      	movne	r3, #1
 800afda:	0692      	lsls	r2, r2, #26
 800afdc:	d42d      	bmi.n	800b03a <_printf_common+0xbe>
 800afde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afe2:	4639      	mov	r1, r7
 800afe4:	4630      	mov	r0, r6
 800afe6:	47c0      	blx	r8
 800afe8:	3001      	adds	r0, #1
 800afea:	d020      	beq.n	800b02e <_printf_common+0xb2>
 800afec:	6823      	ldr	r3, [r4, #0]
 800afee:	68e5      	ldr	r5, [r4, #12]
 800aff0:	f8d9 2000 	ldr.w	r2, [r9]
 800aff4:	f003 0306 	and.w	r3, r3, #6
 800aff8:	2b04      	cmp	r3, #4
 800affa:	bf08      	it	eq
 800affc:	1aad      	subeq	r5, r5, r2
 800affe:	68a3      	ldr	r3, [r4, #8]
 800b000:	6922      	ldr	r2, [r4, #16]
 800b002:	bf0c      	ite	eq
 800b004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b008:	2500      	movne	r5, #0
 800b00a:	4293      	cmp	r3, r2
 800b00c:	bfc4      	itt	gt
 800b00e:	1a9b      	subgt	r3, r3, r2
 800b010:	18ed      	addgt	r5, r5, r3
 800b012:	f04f 0900 	mov.w	r9, #0
 800b016:	341a      	adds	r4, #26
 800b018:	454d      	cmp	r5, r9
 800b01a:	d11a      	bne.n	800b052 <_printf_common+0xd6>
 800b01c:	2000      	movs	r0, #0
 800b01e:	e008      	b.n	800b032 <_printf_common+0xb6>
 800b020:	2301      	movs	r3, #1
 800b022:	4652      	mov	r2, sl
 800b024:	4639      	mov	r1, r7
 800b026:	4630      	mov	r0, r6
 800b028:	47c0      	blx	r8
 800b02a:	3001      	adds	r0, #1
 800b02c:	d103      	bne.n	800b036 <_printf_common+0xba>
 800b02e:	f04f 30ff 	mov.w	r0, #4294967295
 800b032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b036:	3501      	adds	r5, #1
 800b038:	e7c3      	b.n	800afc2 <_printf_common+0x46>
 800b03a:	18e1      	adds	r1, r4, r3
 800b03c:	1c5a      	adds	r2, r3, #1
 800b03e:	2030      	movs	r0, #48	; 0x30
 800b040:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b044:	4422      	add	r2, r4
 800b046:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b04a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b04e:	3302      	adds	r3, #2
 800b050:	e7c5      	b.n	800afde <_printf_common+0x62>
 800b052:	2301      	movs	r3, #1
 800b054:	4622      	mov	r2, r4
 800b056:	4639      	mov	r1, r7
 800b058:	4630      	mov	r0, r6
 800b05a:	47c0      	blx	r8
 800b05c:	3001      	adds	r0, #1
 800b05e:	d0e6      	beq.n	800b02e <_printf_common+0xb2>
 800b060:	f109 0901 	add.w	r9, r9, #1
 800b064:	e7d8      	b.n	800b018 <_printf_common+0x9c>
	...

0800b068 <_printf_i>:
 800b068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b06c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b070:	460c      	mov	r4, r1
 800b072:	7e09      	ldrb	r1, [r1, #24]
 800b074:	b085      	sub	sp, #20
 800b076:	296e      	cmp	r1, #110	; 0x6e
 800b078:	4617      	mov	r7, r2
 800b07a:	4606      	mov	r6, r0
 800b07c:	4698      	mov	r8, r3
 800b07e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b080:	f000 80b3 	beq.w	800b1ea <_printf_i+0x182>
 800b084:	d822      	bhi.n	800b0cc <_printf_i+0x64>
 800b086:	2963      	cmp	r1, #99	; 0x63
 800b088:	d036      	beq.n	800b0f8 <_printf_i+0x90>
 800b08a:	d80a      	bhi.n	800b0a2 <_printf_i+0x3a>
 800b08c:	2900      	cmp	r1, #0
 800b08e:	f000 80b9 	beq.w	800b204 <_printf_i+0x19c>
 800b092:	2958      	cmp	r1, #88	; 0x58
 800b094:	f000 8083 	beq.w	800b19e <_printf_i+0x136>
 800b098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b09c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b0a0:	e032      	b.n	800b108 <_printf_i+0xa0>
 800b0a2:	2964      	cmp	r1, #100	; 0x64
 800b0a4:	d001      	beq.n	800b0aa <_printf_i+0x42>
 800b0a6:	2969      	cmp	r1, #105	; 0x69
 800b0a8:	d1f6      	bne.n	800b098 <_printf_i+0x30>
 800b0aa:	6820      	ldr	r0, [r4, #0]
 800b0ac:	6813      	ldr	r3, [r2, #0]
 800b0ae:	0605      	lsls	r5, r0, #24
 800b0b0:	f103 0104 	add.w	r1, r3, #4
 800b0b4:	d52a      	bpl.n	800b10c <_printf_i+0xa4>
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	6011      	str	r1, [r2, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	da03      	bge.n	800b0c6 <_printf_i+0x5e>
 800b0be:	222d      	movs	r2, #45	; 0x2d
 800b0c0:	425b      	negs	r3, r3
 800b0c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b0c6:	486f      	ldr	r0, [pc, #444]	; (800b284 <_printf_i+0x21c>)
 800b0c8:	220a      	movs	r2, #10
 800b0ca:	e039      	b.n	800b140 <_printf_i+0xd8>
 800b0cc:	2973      	cmp	r1, #115	; 0x73
 800b0ce:	f000 809d 	beq.w	800b20c <_printf_i+0x1a4>
 800b0d2:	d808      	bhi.n	800b0e6 <_printf_i+0x7e>
 800b0d4:	296f      	cmp	r1, #111	; 0x6f
 800b0d6:	d020      	beq.n	800b11a <_printf_i+0xb2>
 800b0d8:	2970      	cmp	r1, #112	; 0x70
 800b0da:	d1dd      	bne.n	800b098 <_printf_i+0x30>
 800b0dc:	6823      	ldr	r3, [r4, #0]
 800b0de:	f043 0320 	orr.w	r3, r3, #32
 800b0e2:	6023      	str	r3, [r4, #0]
 800b0e4:	e003      	b.n	800b0ee <_printf_i+0x86>
 800b0e6:	2975      	cmp	r1, #117	; 0x75
 800b0e8:	d017      	beq.n	800b11a <_printf_i+0xb2>
 800b0ea:	2978      	cmp	r1, #120	; 0x78
 800b0ec:	d1d4      	bne.n	800b098 <_printf_i+0x30>
 800b0ee:	2378      	movs	r3, #120	; 0x78
 800b0f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0f4:	4864      	ldr	r0, [pc, #400]	; (800b288 <_printf_i+0x220>)
 800b0f6:	e055      	b.n	800b1a4 <_printf_i+0x13c>
 800b0f8:	6813      	ldr	r3, [r2, #0]
 800b0fa:	1d19      	adds	r1, r3, #4
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	6011      	str	r1, [r2, #0]
 800b100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b108:	2301      	movs	r3, #1
 800b10a:	e08c      	b.n	800b226 <_printf_i+0x1be>
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	6011      	str	r1, [r2, #0]
 800b110:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b114:	bf18      	it	ne
 800b116:	b21b      	sxthne	r3, r3
 800b118:	e7cf      	b.n	800b0ba <_printf_i+0x52>
 800b11a:	6813      	ldr	r3, [r2, #0]
 800b11c:	6825      	ldr	r5, [r4, #0]
 800b11e:	1d18      	adds	r0, r3, #4
 800b120:	6010      	str	r0, [r2, #0]
 800b122:	0628      	lsls	r0, r5, #24
 800b124:	d501      	bpl.n	800b12a <_printf_i+0xc2>
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	e002      	b.n	800b130 <_printf_i+0xc8>
 800b12a:	0668      	lsls	r0, r5, #25
 800b12c:	d5fb      	bpl.n	800b126 <_printf_i+0xbe>
 800b12e:	881b      	ldrh	r3, [r3, #0]
 800b130:	4854      	ldr	r0, [pc, #336]	; (800b284 <_printf_i+0x21c>)
 800b132:	296f      	cmp	r1, #111	; 0x6f
 800b134:	bf14      	ite	ne
 800b136:	220a      	movne	r2, #10
 800b138:	2208      	moveq	r2, #8
 800b13a:	2100      	movs	r1, #0
 800b13c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b140:	6865      	ldr	r5, [r4, #4]
 800b142:	60a5      	str	r5, [r4, #8]
 800b144:	2d00      	cmp	r5, #0
 800b146:	f2c0 8095 	blt.w	800b274 <_printf_i+0x20c>
 800b14a:	6821      	ldr	r1, [r4, #0]
 800b14c:	f021 0104 	bic.w	r1, r1, #4
 800b150:	6021      	str	r1, [r4, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d13d      	bne.n	800b1d2 <_printf_i+0x16a>
 800b156:	2d00      	cmp	r5, #0
 800b158:	f040 808e 	bne.w	800b278 <_printf_i+0x210>
 800b15c:	4665      	mov	r5, ip
 800b15e:	2a08      	cmp	r2, #8
 800b160:	d10b      	bne.n	800b17a <_printf_i+0x112>
 800b162:	6823      	ldr	r3, [r4, #0]
 800b164:	07db      	lsls	r3, r3, #31
 800b166:	d508      	bpl.n	800b17a <_printf_i+0x112>
 800b168:	6923      	ldr	r3, [r4, #16]
 800b16a:	6862      	ldr	r2, [r4, #4]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	bfde      	ittt	le
 800b170:	2330      	movle	r3, #48	; 0x30
 800b172:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b176:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b17a:	ebac 0305 	sub.w	r3, ip, r5
 800b17e:	6123      	str	r3, [r4, #16]
 800b180:	f8cd 8000 	str.w	r8, [sp]
 800b184:	463b      	mov	r3, r7
 800b186:	aa03      	add	r2, sp, #12
 800b188:	4621      	mov	r1, r4
 800b18a:	4630      	mov	r0, r6
 800b18c:	f7ff fef6 	bl	800af7c <_printf_common>
 800b190:	3001      	adds	r0, #1
 800b192:	d14d      	bne.n	800b230 <_printf_i+0x1c8>
 800b194:	f04f 30ff 	mov.w	r0, #4294967295
 800b198:	b005      	add	sp, #20
 800b19a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b19e:	4839      	ldr	r0, [pc, #228]	; (800b284 <_printf_i+0x21c>)
 800b1a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b1a4:	6813      	ldr	r3, [r2, #0]
 800b1a6:	6821      	ldr	r1, [r4, #0]
 800b1a8:	1d1d      	adds	r5, r3, #4
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	6015      	str	r5, [r2, #0]
 800b1ae:	060a      	lsls	r2, r1, #24
 800b1b0:	d50b      	bpl.n	800b1ca <_printf_i+0x162>
 800b1b2:	07ca      	lsls	r2, r1, #31
 800b1b4:	bf44      	itt	mi
 800b1b6:	f041 0120 	orrmi.w	r1, r1, #32
 800b1ba:	6021      	strmi	r1, [r4, #0]
 800b1bc:	b91b      	cbnz	r3, 800b1c6 <_printf_i+0x15e>
 800b1be:	6822      	ldr	r2, [r4, #0]
 800b1c0:	f022 0220 	bic.w	r2, r2, #32
 800b1c4:	6022      	str	r2, [r4, #0]
 800b1c6:	2210      	movs	r2, #16
 800b1c8:	e7b7      	b.n	800b13a <_printf_i+0xd2>
 800b1ca:	064d      	lsls	r5, r1, #25
 800b1cc:	bf48      	it	mi
 800b1ce:	b29b      	uxthmi	r3, r3
 800b1d0:	e7ef      	b.n	800b1b2 <_printf_i+0x14a>
 800b1d2:	4665      	mov	r5, ip
 800b1d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1d8:	fb02 3311 	mls	r3, r2, r1, r3
 800b1dc:	5cc3      	ldrb	r3, [r0, r3]
 800b1de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	2900      	cmp	r1, #0
 800b1e6:	d1f5      	bne.n	800b1d4 <_printf_i+0x16c>
 800b1e8:	e7b9      	b.n	800b15e <_printf_i+0xf6>
 800b1ea:	6813      	ldr	r3, [r2, #0]
 800b1ec:	6825      	ldr	r5, [r4, #0]
 800b1ee:	6961      	ldr	r1, [r4, #20]
 800b1f0:	1d18      	adds	r0, r3, #4
 800b1f2:	6010      	str	r0, [r2, #0]
 800b1f4:	0628      	lsls	r0, r5, #24
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	d501      	bpl.n	800b1fe <_printf_i+0x196>
 800b1fa:	6019      	str	r1, [r3, #0]
 800b1fc:	e002      	b.n	800b204 <_printf_i+0x19c>
 800b1fe:	066a      	lsls	r2, r5, #25
 800b200:	d5fb      	bpl.n	800b1fa <_printf_i+0x192>
 800b202:	8019      	strh	r1, [r3, #0]
 800b204:	2300      	movs	r3, #0
 800b206:	6123      	str	r3, [r4, #16]
 800b208:	4665      	mov	r5, ip
 800b20a:	e7b9      	b.n	800b180 <_printf_i+0x118>
 800b20c:	6813      	ldr	r3, [r2, #0]
 800b20e:	1d19      	adds	r1, r3, #4
 800b210:	6011      	str	r1, [r2, #0]
 800b212:	681d      	ldr	r5, [r3, #0]
 800b214:	6862      	ldr	r2, [r4, #4]
 800b216:	2100      	movs	r1, #0
 800b218:	4628      	mov	r0, r5
 800b21a:	f7f5 f861 	bl	80002e0 <memchr>
 800b21e:	b108      	cbz	r0, 800b224 <_printf_i+0x1bc>
 800b220:	1b40      	subs	r0, r0, r5
 800b222:	6060      	str	r0, [r4, #4]
 800b224:	6863      	ldr	r3, [r4, #4]
 800b226:	6123      	str	r3, [r4, #16]
 800b228:	2300      	movs	r3, #0
 800b22a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b22e:	e7a7      	b.n	800b180 <_printf_i+0x118>
 800b230:	6923      	ldr	r3, [r4, #16]
 800b232:	462a      	mov	r2, r5
 800b234:	4639      	mov	r1, r7
 800b236:	4630      	mov	r0, r6
 800b238:	47c0      	blx	r8
 800b23a:	3001      	adds	r0, #1
 800b23c:	d0aa      	beq.n	800b194 <_printf_i+0x12c>
 800b23e:	6823      	ldr	r3, [r4, #0]
 800b240:	079b      	lsls	r3, r3, #30
 800b242:	d413      	bmi.n	800b26c <_printf_i+0x204>
 800b244:	68e0      	ldr	r0, [r4, #12]
 800b246:	9b03      	ldr	r3, [sp, #12]
 800b248:	4298      	cmp	r0, r3
 800b24a:	bfb8      	it	lt
 800b24c:	4618      	movlt	r0, r3
 800b24e:	e7a3      	b.n	800b198 <_printf_i+0x130>
 800b250:	2301      	movs	r3, #1
 800b252:	464a      	mov	r2, r9
 800b254:	4639      	mov	r1, r7
 800b256:	4630      	mov	r0, r6
 800b258:	47c0      	blx	r8
 800b25a:	3001      	adds	r0, #1
 800b25c:	d09a      	beq.n	800b194 <_printf_i+0x12c>
 800b25e:	3501      	adds	r5, #1
 800b260:	68e3      	ldr	r3, [r4, #12]
 800b262:	9a03      	ldr	r2, [sp, #12]
 800b264:	1a9b      	subs	r3, r3, r2
 800b266:	42ab      	cmp	r3, r5
 800b268:	dcf2      	bgt.n	800b250 <_printf_i+0x1e8>
 800b26a:	e7eb      	b.n	800b244 <_printf_i+0x1dc>
 800b26c:	2500      	movs	r5, #0
 800b26e:	f104 0919 	add.w	r9, r4, #25
 800b272:	e7f5      	b.n	800b260 <_printf_i+0x1f8>
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1ac      	bne.n	800b1d2 <_printf_i+0x16a>
 800b278:	7803      	ldrb	r3, [r0, #0]
 800b27a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b27e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b282:	e76c      	b.n	800b15e <_printf_i+0xf6>
 800b284:	0800c615 	.word	0x0800c615
 800b288:	0800c626 	.word	0x0800c626

0800b28c <memmove>:
 800b28c:	4288      	cmp	r0, r1
 800b28e:	b510      	push	{r4, lr}
 800b290:	eb01 0302 	add.w	r3, r1, r2
 800b294:	d807      	bhi.n	800b2a6 <memmove+0x1a>
 800b296:	1e42      	subs	r2, r0, #1
 800b298:	4299      	cmp	r1, r3
 800b29a:	d00a      	beq.n	800b2b2 <memmove+0x26>
 800b29c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b2a4:	e7f8      	b.n	800b298 <memmove+0xc>
 800b2a6:	4283      	cmp	r3, r0
 800b2a8:	d9f5      	bls.n	800b296 <memmove+0xa>
 800b2aa:	1881      	adds	r1, r0, r2
 800b2ac:	1ad2      	subs	r2, r2, r3
 800b2ae:	42d3      	cmn	r3, r2
 800b2b0:	d100      	bne.n	800b2b4 <memmove+0x28>
 800b2b2:	bd10      	pop	{r4, pc}
 800b2b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b2bc:	e7f7      	b.n	800b2ae <memmove+0x22>
	...

0800b2c0 <_free_r>:
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	4605      	mov	r5, r0
 800b2c4:	2900      	cmp	r1, #0
 800b2c6:	d045      	beq.n	800b354 <_free_r+0x94>
 800b2c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2cc:	1f0c      	subs	r4, r1, #4
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	bfb8      	it	lt
 800b2d2:	18e4      	addlt	r4, r4, r3
 800b2d4:	f000 f8d2 	bl	800b47c <__malloc_lock>
 800b2d8:	4a1f      	ldr	r2, [pc, #124]	; (800b358 <_free_r+0x98>)
 800b2da:	6813      	ldr	r3, [r2, #0]
 800b2dc:	4610      	mov	r0, r2
 800b2de:	b933      	cbnz	r3, 800b2ee <_free_r+0x2e>
 800b2e0:	6063      	str	r3, [r4, #4]
 800b2e2:	6014      	str	r4, [r2, #0]
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2ea:	f000 b8c8 	b.w	800b47e <__malloc_unlock>
 800b2ee:	42a3      	cmp	r3, r4
 800b2f0:	d90c      	bls.n	800b30c <_free_r+0x4c>
 800b2f2:	6821      	ldr	r1, [r4, #0]
 800b2f4:	1862      	adds	r2, r4, r1
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	bf04      	itt	eq
 800b2fa:	681a      	ldreq	r2, [r3, #0]
 800b2fc:	685b      	ldreq	r3, [r3, #4]
 800b2fe:	6063      	str	r3, [r4, #4]
 800b300:	bf04      	itt	eq
 800b302:	1852      	addeq	r2, r2, r1
 800b304:	6022      	streq	r2, [r4, #0]
 800b306:	6004      	str	r4, [r0, #0]
 800b308:	e7ec      	b.n	800b2e4 <_free_r+0x24>
 800b30a:	4613      	mov	r3, r2
 800b30c:	685a      	ldr	r2, [r3, #4]
 800b30e:	b10a      	cbz	r2, 800b314 <_free_r+0x54>
 800b310:	42a2      	cmp	r2, r4
 800b312:	d9fa      	bls.n	800b30a <_free_r+0x4a>
 800b314:	6819      	ldr	r1, [r3, #0]
 800b316:	1858      	adds	r0, r3, r1
 800b318:	42a0      	cmp	r0, r4
 800b31a:	d10b      	bne.n	800b334 <_free_r+0x74>
 800b31c:	6820      	ldr	r0, [r4, #0]
 800b31e:	4401      	add	r1, r0
 800b320:	1858      	adds	r0, r3, r1
 800b322:	4282      	cmp	r2, r0
 800b324:	6019      	str	r1, [r3, #0]
 800b326:	d1dd      	bne.n	800b2e4 <_free_r+0x24>
 800b328:	6810      	ldr	r0, [r2, #0]
 800b32a:	6852      	ldr	r2, [r2, #4]
 800b32c:	605a      	str	r2, [r3, #4]
 800b32e:	4401      	add	r1, r0
 800b330:	6019      	str	r1, [r3, #0]
 800b332:	e7d7      	b.n	800b2e4 <_free_r+0x24>
 800b334:	d902      	bls.n	800b33c <_free_r+0x7c>
 800b336:	230c      	movs	r3, #12
 800b338:	602b      	str	r3, [r5, #0]
 800b33a:	e7d3      	b.n	800b2e4 <_free_r+0x24>
 800b33c:	6820      	ldr	r0, [r4, #0]
 800b33e:	1821      	adds	r1, r4, r0
 800b340:	428a      	cmp	r2, r1
 800b342:	bf04      	itt	eq
 800b344:	6811      	ldreq	r1, [r2, #0]
 800b346:	6852      	ldreq	r2, [r2, #4]
 800b348:	6062      	str	r2, [r4, #4]
 800b34a:	bf04      	itt	eq
 800b34c:	1809      	addeq	r1, r1, r0
 800b34e:	6021      	streq	r1, [r4, #0]
 800b350:	605c      	str	r4, [r3, #4]
 800b352:	e7c7      	b.n	800b2e4 <_free_r+0x24>
 800b354:	bd38      	pop	{r3, r4, r5, pc}
 800b356:	bf00      	nop
 800b358:	24004a60 	.word	0x24004a60

0800b35c <_malloc_r>:
 800b35c:	b570      	push	{r4, r5, r6, lr}
 800b35e:	1ccd      	adds	r5, r1, #3
 800b360:	f025 0503 	bic.w	r5, r5, #3
 800b364:	3508      	adds	r5, #8
 800b366:	2d0c      	cmp	r5, #12
 800b368:	bf38      	it	cc
 800b36a:	250c      	movcc	r5, #12
 800b36c:	2d00      	cmp	r5, #0
 800b36e:	4606      	mov	r6, r0
 800b370:	db01      	blt.n	800b376 <_malloc_r+0x1a>
 800b372:	42a9      	cmp	r1, r5
 800b374:	d903      	bls.n	800b37e <_malloc_r+0x22>
 800b376:	230c      	movs	r3, #12
 800b378:	6033      	str	r3, [r6, #0]
 800b37a:	2000      	movs	r0, #0
 800b37c:	bd70      	pop	{r4, r5, r6, pc}
 800b37e:	f000 f87d 	bl	800b47c <__malloc_lock>
 800b382:	4a21      	ldr	r2, [pc, #132]	; (800b408 <_malloc_r+0xac>)
 800b384:	6814      	ldr	r4, [r2, #0]
 800b386:	4621      	mov	r1, r4
 800b388:	b991      	cbnz	r1, 800b3b0 <_malloc_r+0x54>
 800b38a:	4c20      	ldr	r4, [pc, #128]	; (800b40c <_malloc_r+0xb0>)
 800b38c:	6823      	ldr	r3, [r4, #0]
 800b38e:	b91b      	cbnz	r3, 800b398 <_malloc_r+0x3c>
 800b390:	4630      	mov	r0, r6
 800b392:	f000 f863 	bl	800b45c <_sbrk_r>
 800b396:	6020      	str	r0, [r4, #0]
 800b398:	4629      	mov	r1, r5
 800b39a:	4630      	mov	r0, r6
 800b39c:	f000 f85e 	bl	800b45c <_sbrk_r>
 800b3a0:	1c43      	adds	r3, r0, #1
 800b3a2:	d124      	bne.n	800b3ee <_malloc_r+0x92>
 800b3a4:	230c      	movs	r3, #12
 800b3a6:	6033      	str	r3, [r6, #0]
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	f000 f868 	bl	800b47e <__malloc_unlock>
 800b3ae:	e7e4      	b.n	800b37a <_malloc_r+0x1e>
 800b3b0:	680b      	ldr	r3, [r1, #0]
 800b3b2:	1b5b      	subs	r3, r3, r5
 800b3b4:	d418      	bmi.n	800b3e8 <_malloc_r+0x8c>
 800b3b6:	2b0b      	cmp	r3, #11
 800b3b8:	d90f      	bls.n	800b3da <_malloc_r+0x7e>
 800b3ba:	600b      	str	r3, [r1, #0]
 800b3bc:	50cd      	str	r5, [r1, r3]
 800b3be:	18cc      	adds	r4, r1, r3
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	f000 f85c 	bl	800b47e <__malloc_unlock>
 800b3c6:	f104 000b 	add.w	r0, r4, #11
 800b3ca:	1d23      	adds	r3, r4, #4
 800b3cc:	f020 0007 	bic.w	r0, r0, #7
 800b3d0:	1ac3      	subs	r3, r0, r3
 800b3d2:	d0d3      	beq.n	800b37c <_malloc_r+0x20>
 800b3d4:	425a      	negs	r2, r3
 800b3d6:	50e2      	str	r2, [r4, r3]
 800b3d8:	e7d0      	b.n	800b37c <_malloc_r+0x20>
 800b3da:	428c      	cmp	r4, r1
 800b3dc:	684b      	ldr	r3, [r1, #4]
 800b3de:	bf16      	itet	ne
 800b3e0:	6063      	strne	r3, [r4, #4]
 800b3e2:	6013      	streq	r3, [r2, #0]
 800b3e4:	460c      	movne	r4, r1
 800b3e6:	e7eb      	b.n	800b3c0 <_malloc_r+0x64>
 800b3e8:	460c      	mov	r4, r1
 800b3ea:	6849      	ldr	r1, [r1, #4]
 800b3ec:	e7cc      	b.n	800b388 <_malloc_r+0x2c>
 800b3ee:	1cc4      	adds	r4, r0, #3
 800b3f0:	f024 0403 	bic.w	r4, r4, #3
 800b3f4:	42a0      	cmp	r0, r4
 800b3f6:	d005      	beq.n	800b404 <_malloc_r+0xa8>
 800b3f8:	1a21      	subs	r1, r4, r0
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	f000 f82e 	bl	800b45c <_sbrk_r>
 800b400:	3001      	adds	r0, #1
 800b402:	d0cf      	beq.n	800b3a4 <_malloc_r+0x48>
 800b404:	6025      	str	r5, [r4, #0]
 800b406:	e7db      	b.n	800b3c0 <_malloc_r+0x64>
 800b408:	24004a60 	.word	0x24004a60
 800b40c:	24004a64 	.word	0x24004a64

0800b410 <_realloc_r>:
 800b410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b412:	4607      	mov	r7, r0
 800b414:	4614      	mov	r4, r2
 800b416:	460e      	mov	r6, r1
 800b418:	b921      	cbnz	r1, 800b424 <_realloc_r+0x14>
 800b41a:	4611      	mov	r1, r2
 800b41c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b420:	f7ff bf9c 	b.w	800b35c <_malloc_r>
 800b424:	b922      	cbnz	r2, 800b430 <_realloc_r+0x20>
 800b426:	f7ff ff4b 	bl	800b2c0 <_free_r>
 800b42a:	4625      	mov	r5, r4
 800b42c:	4628      	mov	r0, r5
 800b42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b430:	f000 f826 	bl	800b480 <_malloc_usable_size_r>
 800b434:	42a0      	cmp	r0, r4
 800b436:	d20f      	bcs.n	800b458 <_realloc_r+0x48>
 800b438:	4621      	mov	r1, r4
 800b43a:	4638      	mov	r0, r7
 800b43c:	f7ff ff8e 	bl	800b35c <_malloc_r>
 800b440:	4605      	mov	r5, r0
 800b442:	2800      	cmp	r0, #0
 800b444:	d0f2      	beq.n	800b42c <_realloc_r+0x1c>
 800b446:	4631      	mov	r1, r6
 800b448:	4622      	mov	r2, r4
 800b44a:	f7ff fc11 	bl	800ac70 <memcpy>
 800b44e:	4631      	mov	r1, r6
 800b450:	4638      	mov	r0, r7
 800b452:	f7ff ff35 	bl	800b2c0 <_free_r>
 800b456:	e7e9      	b.n	800b42c <_realloc_r+0x1c>
 800b458:	4635      	mov	r5, r6
 800b45a:	e7e7      	b.n	800b42c <_realloc_r+0x1c>

0800b45c <_sbrk_r>:
 800b45c:	b538      	push	{r3, r4, r5, lr}
 800b45e:	4c06      	ldr	r4, [pc, #24]	; (800b478 <_sbrk_r+0x1c>)
 800b460:	2300      	movs	r3, #0
 800b462:	4605      	mov	r5, r0
 800b464:	4608      	mov	r0, r1
 800b466:	6023      	str	r3, [r4, #0]
 800b468:	f7f6 fa5c 	bl	8001924 <_sbrk>
 800b46c:	1c43      	adds	r3, r0, #1
 800b46e:	d102      	bne.n	800b476 <_sbrk_r+0x1a>
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	b103      	cbz	r3, 800b476 <_sbrk_r+0x1a>
 800b474:	602b      	str	r3, [r5, #0]
 800b476:	bd38      	pop	{r3, r4, r5, pc}
 800b478:	240051e0 	.word	0x240051e0

0800b47c <__malloc_lock>:
 800b47c:	4770      	bx	lr

0800b47e <__malloc_unlock>:
 800b47e:	4770      	bx	lr

0800b480 <_malloc_usable_size_r>:
 800b480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b484:	1f18      	subs	r0, r3, #4
 800b486:	2b00      	cmp	r3, #0
 800b488:	bfbc      	itt	lt
 800b48a:	580b      	ldrlt	r3, [r1, r0]
 800b48c:	18c0      	addlt	r0, r0, r3
 800b48e:	4770      	bx	lr

0800b490 <_init>:
 800b490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b492:	bf00      	nop
 800b494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b496:	bc08      	pop	{r3}
 800b498:	469e      	mov	lr, r3
 800b49a:	4770      	bx	lr

0800b49c <_fini>:
 800b49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b49e:	bf00      	nop
 800b4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4a2:	bc08      	pop	{r3}
 800b4a4:	469e      	mov	lr, r3
 800b4a6:	4770      	bx	lr
